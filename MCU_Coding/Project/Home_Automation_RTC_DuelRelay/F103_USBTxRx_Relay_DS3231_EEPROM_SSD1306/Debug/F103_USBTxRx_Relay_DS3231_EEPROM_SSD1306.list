
F103_USBTxRx_Relay_DS3231_EEPROM_SSD1306.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bcfc  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a98  0800be08  0800be08  0000ce08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e8a0  0800e8a0  000101e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800e8a0  0800e8a0  000101e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e8a0  0800e8a0  000101e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e8a0  0800e8a0  0000f8a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e8a4  0800e8a4  0000f8a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  0800e8a8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000018a0  200001e4  0800ea8c  000101e4  2**2
                  ALLOC
 10 ._user_heap_stack 00003004  20001a84  0800ea8c  00010a84  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000101e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012704  00000000  00000000  0001020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d82  00000000  00000000  00022911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001038  00000000  00000000  00026698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c20  00000000  00000000  000276d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb2f  00000000  00000000  000282f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018feb  00000000  00000000  00043e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088c84  00000000  00000000  0005ce0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e5a8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ac  00000000  00000000  000e5ad4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000090  00000000  00000000  000ea080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001e4 	.word	0x200001e4
 8000128:	00000000 	.word	0x00000000
 800012c:	0800bdf0 	.word	0x0800bdf0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e8 	.word	0x200001e8
 8000148:	0800bdf0 	.word	0x0800bdf0

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <__aeabi_d2f>:
 80008e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008ec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f0:	bf24      	itt	cs
 80008f2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008f6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fa:	d90d      	bls.n	8000918 <__aeabi_d2f+0x30>
 80008fc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000900:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000904:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000908:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800090c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000910:	bf08      	it	eq
 8000912:	f020 0001 	biceq.w	r0, r0, #1
 8000916:	4770      	bx	lr
 8000918:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800091c:	d121      	bne.n	8000962 <__aeabi_d2f+0x7a>
 800091e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000922:	bfbc      	itt	lt
 8000924:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	4770      	bxlt	lr
 800092a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800092e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000932:	f1c2 0218 	rsb	r2, r2, #24
 8000936:	f1c2 0c20 	rsb	ip, r2, #32
 800093a:	fa10 f30c 	lsls.w	r3, r0, ip
 800093e:	fa20 f002 	lsr.w	r0, r0, r2
 8000942:	bf18      	it	ne
 8000944:	f040 0001 	orrne.w	r0, r0, #1
 8000948:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800094c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000950:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000954:	ea40 000c 	orr.w	r0, r0, ip
 8000958:	fa23 f302 	lsr.w	r3, r3, r2
 800095c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000960:	e7cc      	b.n	80008fc <__aeabi_d2f+0x14>
 8000962:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000966:	d107      	bne.n	8000978 <__aeabi_d2f+0x90>
 8000968:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800096c:	bf1e      	ittt	ne
 800096e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000972:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000976:	4770      	bxne	lr
 8000978:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 800097c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000980:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_f2uiz>:
 8000988:	0042      	lsls	r2, r0, #1
 800098a:	d20e      	bcs.n	80009aa <__aeabi_f2uiz+0x22>
 800098c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000990:	d30b      	bcc.n	80009aa <__aeabi_f2uiz+0x22>
 8000992:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000996:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800099a:	d409      	bmi.n	80009b0 <__aeabi_f2uiz+0x28>
 800099c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80009a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009a4:	fa23 f002 	lsr.w	r0, r3, r2
 80009a8:	4770      	bx	lr
 80009aa:	f04f 0000 	mov.w	r0, #0
 80009ae:	4770      	bx	lr
 80009b0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80009b4:	d101      	bne.n	80009ba <__aeabi_f2uiz+0x32>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d102      	bne.n	80009c0 <__aeabi_f2uiz+0x38>
 80009ba:	f04f 30ff 	mov.w	r0, #4294967295
 80009be:	4770      	bx	lr
 80009c0:	f04f 0000 	mov.w	r0, #0
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <Proj_Init_Function>:
Systick Sys;
Common Cmn;


void Proj_Init_Function(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	//Set_Time(35, 17, 6, Friday, 27, June, 25);
	memset(Cmn.Test, 0x00, sizeof(Cmn.Test));
 80009cc:	221e      	movs	r2, #30
 80009ce:	2100      	movs	r1, #0
 80009d0:	4809      	ldr	r0, [pc, #36]	@ (80009f8 <Proj_Init_Function+0x30>)
 80009d2:	f00a fd67 	bl	800b4a4 <memset>
	memset(Cmn.Time, 0x00, sizeof(Cmn.Time));
 80009d6:	2214      	movs	r2, #20
 80009d8:	2100      	movs	r1, #0
 80009da:	4808      	ldr	r0, [pc, #32]	@ (80009fc <Proj_Init_Function+0x34>)
 80009dc:	f00a fd62 	bl	800b4a4 <memset>

	SSD1306_Init_Code();
 80009e0:	f000 fdc8 	bl	8001574 <SSD1306_Init_Code>
	EE_Read_Init();
 80009e4:	f000 f956 	bl	8000c94 <EE_Read_Init>

	Relay_Init_Code();
 80009e8:	f000 fbe2 	bl	80011b0 <Relay_Init_Code>
	CDC_Transmit_FS((uint8_t*)"F103_USB_Tx \n\r", 14);
 80009ec:	210e      	movs	r1, #14
 80009ee:	4804      	ldr	r0, [pc, #16]	@ (8000a00 <Proj_Init_Function+0x38>)
 80009f0:	f00a f95a 	bl	800aca8 <CDC_Transmit_FS>
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000218 	.word	0x20000218
 80009fc:	20000236 	.word	0x20000236
 8000a00:	0800be08 	.word	0x0800be08

08000a04 <Proj_While_Function>:


void Proj_While_Function(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
	if(Sys.Common_Inc > 1000)
 8000a08:	4b0f      	ldr	r3, [pc, #60]	@ (8000a48 <Proj_While_Function+0x44>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000a10:	d916      	bls.n	8000a40 <Proj_While_Function+0x3c>
		{
			Sys.Common_Inc = 0;
 8000a12:	4b0d      	ldr	r3, [pc, #52]	@ (8000a48 <Proj_While_Function+0x44>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
			HAL_IWDG_Refresh(&hiwdg);
 8000a18:	480c      	ldr	r0, [pc, #48]	@ (8000a4c <Proj_While_Function+0x48>)
 8000a1a:	f003 ff60 	bl	80048de <HAL_IWDG_Refresh>
			Cmn.Test_Inc += 1;
 8000a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <Proj_While_Function+0x4c>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a0a      	ldr	r2, [pc, #40]	@ (8000a50 <Proj_While_Function+0x4c>)
 8000a26:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000a28:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a2c:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <Proj_While_Function+0x50>)
 8000a2e:	f002 fbe6 	bl	80031fe <HAL_GPIO_TogglePin>

			DS3231_While_Function();
 8000a32:	f000 fb93 	bl	800115c <DS3231_While_Function>
			EE_Read_while();
 8000a36:	f000 f941 	bl	8000cbc <EE_Read_while>
			Relay_While();
 8000a3a:	f000 fba5 	bl	8001188 <Relay_While>
		}
	else
		{
			USB_Rx2Tx_Instant();
		}
}
 8000a3e:	e001      	b.n	8000a44 <Proj_While_Function+0x40>
			USB_Rx2Tx_Instant();
 8000a40:	f001 fc6e 	bl	8002320 <USB_Rx2Tx_Instant>
}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20000200 	.word	0x20000200
 8000a4c:	20000768 	.word	0x20000768
 8000a50:	20000214 	.word	0x20000214
 8000a54:	40011000 	.word	0x40011000

08000a58 <Systick_Function>:


void Systick_Function(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
	Sys.Common_Inc +=1;
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000a98 <Systick_Function+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	3301      	adds	r3, #1
 8000a62:	4a0d      	ldr	r2, [pc, #52]	@ (8000a98 <Systick_Function+0x40>)
 8000a64:	6013      	str	r3, [r2, #0]
	Sys.EE_Inc +=1;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	@ (8000a98 <Systick_Function+0x40>)
 8000a68:	689b      	ldr	r3, [r3, #8]
 8000a6a:	3301      	adds	r3, #1
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <Systick_Function+0x40>)
 8000a6e:	6093      	str	r3, [r2, #8]
	Sys.RTC_Inc +=1;
 8000a70:	4b09      	ldr	r3, [pc, #36]	@ (8000a98 <Systick_Function+0x40>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a08      	ldr	r2, [pc, #32]	@ (8000a98 <Systick_Function+0x40>)
 8000a78:	6053      	str	r3, [r2, #4]
	Sys.SSD_Inc +=1;
 8000a7a:	4b07      	ldr	r3, [pc, #28]	@ (8000a98 <Systick_Function+0x40>)
 8000a7c:	691b      	ldr	r3, [r3, #16]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	4a05      	ldr	r2, [pc, #20]	@ (8000a98 <Systick_Function+0x40>)
 8000a82:	6113      	str	r3, [r2, #16]
	Sys.USB_Inc +=1;
 8000a84:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <Systick_Function+0x40>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a03      	ldr	r2, [pc, #12]	@ (8000a98 <Systick_Function+0x40>)
 8000a8c:	60d3      	str	r3, [r2, #12]
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000200 	.word	0x20000200

08000a9c <EEPROM_Write>:
#include "Driver.h"

EEPROM EE;

void EEPROM_Write (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
	{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af04      	add	r7, sp, #16
 8000aa2:	60ba      	str	r2, [r7, #8]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	81fb      	strh	r3, [r7, #14]
 8000aaa:	460b      	mov	r3, r1
 8000aac:	81bb      	strh	r3, [r7, #12]
 8000aae:	4613      	mov	r3, r2
 8000ab0:	80fb      	strh	r3, [r7, #6]
		if( (offset+size) <= BYTES_PER_PAGE )
 8000ab2:	89ba      	ldrh	r2, [r7, #12]
 8000ab4:	88fb      	ldrh	r3, [r7, #6]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	2b20      	cmp	r3, #32
 8000aba:	dc19      	bgt.n	8000af0 <EEPROM_Write+0x54>
			{
				if(page < TOTAL_PAGE_NUM)
 8000abc:	89fb      	ldrh	r3, [r7, #14]
 8000abe:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ac0:	d816      	bhi.n	8000af0 <EEPROM_Write+0x54>
					{
						HAL_I2C_Mem_Write(&hi2c1, EEPROM_ADDR,  ((page<<BIT_SHIFT)|offset),
 8000ac2:	89fb      	ldrh	r3, [r7, #14]
 8000ac4:	021b      	lsls	r3, r3, #8
 8000ac6:	b21a      	sxth	r2, r3
 8000ac8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000acc:	4313      	orrs	r3, r2
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	b29a      	uxth	r2, r3
 8000ad2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ad6:	9302      	str	r3, [sp, #8]
 8000ad8:	88fb      	ldrh	r3, [r7, #6]
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	68bb      	ldr	r3, [r7, #8]
 8000ade:	9300      	str	r3, [sp, #0]
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	21ae      	movs	r1, #174	@ 0xae
 8000ae4:	4804      	ldr	r0, [pc, #16]	@ (8000af8 <EEPROM_Write+0x5c>)
 8000ae6:	f002 fde5 	bl	80036b4 <HAL_I2C_Mem_Write>
								2,  &data[0], size, 1000);
						 HAL_Delay (15); // Write cycle delay (5ms) Must
 8000aea:	200f      	movs	r0, #15
 8000aec:	f002 f8a2 	bl	8002c34 <HAL_Delay>
					}
			}
	}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000714 	.word	0x20000714

08000afc <EEPROM_Read>:

void EEPROM_Read (uint16_t page, uint16_t offset, uint8_t *data, uint16_t size)
	{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b088      	sub	sp, #32
 8000b00:	af04      	add	r7, sp, #16
 8000b02:	60ba      	str	r2, [r7, #8]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4603      	mov	r3, r0
 8000b08:	81fb      	strh	r3, [r7, #14]
 8000b0a:	460b      	mov	r3, r1
 8000b0c:	81bb      	strh	r3, [r7, #12]
 8000b0e:	4613      	mov	r3, r2
 8000b10:	80fb      	strh	r3, [r7, #6]
		if( (offset+size) <= BYTES_PER_PAGE )
 8000b12:	89ba      	ldrh	r2, [r7, #12]
 8000b14:	88fb      	ldrh	r3, [r7, #6]
 8000b16:	4413      	add	r3, r2
 8000b18:	2b20      	cmp	r3, #32
 8000b1a:	dc19      	bgt.n	8000b50 <EEPROM_Read+0x54>
			{
				if(page < TOTAL_PAGE_NUM)
 8000b1c:	89fb      	ldrh	r3, [r7, #14]
 8000b1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8000b20:	d816      	bhi.n	8000b50 <EEPROM_Read+0x54>
					{
						HAL_I2C_Mem_Read(&hi2c1, EEPROM_ADDR,  ((page<<BIT_SHIFT)|offset),
 8000b22:	89fb      	ldrh	r3, [r7, #14]
 8000b24:	021b      	lsls	r3, r3, #8
 8000b26:	b21a      	sxth	r2, r3
 8000b28:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	b21b      	sxth	r3, r3
 8000b30:	b29a      	uxth	r2, r3
 8000b32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b36:	9302      	str	r3, [sp, #8]
 8000b38:	88fb      	ldrh	r3, [r7, #6]
 8000b3a:	9301      	str	r3, [sp, #4]
 8000b3c:	68bb      	ldr	r3, [r7, #8]
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	2302      	movs	r3, #2
 8000b42:	21ae      	movs	r1, #174	@ 0xae
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <EEPROM_Read+0x5c>)
 8000b46:	f002 feaf 	bl	80038a8 <HAL_I2C_Mem_Read>
								2, &data[0], size, 1000);
						 HAL_Delay (15);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f002 f872 	bl	8002c34 <HAL_Delay>
					}
			}
	}
 8000b50:	bf00      	nop
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000714 	.word	0x20000714

08000b5c <EE_Write_Relay_Time>:
}

/****************************************************************************************/

void EE_Write_Relay_Time(uint8_t Relay, uint8_t *Time)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
	switch (Relay)
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d002      	beq.n	8000b74 <EE_Write_Relay_Time+0x18>
 8000b6e:	2b02      	cmp	r3, #2
 8000b70:	d041      	beq.n	8000bf6 <EE_Write_Relay_Time+0x9a>
			EEPROM_Read (2, 0, EE.Rly_R2, 12);
			break;
		}
		default:
		{
			break;
 8000b72:	e081      	b.n	8000c78 <EE_Write_Relay_Time+0x11c>
			memset(EE.Rly_W1, 0x00, sizeof(EE.Rly_W1));
 8000b74:	220c      	movs	r2, #12
 8000b76:	2100      	movs	r1, #0
 8000b78:	4841      	ldr	r0, [pc, #260]	@ (8000c80 <EE_Write_Relay_Time+0x124>)
 8000b7a:	f00a fc93 	bl	800b4a4 <memset>
			memset(EE.Rly_R1, 0x00, sizeof(EE.Rly_R1));
 8000b7e:	220c      	movs	r2, #12
 8000b80:	2100      	movs	r1, #0
 8000b82:	4840      	ldr	r0, [pc, #256]	@ (8000c84 <EE_Write_Relay_Time+0x128>)
 8000b84:	f00a fc8e 	bl	800b4a4 <memset>
			EE.Rly_W1[5] = ' ';
 8000b88:	4b3f      	ldr	r3, [pc, #252]	@ (8000c88 <EE_Write_Relay_Time+0x12c>)
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	71da      	strb	r2, [r3, #7]
			for(uint8_t i=0; i<5; i++)
 8000b8e:	2300      	movs	r3, #0
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	e00c      	b.n	8000bae <EE_Write_Relay_Time+0x52>
				EE.Rly_W1[i] = 	*(Time+i+11);
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
 8000b96:	330b      	adds	r3, #11
 8000b98:	683a      	ldr	r2, [r7, #0]
 8000b9a:	441a      	add	r2, r3
 8000b9c:	7bfb      	ldrb	r3, [r7, #15]
 8000b9e:	7811      	ldrb	r1, [r2, #0]
 8000ba0:	4a39      	ldr	r2, [pc, #228]	@ (8000c88 <EE_Write_Relay_Time+0x12c>)
 8000ba2:	4413      	add	r3, r2
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	709a      	strb	r2, [r3, #2]
			for(uint8_t i=0; i<5; i++)
 8000ba8:	7bfb      	ldrb	r3, [r7, #15]
 8000baa:	3301      	adds	r3, #1
 8000bac:	73fb      	strb	r3, [r7, #15]
 8000bae:	7bfb      	ldrb	r3, [r7, #15]
 8000bb0:	2b04      	cmp	r3, #4
 8000bb2:	d9ef      	bls.n	8000b94 <EE_Write_Relay_Time+0x38>
			for(uint8_t i=0; i<5; i++)
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	73bb      	strb	r3, [r7, #14]
 8000bb8:	e00d      	b.n	8000bd6 <EE_Write_Relay_Time+0x7a>
				EE.Rly_W1[i+6] = 	*(Time+i+21);
 8000bba:	7bbb      	ldrb	r3, [r7, #14]
 8000bbc:	3315      	adds	r3, #21
 8000bbe:	683a      	ldr	r2, [r7, #0]
 8000bc0:	441a      	add	r2, r3
 8000bc2:	7bbb      	ldrb	r3, [r7, #14]
 8000bc4:	3306      	adds	r3, #6
 8000bc6:	7811      	ldrb	r1, [r2, #0]
 8000bc8:	4a2f      	ldr	r2, [pc, #188]	@ (8000c88 <EE_Write_Relay_Time+0x12c>)
 8000bca:	4413      	add	r3, r2
 8000bcc:	460a      	mov	r2, r1
 8000bce:	709a      	strb	r2, [r3, #2]
			for(uint8_t i=0; i<5; i++)
 8000bd0:	7bbb      	ldrb	r3, [r7, #14]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	73bb      	strb	r3, [r7, #14]
 8000bd6:	7bbb      	ldrb	r3, [r7, #14]
 8000bd8:	2b04      	cmp	r3, #4
 8000bda:	d9ee      	bls.n	8000bba <EE_Write_Relay_Time+0x5e>
			EEPROM_Write (1, 0, EE.Rly_W1, 12);
 8000bdc:	230c      	movs	r3, #12
 8000bde:	4a28      	ldr	r2, [pc, #160]	@ (8000c80 <EE_Write_Relay_Time+0x124>)
 8000be0:	2100      	movs	r1, #0
 8000be2:	2001      	movs	r0, #1
 8000be4:	f7ff ff5a 	bl	8000a9c <EEPROM_Write>
			EEPROM_Read (1, 0, EE.Rly_R1, 12);
 8000be8:	230c      	movs	r3, #12
 8000bea:	4a26      	ldr	r2, [pc, #152]	@ (8000c84 <EE_Write_Relay_Time+0x128>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff ff84 	bl	8000afc <EEPROM_Read>
			break;
 8000bf4:	e040      	b.n	8000c78 <EE_Write_Relay_Time+0x11c>
			memset(EE.Rly_W2, 0x00, sizeof(EE.Rly_W2));
 8000bf6:	220c      	movs	r2, #12
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4824      	ldr	r0, [pc, #144]	@ (8000c8c <EE_Write_Relay_Time+0x130>)
 8000bfc:	f00a fc52 	bl	800b4a4 <memset>
			memset(EE.Rly_R2, 0x00, sizeof(EE.Rly_R2));
 8000c00:	220c      	movs	r2, #12
 8000c02:	2100      	movs	r1, #0
 8000c04:	4822      	ldr	r0, [pc, #136]	@ (8000c90 <EE_Write_Relay_Time+0x134>)
 8000c06:	f00a fc4d 	bl	800b4a4 <memset>
			EE.Rly_W2[5] = ' ';
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000c88 <EE_Write_Relay_Time+0x12c>)
 8000c0c:	2220      	movs	r2, #32
 8000c0e:	74da      	strb	r2, [r3, #19]
			for(uint8_t i=0; i<5; i++)
 8000c10:	2300      	movs	r3, #0
 8000c12:	737b      	strb	r3, [r7, #13]
 8000c14:	e00c      	b.n	8000c30 <EE_Write_Relay_Time+0xd4>
				EE.Rly_W2[i] = 	*(Time+i+11);
 8000c16:	7b7b      	ldrb	r3, [r7, #13]
 8000c18:	330b      	adds	r3, #11
 8000c1a:	683a      	ldr	r2, [r7, #0]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	7b7b      	ldrb	r3, [r7, #13]
 8000c20:	7811      	ldrb	r1, [r2, #0]
 8000c22:	4a19      	ldr	r2, [pc, #100]	@ (8000c88 <EE_Write_Relay_Time+0x12c>)
 8000c24:	4413      	add	r3, r2
 8000c26:	460a      	mov	r2, r1
 8000c28:	739a      	strb	r2, [r3, #14]
			for(uint8_t i=0; i<5; i++)
 8000c2a:	7b7b      	ldrb	r3, [r7, #13]
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	737b      	strb	r3, [r7, #13]
 8000c30:	7b7b      	ldrb	r3, [r7, #13]
 8000c32:	2b04      	cmp	r3, #4
 8000c34:	d9ef      	bls.n	8000c16 <EE_Write_Relay_Time+0xba>
			for(uint8_t i=0; i<5; i++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	733b      	strb	r3, [r7, #12]
 8000c3a:	e00d      	b.n	8000c58 <EE_Write_Relay_Time+0xfc>
				EE.Rly_W2[i+6] = 	*(Time+i+21);
 8000c3c:	7b3b      	ldrb	r3, [r7, #12]
 8000c3e:	3315      	adds	r3, #21
 8000c40:	683a      	ldr	r2, [r7, #0]
 8000c42:	441a      	add	r2, r3
 8000c44:	7b3b      	ldrb	r3, [r7, #12]
 8000c46:	3306      	adds	r3, #6
 8000c48:	7811      	ldrb	r1, [r2, #0]
 8000c4a:	4a0f      	ldr	r2, [pc, #60]	@ (8000c88 <EE_Write_Relay_Time+0x12c>)
 8000c4c:	4413      	add	r3, r2
 8000c4e:	460a      	mov	r2, r1
 8000c50:	739a      	strb	r2, [r3, #14]
			for(uint8_t i=0; i<5; i++)
 8000c52:	7b3b      	ldrb	r3, [r7, #12]
 8000c54:	3301      	adds	r3, #1
 8000c56:	733b      	strb	r3, [r7, #12]
 8000c58:	7b3b      	ldrb	r3, [r7, #12]
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	d9ee      	bls.n	8000c3c <EE_Write_Relay_Time+0xe0>
			EEPROM_Write (2, 0, EE.Rly_W2, 12);
 8000c5e:	230c      	movs	r3, #12
 8000c60:	4a0a      	ldr	r2, [pc, #40]	@ (8000c8c <EE_Write_Relay_Time+0x130>)
 8000c62:	2100      	movs	r1, #0
 8000c64:	2002      	movs	r0, #2
 8000c66:	f7ff ff19 	bl	8000a9c <EEPROM_Write>
			EEPROM_Read (2, 0, EE.Rly_R2, 12);
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	4a08      	ldr	r2, [pc, #32]	@ (8000c90 <EE_Write_Relay_Time+0x134>)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2002      	movs	r0, #2
 8000c72:	f7ff ff43 	bl	8000afc <EEPROM_Read>
			break;
 8000c76:	bf00      	nop
		}
	}
}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	2000024e 	.word	0x2000024e
 8000c84:	20000266 	.word	0x20000266
 8000c88:	2000024c 	.word	0x2000024c
 8000c8c:	2000025a 	.word	0x2000025a
 8000c90:	20000272 	.word	0x20000272

08000c94 <EE_Read_Init>:



void EE_Read_Init()
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
	//EEPROM_FULL_ERASE();
	EEPROM_Read (1, 0, EE.Rly_R1, 12);
 8000c98:	230c      	movs	r3, #12
 8000c9a:	4a06      	ldr	r2, [pc, #24]	@ (8000cb4 <EE_Read_Init+0x20>)
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f7ff ff2c 	bl	8000afc <EEPROM_Read>
	EEPROM_Read (2, 0, EE.Rly_R2, 12);
 8000ca4:	230c      	movs	r3, #12
 8000ca6:	4a04      	ldr	r2, [pc, #16]	@ (8000cb8 <EE_Read_Init+0x24>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	2002      	movs	r0, #2
 8000cac:	f7ff ff26 	bl	8000afc <EEPROM_Read>
}
 8000cb0:	bf00      	nop
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000266 	.word	0x20000266
 8000cb8:	20000272 	.word	0x20000272

08000cbc <EE_Read_while>:



void EE_Read_while()
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	EE.While_Inc +=1;
 8000cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8000cf8 <EE_Read_while+0x3c>)
 8000cc2:	881b      	ldrh	r3, [r3, #0]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <EE_Read_while+0x3c>)
 8000cca:	801a      	strh	r2, [r3, #0]

	if(EE.While_Inc > 600)	//Read Every 600 Seconds, 10 Minutes
 8000ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf8 <EE_Read_while+0x3c>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000cd4:	d90e      	bls.n	8000cf4 <EE_Read_while+0x38>
		{
			EEPROM_Read (1, 0, EE.Rly_R1, 12);
 8000cd6:	230c      	movs	r3, #12
 8000cd8:	4a08      	ldr	r2, [pc, #32]	@ (8000cfc <EE_Read_while+0x40>)
 8000cda:	2100      	movs	r1, #0
 8000cdc:	2001      	movs	r0, #1
 8000cde:	f7ff ff0d 	bl	8000afc <EEPROM_Read>
			EEPROM_Read (2, 0, EE.Rly_R2, 12);
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <EE_Read_while+0x44>)
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff ff07 	bl	8000afc <EEPROM_Read>
			EE.While_Inc = 0;
 8000cee:	4b02      	ldr	r3, [pc, #8]	@ (8000cf8 <EE_Read_while+0x3c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	801a      	strh	r2, [r3, #0]
		}
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	2000024c 	.word	0x2000024c
 8000cfc:	20000266 	.word	0x20000266
 8000d00:	20000272 	.word	0x20000272

08000d04 <decToBcd>:
#include "Driver.h"

DS3231 Time;

uint8_t decToBcd(int val)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  return (uint8_t)( (val/10*16) + (val%10) );
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d48 <decToBcd+0x44>)
 8000d10:	fb82 1203 	smull	r1, r2, r2, r3
 8000d14:	1092      	asrs	r2, r2, #2
 8000d16:	17db      	asrs	r3, r3, #31
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	011b      	lsls	r3, r3, #4
 8000d1e:	b2d8      	uxtb	r0, r3
 8000d20:	687a      	ldr	r2, [r7, #4]
 8000d22:	4b09      	ldr	r3, [pc, #36]	@ (8000d48 <decToBcd+0x44>)
 8000d24:	fb83 1302 	smull	r1, r3, r3, r2
 8000d28:	1099      	asrs	r1, r3, #2
 8000d2a:	17d3      	asrs	r3, r2, #31
 8000d2c:	1ac9      	subs	r1, r1, r3
 8000d2e:	460b      	mov	r3, r1
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	440b      	add	r3, r1
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	1ad1      	subs	r1, r2, r3
 8000d38:	b2cb      	uxtb	r3, r1
 8000d3a:	4403      	add	r3, r0
 8000d3c:	b2db      	uxtb	r3, r3
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bc80      	pop	{r7}
 8000d46:	4770      	bx	lr
 8000d48:	66666667 	.word	0x66666667

08000d4c <bcdToDec>:

int bcdToDec(uint8_t val)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	71fb      	strb	r3, [r7, #7]
  return (int)( (val/16*10) + (val%16) );
 8000d56:	79fb      	ldrb	r3, [r7, #7]
 8000d58:	091b      	lsrs	r3, r3, #4
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	461a      	mov	r2, r3
 8000d68:	79fb      	ldrb	r3, [r7, #7]
 8000d6a:	f003 030f 	and.w	r3, r3, #15
 8000d6e:	4413      	add	r3, r2
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bc80      	pop	{r7}
 8000d78:	4770      	bx	lr
	...

08000d7c <Set_Time>:

void Set_Time (uint8_t sec, uint8_t min, uint8_t hour, uint8_t week, uint8_t date, uint8_t month, uint8_t year)
{
 8000d7c:	b590      	push	{r4, r7, lr}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af04      	add	r7, sp, #16
 8000d82:	4604      	mov	r4, r0
 8000d84:	4608      	mov	r0, r1
 8000d86:	4611      	mov	r1, r2
 8000d88:	461a      	mov	r2, r3
 8000d8a:	4623      	mov	r3, r4
 8000d8c:	71fb      	strb	r3, [r7, #7]
 8000d8e:	4603      	mov	r3, r0
 8000d90:	71bb      	strb	r3, [r7, #6]
 8000d92:	460b      	mov	r3, r1
 8000d94:	717b      	strb	r3, [r7, #5]
 8000d96:	4613      	mov	r3, r2
 8000d98:	713b      	strb	r3, [r7, #4]
	uint8_t set_time[7];
	set_time[0] = decToBcd(sec);
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f7ff ffb1 	bl	8000d04 <decToBcd>
 8000da2:	4603      	mov	r3, r0
 8000da4:	723b      	strb	r3, [r7, #8]
	set_time[1] = decToBcd(min);
 8000da6:	79bb      	ldrb	r3, [r7, #6]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ffab 	bl	8000d04 <decToBcd>
 8000dae:	4603      	mov	r3, r0
 8000db0:	727b      	strb	r3, [r7, #9]
	set_time[2] = decToBcd(hour);
 8000db2:	797b      	ldrb	r3, [r7, #5]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ffa5 	bl	8000d04 <decToBcd>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	72bb      	strb	r3, [r7, #10]
	set_time[3] = decToBcd(week);
 8000dbe:	793b      	ldrb	r3, [r7, #4]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff9f 	bl	8000d04 <decToBcd>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	72fb      	strb	r3, [r7, #11]
	set_time[4] = decToBcd(date);
 8000dca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff98 	bl	8000d04 <decToBcd>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	733b      	strb	r3, [r7, #12]
	set_time[5] = decToBcd(month);
 8000dd8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff ff91 	bl	8000d04 <decToBcd>
 8000de2:	4603      	mov	r3, r0
 8000de4:	737b      	strb	r3, [r7, #13]
	set_time[6] = decToBcd(year);
 8000de6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff8a 	bl	8000d04 <decToBcd>
 8000df0:	4603      	mov	r3, r0
 8000df2:	73bb      	strb	r3, [r7, #14]

	HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, 0x00, 1, set_time, 7, 1000);
 8000df4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	2307      	movs	r3, #7
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2301      	movs	r3, #1
 8000e06:	2200      	movs	r2, #0
 8000e08:	21d0      	movs	r1, #208	@ 0xd0
 8000e0a:	4803      	ldr	r0, [pc, #12]	@ (8000e18 <Set_Time+0x9c>)
 8000e0c:	f002 fc52 	bl	80036b4 <HAL_I2C_Mem_Write>
}
 8000e10:	bf00      	nop
 8000e12:	3714      	adds	r7, #20
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd90      	pop	{r4, r7, pc}
 8000e18:	20000714 	.word	0x20000714

08000e1c <Get_Time>:

void Get_Time (void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b086      	sub	sp, #24
 8000e20:	af04      	add	r7, sp, #16
	uint8_t get_time[7];
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x00, 1, get_time, 7, 1000);
 8000e22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e26:	9302      	str	r3, [sp, #8]
 8000e28:	2307      	movs	r3, #7
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	9300      	str	r3, [sp, #0]
 8000e30:	2301      	movs	r3, #1
 8000e32:	2200      	movs	r2, #0
 8000e34:	21d0      	movs	r1, #208	@ 0xd0
 8000e36:	481f      	ldr	r0, [pc, #124]	@ (8000eb4 <Get_Time+0x98>)
 8000e38:	f002 fd36 	bl	80038a8 <HAL_I2C_Mem_Read>
	Time.sec = bcdToDec(get_time[0]);
 8000e3c:	783b      	ldrb	r3, [r7, #0]
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff ff84 	bl	8000d4c <bcdToDec>
 8000e44:	4603      	mov	r3, r0
 8000e46:	b2da      	uxtb	r2, r3
 8000e48:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb8 <Get_Time+0x9c>)
 8000e4a:	701a      	strb	r2, [r3, #0]
	Time.min = bcdToDec(get_time[1]);
 8000e4c:	787b      	ldrb	r3, [r7, #1]
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff7c 	bl	8000d4c <bcdToDec>
 8000e54:	4603      	mov	r3, r0
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	4b17      	ldr	r3, [pc, #92]	@ (8000eb8 <Get_Time+0x9c>)
 8000e5a:	705a      	strb	r2, [r3, #1]
	Time.hour = bcdToDec(get_time[2]);
 8000e5c:	78bb      	ldrb	r3, [r7, #2]
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ff74 	bl	8000d4c <bcdToDec>
 8000e64:	4603      	mov	r3, r0
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	4b13      	ldr	r3, [pc, #76]	@ (8000eb8 <Get_Time+0x9c>)
 8000e6a:	709a      	strb	r2, [r3, #2]
	Time.week = bcdToDec(get_time[3]);
 8000e6c:	78fb      	ldrb	r3, [r7, #3]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff6c 	bl	8000d4c <bcdToDec>
 8000e74:	4603      	mov	r3, r0
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb8 <Get_Time+0x9c>)
 8000e7a:	70da      	strb	r2, [r3, #3]
	Time.date = bcdToDec(get_time[4]);
 8000e7c:	793b      	ldrb	r3, [r7, #4]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff64 	bl	8000d4c <bcdToDec>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb8 <Get_Time+0x9c>)
 8000e8a:	711a      	strb	r2, [r3, #4]
	Time.month = bcdToDec(get_time[5]);
 8000e8c:	797b      	ldrb	r3, [r7, #5]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff5c 	bl	8000d4c <bcdToDec>
 8000e94:	4603      	mov	r3, r0
 8000e96:	b2da      	uxtb	r2, r3
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <Get_Time+0x9c>)
 8000e9a:	715a      	strb	r2, [r3, #5]
	Time.year = bcdToDec(get_time[6]);
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff54 	bl	8000d4c <bcdToDec>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	4b03      	ldr	r3, [pc, #12]	@ (8000eb8 <Get_Time+0x9c>)
 8000eaa:	719a      	strb	r2, [r3, #6]
}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20000714 	.word	0x20000714
 8000eb8:	20000280 	.word	0x20000280

08000ebc <Get_Temp>:

float Get_Temp (void)
{
 8000ebc:	b5b0      	push	{r4, r5, r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af04      	add	r7, sp, #16
	uint8_t temp[2];

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x11, 1, temp, 2, 1000);
 8000ec2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec6:	9302      	str	r3, [sp, #8]
 8000ec8:	2302      	movs	r3, #2
 8000eca:	9301      	str	r3, [sp, #4]
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	9300      	str	r3, [sp, #0]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	2211      	movs	r2, #17
 8000ed4:	21d0      	movs	r1, #208	@ 0xd0
 8000ed6:	4812      	ldr	r0, [pc, #72]	@ (8000f20 <Get_Temp+0x64>)
 8000ed8:	f002 fce6 	bl	80038a8 <HAL_I2C_Mem_Read>
	return ((temp[0])+(temp[1]>>6)/4.0);
 8000edc:	793b      	ldrb	r3, [r7, #4]
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fa86 	bl	80003f0 <__aeabi_i2d>
 8000ee4:	4604      	mov	r4, r0
 8000ee6:	460d      	mov	r5, r1
 8000ee8:	797b      	ldrb	r3, [r7, #5]
 8000eea:	099b      	lsrs	r3, r3, #6
 8000eec:	b2db      	uxtb	r3, r3
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f7ff fa7e 	bl	80003f0 <__aeabi_i2d>
 8000ef4:	f04f 0200 	mov.w	r2, #0
 8000ef8:	4b0a      	ldr	r3, [pc, #40]	@ (8000f24 <Get_Temp+0x68>)
 8000efa:	f7ff fc0d 	bl	8000718 <__aeabi_ddiv>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4620      	mov	r0, r4
 8000f04:	4629      	mov	r1, r5
 8000f06:	f7ff f927 	bl	8000158 <__adddf3>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	f7ff fce9 	bl	80008e8 <__aeabi_d2f>
 8000f16:	4603      	mov	r3, r0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bdb0      	pop	{r4, r5, r7, pc}
 8000f20:	20000714 	.word	0x20000714
 8000f24:	40100000 	.word	0x40100000

08000f28 <force_temp_conv>:

void force_temp_conv (void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af04      	add	r7, sp, #16
	uint8_t status=0;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	71fb      	strb	r3, [r7, #7]
	uint8_t control=0;
 8000f32:	2300      	movs	r3, #0
 8000f34:	71bb      	strb	r3, [r7, #6]

	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x0F, 1, &status, 1, 100);  // read status register
 8000f36:	2364      	movs	r3, #100	@ 0x64
 8000f38:	9302      	str	r3, [sp, #8]
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	9301      	str	r3, [sp, #4]
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	220f      	movs	r2, #15
 8000f46:	21d0      	movs	r1, #208	@ 0xd0
 8000f48:	4813      	ldr	r0, [pc, #76]	@ (8000f98 <force_temp_conv+0x70>)
 8000f4a:	f002 fcad 	bl	80038a8 <HAL_I2C_Mem_Read>
	if (!(status&0x04))  // if the BSY bit is not set
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 0304 	and.w	r3, r3, #4
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d11b      	bne.n	8000f90 <force_temp_conv+0x68>
	{
		HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDR, 0x0E, 1, &control, 1, 100);  // read control register
 8000f58:	2364      	movs	r3, #100	@ 0x64
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	9301      	str	r3, [sp, #4]
 8000f60:	1dbb      	adds	r3, r7, #6
 8000f62:	9300      	str	r3, [sp, #0]
 8000f64:	2301      	movs	r3, #1
 8000f66:	220e      	movs	r2, #14
 8000f68:	21d0      	movs	r1, #208	@ 0xd0
 8000f6a:	480b      	ldr	r0, [pc, #44]	@ (8000f98 <force_temp_conv+0x70>)
 8000f6c:	f002 fc9c 	bl	80038a8 <HAL_I2C_Mem_Read>
		HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDR, 0x0E, 1, (uint8_t *)(control|(0x20)), 1, 100);  // write modified control register with CONV bit as'1'
 8000f70:	79bb      	ldrb	r3, [r7, #6]
 8000f72:	f043 0320 	orr.w	r3, r3, #32
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	461a      	mov	r2, r3
 8000f7a:	2364      	movs	r3, #100	@ 0x64
 8000f7c:	9302      	str	r3, [sp, #8]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	9301      	str	r3, [sp, #4]
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	2301      	movs	r3, #1
 8000f86:	220e      	movs	r2, #14
 8000f88:	21d0      	movs	r1, #208	@ 0xd0
 8000f8a:	4803      	ldr	r0, [pc, #12]	@ (8000f98 <force_temp_conv+0x70>)
 8000f8c:	f002 fb92 	bl	80036b4 <HAL_I2C_Mem_Write>
	}
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20000714 	.word	0x20000714

08000f9c <Split_Time_Function>:

/****************************************************************************************/

void Split_Time_Function(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	//Hr:Min:Sec  Date:Month:Year
	memset(Cmn.Time, 0x00, sizeof(Cmn.Time));
 8000fa0:	2214      	movs	r2, #20
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4869      	ldr	r0, [pc, #420]	@ (800114c <Split_Time_Function+0x1b0>)
 8000fa6:	f00a fa7d 	bl	800b4a4 <memset>

	Cmn.Time[2] = Cmn.Time[5] = Cmn.Time[12] = Cmn.Time[15] = ':';
 8000faa:	4b69      	ldr	r3, [pc, #420]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fac:	223a      	movs	r2, #58	@ 0x3a
 8000fae:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8000fb2:	4b67      	ldr	r3, [pc, #412]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fb4:	f893 2031 	ldrb.w	r2, [r3, #49]	@ 0x31
 8000fb8:	4b65      	ldr	r3, [pc, #404]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fba:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
 8000fbe:	4b64      	ldr	r3, [pc, #400]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fc0:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8000fc4:	4b62      	ldr	r3, [pc, #392]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fc6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
 8000fca:	4b61      	ldr	r3, [pc, #388]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fcc:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8000fd0:	4b5f      	ldr	r3, [pc, #380]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fd2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
	Cmn.Time[8] = Cmn.Time[9] = ' ';
 8000fd6:	4b5e      	ldr	r3, [pc, #376]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fd8:	2220      	movs	r2, #32
 8000fda:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
 8000fde:	4b5c      	ldr	r3, [pc, #368]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fe0:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 8000fe4:	4b5a      	ldr	r3, [pc, #360]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000fe6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

	Cmn.Time[0] = (Time.hour/10) + 0x30;
 8000fea:	4b5a      	ldr	r3, [pc, #360]	@ (8001154 <Split_Time_Function+0x1b8>)
 8000fec:	789b      	ldrb	r3, [r3, #2]
 8000fee:	4a5a      	ldr	r2, [pc, #360]	@ (8001158 <Split_Time_Function+0x1bc>)
 8000ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	3330      	adds	r3, #48	@ 0x30
 8000ffa:	b2da      	uxtb	r2, r3
 8000ffc:	4b54      	ldr	r3, [pc, #336]	@ (8001150 <Split_Time_Function+0x1b4>)
 8000ffe:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
	Cmn.Time[1] = (Time.hour%10) + 0x30;
 8001002:	4b54      	ldr	r3, [pc, #336]	@ (8001154 <Split_Time_Function+0x1b8>)
 8001004:	789a      	ldrb	r2, [r3, #2]
 8001006:	4b54      	ldr	r3, [pc, #336]	@ (8001158 <Split_Time_Function+0x1bc>)
 8001008:	fba3 1302 	umull	r1, r3, r3, r2
 800100c:	08d9      	lsrs	r1, r3, #3
 800100e:	460b      	mov	r3, r1
 8001010:	009b      	lsls	r3, r3, #2
 8001012:	440b      	add	r3, r1
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	1ad3      	subs	r3, r2, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	3330      	adds	r3, #48	@ 0x30
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4b4c      	ldr	r3, [pc, #304]	@ (8001150 <Split_Time_Function+0x1b4>)
 8001020:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

	Cmn.Time[3] = (Time.min/10) + 0x30;
 8001024:	4b4b      	ldr	r3, [pc, #300]	@ (8001154 <Split_Time_Function+0x1b8>)
 8001026:	785b      	ldrb	r3, [r3, #1]
 8001028:	4a4b      	ldr	r2, [pc, #300]	@ (8001158 <Split_Time_Function+0x1bc>)
 800102a:	fba2 2303 	umull	r2, r3, r2, r3
 800102e:	08db      	lsrs	r3, r3, #3
 8001030:	b2db      	uxtb	r3, r3
 8001032:	3330      	adds	r3, #48	@ 0x30
 8001034:	b2da      	uxtb	r2, r3
 8001036:	4b46      	ldr	r3, [pc, #280]	@ (8001150 <Split_Time_Function+0x1b4>)
 8001038:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
	Cmn.Time[4] = (Time.min%10) + 0x30;
 800103c:	4b45      	ldr	r3, [pc, #276]	@ (8001154 <Split_Time_Function+0x1b8>)
 800103e:	785a      	ldrb	r2, [r3, #1]
 8001040:	4b45      	ldr	r3, [pc, #276]	@ (8001158 <Split_Time_Function+0x1bc>)
 8001042:	fba3 1302 	umull	r1, r3, r3, r2
 8001046:	08d9      	lsrs	r1, r3, #3
 8001048:	460b      	mov	r3, r1
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	440b      	add	r3, r1
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	b2db      	uxtb	r3, r3
 8001054:	3330      	adds	r3, #48	@ 0x30
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b3d      	ldr	r3, [pc, #244]	@ (8001150 <Split_Time_Function+0x1b4>)
 800105a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

	Cmn.Time[6] = (Time.sec/10) + 0x30;
 800105e:	4b3d      	ldr	r3, [pc, #244]	@ (8001154 <Split_Time_Function+0x1b8>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	4a3d      	ldr	r2, [pc, #244]	@ (8001158 <Split_Time_Function+0x1bc>)
 8001064:	fba2 2303 	umull	r2, r3, r2, r3
 8001068:	08db      	lsrs	r3, r3, #3
 800106a:	b2db      	uxtb	r3, r3
 800106c:	3330      	adds	r3, #48	@ 0x30
 800106e:	b2da      	uxtb	r2, r3
 8001070:	4b37      	ldr	r3, [pc, #220]	@ (8001150 <Split_Time_Function+0x1b4>)
 8001072:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	Cmn.Time[7] = (Time.sec%10) + 0x30;
 8001076:	4b37      	ldr	r3, [pc, #220]	@ (8001154 <Split_Time_Function+0x1b8>)
 8001078:	781a      	ldrb	r2, [r3, #0]
 800107a:	4b37      	ldr	r3, [pc, #220]	@ (8001158 <Split_Time_Function+0x1bc>)
 800107c:	fba3 1302 	umull	r1, r3, r3, r2
 8001080:	08d9      	lsrs	r1, r3, #3
 8001082:	460b      	mov	r3, r1
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	440b      	add	r3, r1
 8001088:	005b      	lsls	r3, r3, #1
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	b2db      	uxtb	r3, r3
 800108e:	3330      	adds	r3, #48	@ 0x30
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4b2f      	ldr	r3, [pc, #188]	@ (8001150 <Split_Time_Function+0x1b4>)
 8001094:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

	Cmn.Time[10] = (Time.date/10) + 0x30;
 8001098:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <Split_Time_Function+0x1b8>)
 800109a:	791b      	ldrb	r3, [r3, #4]
 800109c:	4a2e      	ldr	r2, [pc, #184]	@ (8001158 <Split_Time_Function+0x1bc>)
 800109e:	fba2 2303 	umull	r2, r3, r2, r3
 80010a2:	08db      	lsrs	r3, r3, #3
 80010a4:	b2db      	uxtb	r3, r3
 80010a6:	3330      	adds	r3, #48	@ 0x30
 80010a8:	b2da      	uxtb	r2, r3
 80010aa:	4b29      	ldr	r3, [pc, #164]	@ (8001150 <Split_Time_Function+0x1b4>)
 80010ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	Cmn.Time[11] = (Time.date%10) + 0x30;
 80010b0:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <Split_Time_Function+0x1b8>)
 80010b2:	791a      	ldrb	r2, [r3, #4]
 80010b4:	4b28      	ldr	r3, [pc, #160]	@ (8001158 <Split_Time_Function+0x1bc>)
 80010b6:	fba3 1302 	umull	r1, r3, r3, r2
 80010ba:	08d9      	lsrs	r1, r3, #3
 80010bc:	460b      	mov	r3, r1
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	440b      	add	r3, r1
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	1ad3      	subs	r3, r2, r3
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	3330      	adds	r3, #48	@ 0x30
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <Split_Time_Function+0x1b4>)
 80010ce:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

	Cmn.Time[13] = (Time.month/10) + 0x30;
 80010d2:	4b20      	ldr	r3, [pc, #128]	@ (8001154 <Split_Time_Function+0x1b8>)
 80010d4:	795b      	ldrb	r3, [r3, #5]
 80010d6:	4a20      	ldr	r2, [pc, #128]	@ (8001158 <Split_Time_Function+0x1bc>)
 80010d8:	fba2 2303 	umull	r2, r3, r2, r3
 80010dc:	08db      	lsrs	r3, r3, #3
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	3330      	adds	r3, #48	@ 0x30
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001150 <Split_Time_Function+0x1b4>)
 80010e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	Cmn.Time[14] = (Time.month%10) + 0x30;
 80010ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001154 <Split_Time_Function+0x1b8>)
 80010ec:	795a      	ldrb	r2, [r3, #5]
 80010ee:	4b1a      	ldr	r3, [pc, #104]	@ (8001158 <Split_Time_Function+0x1bc>)
 80010f0:	fba3 1302 	umull	r1, r3, r3, r2
 80010f4:	08d9      	lsrs	r1, r3, #3
 80010f6:	460b      	mov	r3, r1
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	1ad3      	subs	r3, r2, r3
 8001100:	b2db      	uxtb	r3, r3
 8001102:	3330      	adds	r3, #48	@ 0x30
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4b12      	ldr	r3, [pc, #72]	@ (8001150 <Split_Time_Function+0x1b4>)
 8001108:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	Cmn.Time[16] = (Time.year/10) + 0x30;
 800110c:	4b11      	ldr	r3, [pc, #68]	@ (8001154 <Split_Time_Function+0x1b8>)
 800110e:	799b      	ldrb	r3, [r3, #6]
 8001110:	4a11      	ldr	r2, [pc, #68]	@ (8001158 <Split_Time_Function+0x1bc>)
 8001112:	fba2 2303 	umull	r2, r3, r2, r3
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	b2db      	uxtb	r3, r3
 800111a:	3330      	adds	r3, #48	@ 0x30
 800111c:	b2da      	uxtb	r2, r3
 800111e:	4b0c      	ldr	r3, [pc, #48]	@ (8001150 <Split_Time_Function+0x1b4>)
 8001120:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
	Cmn.Time[17] = (Time.year%10) + 0x30;
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <Split_Time_Function+0x1b8>)
 8001126:	799a      	ldrb	r2, [r3, #6]
 8001128:	4b0b      	ldr	r3, [pc, #44]	@ (8001158 <Split_Time_Function+0x1bc>)
 800112a:	fba3 1302 	umull	r1, r3, r3, r2
 800112e:	08d9      	lsrs	r1, r3, #3
 8001130:	460b      	mov	r3, r1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	005b      	lsls	r3, r3, #1
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	b2db      	uxtb	r3, r3
 800113c:	3330      	adds	r3, #48	@ 0x30
 800113e:	b2da      	uxtb	r2, r3
 8001140:	4b03      	ldr	r3, [pc, #12]	@ (8001150 <Split_Time_Function+0x1b4>)
 8001142:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000236 	.word	0x20000236
 8001150:	20000214 	.word	0x20000214
 8001154:	20000280 	.word	0x20000280
 8001158:	cccccccd 	.word	0xcccccccd

0800115c <DS3231_While_Function>:


void DS3231_While_Function(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
	force_temp_conv();
 8001160:	f7ff fee2 	bl	8000f28 <force_temp_conv>
	Time.DS_Temp = Get_Temp();
 8001164:	f7ff feaa 	bl	8000ebc <Get_Temp>
 8001168:	4603      	mov	r3, r0
 800116a:	4a06      	ldr	r2, [pc, #24]	@ (8001184 <DS3231_While_Function+0x28>)
 800116c:	60d3      	str	r3, [r2, #12]

	Get_Time();
 800116e:	f7ff fe55 	bl	8000e1c <Get_Time>
	Split_Time_Function();
 8001172:	f7ff ff13 	bl	8000f9c <Split_Time_Function>

	USB_Tx_while();
 8001176:	f001 f86f 	bl	8002258 <USB_Tx_while>
	SSD1306_WhileCode();
 800117a:	f000 fa1f 	bl	80015bc <SSD1306_WhileCode>
}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000280 	.word	0x20000280

08001188 <Relay_While>:
#include "Driver.h"

Relay Rly;

void Relay_While()
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
	Rly.While_Inc += 1;
 800118c:	4b07      	ldr	r3, [pc, #28]	@ (80011ac <Relay_While+0x24>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	3301      	adds	r3, #1
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <Relay_While+0x24>)
 8001196:	701a      	strb	r2, [r3, #0]

	Relay_Time_Calculate();
 8001198:	f000 f83c 	bl	8001214 <Relay_Time_Calculate>
	Relay_Possible_Scenario();
 800119c:	f000 f91c 	bl	80013d8 <Relay_Possible_Scenario>

	Relay1_Control();
 80011a0:	f000 f93c 	bl	800141c <Relay1_Control>
	Relay2_Control();
 80011a4:	f000 f990 	bl	80014c8 <Relay2_Control>
}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000290 	.word	0x20000290

080011b0 <Relay_Init_Code>:

void Relay_Init_Code()
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);	//Off Relay
 80011b4:	2201      	movs	r2, #1
 80011b6:	2130      	movs	r1, #48	@ 0x30
 80011b8:	4813      	ldr	r0, [pc, #76]	@ (8001208 <Relay_Init_Code+0x58>)
 80011ba:	f002 f808 	bl	80031ce <HAL_GPIO_WritePin>
	Relay_Time_Calculate();
 80011be:	f000 f829 	bl	8001214 <Relay_Time_Calculate>
	Relay_Possible_Scenario();
 80011c2:	f000 f909 	bl	80013d8 <Relay_Possible_Scenario>

	if(Rly.Scenario1 == 1) //Whole Night
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <Relay_Init_Code+0x5c>)
 80011c8:	785b      	ldrb	r3, [r3, #1]
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d10a      	bne.n	80011e4 <Relay_Init_Code+0x34>
		{
			if(Time.Get < Rly.OFF1)
 80011ce:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <Relay_Init_Code+0x60>)
 80011d0:	891a      	ldrh	r2, [r3, #8]
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <Relay_Init_Code+0x5c>)
 80011d4:	88db      	ldrh	r3, [r3, #6]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d204      	bcs.n	80011e4 <Relay_Init_Code+0x34>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//ON Relay1
 80011da:	2200      	movs	r2, #0
 80011dc:	2110      	movs	r1, #16
 80011de:	480a      	ldr	r0, [pc, #40]	@ (8001208 <Relay_Init_Code+0x58>)
 80011e0:	f001 fff5 	bl	80031ce <HAL_GPIO_WritePin>
		}

	if(Rly.Scenario2 == 1) //Whole Night
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <Relay_Init_Code+0x5c>)
 80011e6:	789b      	ldrb	r3, [r3, #2]
 80011e8:	2b01      	cmp	r3, #1
 80011ea:	d10a      	bne.n	8001202 <Relay_Init_Code+0x52>
		{
			if(Time.Get < Rly.OFF2)
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <Relay_Init_Code+0x60>)
 80011ee:	891a      	ldrh	r2, [r3, #8]
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <Relay_Init_Code+0x5c>)
 80011f2:	895b      	ldrh	r3, [r3, #10]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d204      	bcs.n	8001202 <Relay_Init_Code+0x52>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);	//ON Relay2
 80011f8:	2200      	movs	r2, #0
 80011fa:	2120      	movs	r1, #32
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <Relay_Init_Code+0x58>)
 80011fe:	f001 ffe6 	bl	80031ce <HAL_GPIO_WritePin>
		}
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	40010800 	.word	0x40010800
 800120c:	20000290 	.word	0x20000290
 8001210:	20000280 	.word	0x20000280

08001214 <Relay_Time_Calculate>:

void Relay_Time_Calculate()
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	Time.Get = (Time.hour * 100) + Time.min ;
 8001218:	4b6c      	ldr	r3, [pc, #432]	@ (80013cc <Relay_Time_Calculate+0x1b8>)
 800121a:	789b      	ldrb	r3, [r3, #2]
 800121c:	461a      	mov	r2, r3
 800121e:	0092      	lsls	r2, r2, #2
 8001220:	4413      	add	r3, r2
 8001222:	461a      	mov	r2, r3
 8001224:	0091      	lsls	r1, r2, #2
 8001226:	461a      	mov	r2, r3
 8001228:	460b      	mov	r3, r1
 800122a:	4413      	add	r3, r2
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	b29b      	uxth	r3, r3
 8001230:	4a66      	ldr	r2, [pc, #408]	@ (80013cc <Relay_Time_Calculate+0x1b8>)
 8001232:	7852      	ldrb	r2, [r2, #1]
 8001234:	4413      	add	r3, r2
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b64      	ldr	r3, [pc, #400]	@ (80013cc <Relay_Time_Calculate+0x1b8>)
 800123a:	811a      	strh	r2, [r3, #8]

	Rly.ON1 = (((EE.Rly_R1[0]-0x30)*1000) + ((EE.Rly_R1[1]-0x30)*100) +
 800123c:	4b64      	ldr	r3, [pc, #400]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 800123e:	7e9b      	ldrb	r3, [r3, #26]
 8001240:	3b30      	subs	r3, #48	@ 0x30
 8001242:	b29b      	uxth	r3, r3
 8001244:	461a      	mov	r2, r3
 8001246:	0152      	lsls	r2, r2, #5
 8001248:	1ad2      	subs	r2, r2, r3
 800124a:	0092      	lsls	r2, r2, #2
 800124c:	4413      	add	r3, r2
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b5f      	ldr	r3, [pc, #380]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 8001254:	7edb      	ldrb	r3, [r3, #27]
 8001256:	3b30      	subs	r3, #48	@ 0x30
 8001258:	b29b      	uxth	r3, r3
 800125a:	4619      	mov	r1, r3
 800125c:	0089      	lsls	r1, r1, #2
 800125e:	440b      	add	r3, r1
 8001260:	4619      	mov	r1, r3
 8001262:	0088      	lsls	r0, r1, #2
 8001264:	4619      	mov	r1, r3
 8001266:	4603      	mov	r3, r0
 8001268:	440b      	add	r3, r1
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	b29b      	uxth	r3, r3
 800126e:	4413      	add	r3, r2
 8001270:	b29a      	uxth	r2, r3
			((EE.Rly_R1[3]-0x30)*10) + (EE.Rly_R1[4]-0x30));
 8001272:	4b57      	ldr	r3, [pc, #348]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 8001274:	7f5b      	ldrb	r3, [r3, #29]
 8001276:	3b30      	subs	r3, #48	@ 0x30
	Rly.ON1 = (((EE.Rly_R1[0]-0x30)*1000) + ((EE.Rly_R1[1]-0x30)*100) +
 8001278:	b29b      	uxth	r3, r3
 800127a:	4619      	mov	r1, r3
 800127c:	0089      	lsls	r1, r1, #2
 800127e:	440b      	add	r3, r1
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	b29b      	uxth	r3, r3
 8001284:	4413      	add	r3, r2
 8001286:	b29b      	uxth	r3, r3
			((EE.Rly_R1[3]-0x30)*10) + (EE.Rly_R1[4]-0x30));
 8001288:	4a51      	ldr	r2, [pc, #324]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 800128a:	7f92      	ldrb	r2, [r2, #30]
 800128c:	4413      	add	r3, r2
 800128e:	b29b      	uxth	r3, r3
 8001290:	3b30      	subs	r3, #48	@ 0x30
 8001292:	b29a      	uxth	r2, r3
	Rly.ON1 = (((EE.Rly_R1[0]-0x30)*1000) + ((EE.Rly_R1[1]-0x30)*100) +
 8001294:	4b4f      	ldr	r3, [pc, #316]	@ (80013d4 <Relay_Time_Calculate+0x1c0>)
 8001296:	809a      	strh	r2, [r3, #4]

	Rly.OFF1 = (((EE.Rly_R1[6]-0x30)*1000) + ((EE.Rly_R1[7]-0x30)*100) +
 8001298:	4b4d      	ldr	r3, [pc, #308]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 800129a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129e:	3b30      	subs	r3, #48	@ 0x30
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	0152      	lsls	r2, r2, #5
 80012a6:	1ad2      	subs	r2, r2, r3
 80012a8:	0092      	lsls	r2, r2, #2
 80012aa:	4413      	add	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	4b47      	ldr	r3, [pc, #284]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 80012b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80012b6:	3b30      	subs	r3, #48	@ 0x30
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	4619      	mov	r1, r3
 80012bc:	0089      	lsls	r1, r1, #2
 80012be:	440b      	add	r3, r1
 80012c0:	4619      	mov	r1, r3
 80012c2:	0088      	lsls	r0, r1, #2
 80012c4:	4619      	mov	r1, r3
 80012c6:	4603      	mov	r3, r0
 80012c8:	440b      	add	r3, r1
 80012ca:	009b      	lsls	r3, r3, #2
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	b29a      	uxth	r2, r3
			((EE.Rly_R1[9]-0x30)*10) + (EE.Rly_R1[10]-0x30));
 80012d2:	4b3f      	ldr	r3, [pc, #252]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 80012d4:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80012d8:	3b30      	subs	r3, #48	@ 0x30
	Rly.OFF1 = (((EE.Rly_R1[6]-0x30)*1000) + ((EE.Rly_R1[7]-0x30)*100) +
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4619      	mov	r1, r3
 80012de:	0089      	lsls	r1, r1, #2
 80012e0:	440b      	add	r3, r1
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	4413      	add	r3, r2
 80012e8:	b29b      	uxth	r3, r3
			((EE.Rly_R1[9]-0x30)*10) + (EE.Rly_R1[10]-0x30));
 80012ea:	4a39      	ldr	r2, [pc, #228]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 80012ec:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 80012f0:	4413      	add	r3, r2
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	3b30      	subs	r3, #48	@ 0x30
 80012f6:	b29a      	uxth	r2, r3
	Rly.OFF1 = (((EE.Rly_R1[6]-0x30)*1000) + ((EE.Rly_R1[7]-0x30)*100) +
 80012f8:	4b36      	ldr	r3, [pc, #216]	@ (80013d4 <Relay_Time_Calculate+0x1c0>)
 80012fa:	80da      	strh	r2, [r3, #6]

	Rly.ON2 = (((EE.Rly_R2[0]-0x30)*1000) + ((EE.Rly_R2[1]-0x30)*100) +
 80012fc:	4b34      	ldr	r3, [pc, #208]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 80012fe:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8001302:	3b30      	subs	r3, #48	@ 0x30
 8001304:	b29b      	uxth	r3, r3
 8001306:	461a      	mov	r2, r3
 8001308:	0152      	lsls	r2, r2, #5
 800130a:	1ad2      	subs	r2, r2, r3
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	b29a      	uxth	r2, r3
 8001314:	4b2e      	ldr	r3, [pc, #184]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 8001316:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 800131a:	3b30      	subs	r3, #48	@ 0x30
 800131c:	b29b      	uxth	r3, r3
 800131e:	4619      	mov	r1, r3
 8001320:	0089      	lsls	r1, r1, #2
 8001322:	440b      	add	r3, r1
 8001324:	4619      	mov	r1, r3
 8001326:	0088      	lsls	r0, r1, #2
 8001328:	4619      	mov	r1, r3
 800132a:	4603      	mov	r3, r0
 800132c:	440b      	add	r3, r1
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	b29b      	uxth	r3, r3
 8001332:	4413      	add	r3, r2
 8001334:	b29a      	uxth	r2, r3
			((EE.Rly_R2[3]-0x30)*10) + (EE.Rly_R2[4]-0x30));
 8001336:	4b26      	ldr	r3, [pc, #152]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 8001338:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 800133c:	3b30      	subs	r3, #48	@ 0x30
	Rly.ON2 = (((EE.Rly_R2[0]-0x30)*1000) + ((EE.Rly_R2[1]-0x30)*100) +
 800133e:	b29b      	uxth	r3, r3
 8001340:	4619      	mov	r1, r3
 8001342:	0089      	lsls	r1, r1, #2
 8001344:	440b      	add	r3, r1
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	b29b      	uxth	r3, r3
 800134a:	4413      	add	r3, r2
 800134c:	b29b      	uxth	r3, r3
			((EE.Rly_R2[3]-0x30)*10) + (EE.Rly_R2[4]-0x30));
 800134e:	4a20      	ldr	r2, [pc, #128]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 8001350:	f892 202a 	ldrb.w	r2, [r2, #42]	@ 0x2a
 8001354:	4413      	add	r3, r2
 8001356:	b29b      	uxth	r3, r3
 8001358:	3b30      	subs	r3, #48	@ 0x30
 800135a:	b29a      	uxth	r2, r3
	Rly.ON2 = (((EE.Rly_R2[0]-0x30)*1000) + ((EE.Rly_R2[1]-0x30)*100) +
 800135c:	4b1d      	ldr	r3, [pc, #116]	@ (80013d4 <Relay_Time_Calculate+0x1c0>)
 800135e:	811a      	strh	r2, [r3, #8]

	Rly.OFF2 = (((EE.Rly_R2[6]-0x30)*1000) + ((EE.Rly_R2[7]-0x30)*100) +
 8001360:	4b1b      	ldr	r3, [pc, #108]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 8001362:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001366:	3b30      	subs	r3, #48	@ 0x30
 8001368:	b29b      	uxth	r3, r3
 800136a:	461a      	mov	r2, r3
 800136c:	0152      	lsls	r2, r2, #5
 800136e:	1ad2      	subs	r2, r2, r3
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b15      	ldr	r3, [pc, #84]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 800137a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 800137e:	3b30      	subs	r3, #48	@ 0x30
 8001380:	b29b      	uxth	r3, r3
 8001382:	4619      	mov	r1, r3
 8001384:	0089      	lsls	r1, r1, #2
 8001386:	440b      	add	r3, r1
 8001388:	4619      	mov	r1, r3
 800138a:	0088      	lsls	r0, r1, #2
 800138c:	4619      	mov	r1, r3
 800138e:	4603      	mov	r3, r0
 8001390:	440b      	add	r3, r1
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	b29b      	uxth	r3, r3
 8001396:	4413      	add	r3, r2
 8001398:	b29a      	uxth	r2, r3
			((EE.Rly_R2[9]-0x30)*10) + (EE.Rly_R2[10]-0x30));
 800139a:	4b0d      	ldr	r3, [pc, #52]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 800139c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80013a0:	3b30      	subs	r3, #48	@ 0x30
	Rly.OFF2 = (((EE.Rly_R2[6]-0x30)*1000) + ((EE.Rly_R2[7]-0x30)*100) +
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4619      	mov	r1, r3
 80013a6:	0089      	lsls	r1, r1, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	4413      	add	r3, r2
 80013b0:	b29b      	uxth	r3, r3
			((EE.Rly_R2[9]-0x30)*10) + (EE.Rly_R2[10]-0x30));
 80013b2:	4a07      	ldr	r2, [pc, #28]	@ (80013d0 <Relay_Time_Calculate+0x1bc>)
 80013b4:	f892 2030 	ldrb.w	r2, [r2, #48]	@ 0x30
 80013b8:	4413      	add	r3, r2
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	3b30      	subs	r3, #48	@ 0x30
 80013be:	b29a      	uxth	r2, r3
	Rly.OFF2 = (((EE.Rly_R2[6]-0x30)*1000) + ((EE.Rly_R2[7]-0x30)*100) +
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <Relay_Time_Calculate+0x1c0>)
 80013c2:	815a      	strh	r2, [r3, #10]
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	20000280 	.word	0x20000280
 80013d0:	2000024c 	.word	0x2000024c
 80013d4:	20000290 	.word	0x20000290

080013d8 <Relay_Possible_Scenario>:


void Relay_Possible_Scenario()
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
	if( Rly.ON1 < Rly.OFF1)
 80013dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001418 <Relay_Possible_Scenario+0x40>)
 80013de:	889a      	ldrh	r2, [r3, #4]
 80013e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001418 <Relay_Possible_Scenario+0x40>)
 80013e2:	88db      	ldrh	r3, [r3, #6]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d203      	bcs.n	80013f0 <Relay_Possible_Scenario+0x18>
		Rly.Scenario1 = 0;		//Evening
 80013e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001418 <Relay_Possible_Scenario+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	705a      	strb	r2, [r3, #1]
 80013ee:	e002      	b.n	80013f6 <Relay_Possible_Scenario+0x1e>
	else
		Rly.Scenario1 = 1;		//Whole Night
 80013f0:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <Relay_Possible_Scenario+0x40>)
 80013f2:	2201      	movs	r2, #1
 80013f4:	705a      	strb	r2, [r3, #1]


	if( Rly.ON2 < Rly.OFF2)
 80013f6:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <Relay_Possible_Scenario+0x40>)
 80013f8:	891a      	ldrh	r2, [r3, #8]
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <Relay_Possible_Scenario+0x40>)
 80013fc:	895b      	ldrh	r3, [r3, #10]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d203      	bcs.n	800140a <Relay_Possible_Scenario+0x32>
		Rly.Scenario2 = 0;		//Evening
 8001402:	4b05      	ldr	r3, [pc, #20]	@ (8001418 <Relay_Possible_Scenario+0x40>)
 8001404:	2200      	movs	r2, #0
 8001406:	709a      	strb	r2, [r3, #2]
	else
		Rly.Scenario2 = 1;		//Whole Night
}
 8001408:	e002      	b.n	8001410 <Relay_Possible_Scenario+0x38>
		Rly.Scenario2 = 1;		//Whole Night
 800140a:	4b03      	ldr	r3, [pc, #12]	@ (8001418 <Relay_Possible_Scenario+0x40>)
 800140c:	2201      	movs	r2, #1
 800140e:	709a      	strb	r2, [r3, #2]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr
 8001418:	20000290 	.word	0x20000290

0800141c <Relay1_Control>:


void Relay1_Control()
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	if(Rly.Scenario1)		//Whole Night
 8001420:	4b26      	ldr	r3, [pc, #152]	@ (80014bc <Relay1_Control+0xa0>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d023      	beq.n	8001470 <Relay1_Control+0x54>
		{
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))		//Relay is OFF
 8001428:	2110      	movs	r1, #16
 800142a:	4825      	ldr	r0, [pc, #148]	@ (80014c0 <Relay1_Control+0xa4>)
 800142c:	f001 feb8 	bl	80031a0 <HAL_GPIO_ReadPin>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <Relay1_Control+0x32>
				{
					if(Time.Get >= Rly.ON1)
 8001436:	4b23      	ldr	r3, [pc, #140]	@ (80014c4 <Relay1_Control+0xa8>)
 8001438:	891a      	ldrh	r2, [r3, #8]
 800143a:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <Relay1_Control+0xa0>)
 800143c:	889b      	ldrh	r3, [r3, #4]
 800143e:	429a      	cmp	r2, r3
 8001440:	d33a      	bcc.n	80014b8 <Relay1_Control+0x9c>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//Turn ON the Relay
 8001442:	2200      	movs	r2, #0
 8001444:	2110      	movs	r1, #16
 8001446:	481e      	ldr	r0, [pc, #120]	@ (80014c0 <Relay1_Control+0xa4>)
 8001448:	f001 fec1 	bl	80031ce <HAL_GPIO_WritePin>
				{
					if(Time.Get >= Rly.OFF1)
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	//Turn OFF the Relay
				}
		}
}
 800144c:	e034      	b.n	80014b8 <Relay1_Control+0x9c>
					if((Time.Get >= Rly.OFF1) && (Time.Get <= 1200))		//Before Afternoon
 800144e:	4b1d      	ldr	r3, [pc, #116]	@ (80014c4 <Relay1_Control+0xa8>)
 8001450:	891a      	ldrh	r2, [r3, #8]
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <Relay1_Control+0xa0>)
 8001454:	88db      	ldrh	r3, [r3, #6]
 8001456:	429a      	cmp	r2, r3
 8001458:	d32e      	bcc.n	80014b8 <Relay1_Control+0x9c>
 800145a:	4b1a      	ldr	r3, [pc, #104]	@ (80014c4 <Relay1_Control+0xa8>)
 800145c:	891b      	ldrh	r3, [r3, #8]
 800145e:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 8001462:	d829      	bhi.n	80014b8 <Relay1_Control+0x9c>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	//Turn OFF the Relay
 8001464:	2201      	movs	r2, #1
 8001466:	2110      	movs	r1, #16
 8001468:	4815      	ldr	r0, [pc, #84]	@ (80014c0 <Relay1_Control+0xa4>)
 800146a:	f001 feb0 	bl	80031ce <HAL_GPIO_WritePin>
}
 800146e:	e023      	b.n	80014b8 <Relay1_Control+0x9c>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))		//Relay is OFF
 8001470:	2110      	movs	r1, #16
 8001472:	4813      	ldr	r0, [pc, #76]	@ (80014c0 <Relay1_Control+0xa4>)
 8001474:	f001 fe94 	bl	80031a0 <HAL_GPIO_ReadPin>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d011      	beq.n	80014a2 <Relay1_Control+0x86>
					if((Time.Get >= Rly.ON1) && (Time.Get < Rly.OFF1))
 800147e:	4b11      	ldr	r3, [pc, #68]	@ (80014c4 <Relay1_Control+0xa8>)
 8001480:	891a      	ldrh	r2, [r3, #8]
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <Relay1_Control+0xa0>)
 8001484:	889b      	ldrh	r3, [r3, #4]
 8001486:	429a      	cmp	r2, r3
 8001488:	d316      	bcc.n	80014b8 <Relay1_Control+0x9c>
 800148a:	4b0e      	ldr	r3, [pc, #56]	@ (80014c4 <Relay1_Control+0xa8>)
 800148c:	891a      	ldrh	r2, [r3, #8]
 800148e:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <Relay1_Control+0xa0>)
 8001490:	88db      	ldrh	r3, [r3, #6]
 8001492:	429a      	cmp	r2, r3
 8001494:	d210      	bcs.n	80014b8 <Relay1_Control+0x9c>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//Turn ON the Relay
 8001496:	2200      	movs	r2, #0
 8001498:	2110      	movs	r1, #16
 800149a:	4809      	ldr	r0, [pc, #36]	@ (80014c0 <Relay1_Control+0xa4>)
 800149c:	f001 fe97 	bl	80031ce <HAL_GPIO_WritePin>
}
 80014a0:	e00a      	b.n	80014b8 <Relay1_Control+0x9c>
					if(Time.Get >= Rly.OFF1)
 80014a2:	4b08      	ldr	r3, [pc, #32]	@ (80014c4 <Relay1_Control+0xa8>)
 80014a4:	891a      	ldrh	r2, [r3, #8]
 80014a6:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <Relay1_Control+0xa0>)
 80014a8:	88db      	ldrh	r3, [r3, #6]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d304      	bcc.n	80014b8 <Relay1_Control+0x9c>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);	//Turn OFF the Relay
 80014ae:	2201      	movs	r2, #1
 80014b0:	2110      	movs	r1, #16
 80014b2:	4803      	ldr	r0, [pc, #12]	@ (80014c0 <Relay1_Control+0xa4>)
 80014b4:	f001 fe8b 	bl	80031ce <HAL_GPIO_WritePin>
}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000290 	.word	0x20000290
 80014c0:	40010800 	.word	0x40010800
 80014c4:	20000280 	.word	0x20000280

080014c8 <Relay2_Control>:

void Relay2_Control()
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	if(Rly.Scenario2)		//Whole Night
 80014cc:	4b26      	ldr	r3, [pc, #152]	@ (8001568 <Relay2_Control+0xa0>)
 80014ce:	789b      	ldrb	r3, [r3, #2]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d023      	beq.n	800151c <Relay2_Control+0x54>
		{
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))		//Relay is OFF
 80014d4:	2120      	movs	r1, #32
 80014d6:	4825      	ldr	r0, [pc, #148]	@ (800156c <Relay2_Control+0xa4>)
 80014d8:	f001 fe62 	bl	80031a0 <HAL_GPIO_ReadPin>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d00b      	beq.n	80014fa <Relay2_Control+0x32>
				{
					if(Time.Get >= Rly.ON2)
 80014e2:	4b23      	ldr	r3, [pc, #140]	@ (8001570 <Relay2_Control+0xa8>)
 80014e4:	891a      	ldrh	r2, [r3, #8]
 80014e6:	4b20      	ldr	r3, [pc, #128]	@ (8001568 <Relay2_Control+0xa0>)
 80014e8:	891b      	ldrh	r3, [r3, #8]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d33a      	bcc.n	8001564 <Relay2_Control+0x9c>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);	//Turn ON the Relay
 80014ee:	2200      	movs	r2, #0
 80014f0:	2120      	movs	r1, #32
 80014f2:	481e      	ldr	r0, [pc, #120]	@ (800156c <Relay2_Control+0xa4>)
 80014f4:	f001 fe6b 	bl	80031ce <HAL_GPIO_WritePin>
				{
					if(Time.Get >= Rly.OFF2)
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);	//Turn OFF the Relay
				}
		}
}
 80014f8:	e034      	b.n	8001564 <Relay2_Control+0x9c>
					if((Time.Get >= Rly.OFF2) && (Time.Get <= 1200))		//Before Afternoon
 80014fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001570 <Relay2_Control+0xa8>)
 80014fc:	891a      	ldrh	r2, [r3, #8]
 80014fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001568 <Relay2_Control+0xa0>)
 8001500:	895b      	ldrh	r3, [r3, #10]
 8001502:	429a      	cmp	r2, r3
 8001504:	d32e      	bcc.n	8001564 <Relay2_Control+0x9c>
 8001506:	4b1a      	ldr	r3, [pc, #104]	@ (8001570 <Relay2_Control+0xa8>)
 8001508:	891b      	ldrh	r3, [r3, #8]
 800150a:	f5b3 6f96 	cmp.w	r3, #1200	@ 0x4b0
 800150e:	d829      	bhi.n	8001564 <Relay2_Control+0x9c>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);	//Turn OFF the Relay
 8001510:	2201      	movs	r2, #1
 8001512:	2120      	movs	r1, #32
 8001514:	4815      	ldr	r0, [pc, #84]	@ (800156c <Relay2_Control+0xa4>)
 8001516:	f001 fe5a 	bl	80031ce <HAL_GPIO_WritePin>
}
 800151a:	e023      	b.n	8001564 <Relay2_Control+0x9c>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5))		//Relay is OFF
 800151c:	2120      	movs	r1, #32
 800151e:	4813      	ldr	r0, [pc, #76]	@ (800156c <Relay2_Control+0xa4>)
 8001520:	f001 fe3e 	bl	80031a0 <HAL_GPIO_ReadPin>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d011      	beq.n	800154e <Relay2_Control+0x86>
					if((Time.Get >= Rly.ON2) && (Time.Get < Rly.OFF2))
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <Relay2_Control+0xa8>)
 800152c:	891a      	ldrh	r2, [r3, #8]
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <Relay2_Control+0xa0>)
 8001530:	891b      	ldrh	r3, [r3, #8]
 8001532:	429a      	cmp	r2, r3
 8001534:	d316      	bcc.n	8001564 <Relay2_Control+0x9c>
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <Relay2_Control+0xa8>)
 8001538:	891a      	ldrh	r2, [r3, #8]
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <Relay2_Control+0xa0>)
 800153c:	895b      	ldrh	r3, [r3, #10]
 800153e:	429a      	cmp	r2, r3
 8001540:	d210      	bcs.n	8001564 <Relay2_Control+0x9c>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);	//Turn ON the Relay
 8001542:	2200      	movs	r2, #0
 8001544:	2120      	movs	r1, #32
 8001546:	4809      	ldr	r0, [pc, #36]	@ (800156c <Relay2_Control+0xa4>)
 8001548:	f001 fe41 	bl	80031ce <HAL_GPIO_WritePin>
}
 800154c:	e00a      	b.n	8001564 <Relay2_Control+0x9c>
					if(Time.Get >= Rly.OFF2)
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <Relay2_Control+0xa8>)
 8001550:	891a      	ldrh	r2, [r3, #8]
 8001552:	4b05      	ldr	r3, [pc, #20]	@ (8001568 <Relay2_Control+0xa0>)
 8001554:	895b      	ldrh	r3, [r3, #10]
 8001556:	429a      	cmp	r2, r3
 8001558:	d304      	bcc.n	8001564 <Relay2_Control+0x9c>
						HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);	//Turn OFF the Relay
 800155a:	2201      	movs	r2, #1
 800155c:	2120      	movs	r1, #32
 800155e:	4803      	ldr	r0, [pc, #12]	@ (800156c <Relay2_Control+0xa4>)
 8001560:	f001 fe35 	bl	80031ce <HAL_GPIO_WritePin>
}
 8001564:	bf00      	nop
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000290 	.word	0x20000290
 800156c:	40010800 	.word	0x40010800
 8001570:	20000280 	.word	0x20000280

08001574 <SSD1306_Init_Code>:
#include "Driver.h"

SSD1306_Display	SSD_1306;

void SSD1306_Init_Code()
	{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
		SSD1306_Init();
 8001578:	f000 fb7a 	bl	8001c70 <SSD1306_Init>
		SSD1306_Clear();
 800157c:	f000 fd99 	bl	80020b2 <SSD1306_Clear>

		SSD1306_GotoXY (5,5);
 8001580:	2105      	movs	r1, #5
 8001582:	2005      	movs	r0, #5
 8001584:	f000 fcdc 	bl	8001f40 <SSD1306_GotoXY>
		SSD1306_Puts ("WELCOME", &Font_16x26, 1);
 8001588:	2201      	movs	r2, #1
 800158a:	4908      	ldr	r1, [pc, #32]	@ (80015ac <SSD1306_Init_Code+0x38>)
 800158c:	4808      	ldr	r0, [pc, #32]	@ (80015b0 <SSD1306_Init_Code+0x3c>)
 800158e:	f000 fd6b 	bl	8002068 <SSD1306_Puts>

		SSD1306_GotoXY (10,40);
 8001592:	2128      	movs	r1, #40	@ 0x28
 8001594:	200a      	movs	r0, #10
 8001596:	f000 fcd3 	bl	8001f40 <SSD1306_GotoXY>
		SSD1306_Puts ("Rebooting", &Font_11x18, 1);
 800159a:	2201      	movs	r2, #1
 800159c:	4905      	ldr	r1, [pc, #20]	@ (80015b4 <SSD1306_Init_Code+0x40>)
 800159e:	4806      	ldr	r0, [pc, #24]	@ (80015b8 <SSD1306_Init_Code+0x44>)
 80015a0:	f000 fd62 	bl	8002068 <SSD1306_Puts>

		SSD1306_UpdateScreen();
 80015a4:	f000 fc28 	bl	8001df8 <SSD1306_UpdateScreen>
	}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000010 	.word	0x20000010
 80015b0:	0800be18 	.word	0x0800be18
 80015b4:	20000008 	.word	0x20000008
 80015b8:	0800be20 	.word	0x0800be20

080015bc <SSD1306_WhileCode>:


void SSD1306_WhileCode(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	switch (SSD_1306.Inc1)
 80015c0:	4b44      	ldr	r3, [pc, #272]	@ (80016d4 <SSD1306_WhileCode+0x118>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b2c      	cmp	r3, #44	@ 0x2c
 80015c6:	dc5f      	bgt.n	8001688 <SSD1306_WhileCode+0xcc>
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	dd77      	ble.n	80016bc <SSD1306_WhileCode+0x100>
 80015cc:	3b01      	subs	r3, #1
 80015ce:	2b2b      	cmp	r3, #43	@ 0x2b
 80015d0:	d874      	bhi.n	80016bc <SSD1306_WhileCode+0x100>
 80015d2:	a201      	add	r2, pc, #4	@ (adr r2, 80015d8 <SSD1306_WhileCode+0x1c>)
 80015d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015d8:	08001691 	.word	0x08001691
 80015dc:	08001691 	.word	0x08001691
 80015e0:	08001691 	.word	0x08001691
 80015e4:	08001691 	.word	0x08001691
 80015e8:	08001691 	.word	0x08001691
 80015ec:	08001691 	.word	0x08001691
 80015f0:	08001691 	.word	0x08001691
 80015f4:	08001691 	.word	0x08001691
 80015f8:	08001691 	.word	0x08001691
 80015fc:	08001691 	.word	0x08001691
 8001600:	08001691 	.word	0x08001691
 8001604:	08001691 	.word	0x08001691
 8001608:	08001691 	.word	0x08001691
 800160c:	08001691 	.word	0x08001691
 8001610:	080016bd 	.word	0x080016bd
 8001614:	08001697 	.word	0x08001697
 8001618:	08001697 	.word	0x08001697
 800161c:	08001697 	.word	0x08001697
 8001620:	08001697 	.word	0x08001697
 8001624:	08001697 	.word	0x08001697
 8001628:	08001697 	.word	0x08001697
 800162c:	08001697 	.word	0x08001697
 8001630:	08001697 	.word	0x08001697
 8001634:	08001697 	.word	0x08001697
 8001638:	080016bd 	.word	0x080016bd
 800163c:	0800169d 	.word	0x0800169d
 8001640:	0800169d 	.word	0x0800169d
 8001644:	0800169d 	.word	0x0800169d
 8001648:	0800169d 	.word	0x0800169d
 800164c:	0800169d 	.word	0x0800169d
 8001650:	0800169d 	.word	0x0800169d
 8001654:	0800169d 	.word	0x0800169d
 8001658:	0800169d 	.word	0x0800169d
 800165c:	0800169d 	.word	0x0800169d
 8001660:	080016bd 	.word	0x080016bd
 8001664:	080016a3 	.word	0x080016a3
 8001668:	080016a3 	.word	0x080016a3
 800166c:	080016a3 	.word	0x080016a3
 8001670:	080016a3 	.word	0x080016a3
 8001674:	080016a3 	.word	0x080016a3
 8001678:	080016a3 	.word	0x080016a3
 800167c:	080016a3 	.word	0x080016a3
 8001680:	080016a3 	.word	0x080016a3
 8001684:	080016a3 	.word	0x080016a3
 8001688:	3b2e      	subs	r3, #46	@ 0x2e
 800168a:	2bd1      	cmp	r3, #209	@ 0xd1
 800168c:	d816      	bhi.n	80016bc <SSD1306_WhileCode+0x100>
 800168e:	e00b      	b.n	80016a8 <SSD1306_WhileCode+0xec>
	{
		case 1 ... 14 :
				SSD1306_All_Information();
 8001690:	f000 f82a 	bl	80016e8 <SSD1306_All_Information>
				break;
 8001694:	e015      	b.n	80016c2 <SSD1306_WhileCode+0x106>
		case 16 ... 24 :
				SSD1306_Time_Information();
 8001696:	f000 f8a3 	bl	80017e0 <SSD1306_Time_Information>
				break;
 800169a:	e012      	b.n	80016c2 <SSD1306_WhileCode+0x106>
		case 26 ... 34 :
				SSD1306_Relay1_Information();
 800169c:	f000 f98e 	bl	80019bc <SSD1306_Relay1_Information>
				break;
 80016a0:	e00f      	b.n	80016c2 <SSD1306_WhileCode+0x106>
		case 36 ... 44 :
				SSD1306_Relay2_Information();
 80016a2:	f000 fa37 	bl	8001b14 <SSD1306_Relay2_Information>
				break;
 80016a6:	e00c      	b.n	80016c2 <SSD1306_WhileCode+0x106>
		case 46 ... 255 :
				SSD_1306.Inc1 = 0;
 80016a8:	4b0a      	ldr	r3, [pc, #40]	@ (80016d4 <SSD1306_WhileCode+0x118>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
				SSD_1306.Inc2 +=1;
 80016ae:	4b09      	ldr	r3, [pc, #36]	@ (80016d4 <SSD1306_WhileCode+0x118>)
 80016b0:	785b      	ldrb	r3, [r3, #1]
 80016b2:	3301      	adds	r3, #1
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b07      	ldr	r3, [pc, #28]	@ (80016d4 <SSD1306_WhileCode+0x118>)
 80016b8:	705a      	strb	r2, [r3, #1]
				break;
 80016ba:	e002      	b.n	80016c2 <SSD1306_WhileCode+0x106>
		default :
				SSD1306_ReInitialize();
 80016bc:	f000 f80c 	bl	80016d8 <SSD1306_ReInitialize>
				break;
 80016c0:	bf00      	nop
	}

	SSD_1306.Inc1+=1;
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <SSD1306_WhileCode+0x118>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	3301      	adds	r3, #1
 80016c8:	b2da      	uxtb	r2, r3
 80016ca:	4b02      	ldr	r3, [pc, #8]	@ (80016d4 <SSD1306_WhileCode+0x118>)
 80016cc:	701a      	strb	r2, [r3, #0]
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2000029c 	.word	0x2000029c

080016d8 <SSD1306_ReInitialize>:



void SSD1306_ReInitialize()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	SSD1306_Init();
 80016dc:	f000 fac8 	bl	8001c70 <SSD1306_Init>
	SSD1306_Clear();
 80016e0:	f000 fce7 	bl	80020b2 <SSD1306_Clear>
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <SSD1306_All_Information>:


void SSD1306_All_Information()
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
	SSD1306_GotoXY (0,0);
 80016ee:	2100      	movs	r1, #0
 80016f0:	2000      	movs	r0, #0
 80016f2:	f000 fc25 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)"Hr:Mn:Sec Dt:Mt:Yr", &Font_7x10, 1);
 80016f6:	2201      	movs	r2, #1
 80016f8:	492e      	ldr	r1, [pc, #184]	@ (80017b4 <SSD1306_All_Information+0xcc>)
 80016fa:	482f      	ldr	r0, [pc, #188]	@ (80017b8 <SSD1306_All_Information+0xd0>)
 80016fc:	f000 fcb4 	bl	8002068 <SSD1306_Puts>

	SSD1306_GotoXY (0,10);
 8001700:	210a      	movs	r1, #10
 8001702:	2000      	movs	r0, #0
 8001704:	f000 fc1c 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)&Cmn.Time[0], &Font_7x10, 1);
 8001708:	2201      	movs	r2, #1
 800170a:	492a      	ldr	r1, [pc, #168]	@ (80017b4 <SSD1306_All_Information+0xcc>)
 800170c:	482b      	ldr	r0, [pc, #172]	@ (80017bc <SSD1306_All_Information+0xd4>)
 800170e:	f000 fcab 	bl	8002068 <SSD1306_Puts>

	char Temperature[5];
	memset(Temperature, 0x00, sizeof(Temperature));
 8001712:	463b      	mov	r3, r7
 8001714:	2205      	movs	r2, #5
 8001716:	2100      	movs	r1, #0
 8001718:	4618      	mov	r0, r3
 800171a:	f009 fec3 	bl	800b4a4 <memset>
	sprintf((char *)Temperature, "%d'", (char)Time.DS_Temp);
 800171e:	4b28      	ldr	r3, [pc, #160]	@ (80017c0 <SSD1306_All_Information+0xd8>)
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff f930 	bl	8000988 <__aeabi_f2uiz>
 8001728:	4603      	mov	r3, r0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	461a      	mov	r2, r3
 800172e:	463b      	mov	r3, r7
 8001730:	4924      	ldr	r1, [pc, #144]	@ (80017c4 <SSD1306_All_Information+0xdc>)
 8001732:	4618      	mov	r0, r3
 8001734:	f009 fe96 	bl	800b464 <siprintf>
	SSD1306_GotoXY (0,20);
 8001738:	2114      	movs	r1, #20
 800173a:	2000      	movs	r0, #0
 800173c:	f000 fc00 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)Temperature, &Font_16x26, 1);
 8001740:	463b      	mov	r3, r7
 8001742:	2201      	movs	r2, #1
 8001744:	4920      	ldr	r1, [pc, #128]	@ (80017c8 <SSD1306_All_Information+0xe0>)
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fc8e 	bl	8002068 <SSD1306_Puts>

	SSD1306_GotoXY (34,32);
 800174c:	2120      	movs	r1, #32
 800174e:	2022      	movs	r0, #34	@ 0x22
 8001750:	f000 fbf6 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)"C ON    OFF ", &Font_7x10, 1);
 8001754:	2201      	movs	r2, #1
 8001756:	4917      	ldr	r1, [pc, #92]	@ (80017b4 <SSD1306_All_Information+0xcc>)
 8001758:	481c      	ldr	r0, [pc, #112]	@ (80017cc <SSD1306_All_Information+0xe4>)
 800175a:	f000 fc85 	bl	8002068 <SSD1306_Puts>

	SSD1306_GotoXY (0,43);
 800175e:	212b      	movs	r1, #43	@ 0x2b
 8001760:	2000      	movs	r0, #0
 8001762:	f000 fbed 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)"Rly1: ", &Font_7x10, 1);
 8001766:	2201      	movs	r2, #1
 8001768:	4912      	ldr	r1, [pc, #72]	@ (80017b4 <SSD1306_All_Information+0xcc>)
 800176a:	4819      	ldr	r0, [pc, #100]	@ (80017d0 <SSD1306_All_Information+0xe8>)
 800176c:	f000 fc7c 	bl	8002068 <SSD1306_Puts>

	SSD1306_GotoXY (40,43);
 8001770:	212b      	movs	r1, #43	@ 0x2b
 8001772:	2028      	movs	r0, #40	@ 0x28
 8001774:	f000 fbe4 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)&EE.Rly_R1[0], &Font_7x10, 1);
 8001778:	2201      	movs	r2, #1
 800177a:	490e      	ldr	r1, [pc, #56]	@ (80017b4 <SSD1306_All_Information+0xcc>)
 800177c:	4815      	ldr	r0, [pc, #84]	@ (80017d4 <SSD1306_All_Information+0xec>)
 800177e:	f000 fc73 	bl	8002068 <SSD1306_Puts>

	SSD1306_GotoXY (0,53);
 8001782:	2135      	movs	r1, #53	@ 0x35
 8001784:	2000      	movs	r0, #0
 8001786:	f000 fbdb 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)"Rly2: ", &Font_7x10, 1);
 800178a:	2201      	movs	r2, #1
 800178c:	4909      	ldr	r1, [pc, #36]	@ (80017b4 <SSD1306_All_Information+0xcc>)
 800178e:	4812      	ldr	r0, [pc, #72]	@ (80017d8 <SSD1306_All_Information+0xf0>)
 8001790:	f000 fc6a 	bl	8002068 <SSD1306_Puts>

	SSD1306_GotoXY (40,53);
 8001794:	2135      	movs	r1, #53	@ 0x35
 8001796:	2028      	movs	r0, #40	@ 0x28
 8001798:	f000 fbd2 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)&EE.Rly_R2[0], &Font_7x10, 1);
 800179c:	2201      	movs	r2, #1
 800179e:	4905      	ldr	r1, [pc, #20]	@ (80017b4 <SSD1306_All_Information+0xcc>)
 80017a0:	480e      	ldr	r0, [pc, #56]	@ (80017dc <SSD1306_All_Information+0xf4>)
 80017a2:	f000 fc61 	bl	8002068 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 80017a6:	f000 fb27 	bl	8001df8 <SSD1306_UpdateScreen>
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000000 	.word	0x20000000
 80017b8:	0800be2c 	.word	0x0800be2c
 80017bc:	20000236 	.word	0x20000236
 80017c0:	20000280 	.word	0x20000280
 80017c4:	0800be40 	.word	0x0800be40
 80017c8:	20000010 	.word	0x20000010
 80017cc:	0800be44 	.word	0x0800be44
 80017d0:	0800be54 	.word	0x0800be54
 80017d4:	20000266 	.word	0x20000266
 80017d8:	0800be5c 	.word	0x0800be5c
 80017dc:	20000272 	.word	0x20000272

080017e0 <SSD1306_Time_Information>:


void SSD1306_Time_Information()
{
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	b08b      	sub	sp, #44	@ 0x2c
 80017e4:	af04      	add	r7, sp, #16
	uint8_t time[10];
	uint8_t date[10];

	memset(time, 0x00, sizeof(time));
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	220a      	movs	r2, #10
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f009 fe58 	bl	800b4a4 <memset>
	sprintf((char *)time, " %c%c:%c%c:%c%c", Cmn.Time[0], Cmn.Time[1],
 80017f4:	4b65      	ldr	r3, [pc, #404]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 80017f6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80017fa:	461d      	mov	r5, r3
 80017fc:	4b63      	ldr	r3, [pc, #396]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 80017fe:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8001802:	461e      	mov	r6, r3
			Cmn.Time[3], Cmn.Time[4], Cmn.Time[6], Cmn.Time[7]);
 8001804:	4b61      	ldr	r3, [pc, #388]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 8001806:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
	sprintf((char *)time, " %c%c:%c%c:%c%c", Cmn.Time[0], Cmn.Time[1],
 800180a:	461a      	mov	r2, r3
			Cmn.Time[3], Cmn.Time[4], Cmn.Time[6], Cmn.Time[7]);
 800180c:	4b5f      	ldr	r3, [pc, #380]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 800180e:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	sprintf((char *)time, " %c%c:%c%c:%c%c", Cmn.Time[0], Cmn.Time[1],
 8001812:	4619      	mov	r1, r3
			Cmn.Time[3], Cmn.Time[4], Cmn.Time[6], Cmn.Time[7]);
 8001814:	4b5d      	ldr	r3, [pc, #372]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 8001816:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	sprintf((char *)time, " %c%c:%c%c:%c%c", Cmn.Time[0], Cmn.Time[1],
 800181a:	461c      	mov	r4, r3
			Cmn.Time[3], Cmn.Time[4], Cmn.Time[6], Cmn.Time[7]);
 800181c:	4b5b      	ldr	r3, [pc, #364]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 800181e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	sprintf((char *)time, " %c%c:%c%c:%c%c", Cmn.Time[0], Cmn.Time[1],
 8001822:	f107 000c 	add.w	r0, r7, #12
 8001826:	9303      	str	r3, [sp, #12]
 8001828:	9402      	str	r4, [sp, #8]
 800182a:	9101      	str	r1, [sp, #4]
 800182c:	9200      	str	r2, [sp, #0]
 800182e:	4633      	mov	r3, r6
 8001830:	462a      	mov	r2, r5
 8001832:	4957      	ldr	r1, [pc, #348]	@ (8001990 <SSD1306_Time_Information+0x1b0>)
 8001834:	f009 fe16 	bl	800b464 <siprintf>

	memset(date, 0x00, sizeof(date));
 8001838:	463b      	mov	r3, r7
 800183a:	220a      	movs	r2, #10
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f009 fe30 	bl	800b4a4 <memset>
	sprintf((char *)date, " %c%c:%c%c:%c%c", Cmn.Time[10], Cmn.Time[11],
 8001844:	4b51      	ldr	r3, [pc, #324]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 8001846:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800184a:	461d      	mov	r5, r3
 800184c:	4b4f      	ldr	r3, [pc, #316]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 800184e:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001852:	461e      	mov	r6, r3
			Cmn.Time[13], Cmn.Time[14], Cmn.Time[16], Cmn.Time[17]);
 8001854:	4b4d      	ldr	r3, [pc, #308]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 8001856:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	sprintf((char *)date, " %c%c:%c%c:%c%c", Cmn.Time[10], Cmn.Time[11],
 800185a:	461a      	mov	r2, r3
			Cmn.Time[13], Cmn.Time[14], Cmn.Time[16], Cmn.Time[17]);
 800185c:	4b4b      	ldr	r3, [pc, #300]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 800185e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
	sprintf((char *)date, " %c%c:%c%c:%c%c", Cmn.Time[10], Cmn.Time[11],
 8001862:	4619      	mov	r1, r3
			Cmn.Time[13], Cmn.Time[14], Cmn.Time[16], Cmn.Time[17]);
 8001864:	4b49      	ldr	r3, [pc, #292]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 8001866:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
	sprintf((char *)date, " %c%c:%c%c:%c%c", Cmn.Time[10], Cmn.Time[11],
 800186a:	461c      	mov	r4, r3
			Cmn.Time[13], Cmn.Time[14], Cmn.Time[16], Cmn.Time[17]);
 800186c:	4b47      	ldr	r3, [pc, #284]	@ (800198c <SSD1306_Time_Information+0x1ac>)
 800186e:	f893 3033 	ldrb.w	r3, [r3, #51]	@ 0x33
	sprintf((char *)date, " %c%c:%c%c:%c%c", Cmn.Time[10], Cmn.Time[11],
 8001872:	4638      	mov	r0, r7
 8001874:	9303      	str	r3, [sp, #12]
 8001876:	9402      	str	r4, [sp, #8]
 8001878:	9101      	str	r1, [sp, #4]
 800187a:	9200      	str	r2, [sp, #0]
 800187c:	4633      	mov	r3, r6
 800187e:	462a      	mov	r2, r5
 8001880:	4943      	ldr	r1, [pc, #268]	@ (8001990 <SSD1306_Time_Information+0x1b0>)
 8001882:	f009 fdef 	bl	800b464 <siprintf>

	switch(Time.week)
 8001886:	4b43      	ldr	r3, [pc, #268]	@ (8001994 <SSD1306_Time_Information+0x1b4>)
 8001888:	78db      	ldrb	r3, [r3, #3]
 800188a:	3b01      	subs	r3, #1
 800188c:	2b06      	cmp	r3, #6
 800188e:	d857      	bhi.n	8001940 <SSD1306_Time_Information+0x160>
 8001890:	a201      	add	r2, pc, #4	@ (adr r2, 8001898 <SSD1306_Time_Information+0xb8>)
 8001892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001896:	bf00      	nop
 8001898:	080018b5 	.word	0x080018b5
 800189c:	080018c9 	.word	0x080018c9
 80018a0:	080018dd 	.word	0x080018dd
 80018a4:	080018f1 	.word	0x080018f1
 80018a8:	08001905 	.word	0x08001905
 80018ac:	08001919 	.word	0x08001919
 80018b0:	0800192d 	.word	0x0800192d
		{
			case 1:
				SSD1306_GotoXY (26,5);
 80018b4:	2105      	movs	r1, #5
 80018b6:	201a      	movs	r0, #26
 80018b8:	f000 fb42 	bl	8001f40 <SSD1306_GotoXY>
				SSD1306_Puts ((char*)"Sunday", &Font_11x18, 1);
 80018bc:	2201      	movs	r2, #1
 80018be:	4936      	ldr	r1, [pc, #216]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 80018c0:	4836      	ldr	r0, [pc, #216]	@ (800199c <SSD1306_Time_Information+0x1bc>)
 80018c2:	f000 fbd1 	bl	8002068 <SSD1306_Puts>
				break;
 80018c6:	e045      	b.n	8001954 <SSD1306_Time_Information+0x174>
			case 2:
				SSD1306_GotoXY (26,5);
 80018c8:	2105      	movs	r1, #5
 80018ca:	201a      	movs	r0, #26
 80018cc:	f000 fb38 	bl	8001f40 <SSD1306_GotoXY>
				SSD1306_Puts ((char*)"Monday", &Font_11x18, 1);
 80018d0:	2201      	movs	r2, #1
 80018d2:	4931      	ldr	r1, [pc, #196]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 80018d4:	4832      	ldr	r0, [pc, #200]	@ (80019a0 <SSD1306_Time_Information+0x1c0>)
 80018d6:	f000 fbc7 	bl	8002068 <SSD1306_Puts>
				break;
 80018da:	e03b      	b.n	8001954 <SSD1306_Time_Information+0x174>
			case 3:
				SSD1306_GotoXY (21,5);
 80018dc:	2105      	movs	r1, #5
 80018de:	2015      	movs	r0, #21
 80018e0:	f000 fb2e 	bl	8001f40 <SSD1306_GotoXY>
				SSD1306_Puts ((char*)"Tuesday", &Font_11x18, 1);
 80018e4:	2201      	movs	r2, #1
 80018e6:	492c      	ldr	r1, [pc, #176]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 80018e8:	482e      	ldr	r0, [pc, #184]	@ (80019a4 <SSD1306_Time_Information+0x1c4>)
 80018ea:	f000 fbbd 	bl	8002068 <SSD1306_Puts>
				break;
 80018ee:	e031      	b.n	8001954 <SSD1306_Time_Information+0x174>
			case 4:
				SSD1306_GotoXY (11,5);
 80018f0:	2105      	movs	r1, #5
 80018f2:	200b      	movs	r0, #11
 80018f4:	f000 fb24 	bl	8001f40 <SSD1306_GotoXY>
				SSD1306_Puts ((char*)"Wednesday", &Font_11x18, 1);
 80018f8:	2201      	movs	r2, #1
 80018fa:	4927      	ldr	r1, [pc, #156]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 80018fc:	482a      	ldr	r0, [pc, #168]	@ (80019a8 <SSD1306_Time_Information+0x1c8>)
 80018fe:	f000 fbb3 	bl	8002068 <SSD1306_Puts>
				break;
 8001902:	e027      	b.n	8001954 <SSD1306_Time_Information+0x174>
			case 5:
				SSD1306_GotoXY (16,5);
 8001904:	2105      	movs	r1, #5
 8001906:	2010      	movs	r0, #16
 8001908:	f000 fb1a 	bl	8001f40 <SSD1306_GotoXY>
				SSD1306_Puts ((char*)"Thursday", &Font_11x18, 1);
 800190c:	2201      	movs	r2, #1
 800190e:	4922      	ldr	r1, [pc, #136]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 8001910:	4826      	ldr	r0, [pc, #152]	@ (80019ac <SSD1306_Time_Information+0x1cc>)
 8001912:	f000 fba9 	bl	8002068 <SSD1306_Puts>
				break;
 8001916:	e01d      	b.n	8001954 <SSD1306_Time_Information+0x174>
			case 6:
				SSD1306_GotoXY (26,5);
 8001918:	2105      	movs	r1, #5
 800191a:	201a      	movs	r0, #26
 800191c:	f000 fb10 	bl	8001f40 <SSD1306_GotoXY>
				SSD1306_Puts ((char*)"Friday", &Font_11x18, 1);
 8001920:	2201      	movs	r2, #1
 8001922:	491d      	ldr	r1, [pc, #116]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 8001924:	4822      	ldr	r0, [pc, #136]	@ (80019b0 <SSD1306_Time_Information+0x1d0>)
 8001926:	f000 fb9f 	bl	8002068 <SSD1306_Puts>
				break;
 800192a:	e013      	b.n	8001954 <SSD1306_Time_Information+0x174>
			case 7:
				SSD1306_GotoXY (16,5);
 800192c:	2105      	movs	r1, #5
 800192e:	2010      	movs	r0, #16
 8001930:	f000 fb06 	bl	8001f40 <SSD1306_GotoXY>
				SSD1306_Puts ((char*)"Saturday", &Font_11x18, 1);
 8001934:	2201      	movs	r2, #1
 8001936:	4918      	ldr	r1, [pc, #96]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 8001938:	481e      	ldr	r0, [pc, #120]	@ (80019b4 <SSD1306_Time_Information+0x1d4>)
 800193a:	f000 fb95 	bl	8002068 <SSD1306_Puts>
				break;
 800193e:	e009      	b.n	8001954 <SSD1306_Time_Information+0x174>
			default:
				SSD1306_GotoXY (35,5);
 8001940:	2105      	movs	r1, #5
 8001942:	2023      	movs	r0, #35	@ 0x23
 8001944:	f000 fafc 	bl	8001f40 <SSD1306_GotoXY>
				SSD1306_Puts ((char*)"Time", &Font_11x18, 1);
 8001948:	2201      	movs	r2, #1
 800194a:	4913      	ldr	r1, [pc, #76]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 800194c:	481a      	ldr	r0, [pc, #104]	@ (80019b8 <SSD1306_Time_Information+0x1d8>)
 800194e:	f000 fb8b 	bl	8002068 <SSD1306_Puts>
				break;
 8001952:	bf00      	nop
		}

	SSD1306_GotoXY (5,25);
 8001954:	2119      	movs	r1, #25
 8001956:	2005      	movs	r0, #5
 8001958:	f000 faf2 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)time, &Font_11x18, 1);
 800195c:	f107 030c 	add.w	r3, r7, #12
 8001960:	2201      	movs	r2, #1
 8001962:	490d      	ldr	r1, [pc, #52]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fb7f 	bl	8002068 <SSD1306_Puts>

	SSD1306_GotoXY (5,45);
 800196a:	212d      	movs	r1, #45	@ 0x2d
 800196c:	2005      	movs	r0, #5
 800196e:	f000 fae7 	bl	8001f40 <SSD1306_GotoXY>
	SSD1306_Puts ((char*)date, &Font_11x18, 1);
 8001972:	463b      	mov	r3, r7
 8001974:	2201      	movs	r2, #1
 8001976:	4908      	ldr	r1, [pc, #32]	@ (8001998 <SSD1306_Time_Information+0x1b8>)
 8001978:	4618      	mov	r0, r3
 800197a:	f000 fb75 	bl	8002068 <SSD1306_Puts>

	SSD1306_UpdateScreen();
 800197e:	f000 fa3b 	bl	8001df8 <SSD1306_UpdateScreen>
}
 8001982:	bf00      	nop
 8001984:	371c      	adds	r7, #28
 8001986:	46bd      	mov	sp, r7
 8001988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800198a:	bf00      	nop
 800198c:	20000214 	.word	0x20000214
 8001990:	0800be64 	.word	0x0800be64
 8001994:	20000280 	.word	0x20000280
 8001998:	20000008 	.word	0x20000008
 800199c:	0800be74 	.word	0x0800be74
 80019a0:	0800be7c 	.word	0x0800be7c
 80019a4:	0800be84 	.word	0x0800be84
 80019a8:	0800be8c 	.word	0x0800be8c
 80019ac:	0800be98 	.word	0x0800be98
 80019b0:	0800bea4 	.word	0x0800bea4
 80019b4:	0800beac 	.word	0x0800beac
 80019b8:	0800beb8 	.word	0x0800beb8

080019bc <SSD1306_Relay1_Information>:


void SSD1306_Relay1_Information()
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
	uint8_t Data1[5];
	uint8_t Data2[5];

	for(uint8_t i=0; i<5; i++)
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
 80019c6:	e00b      	b.n	80019e0 <SSD1306_Relay1_Information+0x24>
		Data1[i] = 	EE.Rly_R1[i];
 80019c8:	7bfa      	ldrb	r2, [r7, #15]
 80019ca:	7bfb      	ldrb	r3, [r7, #15]
 80019cc:	4946      	ldr	r1, [pc, #280]	@ (8001ae8 <SSD1306_Relay1_Information+0x12c>)
 80019ce:	440a      	add	r2, r1
 80019d0:	7e92      	ldrb	r2, [r2, #26]
 80019d2:	3310      	adds	r3, #16
 80019d4:	443b      	add	r3, r7
 80019d6:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<5; i++)
 80019da:	7bfb      	ldrb	r3, [r7, #15]
 80019dc:	3301      	adds	r3, #1
 80019de:	73fb      	strb	r3, [r7, #15]
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	d9f0      	bls.n	80019c8 <SSD1306_Relay1_Information+0xc>

	for(uint8_t i=0; i<5; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	73bb      	strb	r3, [r7, #14]
 80019ea:	e00c      	b.n	8001a06 <SSD1306_Relay1_Information+0x4a>
		Data2[i] = 	EE.Rly_R1[i+6];
 80019ec:	7bbb      	ldrb	r3, [r7, #14]
 80019ee:	1d9a      	adds	r2, r3, #6
 80019f0:	7bbb      	ldrb	r3, [r7, #14]
 80019f2:	493d      	ldr	r1, [pc, #244]	@ (8001ae8 <SSD1306_Relay1_Information+0x12c>)
 80019f4:	440a      	add	r2, r1
 80019f6:	7e92      	ldrb	r2, [r2, #26]
 80019f8:	3310      	adds	r3, #16
 80019fa:	443b      	add	r3, r7
 80019fc:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i=0; i<5; i++)
 8001a00:	7bbb      	ldrb	r3, [r7, #14]
 8001a02:	3301      	adds	r3, #1
 8001a04:	73bb      	strb	r3, [r7, #14]
 8001a06:	7bbb      	ldrb	r3, [r7, #14]
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d9ef      	bls.n	80019ec <SSD1306_Relay1_Information+0x30>


	if(SSD_1306.Inc2%2)
 8001a0c:	4b37      	ldr	r3, [pc, #220]	@ (8001aec <SSD1306_Relay1_Information+0x130>)
 8001a0e:	785b      	ldrb	r3, [r3, #1]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d030      	beq.n	8001a7c <SSD1306_Relay1_Information+0xc0>
		{
			SSD1306_GotoXY (5,0);
 8001a1a:	2100      	movs	r1, #0
 8001a1c:	2005      	movs	r0, #5
 8001a1e:	f000 fa8f 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"Relay 1", &Font_16x26, 1);
 8001a22:	2201      	movs	r2, #1
 8001a24:	4932      	ldr	r1, [pc, #200]	@ (8001af0 <SSD1306_Relay1_Information+0x134>)
 8001a26:	4833      	ldr	r0, [pc, #204]	@ (8001af4 <SSD1306_Relay1_Information+0x138>)
 8001a28:	f000 fb1e 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (10,32);
 8001a2c:	2120      	movs	r1, #32
 8001a2e:	200a      	movs	r0, #10
 8001a30:	f000 fa86 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"On Time", &Font_7x10, 1);
 8001a34:	2201      	movs	r2, #1
 8001a36:	4930      	ldr	r1, [pc, #192]	@ (8001af8 <SSD1306_Relay1_Information+0x13c>)
 8001a38:	4830      	ldr	r0, [pc, #192]	@ (8001afc <SSD1306_Relay1_Information+0x140>)
 8001a3a:	f000 fb15 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (70,27);
 8001a3e:	211b      	movs	r1, #27
 8001a40:	2046      	movs	r0, #70	@ 0x46
 8001a42:	f000 fa7d 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)Data1, &Font_11x18, 1);
 8001a46:	f107 0308 	add.w	r3, r7, #8
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	492c      	ldr	r1, [pc, #176]	@ (8001b00 <SSD1306_Relay1_Information+0x144>)
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fb0a 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (5,50);
 8001a54:	2132      	movs	r1, #50	@ 0x32
 8001a56:	2005      	movs	r0, #5
 8001a58:	f000 fa72 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"Off Time", &Font_7x10, 1);
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4926      	ldr	r1, [pc, #152]	@ (8001af8 <SSD1306_Relay1_Information+0x13c>)
 8001a60:	4828      	ldr	r0, [pc, #160]	@ (8001b04 <SSD1306_Relay1_Information+0x148>)
 8001a62:	f000 fb01 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (70,45);
 8001a66:	212d      	movs	r1, #45	@ 0x2d
 8001a68:	2046      	movs	r0, #70	@ 0x46
 8001a6a:	f000 fa69 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)Data2, &Font_11x18, 1);
 8001a6e:	463b      	mov	r3, r7
 8001a70:	2201      	movs	r2, #1
 8001a72:	4923      	ldr	r1, [pc, #140]	@ (8001b00 <SSD1306_Relay1_Information+0x144>)
 8001a74:	4618      	mov	r0, r3
 8001a76:	f000 faf7 	bl	8002068 <SSD1306_Puts>
 8001a7a:	e02f      	b.n	8001adc <SSD1306_Relay1_Information+0x120>
		}
	else
		{
			SSD1306_GotoXY (1,7);
 8001a7c:	2107      	movs	r1, #7
 8001a7e:	2001      	movs	r0, #1
 8001a80:	f000 fa5e 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"ON1", &Font_11x18, 1);
 8001a84:	2201      	movs	r2, #1
 8001a86:	491e      	ldr	r1, [pc, #120]	@ (8001b00 <SSD1306_Relay1_Information+0x144>)
 8001a88:	481f      	ldr	r0, [pc, #124]	@ (8001b08 <SSD1306_Relay1_Information+0x14c>)
 8001a8a:	f000 faed 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (40,3);
 8001a8e:	2103      	movs	r1, #3
 8001a90:	2028      	movs	r0, #40	@ 0x28
 8001a92:	f000 fa55 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)Data1, &Font_16x26, 1);
 8001a96:	f107 0308 	add.w	r3, r7, #8
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	4914      	ldr	r1, [pc, #80]	@ (8001af0 <SSD1306_Relay1_Information+0x134>)
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 fae2 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (1,27);
 8001aa4:	211b      	movs	r1, #27
 8001aa6:	2001      	movs	r0, #1
 8001aa8:	f000 fa4a 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"Relay", &Font_7x10, 1);
 8001aac:	2201      	movs	r2, #1
 8001aae:	4912      	ldr	r1, [pc, #72]	@ (8001af8 <SSD1306_Relay1_Information+0x13c>)
 8001ab0:	4816      	ldr	r0, [pc, #88]	@ (8001b0c <SSD1306_Relay1_Information+0x150>)
 8001ab2:	f000 fad9 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (1,41);
 8001ab6:	2129      	movs	r1, #41	@ 0x29
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f000 fa41 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"OFF", &Font_11x18, 1);
 8001abe:	2201      	movs	r2, #1
 8001ac0:	490f      	ldr	r1, [pc, #60]	@ (8001b00 <SSD1306_Relay1_Information+0x144>)
 8001ac2:	4813      	ldr	r0, [pc, #76]	@ (8001b10 <SSD1306_Relay1_Information+0x154>)
 8001ac4:	f000 fad0 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (40,37);
 8001ac8:	2125      	movs	r1, #37	@ 0x25
 8001aca:	2028      	movs	r0, #40	@ 0x28
 8001acc:	f000 fa38 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)Data2, &Font_16x26, 1);
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	4906      	ldr	r1, [pc, #24]	@ (8001af0 <SSD1306_Relay1_Information+0x134>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f000 fac6 	bl	8002068 <SSD1306_Puts>
		}


	SSD1306_UpdateScreen();
 8001adc:	f000 f98c 	bl	8001df8 <SSD1306_UpdateScreen>
}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	2000024c 	.word	0x2000024c
 8001aec:	2000029c 	.word	0x2000029c
 8001af0:	20000010 	.word	0x20000010
 8001af4:	0800bec0 	.word	0x0800bec0
 8001af8:	20000000 	.word	0x20000000
 8001afc:	0800bec8 	.word	0x0800bec8
 8001b00:	20000008 	.word	0x20000008
 8001b04:	0800bed0 	.word	0x0800bed0
 8001b08:	0800bedc 	.word	0x0800bedc
 8001b0c:	0800bee0 	.word	0x0800bee0
 8001b10:	0800bee8 	.word	0x0800bee8

08001b14 <SSD1306_Relay2_Information>:


void SSD1306_Relay2_Information()
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
	uint8_t Data1[5];
	uint8_t Data2[5];

	for(uint8_t i=0; i<5; i++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	73fb      	strb	r3, [r7, #15]
 8001b1e:	e00c      	b.n	8001b3a <SSD1306_Relay2_Information+0x26>
		Data1[i] = 	EE.Rly_R2[i];
 8001b20:	7bfa      	ldrb	r2, [r7, #15]
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	4947      	ldr	r1, [pc, #284]	@ (8001c44 <SSD1306_Relay2_Information+0x130>)
 8001b26:	440a      	add	r2, r1
 8001b28:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8001b2c:	3310      	adds	r3, #16
 8001b2e:	443b      	add	r3, r7
 8001b30:	f803 2c08 	strb.w	r2, [r3, #-8]
	for(uint8_t i=0; i<5; i++)
 8001b34:	7bfb      	ldrb	r3, [r7, #15]
 8001b36:	3301      	adds	r3, #1
 8001b38:	73fb      	strb	r3, [r7, #15]
 8001b3a:	7bfb      	ldrb	r3, [r7, #15]
 8001b3c:	2b04      	cmp	r3, #4
 8001b3e:	d9ef      	bls.n	8001b20 <SSD1306_Relay2_Information+0xc>

	for(uint8_t i=0; i<5; i++)
 8001b40:	2300      	movs	r3, #0
 8001b42:	73bb      	strb	r3, [r7, #14]
 8001b44:	e00d      	b.n	8001b62 <SSD1306_Relay2_Information+0x4e>
		Data2[i] = 	EE.Rly_R2[i+6];
 8001b46:	7bbb      	ldrb	r3, [r7, #14]
 8001b48:	1d9a      	adds	r2, r3, #6
 8001b4a:	7bbb      	ldrb	r3, [r7, #14]
 8001b4c:	493d      	ldr	r1, [pc, #244]	@ (8001c44 <SSD1306_Relay2_Information+0x130>)
 8001b4e:	440a      	add	r2, r1
 8001b50:	f892 2026 	ldrb.w	r2, [r2, #38]	@ 0x26
 8001b54:	3310      	adds	r3, #16
 8001b56:	443b      	add	r3, r7
 8001b58:	f803 2c10 	strb.w	r2, [r3, #-16]
	for(uint8_t i=0; i<5; i++)
 8001b5c:	7bbb      	ldrb	r3, [r7, #14]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	73bb      	strb	r3, [r7, #14]
 8001b62:	7bbb      	ldrb	r3, [r7, #14]
 8001b64:	2b04      	cmp	r3, #4
 8001b66:	d9ee      	bls.n	8001b46 <SSD1306_Relay2_Information+0x32>

	if(SSD_1306.Inc2%2)
 8001b68:	4b37      	ldr	r3, [pc, #220]	@ (8001c48 <SSD1306_Relay2_Information+0x134>)
 8001b6a:	785b      	ldrb	r3, [r3, #1]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d030      	beq.n	8001bd8 <SSD1306_Relay2_Information+0xc4>
		{
			SSD1306_GotoXY (5,0);
 8001b76:	2100      	movs	r1, #0
 8001b78:	2005      	movs	r0, #5
 8001b7a:	f000 f9e1 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"Relay 2", &Font_16x26, 1);
 8001b7e:	2201      	movs	r2, #1
 8001b80:	4932      	ldr	r1, [pc, #200]	@ (8001c4c <SSD1306_Relay2_Information+0x138>)
 8001b82:	4833      	ldr	r0, [pc, #204]	@ (8001c50 <SSD1306_Relay2_Information+0x13c>)
 8001b84:	f000 fa70 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (10,32);
 8001b88:	2120      	movs	r1, #32
 8001b8a:	200a      	movs	r0, #10
 8001b8c:	f000 f9d8 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"On Time", &Font_7x10, 1);
 8001b90:	2201      	movs	r2, #1
 8001b92:	4930      	ldr	r1, [pc, #192]	@ (8001c54 <SSD1306_Relay2_Information+0x140>)
 8001b94:	4830      	ldr	r0, [pc, #192]	@ (8001c58 <SSD1306_Relay2_Information+0x144>)
 8001b96:	f000 fa67 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (70,27);
 8001b9a:	211b      	movs	r1, #27
 8001b9c:	2046      	movs	r0, #70	@ 0x46
 8001b9e:	f000 f9cf 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)Data1, &Font_11x18, 1);
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	492c      	ldr	r1, [pc, #176]	@ (8001c5c <SSD1306_Relay2_Information+0x148>)
 8001baa:	4618      	mov	r0, r3
 8001bac:	f000 fa5c 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (5,50);
 8001bb0:	2132      	movs	r1, #50	@ 0x32
 8001bb2:	2005      	movs	r0, #5
 8001bb4:	f000 f9c4 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"Off Time", &Font_7x10, 1);
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4926      	ldr	r1, [pc, #152]	@ (8001c54 <SSD1306_Relay2_Information+0x140>)
 8001bbc:	4828      	ldr	r0, [pc, #160]	@ (8001c60 <SSD1306_Relay2_Information+0x14c>)
 8001bbe:	f000 fa53 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (70,45);
 8001bc2:	212d      	movs	r1, #45	@ 0x2d
 8001bc4:	2046      	movs	r0, #70	@ 0x46
 8001bc6:	f000 f9bb 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)Data2, &Font_11x18, 1);
 8001bca:	463b      	mov	r3, r7
 8001bcc:	2201      	movs	r2, #1
 8001bce:	4923      	ldr	r1, [pc, #140]	@ (8001c5c <SSD1306_Relay2_Information+0x148>)
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 fa49 	bl	8002068 <SSD1306_Puts>
 8001bd6:	e02f      	b.n	8001c38 <SSD1306_Relay2_Information+0x124>
		}
	else
		{
			SSD1306_GotoXY (1,7);
 8001bd8:	2107      	movs	r1, #7
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f000 f9b0 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"ON2", &Font_11x18, 1);
 8001be0:	2201      	movs	r2, #1
 8001be2:	491e      	ldr	r1, [pc, #120]	@ (8001c5c <SSD1306_Relay2_Information+0x148>)
 8001be4:	481f      	ldr	r0, [pc, #124]	@ (8001c64 <SSD1306_Relay2_Information+0x150>)
 8001be6:	f000 fa3f 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (40,3);
 8001bea:	2103      	movs	r1, #3
 8001bec:	2028      	movs	r0, #40	@ 0x28
 8001bee:	f000 f9a7 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)Data1, &Font_16x26, 1);
 8001bf2:	f107 0308 	add.w	r3, r7, #8
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4914      	ldr	r1, [pc, #80]	@ (8001c4c <SSD1306_Relay2_Information+0x138>)
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fa34 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (1,27);
 8001c00:	211b      	movs	r1, #27
 8001c02:	2001      	movs	r0, #1
 8001c04:	f000 f99c 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"Relay", &Font_7x10, 1);
 8001c08:	2201      	movs	r2, #1
 8001c0a:	4912      	ldr	r1, [pc, #72]	@ (8001c54 <SSD1306_Relay2_Information+0x140>)
 8001c0c:	4816      	ldr	r0, [pc, #88]	@ (8001c68 <SSD1306_Relay2_Information+0x154>)
 8001c0e:	f000 fa2b 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (1,41);
 8001c12:	2129      	movs	r1, #41	@ 0x29
 8001c14:	2001      	movs	r0, #1
 8001c16:	f000 f993 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)"OFF", &Font_11x18, 1);
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	490f      	ldr	r1, [pc, #60]	@ (8001c5c <SSD1306_Relay2_Information+0x148>)
 8001c1e:	4813      	ldr	r0, [pc, #76]	@ (8001c6c <SSD1306_Relay2_Information+0x158>)
 8001c20:	f000 fa22 	bl	8002068 <SSD1306_Puts>

			SSD1306_GotoXY (40,37);
 8001c24:	2125      	movs	r1, #37	@ 0x25
 8001c26:	2028      	movs	r0, #40	@ 0x28
 8001c28:	f000 f98a 	bl	8001f40 <SSD1306_GotoXY>
			SSD1306_Puts ((char*)Data2, &Font_16x26, 1);
 8001c2c:	463b      	mov	r3, r7
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4906      	ldr	r1, [pc, #24]	@ (8001c4c <SSD1306_Relay2_Information+0x138>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fa18 	bl	8002068 <SSD1306_Puts>
		}


	SSD1306_UpdateScreen();
 8001c38:	f000 f8de 	bl	8001df8 <SSD1306_UpdateScreen>
}
 8001c3c:	bf00      	nop
 8001c3e:	3710      	adds	r7, #16
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	2000024c 	.word	0x2000024c
 8001c48:	2000029c 	.word	0x2000029c
 8001c4c:	20000010 	.word	0x20000010
 8001c50:	0800beec 	.word	0x0800beec
 8001c54:	20000000 	.word	0x20000000
 8001c58:	0800bec8 	.word	0x0800bec8
 8001c5c:	20000008 	.word	0x20000008
 8001c60:	0800bed0 	.word	0x0800bed0
 8001c64:	0800bef4 	.word	0x0800bef4
 8001c68:	0800bee0 	.word	0x0800bee0
 8001c6c:	0800bee8 	.word	0x0800bee8

08001c70 <SSD1306_Init>:
    }
}


uint8_t SSD1306_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
	/* Init I2C */
	ssd1306_I2C_Init();
 8001c76:	f000 fa25 	bl	80020c4 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK)
 8001c7a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001c7e:	2201      	movs	r2, #1
 8001c80:	2178      	movs	r1, #120	@ 0x78
 8001c82:	485b      	ldr	r0, [pc, #364]	@ (8001df0 <SSD1306_Init+0x180>)
 8001c84:	f002 f884 	bl	8003d90 <HAL_I2C_IsDeviceReady>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SSD1306_Init+0x22>
		{
			/* Return false */
			return 0;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	e0a9      	b.n	8001de6 <SSD1306_Init+0x176>
		}

	/* A little delay */
	uint32_t p = 2500;
 8001c92:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001c96:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c98:	e002      	b.n	8001ca0 <SSD1306_Init+0x30>
		p--;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f9      	bne.n	8001c9a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001ca6:	22ae      	movs	r2, #174	@ 0xae
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2078      	movs	r0, #120	@ 0x78
 8001cac:	f000 fa84 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	2078      	movs	r0, #120	@ 0x78
 8001cb6:	f000 fa7f 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001cba:	2210      	movs	r2, #16
 8001cbc:	2100      	movs	r1, #0
 8001cbe:	2078      	movs	r0, #120	@ 0x78
 8001cc0:	f000 fa7a 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001cc4:	22b0      	movs	r2, #176	@ 0xb0
 8001cc6:	2100      	movs	r1, #0
 8001cc8:	2078      	movs	r0, #120	@ 0x78
 8001cca:	f000 fa75 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001cce:	2200      	movs	r2, #0
 8001cd0:	2100      	movs	r1, #0
 8001cd2:	2078      	movs	r0, #120	@ 0x78
 8001cd4:	f000 fa70 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001cd8:	2210      	movs	r2, #16
 8001cda:	2100      	movs	r1, #0
 8001cdc:	2078      	movs	r0, #120	@ 0x78
 8001cde:	f000 fa6b 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001ce2:	2240      	movs	r2, #64	@ 0x40
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	2078      	movs	r0, #120	@ 0x78
 8001ce8:	f000 fa66 	bl	80021b8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xC0); //Set COM Output Scan Direction , 0xC0 or 0xC8
 8001cec:	22c0      	movs	r2, #192	@ 0xc0
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2078      	movs	r0, #120	@ 0x78
 8001cf2:	f000 fa61 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA0); //--set segment re-map 0 to 127 , 0xA0 or 0xA1
 8001cf6:	22a0      	movs	r2, #160	@ 0xa0
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	2078      	movs	r0, #120	@ 0x78
 8001cfc:	f000 fa5c 	bl	80021b8 <ssd1306_I2C_Write>
	// 0xC0 & 0xA0 or 0xC8 & 0xA1, Orelse it will Mirror the Contents

	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001d00:	2281      	movs	r2, #129	@ 0x81
 8001d02:	2100      	movs	r1, #0
 8001d04:	2078      	movs	r0, #120	@ 0x78
 8001d06:	f000 fa57 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); // Max 0xFF, Brightness
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2078      	movs	r0, #120	@ 0x78
 8001d10:	f000 fa52 	bl	80021b8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001d14:	22a6      	movs	r2, #166	@ 0xa6
 8001d16:	2100      	movs	r1, #0
 8001d18:	2078      	movs	r0, #120	@ 0x78
 8001d1a:	f000 fa4d 	bl	80021b8 <ssd1306_I2C_Write>
	//SSD1306_WRITECOMMAND(0xA7); //--set Inverted display

	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001d1e:	22a8      	movs	r2, #168	@ 0xa8
 8001d20:	2100      	movs	r1, #0
 8001d22:	2078      	movs	r0, #120	@ 0x78
 8001d24:	f000 fa48 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001d28:	223f      	movs	r2, #63	@ 0x3f
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	2078      	movs	r0, #120	@ 0x78
 8001d2e:	f000 fa43 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001d32:	22a4      	movs	r2, #164	@ 0xa4
 8001d34:	2100      	movs	r1, #0
 8001d36:	2078      	movs	r0, #120	@ 0x78
 8001d38:	f000 fa3e 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001d3c:	22d3      	movs	r2, #211	@ 0xd3
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2078      	movs	r0, #120	@ 0x78
 8001d42:	f000 fa39 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001d46:	2200      	movs	r2, #0
 8001d48:	2100      	movs	r1, #0
 8001d4a:	2078      	movs	r0, #120	@ 0x78
 8001d4c:	f000 fa34 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001d50:	22d5      	movs	r2, #213	@ 0xd5
 8001d52:	2100      	movs	r1, #0
 8001d54:	2078      	movs	r0, #120	@ 0x78
 8001d56:	f000 fa2f 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001d5a:	22f0      	movs	r2, #240	@ 0xf0
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2078      	movs	r0, #120	@ 0x78
 8001d60:	f000 fa2a 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001d64:	22d9      	movs	r2, #217	@ 0xd9
 8001d66:	2100      	movs	r1, #0
 8001d68:	2078      	movs	r0, #120	@ 0x78
 8001d6a:	f000 fa25 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001d6e:	2222      	movs	r2, #34	@ 0x22
 8001d70:	2100      	movs	r1, #0
 8001d72:	2078      	movs	r0, #120	@ 0x78
 8001d74:	f000 fa20 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001d78:	22da      	movs	r2, #218	@ 0xda
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	2078      	movs	r0, #120	@ 0x78
 8001d7e:	f000 fa1b 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001d82:	2212      	movs	r2, #18
 8001d84:	2100      	movs	r1, #0
 8001d86:	2078      	movs	r0, #120	@ 0x78
 8001d88:	f000 fa16 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001d8c:	22db      	movs	r2, #219	@ 0xdb
 8001d8e:	2100      	movs	r1, #0
 8001d90:	2078      	movs	r0, #120	@ 0x78
 8001d92:	f000 fa11 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001d96:	2220      	movs	r2, #32
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2078      	movs	r0, #120	@ 0x78
 8001d9c:	f000 fa0c 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001da0:	228d      	movs	r2, #141	@ 0x8d
 8001da2:	2100      	movs	r1, #0
 8001da4:	2078      	movs	r0, #120	@ 0x78
 8001da6:	f000 fa07 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001daa:	2214      	movs	r2, #20
 8001dac:	2100      	movs	r1, #0
 8001dae:	2078      	movs	r0, #120	@ 0x78
 8001db0:	f000 fa02 	bl	80021b8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001db4:	22af      	movs	r2, #175	@ 0xaf
 8001db6:	2100      	movs	r1, #0
 8001db8:	2078      	movs	r0, #120	@ 0x78
 8001dba:	f000 f9fd 	bl	80021b8 <ssd1306_I2C_Write>

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001dbe:	222e      	movs	r2, #46	@ 0x2e
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2078      	movs	r0, #120	@ 0x78
 8001dc4:	f000 f9f8 	bl	80021b8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f000 f843 	bl	8001e54 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001dce:	f000 f813 	bl	8001df8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <SSD1306_Init+0x184>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <SSD1306_Init+0x184>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <SSD1306_Init+0x184>)
 8001de0:	2201      	movs	r2, #1
 8001de2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20000714 	.word	0x20000714
 8001df4:	200002a0 	.word	0x200002a0

08001df8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	71fb      	strb	r3, [r7, #7]
 8001e02:	e01d      	b.n	8001e40 <SSD1306_UpdateScreen+0x48>
	{
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	3b50      	subs	r3, #80	@ 0x50
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	2078      	movs	r0, #120	@ 0x78
 8001e10:	f000 f9d2 	bl	80021b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001e14:	2200      	movs	r2, #0
 8001e16:	2100      	movs	r1, #0
 8001e18:	2078      	movs	r0, #120	@ 0x78
 8001e1a:	f000 f9cd 	bl	80021b8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001e1e:	2210      	movs	r2, #16
 8001e20:	2100      	movs	r1, #0
 8001e22:	2078      	movs	r0, #120	@ 0x78
 8001e24:	f000 f9c8 	bl	80021b8 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001e28:	79fb      	ldrb	r3, [r7, #7]
 8001e2a:	01db      	lsls	r3, r3, #7
 8001e2c:	4a08      	ldr	r2, [pc, #32]	@ (8001e50 <SSD1306_UpdateScreen+0x58>)
 8001e2e:	441a      	add	r2, r3
 8001e30:	2380      	movs	r3, #128	@ 0x80
 8001e32:	2140      	movs	r1, #64	@ 0x40
 8001e34:	2078      	movs	r0, #120	@ 0x78
 8001e36:	f000 f959 	bl	80020ec <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++)
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b07      	cmp	r3, #7
 8001e44:	d9de      	bls.n	8001e04 <SSD1306_UpdateScreen+0xc>
	}
}
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	200002a8 	.word	0x200002a8

08001e54 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++)
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
}

void SSD1306_Fill(SSD1306_COLOR_t color)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <SSD1306_Fill+0x14>
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <SSD1306_Fill+0x16>
 8001e68:	23ff      	movs	r3, #255	@ 0xff
 8001e6a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <SSD1306_Fill+0x2c>)
 8001e72:	f009 fb17 	bl	800b4a4 <memset>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	200002a8 	.word	0x200002a8

08001e84 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	80fb      	strh	r3, [r7, #6]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	80bb      	strh	r3, [r7, #4]
 8001e92:	4613      	mov	r3, r2
 8001e94:	70fb      	strb	r3, [r7, #3]
	if(x >= SSD1306_WIDTH ||y >= SSD1306_HEIGHT)
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	2b7f      	cmp	r3, #127	@ 0x7f
 8001e9a:	d848      	bhi.n	8001f2e <SSD1306_DrawPixel+0xaa>
 8001e9c:	88bb      	ldrh	r3, [r7, #4]
 8001e9e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001ea0:	d845      	bhi.n	8001f2e <SSD1306_DrawPixel+0xaa>
		return;	/* Error */

	/* Check if pixels are inverted */
	if (SSD1306.Inverted)
 8001ea2:	4b25      	ldr	r3, [pc, #148]	@ (8001f38 <SSD1306_DrawPixel+0xb4>)
 8001ea4:	791b      	ldrb	r3, [r3, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d006      	beq.n	8001eb8 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001eaa:	78fb      	ldrb	r3, [r7, #3]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	bf0c      	ite	eq
 8001eb0:	2301      	moveq	r3, #1
 8001eb2:	2300      	movne	r3, #0
 8001eb4:	b2db      	uxtb	r3, r3
 8001eb6:	70fb      	strb	r3, [r7, #3]

	/* Set color */
	if (color == SSD1306_COLOR_WHITE)
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d11a      	bne.n	8001ef4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ebe:	88fa      	ldrh	r2, [r7, #6]
 8001ec0:	88bb      	ldrh	r3, [r7, #4]
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	b298      	uxth	r0, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	01db      	lsls	r3, r3, #7
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	@ (8001f3c <SSD1306_DrawPixel+0xb8>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	b25a      	sxtb	r2, r3
 8001ed2:	88bb      	ldrh	r3, [r7, #4]
 8001ed4:	f003 0307 	and.w	r3, r3, #7
 8001ed8:	2101      	movs	r1, #1
 8001eda:	fa01 f303 	lsl.w	r3, r1, r3
 8001ede:	b25b      	sxtb	r3, r3
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	b259      	sxtb	r1, r3
 8001ee4:	88fa      	ldrh	r2, [r7, #6]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	01db      	lsls	r3, r3, #7
 8001eea:	4413      	add	r3, r2
 8001eec:	b2c9      	uxtb	r1, r1
 8001eee:	4a13      	ldr	r2, [pc, #76]	@ (8001f3c <SSD1306_DrawPixel+0xb8>)
 8001ef0:	54d1      	strb	r1, [r2, r3]
 8001ef2:	e01d      	b.n	8001f30 <SSD1306_DrawPixel+0xac>
	else
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001ef4:	88fa      	ldrh	r2, [r7, #6]
 8001ef6:	88bb      	ldrh	r3, [r7, #4]
 8001ef8:	08db      	lsrs	r3, r3, #3
 8001efa:	b298      	uxth	r0, r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	01db      	lsls	r3, r3, #7
 8001f00:	4413      	add	r3, r2
 8001f02:	4a0e      	ldr	r2, [pc, #56]	@ (8001f3c <SSD1306_DrawPixel+0xb8>)
 8001f04:	5cd3      	ldrb	r3, [r2, r3]
 8001f06:	b25a      	sxtb	r2, r3
 8001f08:	88bb      	ldrh	r3, [r7, #4]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	2101      	movs	r1, #1
 8001f10:	fa01 f303 	lsl.w	r3, r1, r3
 8001f14:	b25b      	sxtb	r3, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	b25b      	sxtb	r3, r3
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	b259      	sxtb	r1, r3
 8001f1e:	88fa      	ldrh	r2, [r7, #6]
 8001f20:	4603      	mov	r3, r0
 8001f22:	01db      	lsls	r3, r3, #7
 8001f24:	4413      	add	r3, r2
 8001f26:	b2c9      	uxtb	r1, r1
 8001f28:	4a04      	ldr	r2, [pc, #16]	@ (8001f3c <SSD1306_DrawPixel+0xb8>)
 8001f2a:	54d1      	strb	r1, [r2, r3]
 8001f2c:	e000      	b.n	8001f30 <SSD1306_DrawPixel+0xac>
		return;	/* Error */
 8001f2e:	bf00      	nop
}
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr
 8001f38:	200002a0 	.word	0x200002a0
 8001f3c:	200002a8 	.word	0x200002a8

08001f40 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	4603      	mov	r3, r0
 8001f48:	460a      	mov	r2, r1
 8001f4a:	80fb      	strh	r3, [r7, #6]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001f50:	4a05      	ldr	r2, [pc, #20]	@ (8001f68 <SSD1306_GotoXY+0x28>)
 8001f52:	88fb      	ldrh	r3, [r7, #6]
 8001f54:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001f56:	4a04      	ldr	r2, [pc, #16]	@ (8001f68 <SSD1306_GotoXY+0x28>)
 8001f58:	88bb      	ldrh	r3, [r7, #4]
 8001f5a:	8053      	strh	r3, [r2, #2]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bc80      	pop	{r7}
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	200002a0 	.word	0x200002a0

08001f6c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	4603      	mov	r3, r0
 8001f74:	6039      	str	r1, [r7, #0]
 8001f76:	71fb      	strb	r3, [r7, #7]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001f7c:	4b39      	ldr	r3, [pc, #228]	@ (8002064 <SSD1306_Putc+0xf8>)
 8001f7e:	881b      	ldrh	r3, [r3, #0]
 8001f80:	461a      	mov	r2, r3
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	4413      	add	r3, r2
	if (
 8001f88:	2b7f      	cmp	r3, #127	@ 0x7f
 8001f8a:	dc07      	bgt.n	8001f9c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001f8c:	4b35      	ldr	r3, [pc, #212]	@ (8002064 <SSD1306_Putc+0xf8>)
 8001f8e:	885b      	ldrh	r3, [r3, #2]
 8001f90:	461a      	mov	r2, r3
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	785b      	ldrb	r3, [r3, #1]
 8001f96:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001f98:	2b3f      	cmp	r3, #63	@ 0x3f
 8001f9a:	dd01      	ble.n	8001fa0 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e05d      	b.n	800205c <SSD1306_Putc+0xf0>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++)
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	e04b      	b.n	800203e <SSD1306_Putc+0xd2>
		{
			b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	685a      	ldr	r2, [r3, #4]
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	3b20      	subs	r3, #32
 8001fae:	6839      	ldr	r1, [r7, #0]
 8001fb0:	7849      	ldrb	r1, [r1, #1]
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	440b      	add	r3, r1
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	4413      	add	r3, r2
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	60fb      	str	r3, [r7, #12]
			for (j = 0; j < Font->FontWidth; j++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	e030      	b.n	800202c <SSD1306_Putc+0xc0>
				{
					if ((b << j) & 0x8000)
 8001fca:	68fa      	ldr	r2, [r7, #12]
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d010      	beq.n	8001ffc <SSD1306_Putc+0x90>
						SSD1306_DrawPixel(SSD1306.CurrentX + j,
 8001fda:	4b22      	ldr	r3, [pc, #136]	@ (8002064 <SSD1306_Putc+0xf8>)
 8001fdc:	881a      	ldrh	r2, [r3, #0]
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	4413      	add	r3, r2
 8001fe4:	b298      	uxth	r0, r3
								(SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001fe6:	4b1f      	ldr	r3, [pc, #124]	@ (8002064 <SSD1306_Putc+0xf8>)
 8001fe8:	885a      	ldrh	r2, [r3, #2]
						SSD1306_DrawPixel(SSD1306.CurrentX + j,
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	79ba      	ldrb	r2, [r7, #6]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f7ff ff45 	bl	8001e84 <SSD1306_DrawPixel>
 8001ffa:	e014      	b.n	8002026 <SSD1306_Putc+0xba>
					else
						SSD1306_DrawPixel(SSD1306.CurrentX + j,
 8001ffc:	4b19      	ldr	r3, [pc, #100]	@ (8002064 <SSD1306_Putc+0xf8>)
 8001ffe:	881a      	ldrh	r2, [r3, #0]
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4413      	add	r3, r2
 8002006:	b298      	uxth	r0, r3
								(SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002008:	4b16      	ldr	r3, [pc, #88]	@ (8002064 <SSD1306_Putc+0xf8>)
 800200a:	885a      	ldrh	r2, [r3, #2]
						SSD1306_DrawPixel(SSD1306.CurrentX + j,
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	b29b      	uxth	r3, r3
 8002010:	4413      	add	r3, r2
 8002012:	b299      	uxth	r1, r3
 8002014:	79bb      	ldrb	r3, [r7, #6]
 8002016:	2b00      	cmp	r3, #0
 8002018:	bf0c      	ite	eq
 800201a:	2301      	moveq	r3, #1
 800201c:	2300      	movne	r3, #0
 800201e:	b2db      	uxtb	r3, r3
 8002020:	461a      	mov	r2, r3
 8002022:	f7ff ff2f 	bl	8001e84 <SSD1306_DrawPixel>
			for (j = 0; j < Font->FontWidth; j++)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	3301      	adds	r3, #1
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	461a      	mov	r2, r3
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4293      	cmp	r3, r2
 8002036:	d3c8      	bcc.n	8001fca <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++)
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	785b      	ldrb	r3, [r3, #1]
 8002042:	461a      	mov	r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	4293      	cmp	r3, r2
 8002048:	d3ad      	bcc.n	8001fa6 <SSD1306_Putc+0x3a>
				}
		}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <SSD1306_Putc+0xf8>)
 800204c:	881b      	ldrh	r3, [r3, #0]
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	7812      	ldrb	r2, [r2, #0]
 8002052:	4413      	add	r3, r2
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b03      	ldr	r3, [pc, #12]	@ (8002064 <SSD1306_Putc+0xf8>)
 8002058:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800205a:	79fb      	ldrb	r3, [r7, #7]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	200002a0 	.word	0x200002a0

08002068 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	4613      	mov	r3, r2
 8002074:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str)
 8002076:	e012      	b.n	800209e <SSD1306_Puts+0x36>
		{
			/* Write character by character */
			if (SSD1306_Putc(*str, Font, color) != *str)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	79fa      	ldrb	r2, [r7, #7]
 800207e:	68b9      	ldr	r1, [r7, #8]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff ff73 	bl	8001f6c <SSD1306_Putc>
 8002086:	4603      	mov	r3, r0
 8002088:	461a      	mov	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d002      	beq.n	8002098 <SSD1306_Puts+0x30>
				return *str;	/* Return error */
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	e008      	b.n	80020aa <SSD1306_Puts+0x42>

			/* Increase string pointer */
			str++;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	3301      	adds	r3, #1
 800209c:	60fb      	str	r3, [r7, #12]
	while (*str)
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1e8      	bne.n	8002078 <SSD1306_Puts+0x10>
		}

	/* Everything OK, zero should be returned */
	return *str;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	781b      	ldrb	r3, [r3, #0]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <SSD1306_Clear>:
}



void SSD1306_Clear (void)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f7ff fecc 	bl	8001e54 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 80020bc:	f7ff fe9c 	bl	8001df8 <SSD1306_UpdateScreen>
}
 80020c0:	bf00      	nop
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <ssd1306_I2C_Init>:
	SSD1306_WRITECOMMAND(0xAE);
}


void ssd1306_I2C_Init()
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 80020ca:	4b07      	ldr	r3, [pc, #28]	@ (80020e8 <ssd1306_I2C_Init+0x24>)
 80020cc:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020ce:	e002      	b.n	80020d6 <ssd1306_I2C_Init+0x12>
		p--;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	3b01      	subs	r3, #1
 80020d4:	607b      	str	r3, [r7, #4]
	while(p>0)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f9      	bne.n	80020d0 <ssd1306_I2C_Init+0xc>
}
 80020dc:	bf00      	nop
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bc80      	pop	{r7}
 80020e6:	4770      	bx	lr
 80020e8:	0003d090 	.word	0x0003d090

080020ec <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count)
{
 80020ec:	b590      	push	{r4, r7, lr}
 80020ee:	b0c7      	sub	sp, #284	@ 0x11c
 80020f0:	af02      	add	r7, sp, #8
 80020f2:	4604      	mov	r4, r0
 80020f4:	4608      	mov	r0, r1
 80020f6:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80020fa:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80020fe:	600a      	str	r2, [r1, #0]
 8002100:	4619      	mov	r1, r3
 8002102:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002106:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800210a:	4622      	mov	r2, r4
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002112:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8002116:	4602      	mov	r2, r0
 8002118:	701a      	strb	r2, [r3, #0]
 800211a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800211e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002122:	460a      	mov	r2, r1
 8002124:	801a      	strh	r2, [r3, #0]
	uint8_t dt[256];
	dt[0] = reg;
 8002126:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800212a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800212e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002132:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8002136:	7812      	ldrb	r2, [r2, #0]
 8002138:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 0; i < count; i++)
 800213a:	2300      	movs	r3, #0
 800213c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8002140:	e015      	b.n	800216e <ssd1306_I2C_WriteMulti+0x82>
	dt[i+1] = data[i];
 8002142:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002146:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800214a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800214e:	6812      	ldr	r2, [r2, #0]
 8002150:	441a      	add	r2, r3
 8002152:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002156:	3301      	adds	r3, #1
 8002158:	7811      	ldrb	r1, [r2, #0]
 800215a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800215e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8002162:	54d1      	strb	r1, [r2, r3]
	for(i = 0; i < count; i++)
 8002164:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002168:	3301      	adds	r3, #1
 800216a:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800216e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8002172:	b29b      	uxth	r3, r3
 8002174:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8002178:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d8df      	bhi.n	8002142 <ssd1306_I2C_WriteMulti+0x56>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8002182:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002186:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b299      	uxth	r1, r3
 800218e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8002192:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002196:	881b      	ldrh	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	b29b      	uxth	r3, r3
 800219c:	f107 020c 	add.w	r2, r7, #12
 80021a0:	200a      	movs	r0, #10
 80021a2:	9000      	str	r0, [sp, #0]
 80021a4:	4803      	ldr	r0, [pc, #12]	@ (80021b4 <ssd1306_I2C_WriteMulti+0xc8>)
 80021a6:	f001 f987 	bl	80034b8 <HAL_I2C_Master_Transmit>
}
 80021aa:	bf00      	nop
 80021ac:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	20000714 	.word	0x20000714

080021b8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af02      	add	r7, sp, #8
 80021be:	4603      	mov	r3, r0
 80021c0:	71fb      	strb	r3, [r7, #7]
 80021c2:	460b      	mov	r3, r1
 80021c4:	71bb      	strb	r3, [r7, #6]
 80021c6:	4613      	mov	r3, r2
 80021c8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80021ca:	79bb      	ldrb	r3, [r7, #6]
 80021cc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80021ce:	797b      	ldrb	r3, [r7, #5]
 80021d0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	b299      	uxth	r1, r3
 80021d6:	f107 020c 	add.w	r2, r7, #12
 80021da:	230a      	movs	r3, #10
 80021dc:	9300      	str	r3, [sp, #0]
 80021de:	2302      	movs	r3, #2
 80021e0:	4803      	ldr	r0, [pc, #12]	@ (80021f0 <ssd1306_I2C_Write+0x38>)
 80021e2:	f001 f969 	bl	80034b8 <HAL_I2C_Master_Transmit>
}
 80021e6:	bf00      	nop
 80021e8:	3710      	adds	r7, #16
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000714 	.word	0x20000714

080021f4 <USB_RxIT>:

UniversalSerialBus UsB;


void USB_RxIT(uint8_t* Buf, uint8_t Len)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	460b      	mov	r3, r1
 80021fe:	70fb      	strb	r3, [r7, #3]
	Sys.USB_Inc = 0;
 8002200:	4b13      	ldr	r3, [pc, #76]	@ (8002250 <USB_RxIT+0x5c>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]

	for(char i=0; i<Len; i++)
 8002206:	2300      	movs	r3, #0
 8002208:	73fb      	strb	r3, [r7, #15]
 800220a:	e016      	b.n	800223a <USB_RxIT+0x46>
		{
			UsB.Rx_Buf[UsB.Rx_Len] = (uint8_t)(*(Buf+i));
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	4413      	add	r3, r2
 8002212:	4a10      	ldr	r2, [pc, #64]	@ (8002254 <USB_RxIT+0x60>)
 8002214:	f892 206b 	ldrb.w	r2, [r2, #107]	@ 0x6b
 8002218:	4611      	mov	r1, r2
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	4b0d      	ldr	r3, [pc, #52]	@ (8002254 <USB_RxIT+0x60>)
 800221e:	440b      	add	r3, r1
 8002220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
			UsB.Rx_Len += 1;
 8002224:	4b0b      	ldr	r3, [pc, #44]	@ (8002254 <USB_RxIT+0x60>)
 8002226:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 800222a:	3301      	adds	r3, #1
 800222c:	b2da      	uxtb	r2, r3
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <USB_RxIT+0x60>)
 8002230:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
	for(char i=0; i<Len; i++)
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	3301      	adds	r3, #1
 8002238:	73fb      	strb	r3, [r7, #15]
 800223a:	7bfa      	ldrb	r2, [r7, #15]
 800223c:	78fb      	ldrb	r3, [r7, #3]
 800223e:	429a      	cmp	r2, r3
 8002240:	d3e4      	bcc.n	800220c <USB_RxIT+0x18>
		}
}
 8002242:	bf00      	nop
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000200 	.word	0x20000200
 8002254:	200006a8 	.word	0x200006a8

08002258 <USB_Tx_while>:


void USB_Tx_while()
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	UsB.Tx_While_Inc +=1;
 800225c:	4b28      	ldr	r3, [pc, #160]	@ (8002300 <USB_Tx_while+0xa8>)
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	3301      	adds	r3, #1
 8002262:	b2da      	uxtb	r2, r3
 8002264:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <USB_Tx_while+0xa8>)
 8002266:	701a      	strb	r2, [r3, #0]

	if(UsB.Tx_While_Inc % 2)
 8002268:	4b25      	ldr	r3, [pc, #148]	@ (8002300 <USB_Tx_while+0xa8>)
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d016      	beq.n	80022a4 <USB_Tx_while+0x4c>
		{
			memset(UsB.Tx_Buf, 0x00, sizeof(UsB.Tx_Buf));
 8002276:	223c      	movs	r2, #60	@ 0x3c
 8002278:	2100      	movs	r1, #0
 800227a:	4822      	ldr	r0, [pc, #136]	@ (8002304 <USB_Tx_while+0xac>)
 800227c:	f009 f912 	bl	800b4a4 <memset>
			UsB.Tx_Len = sprintf((char *)UsB.Tx_Buf, "\n\rTime: %s \n\r",Cmn.Time);
 8002280:	4a21      	ldr	r2, [pc, #132]	@ (8002308 <USB_Tx_while+0xb0>)
 8002282:	4922      	ldr	r1, [pc, #136]	@ (800230c <USB_Tx_while+0xb4>)
 8002284:	481f      	ldr	r0, [pc, #124]	@ (8002304 <USB_Tx_while+0xac>)
 8002286:	f009 f8ed 	bl	800b464 <siprintf>
 800228a:	4603      	mov	r3, r0
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <USB_Tx_while+0xa8>)
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
			CDC_Transmit_FS((uint8_t*)UsB.Tx_Buf, UsB.Tx_Len);
 8002294:	4b1a      	ldr	r3, [pc, #104]	@ (8002300 <USB_Tx_while+0xa8>)
 8002296:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800229a:	4619      	mov	r1, r3
 800229c:	4819      	ldr	r0, [pc, #100]	@ (8002304 <USB_Tx_while+0xac>)
 800229e:	f008 fd03 	bl	800aca8 <CDC_Transmit_FS>

			memset(UsB.Tx_Buf, 0x00, sizeof(UsB.Tx_Buf));
			UsB.Tx_Len = sprintf((char *)UsB.Tx_Buf, "Relay2: On_Off -> %s \n\r",EE.Rly_R2);
			CDC_Transmit_FS((uint8_t*)UsB.Tx_Buf, UsB.Tx_Len);
		}
}
 80022a2:	e02b      	b.n	80022fc <USB_Tx_while+0xa4>
			memset(UsB.Tx_Buf, 0x00, sizeof(UsB.Tx_Buf));
 80022a4:	223c      	movs	r2, #60	@ 0x3c
 80022a6:	2100      	movs	r1, #0
 80022a8:	4816      	ldr	r0, [pc, #88]	@ (8002304 <USB_Tx_while+0xac>)
 80022aa:	f009 f8fb 	bl	800b4a4 <memset>
			UsB.Tx_Len = sprintf((char *)UsB.Tx_Buf, "Relay1: On_Off -> %s \n\r",EE.Rly_R1);
 80022ae:	4a18      	ldr	r2, [pc, #96]	@ (8002310 <USB_Tx_while+0xb8>)
 80022b0:	4918      	ldr	r1, [pc, #96]	@ (8002314 <USB_Tx_while+0xbc>)
 80022b2:	4814      	ldr	r0, [pc, #80]	@ (8002304 <USB_Tx_while+0xac>)
 80022b4:	f009 f8d6 	bl	800b464 <siprintf>
 80022b8:	4603      	mov	r3, r0
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b10      	ldr	r3, [pc, #64]	@ (8002300 <USB_Tx_while+0xa8>)
 80022be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
			CDC_Transmit_FS((uint8_t*)UsB.Tx_Buf, UsB.Tx_Len);
 80022c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <USB_Tx_while+0xa8>)
 80022c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022c8:	4619      	mov	r1, r3
 80022ca:	480e      	ldr	r0, [pc, #56]	@ (8002304 <USB_Tx_while+0xac>)
 80022cc:	f008 fcec 	bl	800aca8 <CDC_Transmit_FS>
			memset(UsB.Tx_Buf, 0x00, sizeof(UsB.Tx_Buf));
 80022d0:	223c      	movs	r2, #60	@ 0x3c
 80022d2:	2100      	movs	r1, #0
 80022d4:	480b      	ldr	r0, [pc, #44]	@ (8002304 <USB_Tx_while+0xac>)
 80022d6:	f009 f8e5 	bl	800b4a4 <memset>
			UsB.Tx_Len = sprintf((char *)UsB.Tx_Buf, "Relay2: On_Off -> %s \n\r",EE.Rly_R2);
 80022da:	4a0f      	ldr	r2, [pc, #60]	@ (8002318 <USB_Tx_while+0xc0>)
 80022dc:	490f      	ldr	r1, [pc, #60]	@ (800231c <USB_Tx_while+0xc4>)
 80022de:	4809      	ldr	r0, [pc, #36]	@ (8002304 <USB_Tx_while+0xac>)
 80022e0:	f009 f8c0 	bl	800b464 <siprintf>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	4b05      	ldr	r3, [pc, #20]	@ (8002300 <USB_Tx_while+0xa8>)
 80022ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
			CDC_Transmit_FS((uint8_t*)UsB.Tx_Buf, UsB.Tx_Len);
 80022ee:	4b04      	ldr	r3, [pc, #16]	@ (8002300 <USB_Tx_while+0xa8>)
 80022f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022f4:	4619      	mov	r1, r3
 80022f6:	4803      	ldr	r0, [pc, #12]	@ (8002304 <USB_Tx_while+0xac>)
 80022f8:	f008 fcd6 	bl	800aca8 <CDC_Transmit_FS>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	200006a8 	.word	0x200006a8
 8002304:	200006a9 	.word	0x200006a9
 8002308:	20000236 	.word	0x20000236
 800230c:	0800bef8 	.word	0x0800bef8
 8002310:	20000266 	.word	0x20000266
 8002314:	0800bf08 	.word	0x0800bf08
 8002318:	20000272 	.word	0x20000272
 800231c:	0800bf20 	.word	0x0800bf20

08002320 <USB_Rx2Tx_Instant>:


void USB_Rx2Tx_Instant()
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
	if((Sys.USB_Inc > 10) && (UsB.Rx_Len > 0))
 8002324:	4b25      	ldr	r3, [pc, #148]	@ (80023bc <USB_Rx2Tx_Instant+0x9c>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b0a      	cmp	r3, #10
 800232a:	d945      	bls.n	80023b8 <USB_Rx2Tx_Instant+0x98>
 800232c:	4b24      	ldr	r3, [pc, #144]	@ (80023c0 <USB_Rx2Tx_Instant+0xa0>)
 800232e:	f893 306b 	ldrb.w	r3, [r3, #107]	@ 0x6b
 8002332:	2b00      	cmp	r3, #0
 8002334:	d040      	beq.n	80023b8 <USB_Rx2Tx_Instant+0x98>
		{
			memset(UsB.Tx_Buf, 0x00, sizeof(UsB.Tx_Buf));
 8002336:	223c      	movs	r2, #60	@ 0x3c
 8002338:	2100      	movs	r1, #0
 800233a:	4822      	ldr	r0, [pc, #136]	@ (80023c4 <USB_Rx2Tx_Instant+0xa4>)
 800233c:	f009 f8b2 	bl	800b4a4 <memset>
			UsB.Tx_Len = sprintf((char *)UsB.Tx_Buf, "USB_Tx: %s \n\r",UsB.Rx_Buf);
 8002340:	4a21      	ldr	r2, [pc, #132]	@ (80023c8 <USB_Rx2Tx_Instant+0xa8>)
 8002342:	4922      	ldr	r1, [pc, #136]	@ (80023cc <USB_Rx2Tx_Instant+0xac>)
 8002344:	481f      	ldr	r0, [pc, #124]	@ (80023c4 <USB_Rx2Tx_Instant+0xa4>)
 8002346:	f009 f88d 	bl	800b464 <siprintf>
 800234a:	4603      	mov	r3, r0
 800234c:	b2da      	uxtb	r2, r3
 800234e:	4b1c      	ldr	r3, [pc, #112]	@ (80023c0 <USB_Rx2Tx_Instant+0xa0>)
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
			CDC_Transmit_FS((uint8_t*)UsB.Tx_Buf, UsB.Tx_Len);
 8002354:	4b1a      	ldr	r3, [pc, #104]	@ (80023c0 <USB_Rx2Tx_Instant+0xa0>)
 8002356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800235a:	4619      	mov	r1, r3
 800235c:	4819      	ldr	r0, [pc, #100]	@ (80023c4 <USB_Rx2Tx_Instant+0xa4>)
 800235e:	f008 fca3 	bl	800aca8 <CDC_Transmit_FS>

			if(USB_SetTime())
 8002362:	f000 f83d 	bl	80023e0 <USB_SetTime>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d004      	beq.n	8002376 <USB_Rx2Tx_Instant+0x56>
				CDC_Transmit_FS((uint8_t*)"USB_SetTime_Success \n\r\n\r", 24);
 800236c:	2118      	movs	r1, #24
 800236e:	4818      	ldr	r0, [pc, #96]	@ (80023d0 <USB_Rx2Tx_Instant+0xb0>)
 8002370:	f008 fc9a 	bl	800aca8 <CDC_Transmit_FS>
 8002374:	e017      	b.n	80023a6 <USB_Rx2Tx_Instant+0x86>
			else if(USB_Relay1_SetTime())
 8002376:	f000 f951 	bl	800261c <USB_Relay1_SetTime>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d004      	beq.n	800238a <USB_Rx2Tx_Instant+0x6a>
				CDC_Transmit_FS((uint8_t*)"USB_Relay1_SetTime_Success \n\r\n\r", 31);
 8002380:	211f      	movs	r1, #31
 8002382:	4814      	ldr	r0, [pc, #80]	@ (80023d4 <USB_Rx2Tx_Instant+0xb4>)
 8002384:	f008 fc90 	bl	800aca8 <CDC_Transmit_FS>
 8002388:	e00d      	b.n	80023a6 <USB_Rx2Tx_Instant+0x86>
			else if(USB_Relay2_SetTime())
 800238a:	f000 f989 	bl	80026a0 <USB_Relay2_SetTime>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <USB_Rx2Tx_Instant+0x7e>
				CDC_Transmit_FS((uint8_t*)"USB_Relay2_SetTime_Success \n\r\n\r", 31);
 8002394:	211f      	movs	r1, #31
 8002396:	4810      	ldr	r0, [pc, #64]	@ (80023d8 <USB_Rx2Tx_Instant+0xb8>)
 8002398:	f008 fc86 	bl	800aca8 <CDC_Transmit_FS>
 800239c:	e003      	b.n	80023a6 <USB_Rx2Tx_Instant+0x86>
			else
				CDC_Transmit_FS((uint8_t*)"\n\r**** ReSet_Again ****\n\r\n\r", 33);
 800239e:	2121      	movs	r1, #33	@ 0x21
 80023a0:	480e      	ldr	r0, [pc, #56]	@ (80023dc <USB_Rx2Tx_Instant+0xbc>)
 80023a2:	f008 fc81 	bl	800aca8 <CDC_Transmit_FS>

			memset(UsB.Rx_Buf, 0x00, sizeof(UsB.Rx_Buf));
 80023a6:	222d      	movs	r2, #45	@ 0x2d
 80023a8:	2100      	movs	r1, #0
 80023aa:	4807      	ldr	r0, [pc, #28]	@ (80023c8 <USB_Rx2Tx_Instant+0xa8>)
 80023ac:	f009 f87a 	bl	800b4a4 <memset>
			UsB.Rx_Len = 0;
 80023b0:	4b03      	ldr	r3, [pc, #12]	@ (80023c0 <USB_Rx2Tx_Instant+0xa0>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 206b 	strb.w	r2, [r3, #107]	@ 0x6b
		}
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000200 	.word	0x20000200
 80023c0:	200006a8 	.word	0x200006a8
 80023c4:	200006a9 	.word	0x200006a9
 80023c8:	200006e6 	.word	0x200006e6
 80023cc:	0800bf38 	.word	0x0800bf38
 80023d0:	0800bf48 	.word	0x0800bf48
 80023d4:	0800bf64 	.word	0x0800bf64
 80023d8:	0800bf84 	.word	0x0800bf84
 80023dc:	0800bfa4 	.word	0x0800bfa4

080023e0 <USB_SetTime>:

/****************************************************************************************/


uint8_t USB_SetTime()
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b089      	sub	sp, #36	@ 0x24
 80023e4:	af04      	add	r7, sp, #16
	//SetTime= 07:20:00 Sat 28:06:25 	// Sun Mon Tue Wed Thu Fri Sat
	uint8_t Hr , Min , Sec , Week , Date , Month , Year , Status;
	char *Ptr = strstr((char *)UsB.Rx_Buf,"SetTime= ");
 80023e6:	4989      	ldr	r1, [pc, #548]	@ (800260c <USB_SetTime+0x22c>)
 80023e8:	4889      	ldr	r0, [pc, #548]	@ (8002610 <USB_SetTime+0x230>)
 80023ea:	f009 f863 	bl	800b4b4 <strstr>
 80023ee:	60b8      	str	r0, [r7, #8]

	if((*(Ptr+7) == '=') && (*(Ptr+27) == ':'))
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	3307      	adds	r3, #7
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b3d      	cmp	r3, #61	@ 0x3d
 80023f8:	f040 8103 	bne.w	8002602 <USB_SetTime+0x222>
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	331b      	adds	r3, #27
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b3a      	cmp	r3, #58	@ 0x3a
 8002404:	f040 80fd 	bne.w	8002602 <USB_SetTime+0x222>
		{
			Status	= 1;
 8002408:	2301      	movs	r3, #1
 800240a:	73bb      	strb	r3, [r7, #14]
			memset(Cmn.Test, 0x00, sizeof(Cmn.Test));
 800240c:	221e      	movs	r2, #30
 800240e:	2100      	movs	r1, #0
 8002410:	4880      	ldr	r0, [pc, #512]	@ (8002614 <USB_SetTime+0x234>)
 8002412:	f009 f847 	bl	800b4a4 <memset>

			for(uint8_t i=0; i<30; i++)
 8002416:	2300      	movs	r3, #0
 8002418:	737b      	strb	r3, [r7, #13]
 800241a:	e00b      	b.n	8002434 <USB_SetTime+0x54>
				Cmn.Test[i] = *(Ptr+i);
 800241c:	7b7b      	ldrb	r3, [r7, #13]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	441a      	add	r2, r3
 8002422:	7b7b      	ldrb	r3, [r7, #13]
 8002424:	7811      	ldrb	r1, [r2, #0]
 8002426:	4a7c      	ldr	r2, [pc, #496]	@ (8002618 <USB_SetTime+0x238>)
 8002428:	4413      	add	r3, r2
 800242a:	460a      	mov	r2, r1
 800242c:	711a      	strb	r2, [r3, #4]
			for(uint8_t i=0; i<30; i++)
 800242e:	7b7b      	ldrb	r3, [r7, #13]
 8002430:	3301      	adds	r3, #1
 8002432:	737b      	strb	r3, [r7, #13]
 8002434:	7b7b      	ldrb	r3, [r7, #13]
 8002436:	2b1d      	cmp	r3, #29
 8002438:	d9f0      	bls.n	800241c <USB_SetTime+0x3c>

			Hr 		= (((*(Ptr+9)-0x30)*10) 	+ (*(Ptr+10)-0x30));
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	3309      	adds	r3, #9
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	3b30      	subs	r3, #48	@ 0x30
 8002442:	b2db      	uxtb	r3, r3
 8002444:	461a      	mov	r2, r3
 8002446:	0092      	lsls	r2, r2, #2
 8002448:	4413      	add	r3, r2
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	b2da      	uxtb	r2, r3
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	330a      	adds	r3, #10
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	4413      	add	r3, r2
 8002456:	b2db      	uxtb	r3, r3
 8002458:	3b30      	subs	r3, #48	@ 0x30
 800245a:	71fb      	strb	r3, [r7, #7]
			Min 	= (((*(Ptr+12)-0x30)*10) 	+ (*(Ptr+13)-0x30));
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	330c      	adds	r3, #12
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	3b30      	subs	r3, #48	@ 0x30
 8002464:	b2db      	uxtb	r3, r3
 8002466:	461a      	mov	r2, r3
 8002468:	0092      	lsls	r2, r2, #2
 800246a:	4413      	add	r3, r2
 800246c:	005b      	lsls	r3, r3, #1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	330d      	adds	r3, #13
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	4413      	add	r3, r2
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3b30      	subs	r3, #48	@ 0x30
 800247c:	71bb      	strb	r3, [r7, #6]
			Sec 	= (((*(Ptr+15)-0x30)*10) 	+ (*(Ptr+16)-0x30));
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	330f      	adds	r3, #15
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	3b30      	subs	r3, #48	@ 0x30
 8002486:	b2db      	uxtb	r3, r3
 8002488:	461a      	mov	r2, r3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4413      	add	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	b2da      	uxtb	r2, r3
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3310      	adds	r3, #16
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4413      	add	r3, r2
 800249a:	b2db      	uxtb	r3, r3
 800249c:	3b30      	subs	r3, #48	@ 0x30
 800249e:	717b      	strb	r3, [r7, #5]

			Date 	= (((*(Ptr+22)-0x30)*10) 	+ (*(Ptr+23)-0x30));
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	3316      	adds	r3, #22
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	3b30      	subs	r3, #48	@ 0x30
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	461a      	mov	r2, r3
 80024ac:	0092      	lsls	r2, r2, #2
 80024ae:	4413      	add	r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	3317      	adds	r3, #23
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	4413      	add	r3, r2
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	3b30      	subs	r3, #48	@ 0x30
 80024c0:	713b      	strb	r3, [r7, #4]
			Month 	= (((*(Ptr+25)-0x30)*10) 	+ (*(Ptr+26)-0x30));
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	3319      	adds	r3, #25
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	3b30      	subs	r3, #48	@ 0x30
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	4413      	add	r3, r2
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	331a      	adds	r3, #26
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4413      	add	r3, r2
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	3b30      	subs	r3, #48	@ 0x30
 80024e2:	70fb      	strb	r3, [r7, #3]
			Year 	= (((*(Ptr+28)-0x30)*10) 	+ (*(Ptr+29)-0x30));
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	331c      	adds	r3, #28
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	3b30      	subs	r3, #48	@ 0x30
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	461a      	mov	r2, r3
 80024f0:	0092      	lsls	r2, r2, #2
 80024f2:	4413      	add	r3, r2
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	b2da      	uxtb	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	331d      	adds	r3, #29
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	3b30      	subs	r3, #48	@ 0x30
 8002504:	70bb      	strb	r3, [r7, #2]

			if((*(Ptr+18) == 'S') && (*(Ptr+19) == 'u'))
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	3312      	adds	r3, #18
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b53      	cmp	r3, #83	@ 0x53
 800250e:	d107      	bne.n	8002520 <USB_SetTime+0x140>
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3313      	adds	r3, #19
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b75      	cmp	r3, #117	@ 0x75
 8002518:	d102      	bne.n	8002520 <USB_SetTime+0x140>
				Week = Sunday;
 800251a:	2301      	movs	r3, #1
 800251c:	73fb      	strb	r3, [r7, #15]
 800251e:	e04f      	b.n	80025c0 <USB_SetTime+0x1e0>
			else if((*(Ptr+18) == 'M') && (*(Ptr+19) == 'o'))
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	3312      	adds	r3, #18
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b4d      	cmp	r3, #77	@ 0x4d
 8002528:	d107      	bne.n	800253a <USB_SetTime+0x15a>
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	3313      	adds	r3, #19
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b6f      	cmp	r3, #111	@ 0x6f
 8002532:	d102      	bne.n	800253a <USB_SetTime+0x15a>
				Week = Monday;
 8002534:	2302      	movs	r3, #2
 8002536:	73fb      	strb	r3, [r7, #15]
 8002538:	e042      	b.n	80025c0 <USB_SetTime+0x1e0>
			else if((*(Ptr+18) == 'T') && (*(Ptr+19) == 'u'))
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	3312      	adds	r3, #18
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	2b54      	cmp	r3, #84	@ 0x54
 8002542:	d107      	bne.n	8002554 <USB_SetTime+0x174>
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	3313      	adds	r3, #19
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b75      	cmp	r3, #117	@ 0x75
 800254c:	d102      	bne.n	8002554 <USB_SetTime+0x174>
				Week = Tuesday;
 800254e:	2303      	movs	r3, #3
 8002550:	73fb      	strb	r3, [r7, #15]
 8002552:	e035      	b.n	80025c0 <USB_SetTime+0x1e0>
			else if((*(Ptr+18) == 'W') && (*(Ptr+19) == 'e'))
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	3312      	adds	r3, #18
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b57      	cmp	r3, #87	@ 0x57
 800255c:	d107      	bne.n	800256e <USB_SetTime+0x18e>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3313      	adds	r3, #19
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	2b65      	cmp	r3, #101	@ 0x65
 8002566:	d102      	bne.n	800256e <USB_SetTime+0x18e>
				Week = Wednesday;
 8002568:	2304      	movs	r3, #4
 800256a:	73fb      	strb	r3, [r7, #15]
 800256c:	e028      	b.n	80025c0 <USB_SetTime+0x1e0>
			else if((*(Ptr+18) == 'T') && (*(Ptr+19) == 'h'))
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	3312      	adds	r3, #18
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b54      	cmp	r3, #84	@ 0x54
 8002576:	d107      	bne.n	8002588 <USB_SetTime+0x1a8>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	3313      	adds	r3, #19
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	2b68      	cmp	r3, #104	@ 0x68
 8002580:	d102      	bne.n	8002588 <USB_SetTime+0x1a8>
				Week = Thursday;
 8002582:	2305      	movs	r3, #5
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	e01b      	b.n	80025c0 <USB_SetTime+0x1e0>
			else if((*(Ptr+18) == 'F') && (*(Ptr+19) == 'r'))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	3312      	adds	r3, #18
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b46      	cmp	r3, #70	@ 0x46
 8002590:	d107      	bne.n	80025a2 <USB_SetTime+0x1c2>
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	3313      	adds	r3, #19
 8002596:	781b      	ldrb	r3, [r3, #0]
 8002598:	2b72      	cmp	r3, #114	@ 0x72
 800259a:	d102      	bne.n	80025a2 <USB_SetTime+0x1c2>
				Week = Friday;
 800259c:	2306      	movs	r3, #6
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e00e      	b.n	80025c0 <USB_SetTime+0x1e0>
			else if((*(Ptr+18) == 'S') && (*(Ptr+19) == 'a'))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	3312      	adds	r3, #18
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b53      	cmp	r3, #83	@ 0x53
 80025aa:	d107      	bne.n	80025bc <USB_SetTime+0x1dc>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	3313      	adds	r3, #19
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b61      	cmp	r3, #97	@ 0x61
 80025b4:	d102      	bne.n	80025bc <USB_SetTime+0x1dc>
				Week = Saturday;
 80025b6:	2307      	movs	r3, #7
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	e001      	b.n	80025c0 <USB_SetTime+0x1e0>
			else
				Status = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	73bb      	strb	r3, [r7, #14]

			if(Status)
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00d      	beq.n	80025e2 <USB_SetTime+0x202>
				Set_Time(Sec, Min, Hr, Week, Date, Month, Year);
 80025c6:	7bfc      	ldrb	r4, [r7, #15]
 80025c8:	79fa      	ldrb	r2, [r7, #7]
 80025ca:	79b9      	ldrb	r1, [r7, #6]
 80025cc:	7978      	ldrb	r0, [r7, #5]
 80025ce:	78bb      	ldrb	r3, [r7, #2]
 80025d0:	9302      	str	r3, [sp, #8]
 80025d2:	78fb      	ldrb	r3, [r7, #3]
 80025d4:	9301      	str	r3, [sp, #4]
 80025d6:	793b      	ldrb	r3, [r7, #4]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	4623      	mov	r3, r4
 80025dc:	f7fe fbce 	bl	8000d7c <Set_Time>
 80025e0:	e00f      	b.n	8002602 <USB_SetTime+0x222>
			else
				Hr = Min = Sec = Week = Date = Month = Year = Status = 0;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73bb      	strb	r3, [r7, #14]
 80025e6:	7bbb      	ldrb	r3, [r7, #14]
 80025e8:	70bb      	strb	r3, [r7, #2]
 80025ea:	78bb      	ldrb	r3, [r7, #2]
 80025ec:	70fb      	strb	r3, [r7, #3]
 80025ee:	78fb      	ldrb	r3, [r7, #3]
 80025f0:	713b      	strb	r3, [r7, #4]
 80025f2:	793b      	ldrb	r3, [r7, #4]
 80025f4:	73fb      	strb	r3, [r7, #15]
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	717b      	strb	r3, [r7, #5]
 80025fa:	797b      	ldrb	r3, [r7, #5]
 80025fc:	71bb      	strb	r3, [r7, #6]
 80025fe:	79bb      	ldrb	r3, [r7, #6]
 8002600:	71fb      	strb	r3, [r7, #7]
		}
	return Status;
 8002602:	7bbb      	ldrb	r3, [r7, #14]
}
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bd90      	pop	{r4, r7, pc}
 800260c:	0800bfc0 	.word	0x0800bfc0
 8002610:	200006e6 	.word	0x200006e6
 8002614:	20000218 	.word	0x20000218
 8002618:	20000214 	.word	0x20000214

0800261c <USB_Relay1_SetTime>:


uint8_t USB_Relay1_SetTime()
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
	//Relay1= On 18:00 Off 22:00
	char *Ptr = strstr((char *)UsB.Rx_Buf,"Relay1= ");
 8002622:	491b      	ldr	r1, [pc, #108]	@ (8002690 <USB_Relay1_SetTime+0x74>)
 8002624:	481b      	ldr	r0, [pc, #108]	@ (8002694 <USB_Relay1_SetTime+0x78>)
 8002626:	f008 ff45 	bl	800b4b4 <strstr>
 800262a:	6038      	str	r0, [r7, #0]

	if((*(Ptr+5) == '1') && (*(Ptr+6) == '=') && (*(Ptr+23) == ':'))
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	3305      	adds	r3, #5
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b31      	cmp	r3, #49	@ 0x31
 8002634:	d126      	bne.n	8002684 <USB_Relay1_SetTime+0x68>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	3306      	adds	r3, #6
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b3d      	cmp	r3, #61	@ 0x3d
 800263e:	d121      	bne.n	8002684 <USB_Relay1_SetTime+0x68>
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	3317      	adds	r3, #23
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b3a      	cmp	r3, #58	@ 0x3a
 8002648:	d11c      	bne.n	8002684 <USB_Relay1_SetTime+0x68>
		{
			memset(Cmn.Test, 0x00, sizeof(Cmn.Test));
 800264a:	221e      	movs	r2, #30
 800264c:	2100      	movs	r1, #0
 800264e:	4812      	ldr	r0, [pc, #72]	@ (8002698 <USB_Relay1_SetTime+0x7c>)
 8002650:	f008 ff28 	bl	800b4a4 <memset>
			for(uint8_t i=0; i<26; i++)
 8002654:	2300      	movs	r3, #0
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	e00b      	b.n	8002672 <USB_Relay1_SetTime+0x56>
				Cmn.Test[i] = *(Ptr+i);
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	683a      	ldr	r2, [r7, #0]
 800265e:	441a      	add	r2, r3
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	7811      	ldrb	r1, [r2, #0]
 8002664:	4a0d      	ldr	r2, [pc, #52]	@ (800269c <USB_Relay1_SetTime+0x80>)
 8002666:	4413      	add	r3, r2
 8002668:	460a      	mov	r2, r1
 800266a:	711a      	strb	r2, [r3, #4]
			for(uint8_t i=0; i<26; i++)
 800266c:	79fb      	ldrb	r3, [r7, #7]
 800266e:	3301      	adds	r3, #1
 8002670:	71fb      	strb	r3, [r7, #7]
 8002672:	79fb      	ldrb	r3, [r7, #7]
 8002674:	2b19      	cmp	r3, #25
 8002676:	d9f0      	bls.n	800265a <USB_Relay1_SetTime+0x3e>

			EE_Write_Relay_Time(1, Cmn.Test);
 8002678:	4907      	ldr	r1, [pc, #28]	@ (8002698 <USB_Relay1_SetTime+0x7c>)
 800267a:	2001      	movs	r0, #1
 800267c:	f7fe fa6e 	bl	8000b5c <EE_Write_Relay_Time>
			return 1;
 8002680:	2301      	movs	r3, #1
 8002682:	e000      	b.n	8002686 <USB_Relay1_SetTime+0x6a>
		}

	return 0;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	0800bfcc 	.word	0x0800bfcc
 8002694:	200006e6 	.word	0x200006e6
 8002698:	20000218 	.word	0x20000218
 800269c:	20000214 	.word	0x20000214

080026a0 <USB_Relay2_SetTime>:


uint8_t USB_Relay2_SetTime()
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
	//Relay2= On 19:00 Off 21:00
	char *Ptr = strstr((char *)UsB.Rx_Buf,"Relay2= ");
 80026a6:	491b      	ldr	r1, [pc, #108]	@ (8002714 <USB_Relay2_SetTime+0x74>)
 80026a8:	481b      	ldr	r0, [pc, #108]	@ (8002718 <USB_Relay2_SetTime+0x78>)
 80026aa:	f008 ff03 	bl	800b4b4 <strstr>
 80026ae:	6038      	str	r0, [r7, #0]

	if((*(Ptr+5) == '2') && (*(Ptr+6) == '=') && (*(Ptr+23) == ':'))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	3305      	adds	r3, #5
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b32      	cmp	r3, #50	@ 0x32
 80026b8:	d126      	bne.n	8002708 <USB_Relay2_SetTime+0x68>
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	3306      	adds	r3, #6
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b3d      	cmp	r3, #61	@ 0x3d
 80026c2:	d121      	bne.n	8002708 <USB_Relay2_SetTime+0x68>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	3317      	adds	r3, #23
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b3a      	cmp	r3, #58	@ 0x3a
 80026cc:	d11c      	bne.n	8002708 <USB_Relay2_SetTime+0x68>
		{
			memset(Cmn.Test, 0x00, sizeof(Cmn.Test));
 80026ce:	221e      	movs	r2, #30
 80026d0:	2100      	movs	r1, #0
 80026d2:	4812      	ldr	r0, [pc, #72]	@ (800271c <USB_Relay2_SetTime+0x7c>)
 80026d4:	f008 fee6 	bl	800b4a4 <memset>
			for(uint8_t i=0; i<26; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	71fb      	strb	r3, [r7, #7]
 80026dc:	e00b      	b.n	80026f6 <USB_Relay2_SetTime+0x56>
				Cmn.Test[i] = *(Ptr+i);
 80026de:	79fb      	ldrb	r3, [r7, #7]
 80026e0:	683a      	ldr	r2, [r7, #0]
 80026e2:	441a      	add	r2, r3
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	7811      	ldrb	r1, [r2, #0]
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <USB_Relay2_SetTime+0x80>)
 80026ea:	4413      	add	r3, r2
 80026ec:	460a      	mov	r2, r1
 80026ee:	711a      	strb	r2, [r3, #4]
			for(uint8_t i=0; i<26; i++)
 80026f0:	79fb      	ldrb	r3, [r7, #7]
 80026f2:	3301      	adds	r3, #1
 80026f4:	71fb      	strb	r3, [r7, #7]
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2b19      	cmp	r3, #25
 80026fa:	d9f0      	bls.n	80026de <USB_Relay2_SetTime+0x3e>

			EE_Write_Relay_Time(2, Cmn.Test);
 80026fc:	4907      	ldr	r1, [pc, #28]	@ (800271c <USB_Relay2_SetTime+0x7c>)
 80026fe:	2002      	movs	r0, #2
 8002700:	f7fe fa2c 	bl	8000b5c <EE_Write_Relay_Time>
			return 1;
 8002704:	2301      	movs	r3, #1
 8002706:	e000      	b.n	800270a <USB_Relay2_SetTime+0x6a>
		}

	return 0;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	0800bfd8 	.word	0x0800bfd8
 8002718:	200006e6 	.word	0x200006e6
 800271c:	20000218 	.word	0x20000218
 8002720:	20000214 	.word	0x20000214

08002724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002728:	f000 fa22 	bl	8002b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800272c:	f000 f80d 	bl	800274a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002730:	f000 f8ac 	bl	800288c <MX_GPIO_Init>
  MX_I2C1_Init();
 8002734:	f000 f862 	bl	80027fc <MX_I2C1_Init>
  MX_IWDG_Init();
 8002738:	f000 f88e 	bl	8002858 <MX_IWDG_Init>
  MX_USB_DEVICE_Init();
 800273c:	f008 f9f0 	bl	800ab20 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  Proj_Init_Function();
 8002740:	f7fe f942 	bl	80009c8 <Proj_Init_Function>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Proj_While_Function();
 8002744:	f7fe f95e 	bl	8000a04 <Proj_While_Function>
 8002748:	e7fc      	b.n	8002744 <main+0x20>

0800274a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b094      	sub	sp, #80	@ 0x50
 800274e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002750:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002754:	2228      	movs	r2, #40	@ 0x28
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f008 fea3 	bl	800b4a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800275e:	f107 0314 	add.w	r3, r7, #20
 8002762:	2200      	movs	r2, #0
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	605a      	str	r2, [r3, #4]
 8002768:	609a      	str	r2, [r3, #8]
 800276a:	60da      	str	r2, [r3, #12]
 800276c:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800276e:	1d3b      	adds	r3, r7, #4
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800277a:	230a      	movs	r3, #10
 800277c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800277e:	2301      	movs	r3, #1
 8002780:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002782:	2310      	movs	r3, #16
 8002784:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002786:	2301      	movs	r3, #1
 8002788:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800278a:	2302      	movs	r3, #2
 800278c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800278e:	2300      	movs	r3, #0
 8002790:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8002792:	f44f 1320 	mov.w	r3, #2621440	@ 0x280000
 8002796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002798:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800279c:	4618      	mov	r0, r3
 800279e:	f003 fe0d 	bl	80063bc <HAL_RCC_OscConfig>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <SystemClock_Config+0x62>
  {
    Error_Handler();
 80027a8:	f000 f8d0 	bl	800294c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ac:	230f      	movs	r3, #15
 80027ae:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b0:	2302      	movs	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027bc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027be:	2300      	movs	r3, #0
 80027c0:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80027c2:	f107 0314 	add.w	r3, r7, #20
 80027c6:	2101      	movs	r1, #1
 80027c8:	4618      	mov	r0, r3
 80027ca:	f004 f879 	bl	80068c0 <HAL_RCC_ClockConfig>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80027d4:	f000 f8ba 	bl	800294c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80027d8:	2310      	movs	r3, #16
 80027da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80027dc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027e0:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80027e2:	1d3b      	adds	r3, r7, #4
 80027e4:	4618      	mov	r0, r3
 80027e6:	f004 f9e5 	bl	8006bb4 <HAL_RCCEx_PeriphCLKConfig>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80027f0:	f000 f8ac 	bl	800294c <Error_Handler>
  }
}
 80027f4:	bf00      	nop
 80027f6:	3750      	adds	r7, #80	@ 0x50
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002800:	4b12      	ldr	r3, [pc, #72]	@ (800284c <MX_I2C1_Init+0x50>)
 8002802:	4a13      	ldr	r2, [pc, #76]	@ (8002850 <MX_I2C1_Init+0x54>)
 8002804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002806:	4b11      	ldr	r3, [pc, #68]	@ (800284c <MX_I2C1_Init+0x50>)
 8002808:	4a12      	ldr	r2, [pc, #72]	@ (8002854 <MX_I2C1_Init+0x58>)
 800280a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800280c:	4b0f      	ldr	r3, [pc, #60]	@ (800284c <MX_I2C1_Init+0x50>)
 800280e:	2200      	movs	r2, #0
 8002810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002812:	4b0e      	ldr	r3, [pc, #56]	@ (800284c <MX_I2C1_Init+0x50>)
 8002814:	2200      	movs	r2, #0
 8002816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002818:	4b0c      	ldr	r3, [pc, #48]	@ (800284c <MX_I2C1_Init+0x50>)
 800281a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800281e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002820:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <MX_I2C1_Init+0x50>)
 8002822:	2200      	movs	r2, #0
 8002824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002826:	4b09      	ldr	r3, [pc, #36]	@ (800284c <MX_I2C1_Init+0x50>)
 8002828:	2200      	movs	r2, #0
 800282a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800282c:	4b07      	ldr	r3, [pc, #28]	@ (800284c <MX_I2C1_Init+0x50>)
 800282e:	2200      	movs	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002832:	4b06      	ldr	r3, [pc, #24]	@ (800284c <MX_I2C1_Init+0x50>)
 8002834:	2200      	movs	r2, #0
 8002836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002838:	4804      	ldr	r0, [pc, #16]	@ (800284c <MX_I2C1_Init+0x50>)
 800283a:	f000 fcf9 	bl	8003230 <HAL_I2C_Init>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002844:	f000 f882 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}
 800284c:	20000714 	.word	0x20000714
 8002850:	40005400 	.word	0x40005400
 8002854:	00061a80 	.word	0x00061a80

08002858 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 800285c:	4b09      	ldr	r3, [pc, #36]	@ (8002884 <MX_IWDG_Init+0x2c>)
 800285e:	4a0a      	ldr	r2, [pc, #40]	@ (8002888 <MX_IWDG_Init+0x30>)
 8002860:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 8002862:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <MX_IWDG_Init+0x2c>)
 8002864:	2203      	movs	r2, #3
 8002866:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 8002868:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <MX_IWDG_Init+0x2c>)
 800286a:	f640 72ff 	movw	r2, #4095	@ 0xfff
 800286e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8002870:	4804      	ldr	r0, [pc, #16]	@ (8002884 <MX_IWDG_Init+0x2c>)
 8002872:	f001 fff0 	bl	8004856 <HAL_IWDG_Init>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 800287c:	f000 f866 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8002880:	bf00      	nop
 8002882:	bd80      	pop	{r7, pc}
 8002884:	20000768 	.word	0x20000768
 8002888:	40003000 	.word	0x40003000

0800288c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002892:	f107 0310 	add.w	r3, r7, #16
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
 800289a:	605a      	str	r2, [r3, #4]
 800289c:	609a      	str	r2, [r3, #8]
 800289e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80028a0:	4b27      	ldr	r3, [pc, #156]	@ (8002940 <MX_GPIO_Init+0xb4>)
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	4a26      	ldr	r2, [pc, #152]	@ (8002940 <MX_GPIO_Init+0xb4>)
 80028a6:	f043 0310 	orr.w	r3, r3, #16
 80028aa:	6193      	str	r3, [r2, #24]
 80028ac:	4b24      	ldr	r3, [pc, #144]	@ (8002940 <MX_GPIO_Init+0xb4>)
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0310 	and.w	r3, r3, #16
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b21      	ldr	r3, [pc, #132]	@ (8002940 <MX_GPIO_Init+0xb4>)
 80028ba:	699b      	ldr	r3, [r3, #24]
 80028bc:	4a20      	ldr	r2, [pc, #128]	@ (8002940 <MX_GPIO_Init+0xb4>)
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	6193      	str	r3, [r2, #24]
 80028c4:	4b1e      	ldr	r3, [pc, #120]	@ (8002940 <MX_GPIO_Init+0xb4>)
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028d0:	4b1b      	ldr	r3, [pc, #108]	@ (8002940 <MX_GPIO_Init+0xb4>)
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	4a1a      	ldr	r2, [pc, #104]	@ (8002940 <MX_GPIO_Init+0xb4>)
 80028d6:	f043 0308 	orr.w	r3, r3, #8
 80028da:	6193      	str	r3, [r2, #24]
 80028dc:	4b18      	ldr	r3, [pc, #96]	@ (8002940 <MX_GPIO_Init+0xb4>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	f003 0308 	and.w	r3, r3, #8
 80028e4:	607b      	str	r3, [r7, #4]
 80028e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 80028e8:	2201      	movs	r2, #1
 80028ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80028ee:	4815      	ldr	r0, [pc, #84]	@ (8002944 <MX_GPIO_Init+0xb8>)
 80028f0:	f000 fc6d 	bl	80031ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 80028f4:	2201      	movs	r2, #1
 80028f6:	2130      	movs	r1, #48	@ 0x30
 80028f8:	4813      	ldr	r0, [pc, #76]	@ (8002948 <MX_GPIO_Init+0xbc>)
 80028fa:	f000 fc68 	bl	80031ce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80028fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002904:	2301      	movs	r3, #1
 8002906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002908:	2301      	movs	r3, #1
 800290a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800290c:	2303      	movs	r3, #3
 800290e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002910:	f107 0310 	add.w	r3, r7, #16
 8002914:	4619      	mov	r1, r3
 8002916:	480b      	ldr	r0, [pc, #44]	@ (8002944 <MX_GPIO_Init+0xb8>)
 8002918:	f000 fabe 	bl	8002e98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800291c:	2330      	movs	r3, #48	@ 0x30
 800291e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002920:	2301      	movs	r3, #1
 8002922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002924:	2301      	movs	r3, #1
 8002926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002928:	2303      	movs	r3, #3
 800292a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800292c:	f107 0310 	add.w	r3, r7, #16
 8002930:	4619      	mov	r1, r3
 8002932:	4805      	ldr	r0, [pc, #20]	@ (8002948 <MX_GPIO_Init+0xbc>)
 8002934:	f000 fab0 	bl	8002e98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002938:	bf00      	nop
 800293a:	3720      	adds	r7, #32
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000
 8002944:	40011000 	.word	0x40011000
 8002948:	40010800 	.word	0x40010800

0800294c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002950:	b672      	cpsid	i
}
 8002952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002954:	bf00      	nop
 8002956:	e7fd      	b.n	8002954 <Error_Handler+0x8>

08002958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002958:	b480      	push	{r7}
 800295a:	b085      	sub	sp, #20
 800295c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <HAL_MspInit+0x5c>)
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	4a14      	ldr	r2, [pc, #80]	@ (80029b4 <HAL_MspInit+0x5c>)
 8002964:	f043 0301 	orr.w	r3, r3, #1
 8002968:	6193      	str	r3, [r2, #24]
 800296a:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <HAL_MspInit+0x5c>)
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <HAL_MspInit+0x5c>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4a0e      	ldr	r2, [pc, #56]	@ (80029b4 <HAL_MspInit+0x5c>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002980:	61d3      	str	r3, [r2, #28]
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_MspInit+0x5c>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800298e:	4b0a      	ldr	r3, [pc, #40]	@ (80029b8 <HAL_MspInit+0x60>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	4a04      	ldr	r2, [pc, #16]	@ (80029b8 <HAL_MspInit+0x60>)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029aa:	bf00      	nop
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40010000 	.word	0x40010000

080029bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b088      	sub	sp, #32
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]
 80029cc:	605a      	str	r2, [r3, #4]
 80029ce:	609a      	str	r2, [r3, #8]
 80029d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a16      	ldr	r2, [pc, #88]	@ (8002a30 <HAL_I2C_MspInit+0x74>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d125      	bne.n	8002a28 <HAL_I2C_MspInit+0x6c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029dc:	4b15      	ldr	r3, [pc, #84]	@ (8002a34 <HAL_I2C_MspInit+0x78>)
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4a14      	ldr	r2, [pc, #80]	@ (8002a34 <HAL_I2C_MspInit+0x78>)
 80029e2:	f043 0308 	orr.w	r3, r3, #8
 80029e6:	6193      	str	r3, [r2, #24]
 80029e8:	4b12      	ldr	r3, [pc, #72]	@ (8002a34 <HAL_I2C_MspInit+0x78>)
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	f003 0308 	and.w	r3, r3, #8
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80029f4:	23c0      	movs	r3, #192	@ 0xc0
 80029f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80029f8:	2312      	movs	r3, #18
 80029fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80029fc:	2301      	movs	r3, #1
 80029fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a00:	2303      	movs	r3, #3
 8002a02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	4619      	mov	r1, r3
 8002a0a:	480b      	ldr	r0, [pc, #44]	@ (8002a38 <HAL_I2C_MspInit+0x7c>)
 8002a0c:	f000 fa44 	bl	8002e98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a10:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <HAL_I2C_MspInit+0x78>)
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	4a07      	ldr	r2, [pc, #28]	@ (8002a34 <HAL_I2C_MspInit+0x78>)
 8002a16:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a1a:	61d3      	str	r3, [r2, #28]
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_I2C_MspInit+0x78>)
 8002a1e:	69db      	ldr	r3, [r3, #28]
 8002a20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a24:	60bb      	str	r3, [r7, #8]
 8002a26:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a28:	bf00      	nop
 8002a2a:	3720      	adds	r7, #32
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40005400 	.word	0x40005400
 8002a34:	40021000 	.word	0x40021000
 8002a38:	40010c00 	.word	0x40010c00

08002a3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002a40:	bf00      	nop
 8002a42:	e7fd      	b.n	8002a40 <NMI_Handler+0x4>

08002a44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a48:	bf00      	nop
 8002a4a:	e7fd      	b.n	8002a48 <HardFault_Handler+0x4>

08002a4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a50:	bf00      	nop
 8002a52:	e7fd      	b.n	8002a50 <MemManage_Handler+0x4>

08002a54 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a58:	bf00      	nop
 8002a5a:	e7fd      	b.n	8002a58 <BusFault_Handler+0x4>

08002a5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a60:	bf00      	nop
 8002a62:	e7fd      	b.n	8002a60 <UsageFault_Handler+0x4>

08002a64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bc80      	pop	{r7}
 8002a6e:	4770      	bx	lr

08002a70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a74:	bf00      	nop
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bc80      	pop	{r7}
 8002a7a:	4770      	bx	lr

08002a7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a80:	bf00      	nop
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Systick_Function();
 8002a8c:	f7fd ffe4 	bl	8000a58 <Systick_Function>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a90:	f000 f8b4 	bl	8002bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a94:	bf00      	nop
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002a9c:	4802      	ldr	r0, [pc, #8]	@ (8002aa8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8002a9e:	f002 f849 	bl	8004b34 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20001444 	.word	0x20001444

08002aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ab4:	4a14      	ldr	r2, [pc, #80]	@ (8002b08 <_sbrk+0x5c>)
 8002ab6:	4b15      	ldr	r3, [pc, #84]	@ (8002b0c <_sbrk+0x60>)
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac0:	4b13      	ldr	r3, [pc, #76]	@ (8002b10 <_sbrk+0x64>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d102      	bne.n	8002ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ac8:	4b11      	ldr	r3, [pc, #68]	@ (8002b10 <_sbrk+0x64>)
 8002aca:	4a12      	ldr	r2, [pc, #72]	@ (8002b14 <_sbrk+0x68>)
 8002acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ace:	4b10      	ldr	r3, [pc, #64]	@ (8002b10 <_sbrk+0x64>)
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d207      	bcs.n	8002aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002adc:	f008 fd00 	bl	800b4e0 <__errno>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	220c      	movs	r2, #12
 8002ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8002aea:	e009      	b.n	8002b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002aec:	4b08      	ldr	r3, [pc, #32]	@ (8002b10 <_sbrk+0x64>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002af2:	4b07      	ldr	r3, [pc, #28]	@ (8002b10 <_sbrk+0x64>)
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4413      	add	r3, r2
 8002afa:	4a05      	ldr	r2, [pc, #20]	@ (8002b10 <_sbrk+0x64>)
 8002afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002afe:	68fb      	ldr	r3, [r7, #12]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3718      	adds	r7, #24
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}
 8002b08:	20005000 	.word	0x20005000
 8002b0c:	00002000 	.word	0x00002000
 8002b10:	20000774 	.word	0x20000774
 8002b14:	20001a88 	.word	0x20001a88

08002b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bc80      	pop	{r7}
 8002b22:	4770      	bx	lr

08002b24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b24:	f7ff fff8 	bl	8002b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b28:	480b      	ldr	r0, [pc, #44]	@ (8002b58 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b2a:	490c      	ldr	r1, [pc, #48]	@ (8002b5c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b60 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b30:	e002      	b.n	8002b38 <LoopCopyDataInit>

08002b32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b36:	3304      	adds	r3, #4

08002b38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b3c:	d3f9      	bcc.n	8002b32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b3e:	4a09      	ldr	r2, [pc, #36]	@ (8002b64 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b40:	4c09      	ldr	r4, [pc, #36]	@ (8002b68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b44:	e001      	b.n	8002b4a <LoopFillZerobss>

08002b46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b48:	3204      	adds	r2, #4

08002b4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b4c:	d3fb      	bcc.n	8002b46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b4e:	f008 fccd 	bl	800b4ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b52:	f7ff fde7 	bl	8002724 <main>
  bx lr
 8002b56:	4770      	bx	lr
  ldr r0, =_sdata
 8002b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b5c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002b60:	0800e8a8 	.word	0x0800e8a8
  ldr r2, =_sbss
 8002b64:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8002b68:	20001a84 	.word	0x20001a84

08002b6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC1_2_IRQHandler>
	...

08002b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b74:	4b08      	ldr	r3, [pc, #32]	@ (8002b98 <HAL_Init+0x28>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a07      	ldr	r2, [pc, #28]	@ (8002b98 <HAL_Init+0x28>)
 8002b7a:	f043 0310 	orr.w	r3, r3, #16
 8002b7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b80:	2003      	movs	r0, #3
 8002b82:	f000 f947 	bl	8002e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b86:	200f      	movs	r0, #15
 8002b88:	f000 f808 	bl	8002b9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b8c:	f7ff fee4 	bl	8002958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40022000 	.word	0x40022000

08002b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b082      	sub	sp, #8
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ba4:	4b12      	ldr	r3, [pc, #72]	@ (8002bf0 <HAL_InitTick+0x54>)
 8002ba6:	681a      	ldr	r2, [r3, #0]
 8002ba8:	4b12      	ldr	r3, [pc, #72]	@ (8002bf4 <HAL_InitTick+0x58>)
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	4619      	mov	r1, r3
 8002bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f95f 	bl	8002e7e <HAL_SYSTICK_Config>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e00e      	b.n	8002be8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b0f      	cmp	r3, #15
 8002bce:	d80a      	bhi.n	8002be6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	6879      	ldr	r1, [r7, #4]
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f000 f927 	bl	8002e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bdc:	4a06      	ldr	r2, [pc, #24]	@ (8002bf8 <HAL_InitTick+0x5c>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002be2:	2300      	movs	r3, #0
 8002be4:	e000      	b.n	8002be8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000018 	.word	0x20000018
 8002bf4:	20000020 	.word	0x20000020
 8002bf8:	2000001c 	.word	0x2000001c

08002bfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c00:	4b05      	ldr	r3, [pc, #20]	@ (8002c18 <HAL_IncTick+0x1c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	4b05      	ldr	r3, [pc, #20]	@ (8002c1c <HAL_IncTick+0x20>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4413      	add	r3, r2
 8002c0c:	4a03      	ldr	r2, [pc, #12]	@ (8002c1c <HAL_IncTick+0x20>)
 8002c0e:	6013      	str	r3, [r2, #0]
}
 8002c10:	bf00      	nop
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	20000020 	.word	0x20000020
 8002c1c:	20000778 	.word	0x20000778

08002c20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return uwTick;
 8002c24:	4b02      	ldr	r3, [pc, #8]	@ (8002c30 <HAL_GetTick+0x10>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr
 8002c30:	20000778 	.word	0x20000778

08002c34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_GetTick>
 8002c40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c4c:	d005      	beq.n	8002c5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <HAL_Delay+0x44>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	461a      	mov	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	4413      	add	r3, r2
 8002c58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c5a:	bf00      	nop
 8002c5c:	f7ff ffe0 	bl	8002c20 <HAL_GetTick>
 8002c60:	4602      	mov	r2, r0
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	68fa      	ldr	r2, [r7, #12]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d8f7      	bhi.n	8002c5c <HAL_Delay+0x28>
  {
  }
}
 8002c6c:	bf00      	nop
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	20000020 	.word	0x20000020

08002c7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c92:	68ba      	ldr	r2, [r7, #8]
 8002c94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c98:	4013      	ands	r3, r2
 8002c9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cae:	4a04      	ldr	r2, [pc, #16]	@ (8002cc0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	60d3      	str	r3, [r2, #12]
}
 8002cb4:	bf00      	nop
 8002cb6:	3714      	adds	r7, #20
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	e000ed00 	.word	0xe000ed00

08002cc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <__NVIC_GetPriorityGrouping+0x18>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	0a1b      	lsrs	r3, r3, #8
 8002cce:	f003 0307 	and.w	r3, r3, #7
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bc80      	pop	{r7}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop
 8002cdc:	e000ed00 	.word	0xe000ed00

08002ce0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	db0b      	blt.n	8002d0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cf2:	79fb      	ldrb	r3, [r7, #7]
 8002cf4:	f003 021f 	and.w	r2, r3, #31
 8002cf8:	4906      	ldr	r1, [pc, #24]	@ (8002d14 <__NVIC_EnableIRQ+0x34>)
 8002cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfe:	095b      	lsrs	r3, r3, #5
 8002d00:	2001      	movs	r0, #1
 8002d02:	fa00 f202 	lsl.w	r2, r0, r2
 8002d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr
 8002d14:	e000e100 	.word	0xe000e100

08002d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0a      	blt.n	8002d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	490c      	ldr	r1, [pc, #48]	@ (8002d64 <__NVIC_SetPriority+0x4c>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d40:	e00a      	b.n	8002d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4908      	ldr	r1, [pc, #32]	@ (8002d68 <__NVIC_SetPriority+0x50>)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	440b      	add	r3, r1
 8002d56:	761a      	strb	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bc80      	pop	{r7}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000e100 	.word	0xe000e100
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	@ 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f1c3 0307 	rsb	r3, r3, #7
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	bf28      	it	cs
 8002d8a:	2304      	movcs	r3, #4
 8002d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d902      	bls.n	8002d9c <NVIC_EncodePriority+0x30>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3b03      	subs	r3, #3
 8002d9a:	e000      	b.n	8002d9e <NVIC_EncodePriority+0x32>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	43d9      	mvns	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	4313      	orrs	r3, r2
         );
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	@ 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002de0:	d301      	bcc.n	8002de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002de2:	2301      	movs	r3, #1
 8002de4:	e00f      	b.n	8002e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e10 <SysTick_Config+0x40>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dee:	210f      	movs	r1, #15
 8002df0:	f04f 30ff 	mov.w	r0, #4294967295
 8002df4:	f7ff ff90 	bl	8002d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df8:	4b05      	ldr	r3, [pc, #20]	@ (8002e10 <SysTick_Config+0x40>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dfe:	4b04      	ldr	r3, [pc, #16]	@ (8002e10 <SysTick_Config+0x40>)
 8002e00:	2207      	movs	r2, #7
 8002e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	e000e010 	.word	0xe000e010

08002e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f7ff ff2d 	bl	8002c7c <__NVIC_SetPriorityGrouping>
}
 8002e22:	bf00      	nop
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	4603      	mov	r3, r0
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e3c:	f7ff ff42 	bl	8002cc4 <__NVIC_GetPriorityGrouping>
 8002e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f7ff ff90 	bl	8002d6c <NVIC_EncodePriority>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e52:	4611      	mov	r1, r2
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7ff ff5f 	bl	8002d18 <__NVIC_SetPriority>
}
 8002e5a:	bf00      	nop
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b082      	sub	sp, #8
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff ff35 	bl	8002ce0 <__NVIC_EnableIRQ>
}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b082      	sub	sp, #8
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f7ff ffa2 	bl	8002dd0 <SysTick_Config>
 8002e8c:	4603      	mov	r3, r0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b08b      	sub	sp, #44	@ 0x2c
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eaa:	e169      	b.n	8003180 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002eac:	2201      	movs	r2, #1
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69fa      	ldr	r2, [r7, #28]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	f040 8158 	bne.w	800317a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4a9a      	ldr	r2, [pc, #616]	@ (8003138 <HAL_GPIO_Init+0x2a0>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d05e      	beq.n	8002f92 <HAL_GPIO_Init+0xfa>
 8002ed4:	4a98      	ldr	r2, [pc, #608]	@ (8003138 <HAL_GPIO_Init+0x2a0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d875      	bhi.n	8002fc6 <HAL_GPIO_Init+0x12e>
 8002eda:	4a98      	ldr	r2, [pc, #608]	@ (800313c <HAL_GPIO_Init+0x2a4>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d058      	beq.n	8002f92 <HAL_GPIO_Init+0xfa>
 8002ee0:	4a96      	ldr	r2, [pc, #600]	@ (800313c <HAL_GPIO_Init+0x2a4>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d86f      	bhi.n	8002fc6 <HAL_GPIO_Init+0x12e>
 8002ee6:	4a96      	ldr	r2, [pc, #600]	@ (8003140 <HAL_GPIO_Init+0x2a8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d052      	beq.n	8002f92 <HAL_GPIO_Init+0xfa>
 8002eec:	4a94      	ldr	r2, [pc, #592]	@ (8003140 <HAL_GPIO_Init+0x2a8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d869      	bhi.n	8002fc6 <HAL_GPIO_Init+0x12e>
 8002ef2:	4a94      	ldr	r2, [pc, #592]	@ (8003144 <HAL_GPIO_Init+0x2ac>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d04c      	beq.n	8002f92 <HAL_GPIO_Init+0xfa>
 8002ef8:	4a92      	ldr	r2, [pc, #584]	@ (8003144 <HAL_GPIO_Init+0x2ac>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d863      	bhi.n	8002fc6 <HAL_GPIO_Init+0x12e>
 8002efe:	4a92      	ldr	r2, [pc, #584]	@ (8003148 <HAL_GPIO_Init+0x2b0>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d046      	beq.n	8002f92 <HAL_GPIO_Init+0xfa>
 8002f04:	4a90      	ldr	r2, [pc, #576]	@ (8003148 <HAL_GPIO_Init+0x2b0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d85d      	bhi.n	8002fc6 <HAL_GPIO_Init+0x12e>
 8002f0a:	2b12      	cmp	r3, #18
 8002f0c:	d82a      	bhi.n	8002f64 <HAL_GPIO_Init+0xcc>
 8002f0e:	2b12      	cmp	r3, #18
 8002f10:	d859      	bhi.n	8002fc6 <HAL_GPIO_Init+0x12e>
 8002f12:	a201      	add	r2, pc, #4	@ (adr r2, 8002f18 <HAL_GPIO_Init+0x80>)
 8002f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f18:	08002f93 	.word	0x08002f93
 8002f1c:	08002f6d 	.word	0x08002f6d
 8002f20:	08002f7f 	.word	0x08002f7f
 8002f24:	08002fc1 	.word	0x08002fc1
 8002f28:	08002fc7 	.word	0x08002fc7
 8002f2c:	08002fc7 	.word	0x08002fc7
 8002f30:	08002fc7 	.word	0x08002fc7
 8002f34:	08002fc7 	.word	0x08002fc7
 8002f38:	08002fc7 	.word	0x08002fc7
 8002f3c:	08002fc7 	.word	0x08002fc7
 8002f40:	08002fc7 	.word	0x08002fc7
 8002f44:	08002fc7 	.word	0x08002fc7
 8002f48:	08002fc7 	.word	0x08002fc7
 8002f4c:	08002fc7 	.word	0x08002fc7
 8002f50:	08002fc7 	.word	0x08002fc7
 8002f54:	08002fc7 	.word	0x08002fc7
 8002f58:	08002fc7 	.word	0x08002fc7
 8002f5c:	08002f75 	.word	0x08002f75
 8002f60:	08002f89 	.word	0x08002f89
 8002f64:	4a79      	ldr	r2, [pc, #484]	@ (800314c <HAL_GPIO_Init+0x2b4>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d013      	beq.n	8002f92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f6a:	e02c      	b.n	8002fc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	623b      	str	r3, [r7, #32]
          break;
 8002f72:	e029      	b.n	8002fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	623b      	str	r3, [r7, #32]
          break;
 8002f7c:	e024      	b.n	8002fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	3308      	adds	r3, #8
 8002f84:	623b      	str	r3, [r7, #32]
          break;
 8002f86:	e01f      	b.n	8002fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	623b      	str	r3, [r7, #32]
          break;
 8002f90:	e01a      	b.n	8002fc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d102      	bne.n	8002fa0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f9a:	2304      	movs	r3, #4
 8002f9c:	623b      	str	r3, [r7, #32]
          break;
 8002f9e:	e013      	b.n	8002fc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fa8:	2308      	movs	r3, #8
 8002faa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69fa      	ldr	r2, [r7, #28]
 8002fb0:	611a      	str	r2, [r3, #16]
          break;
 8002fb2:	e009      	b.n	8002fc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002fb4:	2308      	movs	r3, #8
 8002fb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69fa      	ldr	r2, [r7, #28]
 8002fbc:	615a      	str	r2, [r3, #20]
          break;
 8002fbe:	e003      	b.n	8002fc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	623b      	str	r3, [r7, #32]
          break;
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x130>
          break;
 8002fc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2bff      	cmp	r3, #255	@ 0xff
 8002fcc:	d801      	bhi.n	8002fd2 <HAL_GPIO_Init+0x13a>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	e001      	b.n	8002fd6 <HAL_GPIO_Init+0x13e>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	3304      	adds	r3, #4
 8002fd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	2bff      	cmp	r3, #255	@ 0xff
 8002fdc:	d802      	bhi.n	8002fe4 <HAL_GPIO_Init+0x14c>
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	e002      	b.n	8002fea <HAL_GPIO_Init+0x152>
 8002fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe6:	3b08      	subs	r3, #8
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	210f      	movs	r1, #15
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	401a      	ands	r2, r3
 8002ffc:	6a39      	ldr	r1, [r7, #32]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	431a      	orrs	r2, r3
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003012:	2b00      	cmp	r3, #0
 8003014:	f000 80b1 	beq.w	800317a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003018:	4b4d      	ldr	r3, [pc, #308]	@ (8003150 <HAL_GPIO_Init+0x2b8>)
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	4a4c      	ldr	r2, [pc, #304]	@ (8003150 <HAL_GPIO_Init+0x2b8>)
 800301e:	f043 0301 	orr.w	r3, r3, #1
 8003022:	6193      	str	r3, [r2, #24]
 8003024:	4b4a      	ldr	r3, [pc, #296]	@ (8003150 <HAL_GPIO_Init+0x2b8>)
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	60bb      	str	r3, [r7, #8]
 800302e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003030:	4a48      	ldr	r2, [pc, #288]	@ (8003154 <HAL_GPIO_Init+0x2bc>)
 8003032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003034:	089b      	lsrs	r3, r3, #2
 8003036:	3302      	adds	r3, #2
 8003038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800303c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800303e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	220f      	movs	r2, #15
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	43db      	mvns	r3, r3
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	4013      	ands	r3, r2
 8003052:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a40      	ldr	r2, [pc, #256]	@ (8003158 <HAL_GPIO_Init+0x2c0>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d013      	beq.n	8003084 <HAL_GPIO_Init+0x1ec>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a3f      	ldr	r2, [pc, #252]	@ (800315c <HAL_GPIO_Init+0x2c4>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d00d      	beq.n	8003080 <HAL_GPIO_Init+0x1e8>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a3e      	ldr	r2, [pc, #248]	@ (8003160 <HAL_GPIO_Init+0x2c8>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d007      	beq.n	800307c <HAL_GPIO_Init+0x1e4>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a3d      	ldr	r2, [pc, #244]	@ (8003164 <HAL_GPIO_Init+0x2cc>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d101      	bne.n	8003078 <HAL_GPIO_Init+0x1e0>
 8003074:	2303      	movs	r3, #3
 8003076:	e006      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003078:	2304      	movs	r3, #4
 800307a:	e004      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 800307c:	2302      	movs	r3, #2
 800307e:	e002      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_GPIO_Init+0x1ee>
 8003084:	2300      	movs	r3, #0
 8003086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003088:	f002 0203 	and.w	r2, r2, #3
 800308c:	0092      	lsls	r2, r2, #2
 800308e:	4093      	lsls	r3, r2
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003096:	492f      	ldr	r1, [pc, #188]	@ (8003154 <HAL_GPIO_Init+0x2bc>)
 8003098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80030b0:	4b2d      	ldr	r3, [pc, #180]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	492c      	ldr	r1, [pc, #176]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	608b      	str	r3, [r1, #8]
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80030be:	4b2a      	ldr	r3, [pc, #168]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 80030c0:	689a      	ldr	r2, [r3, #8]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4928      	ldr	r1, [pc, #160]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80030d8:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	4922      	ldr	r1, [pc, #136]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	60cb      	str	r3, [r1, #12]
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80030e6:	4b20      	ldr	r3, [pc, #128]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	491e      	ldr	r1, [pc, #120]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003100:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	4918      	ldr	r1, [pc, #96]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
 800310c:	e006      	b.n	800311c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800310e:	4b16      	ldr	r3, [pc, #88]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	43db      	mvns	r3, r3
 8003116:	4914      	ldr	r1, [pc, #80]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 8003118:	4013      	ands	r3, r2
 800311a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003124:	2b00      	cmp	r3, #0
 8003126:	d021      	beq.n	800316c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003128:	4b0f      	ldr	r3, [pc, #60]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	490e      	ldr	r1, [pc, #56]	@ (8003168 <HAL_GPIO_Init+0x2d0>)
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
 8003134:	e021      	b.n	800317a <HAL_GPIO_Init+0x2e2>
 8003136:	bf00      	nop
 8003138:	10320000 	.word	0x10320000
 800313c:	10310000 	.word	0x10310000
 8003140:	10220000 	.word	0x10220000
 8003144:	10210000 	.word	0x10210000
 8003148:	10120000 	.word	0x10120000
 800314c:	10110000 	.word	0x10110000
 8003150:	40021000 	.word	0x40021000
 8003154:	40010000 	.word	0x40010000
 8003158:	40010800 	.word	0x40010800
 800315c:	40010c00 	.word	0x40010c00
 8003160:	40011000 	.word	0x40011000
 8003164:	40011400 	.word	0x40011400
 8003168:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800316c:	4b0b      	ldr	r3, [pc, #44]	@ (800319c <HAL_GPIO_Init+0x304>)
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	43db      	mvns	r3, r3
 8003174:	4909      	ldr	r1, [pc, #36]	@ (800319c <HAL_GPIO_Init+0x304>)
 8003176:	4013      	ands	r3, r2
 8003178:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	3301      	adds	r3, #1
 800317e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003186:	fa22 f303 	lsr.w	r3, r2, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	f47f ae8e 	bne.w	8002eac <HAL_GPIO_Init+0x14>
  }
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	372c      	adds	r7, #44	@ 0x2c
 8003196:	46bd      	mov	sp, r7
 8003198:	bc80      	pop	{r7}
 800319a:	4770      	bx	lr
 800319c:	40010400 	.word	0x40010400

080031a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689a      	ldr	r2, [r3, #8]
 80031b0:	887b      	ldrh	r3, [r7, #2]
 80031b2:	4013      	ands	r3, r2
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031b8:	2301      	movs	r3, #1
 80031ba:	73fb      	strb	r3, [r7, #15]
 80031bc:	e001      	b.n	80031c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3714      	adds	r7, #20
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bc80      	pop	{r7}
 80031cc:	4770      	bx	lr

080031ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031ce:	b480      	push	{r7}
 80031d0:	b083      	sub	sp, #12
 80031d2:	af00      	add	r7, sp, #0
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	460b      	mov	r3, r1
 80031d8:	807b      	strh	r3, [r7, #2]
 80031da:	4613      	mov	r3, r2
 80031dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031de:	787b      	ldrb	r3, [r7, #1]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d003      	beq.n	80031ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031e4:	887a      	ldrh	r2, [r7, #2]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031ea:	e003      	b.n	80031f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031ec:	887b      	ldrh	r3, [r7, #2]
 80031ee:	041a      	lsls	r2, r3, #16
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	611a      	str	r2, [r3, #16]
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bc80      	pop	{r7}
 80031fc:	4770      	bx	lr

080031fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031fe:	b480      	push	{r7}
 8003200:	b085      	sub	sp, #20
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003210:	887a      	ldrh	r2, [r7, #2]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4013      	ands	r3, r2
 8003216:	041a      	lsls	r2, r3, #16
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	43d9      	mvns	r1, r3
 800321c:	887b      	ldrh	r3, [r7, #2]
 800321e:	400b      	ands	r3, r1
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	611a      	str	r2, [r3, #16]
}
 8003226:	bf00      	nop
 8003228:	3714      	adds	r7, #20
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d101      	bne.n	8003242 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e12b      	b.n	800349a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f7ff fbb0 	bl	80029bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2224      	movs	r2, #36	@ 0x24
 8003260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003282:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003292:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003294:	f003 fc5c 	bl	8006b50 <HAL_RCC_GetPCLK1Freq>
 8003298:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4a81      	ldr	r2, [pc, #516]	@ (80034a4 <HAL_I2C_Init+0x274>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d807      	bhi.n	80032b4 <HAL_I2C_Init+0x84>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4a80      	ldr	r2, [pc, #512]	@ (80034a8 <HAL_I2C_Init+0x278>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	bf94      	ite	ls
 80032ac:	2301      	movls	r3, #1
 80032ae:	2300      	movhi	r3, #0
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	e006      	b.n	80032c2 <HAL_I2C_Init+0x92>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4a7d      	ldr	r2, [pc, #500]	@ (80034ac <HAL_I2C_Init+0x27c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	bf94      	ite	ls
 80032bc:	2301      	movls	r3, #1
 80032be:	2300      	movhi	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0e7      	b.n	800349a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	4a78      	ldr	r2, [pc, #480]	@ (80034b0 <HAL_I2C_Init+0x280>)
 80032ce:	fba2 2303 	umull	r2, r3, r2, r3
 80032d2:	0c9b      	lsrs	r3, r3, #18
 80032d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68ba      	ldr	r2, [r7, #8]
 80032e6:	430a      	orrs	r2, r1
 80032e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	4a6a      	ldr	r2, [pc, #424]	@ (80034a4 <HAL_I2C_Init+0x274>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d802      	bhi.n	8003304 <HAL_I2C_Init+0xd4>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	3301      	adds	r3, #1
 8003302:	e009      	b.n	8003318 <HAL_I2C_Init+0xe8>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800330a:	fb02 f303 	mul.w	r3, r2, r3
 800330e:	4a69      	ldr	r2, [pc, #420]	@ (80034b4 <HAL_I2C_Init+0x284>)
 8003310:	fba2 2303 	umull	r2, r3, r2, r3
 8003314:	099b      	lsrs	r3, r3, #6
 8003316:	3301      	adds	r3, #1
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6812      	ldr	r2, [r2, #0]
 800331c:	430b      	orrs	r3, r1
 800331e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800332a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	495c      	ldr	r1, [pc, #368]	@ (80034a4 <HAL_I2C_Init+0x274>)
 8003334:	428b      	cmp	r3, r1
 8003336:	d819      	bhi.n	800336c <HAL_I2C_Init+0x13c>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	1e59      	subs	r1, r3, #1
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	005b      	lsls	r3, r3, #1
 8003342:	fbb1 f3f3 	udiv	r3, r1, r3
 8003346:	1c59      	adds	r1, r3, #1
 8003348:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800334c:	400b      	ands	r3, r1
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00a      	beq.n	8003368 <HAL_I2C_Init+0x138>
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1e59      	subs	r1, r3, #1
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	005b      	lsls	r3, r3, #1
 800335c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003360:	3301      	adds	r3, #1
 8003362:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003366:	e051      	b.n	800340c <HAL_I2C_Init+0x1dc>
 8003368:	2304      	movs	r3, #4
 800336a:	e04f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <HAL_I2C_Init+0x168>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	1e58      	subs	r0, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6859      	ldr	r1, [r3, #4]
 800337c:	460b      	mov	r3, r1
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	440b      	add	r3, r1
 8003382:	fbb0 f3f3 	udiv	r3, r0, r3
 8003386:	3301      	adds	r3, #1
 8003388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800338c:	2b00      	cmp	r3, #0
 800338e:	bf0c      	ite	eq
 8003390:	2301      	moveq	r3, #1
 8003392:	2300      	movne	r3, #0
 8003394:	b2db      	uxtb	r3, r3
 8003396:	e012      	b.n	80033be <HAL_I2C_Init+0x18e>
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	1e58      	subs	r0, r3, #1
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6859      	ldr	r1, [r3, #4]
 80033a0:	460b      	mov	r3, r1
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	0099      	lsls	r1, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ae:	3301      	adds	r3, #1
 80033b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	bf0c      	ite	eq
 80033b8:	2301      	moveq	r3, #1
 80033ba:	2300      	movne	r3, #0
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_I2C_Init+0x196>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e022      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10e      	bne.n	80033ec <HAL_I2C_Init+0x1bc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e58      	subs	r0, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6859      	ldr	r1, [r3, #4]
 80033d6:	460b      	mov	r3, r1
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	440b      	add	r3, r1
 80033dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e0:	3301      	adds	r3, #1
 80033e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80033ea:	e00f      	b.n	800340c <HAL_I2C_Init+0x1dc>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	440b      	add	r3, r1
 80033fa:	0099      	lsls	r1, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003408:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	6809      	ldr	r1, [r1, #0]
 8003410:	4313      	orrs	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69da      	ldr	r2, [r3, #28]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	430a      	orrs	r2, r1
 800342e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800343a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6911      	ldr	r1, [r2, #16]
 8003442:	687a      	ldr	r2, [r7, #4]
 8003444:	68d2      	ldr	r2, [r2, #12]
 8003446:	4311      	orrs	r1, r2
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6812      	ldr	r2, [r2, #0]
 800344c:	430b      	orrs	r3, r1
 800344e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	695a      	ldr	r2, [r3, #20]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	431a      	orrs	r2, r3
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2220      	movs	r2, #32
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	000186a0 	.word	0x000186a0
 80034a8:	001e847f 	.word	0x001e847f
 80034ac:	003d08ff 	.word	0x003d08ff
 80034b0:	431bde83 	.word	0x431bde83
 80034b4:	10624dd3 	.word	0x10624dd3

080034b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b088      	sub	sp, #32
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	607a      	str	r2, [r7, #4]
 80034c2:	461a      	mov	r2, r3
 80034c4:	460b      	mov	r3, r1
 80034c6:	817b      	strh	r3, [r7, #10]
 80034c8:	4613      	mov	r3, r2
 80034ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034cc:	f7ff fba8 	bl	8002c20 <HAL_GetTick>
 80034d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 80e0 	bne.w	80036a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	9300      	str	r3, [sp, #0]
 80034e4:	2319      	movs	r3, #25
 80034e6:	2201      	movs	r2, #1
 80034e8:	4970      	ldr	r1, [pc, #448]	@ (80036ac <HAL_I2C_Master_Transmit+0x1f4>)
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 ff7e 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80034f6:	2302      	movs	r3, #2
 80034f8:	e0d3      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003500:	2b01      	cmp	r3, #1
 8003502:	d101      	bne.n	8003508 <HAL_I2C_Master_Transmit+0x50>
 8003504:	2302      	movs	r3, #2
 8003506:	e0cc      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	2b01      	cmp	r3, #1
 800351c:	d007      	beq.n	800352e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800353c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2221      	movs	r2, #33	@ 0x21
 8003542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2210      	movs	r2, #16
 800354a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	893a      	ldrh	r2, [r7, #8]
 800355e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003564:	b29a      	uxth	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a50      	ldr	r2, [pc, #320]	@ (80036b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800356e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003570:	8979      	ldrh	r1, [r7, #10]
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	6a3a      	ldr	r2, [r7, #32]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 fd38 	bl	8003fec <I2C_MasterRequestWrite>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e08d      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	695b      	ldr	r3, [r3, #20]
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	613b      	str	r3, [r7, #16]
 800359a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800359c:	e066      	b.n	800366c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	6a39      	ldr	r1, [r7, #32]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f001 f83c 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00d      	beq.n	80035ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	2b04      	cmp	r3, #4
 80035b4:	d107      	bne.n	80035c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e06b      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ce:	781a      	ldrb	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	3b01      	subs	r3, #1
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	f003 0304 	and.w	r3, r3, #4
 8003604:	2b04      	cmp	r3, #4
 8003606:	d11b      	bne.n	8003640 <HAL_I2C_Master_Transmit+0x188>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	d017      	beq.n	8003640 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800362a:	b29b      	uxth	r3, r3
 800362c:	3b01      	subs	r3, #1
 800362e:	b29a      	uxth	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003638:	3b01      	subs	r3, #1
 800363a:	b29a      	uxth	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003640:	697a      	ldr	r2, [r7, #20]
 8003642:	6a39      	ldr	r1, [r7, #32]
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f001 f833 	bl	80046b0 <I2C_WaitOnBTFFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	2b04      	cmp	r3, #4
 8003656:	d107      	bne.n	8003668 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003666:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e01a      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003670:	2b00      	cmp	r3, #0
 8003672:	d194      	bne.n	800359e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003682:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2220      	movs	r2, #32
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800369c:	2300      	movs	r3, #0
 800369e:	e000      	b.n	80036a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036a0:	2302      	movs	r3, #2
  }
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	00100002 	.word	0x00100002
 80036b0:	ffff0000 	.word	0xffff0000

080036b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b088      	sub	sp, #32
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	60f8      	str	r0, [r7, #12]
 80036bc:	4608      	mov	r0, r1
 80036be:	4611      	mov	r1, r2
 80036c0:	461a      	mov	r2, r3
 80036c2:	4603      	mov	r3, r0
 80036c4:	817b      	strh	r3, [r7, #10]
 80036c6:	460b      	mov	r3, r1
 80036c8:	813b      	strh	r3, [r7, #8]
 80036ca:	4613      	mov	r3, r2
 80036cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036ce:	f7ff faa7 	bl	8002c20 <HAL_GetTick>
 80036d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036da:	b2db      	uxtb	r3, r3
 80036dc:	2b20      	cmp	r3, #32
 80036de:	f040 80d9 	bne.w	8003894 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	2319      	movs	r3, #25
 80036e8:	2201      	movs	r2, #1
 80036ea:	496d      	ldr	r1, [pc, #436]	@ (80038a0 <HAL_I2C_Mem_Write+0x1ec>)
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fe7d 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
 80036fa:	e0cc      	b.n	8003896 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003702:	2b01      	cmp	r3, #1
 8003704:	d101      	bne.n	800370a <HAL_I2C_Mem_Write+0x56>
 8003706:	2302      	movs	r3, #2
 8003708:	e0c5      	b.n	8003896 <HAL_I2C_Mem_Write+0x1e2>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 0301 	and.w	r3, r3, #1
 800371c:	2b01      	cmp	r3, #1
 800371e:	d007      	beq.n	8003730 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0201 	orr.w	r2, r2, #1
 800372e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800373e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2221      	movs	r2, #33	@ 0x21
 8003744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2240      	movs	r2, #64	@ 0x40
 800374c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6a3a      	ldr	r2, [r7, #32]
 800375a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003760:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003766:	b29a      	uxth	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a4d      	ldr	r2, [pc, #308]	@ (80038a4 <HAL_I2C_Mem_Write+0x1f0>)
 8003770:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003772:	88f8      	ldrh	r0, [r7, #6]
 8003774:	893a      	ldrh	r2, [r7, #8]
 8003776:	8979      	ldrh	r1, [r7, #10]
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	9301      	str	r3, [sp, #4]
 800377c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	4603      	mov	r3, r0
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 fcb4 	bl	80040f0 <I2C_RequestMemoryWrite>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d052      	beq.n	8003834 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e081      	b.n	8003896 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 ff42 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037a6:	2b04      	cmp	r3, #4
 80037a8:	d107      	bne.n	80037ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e06b      	b.n	8003896 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	781a      	ldrb	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b04      	cmp	r3, #4
 80037fa:	d11b      	bne.n	8003834 <HAL_I2C_Mem_Write+0x180>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003800:	2b00      	cmp	r3, #0
 8003802:	d017      	beq.n	8003834 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003814:	1c5a      	adds	r2, r3, #1
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800381e:	3b01      	subs	r3, #1
 8003820:	b29a      	uxth	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382a:	b29b      	uxth	r3, r3
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1aa      	bne.n	8003792 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800383c:	697a      	ldr	r2, [r7, #20]
 800383e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 ff35 	bl	80046b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d00d      	beq.n	8003868 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	2b04      	cmp	r3, #4
 8003852:	d107      	bne.n	8003864 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003862:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e016      	b.n	8003896 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003876:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2200      	movs	r2, #0
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	00100002 	.word	0x00100002
 80038a4:	ffff0000 	.word	0xffff0000

080038a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08c      	sub	sp, #48	@ 0x30
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	4608      	mov	r0, r1
 80038b2:	4611      	mov	r1, r2
 80038b4:	461a      	mov	r2, r3
 80038b6:	4603      	mov	r3, r0
 80038b8:	817b      	strh	r3, [r7, #10]
 80038ba:	460b      	mov	r3, r1
 80038bc:	813b      	strh	r3, [r7, #8]
 80038be:	4613      	mov	r3, r2
 80038c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038c6:	f7ff f9ab 	bl	8002c20 <HAL_GetTick>
 80038ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	f040 8250 	bne.w	8003d7a <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80038da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	2319      	movs	r3, #25
 80038e0:	2201      	movs	r2, #1
 80038e2:	4982      	ldr	r1, [pc, #520]	@ (8003aec <HAL_I2C_Mem_Read+0x244>)
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fd81 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80038f0:	2302      	movs	r3, #2
 80038f2:	e243      	b.n	8003d7c <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_I2C_Mem_Read+0x5a>
 80038fe:	2302      	movs	r3, #2
 8003900:	e23c      	b.n	8003d7c <HAL_I2C_Mem_Read+0x4d4>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2201      	movs	r2, #1
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b01      	cmp	r3, #1
 8003916:	d007      	beq.n	8003928 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f042 0201 	orr.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003936:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2222      	movs	r2, #34	@ 0x22
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2240      	movs	r2, #64	@ 0x40
 8003944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003952:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003958:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4a62      	ldr	r2, [pc, #392]	@ (8003af0 <HAL_I2C_Mem_Read+0x248>)
 8003968:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800396a:	88f8      	ldrh	r0, [r7, #6]
 800396c:	893a      	ldrh	r2, [r7, #8]
 800396e:	8979      	ldrh	r1, [r7, #10]
 8003970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003972:	9301      	str	r3, [sp, #4]
 8003974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	4603      	mov	r3, r0
 800397a:	68f8      	ldr	r0, [r7, #12]
 800397c:	f000 fc4e 	bl	800421c <I2C_RequestMemoryRead>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e1f8      	b.n	8003d7c <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800398e:	2b00      	cmp	r3, #0
 8003990:	d113      	bne.n	80039ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003992:	2300      	movs	r3, #0
 8003994:	61fb      	str	r3, [r7, #28]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695b      	ldr	r3, [r3, #20]
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039b6:	601a      	str	r2, [r3, #0]
 80039b8:	e1cc      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039be:	2b01      	cmp	r3, #1
 80039c0:	d11e      	bne.n	8003a00 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039d2:	b672      	cpsid	i
}
 80039d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80039fc:	b662      	cpsie	i
}
 80039fe:	e035      	b.n	8003a6c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a04:	2b02      	cmp	r3, #2
 8003a06:	d11e      	bne.n	8003a46 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003a18:	b672      	cpsid	i
}
 8003a1a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	617b      	str	r3, [r7, #20]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003a42:	b662      	cpsie	i
}
 8003a44:	e012      	b.n	8003a6c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003a54:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a56:	2300      	movs	r3, #0
 8003a58:	613b      	str	r3, [r7, #16]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	699b      	ldr	r3, [r3, #24]
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003a6c:	e172      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a72:	2b03      	cmp	r3, #3
 8003a74:	f200 811f 	bhi.w	8003cb6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d123      	bne.n	8003ac8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a82:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003a84:	68f8      	ldr	r0, [r7, #12]
 8003a86:	f000 fe5b 	bl	8004740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d001      	beq.n	8003a94 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e173      	b.n	8003d7c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abc:	b29b      	uxth	r3, r3
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ac6:	e145      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d152      	bne.n	8003b76 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ad2:	9300      	str	r3, [sp, #0]
 8003ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	4906      	ldr	r1, [pc, #24]	@ (8003af4 <HAL_I2C_Mem_Read+0x24c>)
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fc86 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d008      	beq.n	8003af8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e148      	b.n	8003d7c <HAL_I2C_Mem_Read+0x4d4>
 8003aea:	bf00      	nop
 8003aec:	00100002 	.word	0x00100002
 8003af0:	ffff0000 	.word	0xffff0000
 8003af4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003af8:	b672      	cpsid	i
}
 8003afa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003b3e:	b662      	cpsie	i
}
 8003b40:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	691a      	ldr	r2, [r3, #16]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b74:	e0ee      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	4981      	ldr	r1, [pc, #516]	@ (8003d84 <HAL_I2C_Mem_Read+0x4dc>)
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fc33 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e0f5      	b.n	8003d7c <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b9e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003ba0:	b672      	cpsid	i
}
 8003ba2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691a      	ldr	r2, [r3, #16]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bae:	b2d2      	uxtb	r2, r2
 8003bb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d88 <HAL_I2C_Mem_Read+0x4e0>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	08db      	lsrs	r3, r3, #3
 8003bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8003d8c <HAL_I2C_Mem_Read+0x4e4>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0a1a      	lsrs	r2, r3, #8
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	00da      	lsls	r2, r3, #3
 8003bec:	1ad3      	subs	r3, r2, r3
 8003bee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003bf0:	6a3b      	ldr	r3, [r7, #32]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d118      	bne.n	8003c2e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	2220      	movs	r2, #32
 8003c06:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c16:	f043 0220 	orr.w	r2, r3, #32
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003c1e:	b662      	cpsie	i
}
 8003c20:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e0a6      	b.n	8003d7c <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d1d9      	bne.n	8003bf0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c56:	b2d2      	uxtb	r2, r2
 8003c58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003c7e:	b662      	cpsie	i
}
 8003c80:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691a      	ldr	r2, [r3, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c8c:	b2d2      	uxtb	r2, r2
 8003c8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003caa:	b29b      	uxth	r3, r3
 8003cac:	3b01      	subs	r3, #1
 8003cae:	b29a      	uxth	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cb4:	e04e      	b.n	8003d54 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cb8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cba:	68f8      	ldr	r0, [r7, #12]
 8003cbc:	f000 fd40 	bl	8004740 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d001      	beq.n	8003cca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e058      	b.n	8003d7c <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cdc:	1c5a      	adds	r2, r3, #1
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d124      	bne.n	8003d54 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d0e:	2b03      	cmp	r3, #3
 8003d10:	d107      	bne.n	8003d22 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d20:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2c:	b2d2      	uxtb	r2, r2
 8003d2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d34:	1c5a      	adds	r2, r3, #1
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f47f ae88 	bne.w	8003a6e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003d76:	2300      	movs	r3, #0
 8003d78:	e000      	b.n	8003d7c <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8003d7a:	2302      	movs	r3, #2
  }
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3728      	adds	r7, #40	@ 0x28
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	00010004 	.word	0x00010004
 8003d88:	20000018 	.word	0x20000018
 8003d8c:	14f8b589 	.word	0x14f8b589

08003d90 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	@ 0x28
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	607a      	str	r2, [r7, #4]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003da0:	f7fe ff3e 	bl	8002c20 <HAL_GetTick>
 8003da4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b20      	cmp	r3, #32
 8003db4:	f040 8111 	bne.w	8003fda <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	2319      	movs	r3, #25
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	4988      	ldr	r1, [pc, #544]	@ (8003fe4 <HAL_I2C_IsDeviceReady+0x254>)
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fb12 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	e104      	b.n	8003fdc <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d101      	bne.n	8003de0 <HAL_I2C_IsDeviceReady+0x50>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	e0fd      	b.n	8003fdc <HAL_I2C_IsDeviceReady+0x24c>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d007      	beq.n	8003e06 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f042 0201 	orr.w	r2, r2, #1
 8003e04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2224      	movs	r2, #36	@ 0x24
 8003e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4a70      	ldr	r2, [pc, #448]	@ (8003fe8 <HAL_I2C_IsDeviceReady+0x258>)
 8003e28:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e38:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	9300      	str	r3, [sp, #0]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	f000 fad0 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00d      	beq.n	8003e6e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e5c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e60:	d103      	bne.n	8003e6a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e68:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e0b6      	b.n	8003fdc <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e6e:	897b      	ldrh	r3, [r7, #10]
 8003e70:	b2db      	uxtb	r3, r3
 8003e72:	461a      	mov	r2, r3
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e7c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e7e:	f7fe fecf 	bl	8002c20 <HAL_GetTick>
 8003e82:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	f003 0302 	and.w	r3, r3, #2
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	bf0c      	ite	eq
 8003e92:	2301      	moveq	r3, #1
 8003e94:	2300      	movne	r3, #0
 8003e96:	b2db      	uxtb	r3, r3
 8003e98:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ea4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ea8:	bf0c      	ite	eq
 8003eaa:	2301      	moveq	r3, #1
 8003eac:	2300      	movne	r3, #0
 8003eae:	b2db      	uxtb	r3, r3
 8003eb0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003eb2:	e025      	b.n	8003f00 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003eb4:	f7fe feb4 	bl	8002c20 <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d302      	bcc.n	8003eca <HAL_I2C_IsDeviceReady+0x13a>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d103      	bne.n	8003ed2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	22a0      	movs	r2, #160	@ 0xa0
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	695b      	ldr	r3, [r3, #20]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	bf0c      	ite	eq
 8003ee0:	2301      	moveq	r3, #1
 8003ee2:	2300      	movne	r3, #0
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ef2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ef6:	bf0c      	ite	eq
 8003ef8:	2301      	moveq	r3, #1
 8003efa:	2300      	movne	r3, #0
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f0a:	d005      	beq.n	8003f18 <HAL_I2C_IsDeviceReady+0x188>
 8003f0c:	7dfb      	ldrb	r3, [r7, #23]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <HAL_I2C_IsDeviceReady+0x188>
 8003f12:	7dbb      	ldrb	r3, [r7, #22]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d0cd      	beq.n	8003eb4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d129      	bne.n	8003f82 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f3e:	2300      	movs	r3, #0
 8003f40:	613b      	str	r3, [r7, #16]
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	699b      	ldr	r3, [r3, #24]
 8003f50:	613b      	str	r3, [r7, #16]
 8003f52:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2319      	movs	r3, #25
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4921      	ldr	r1, [pc, #132]	@ (8003fe4 <HAL_I2C_IsDeviceReady+0x254>)
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fa44 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e036      	b.n	8003fdc <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2220      	movs	r2, #32
 8003f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	e02c      	b.n	8003fdc <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f90:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f9a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	9300      	str	r3, [sp, #0]
 8003fa0:	2319      	movs	r3, #25
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	490f      	ldr	r1, [pc, #60]	@ (8003fe4 <HAL_I2C_IsDeviceReady+0x254>)
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fa20 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d001      	beq.n	8003fb6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e012      	b.n	8003fdc <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	3301      	adds	r3, #1
 8003fba:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	f4ff af32 	bcc.w	8003e2a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003fda:	2302      	movs	r3, #2
  }
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3720      	adds	r7, #32
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	00100002 	.word	0x00100002
 8003fe8:	ffff0000 	.word	0xffff0000

08003fec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b088      	sub	sp, #32
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004000:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	2b08      	cmp	r3, #8
 8004006:	d006      	beq.n	8004016 <I2C_MasterRequestWrite+0x2a>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d003      	beq.n	8004016 <I2C_MasterRequestWrite+0x2a>
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004014:	d108      	bne.n	8004028 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004024:	601a      	str	r2, [r3, #0]
 8004026:	e00b      	b.n	8004040 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	2b12      	cmp	r3, #18
 800402e:	d107      	bne.n	8004040 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800403e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f9cd 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00d      	beq.n	8004074 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004062:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004066:	d103      	bne.n	8004070 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800406e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e035      	b.n	80040e0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	691b      	ldr	r3, [r3, #16]
 8004078:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800407c:	d108      	bne.n	8004090 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800407e:	897b      	ldrh	r3, [r7, #10]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800408c:	611a      	str	r2, [r3, #16]
 800408e:	e01b      	b.n	80040c8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004090:	897b      	ldrh	r3, [r7, #10]
 8004092:	11db      	asrs	r3, r3, #7
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0306 	and.w	r3, r3, #6
 800409a:	b2db      	uxtb	r3, r3
 800409c:	f063 030f 	orn	r3, r3, #15
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	490e      	ldr	r1, [pc, #56]	@ (80040e8 <I2C_MasterRequestWrite+0xfc>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa16 	bl	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e010      	b.n	80040e0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	4907      	ldr	r1, [pc, #28]	@ (80040ec <I2C_MasterRequestWrite+0x100>)
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fa06 	bl	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e000      	b.n	80040e0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3718      	adds	r7, #24
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	00010008 	.word	0x00010008
 80040ec:	00010002 	.word	0x00010002

080040f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af02      	add	r7, sp, #8
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	4608      	mov	r0, r1
 80040fa:	4611      	mov	r1, r2
 80040fc:	461a      	mov	r2, r3
 80040fe:	4603      	mov	r3, r0
 8004100:	817b      	strh	r3, [r7, #10]
 8004102:	460b      	mov	r3, r1
 8004104:	813b      	strh	r3, [r7, #8]
 8004106:	4613      	mov	r3, r2
 8004108:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004118:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800411a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800411c:	9300      	str	r3, [sp, #0]
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	2200      	movs	r2, #0
 8004122:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f000 f960 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d00d      	beq.n	800414e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800413c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004140:	d103      	bne.n	800414a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004148:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800414a:	2303      	movs	r3, #3
 800414c:	e05f      	b.n	800420e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800414e:	897b      	ldrh	r3, [r7, #10]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800415c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800415e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004160:	6a3a      	ldr	r2, [r7, #32]
 8004162:	492d      	ldr	r1, [pc, #180]	@ (8004218 <I2C_RequestMemoryWrite+0x128>)
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f9bb 	bl	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d001      	beq.n	8004174 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e04c      	b.n	800420e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	695b      	ldr	r3, [r3, #20]
 800417e:	617b      	str	r3, [r7, #20]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
 8004188:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800418a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800418c:	6a39      	ldr	r1, [r7, #32]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fa46 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00d      	beq.n	80041b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419e:	2b04      	cmp	r3, #4
 80041a0:	d107      	bne.n	80041b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	e02b      	b.n	800420e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041b6:	88fb      	ldrh	r3, [r7, #6]
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d105      	bne.n	80041c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041bc:	893b      	ldrh	r3, [r7, #8]
 80041be:	b2da      	uxtb	r2, r3
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	611a      	str	r2, [r3, #16]
 80041c6:	e021      	b.n	800420c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041c8:	893b      	ldrh	r3, [r7, #8]
 80041ca:	0a1b      	lsrs	r3, r3, #8
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	b2da      	uxtb	r2, r3
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041d8:	6a39      	ldr	r1, [r7, #32]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fa20 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00d      	beq.n	8004202 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d107      	bne.n	80041fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041fe:	2301      	movs	r3, #1
 8004200:	e005      	b.n	800420e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004202:	893b      	ldrh	r3, [r7, #8]
 8004204:	b2da      	uxtb	r2, r3
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	00010002 	.word	0x00010002

0800421c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b088      	sub	sp, #32
 8004220:	af02      	add	r7, sp, #8
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	4608      	mov	r0, r1
 8004226:	4611      	mov	r1, r2
 8004228:	461a      	mov	r2, r3
 800422a:	4603      	mov	r3, r0
 800422c:	817b      	strh	r3, [r7, #10]
 800422e:	460b      	mov	r3, r1
 8004230:	813b      	strh	r3, [r7, #8]
 8004232:	4613      	mov	r3, r2
 8004234:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004244:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004254:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	6a3b      	ldr	r3, [r7, #32]
 800425c:	2200      	movs	r2, #0
 800425e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f000 f8c2 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d00d      	beq.n	800428a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004278:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800427c:	d103      	bne.n	8004286 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004284:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e0aa      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800428a:	897b      	ldrh	r3, [r7, #10]
 800428c:	b2db      	uxtb	r3, r3
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004298:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800429a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800429c:	6a3a      	ldr	r2, [r7, #32]
 800429e:	4952      	ldr	r1, [pc, #328]	@ (80043e8 <I2C_RequestMemoryRead+0x1cc>)
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f000 f91d 	bl	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e097      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042c8:	6a39      	ldr	r1, [r7, #32]
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f9a8 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d107      	bne.n	80042ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681a      	ldr	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e076      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042f2:	88fb      	ldrh	r3, [r7, #6]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d105      	bne.n	8004304 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042f8:	893b      	ldrh	r3, [r7, #8]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	611a      	str	r2, [r3, #16]
 8004302:	e021      	b.n	8004348 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004304:	893b      	ldrh	r3, [r7, #8]
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b29b      	uxth	r3, r3
 800430a:	b2da      	uxtb	r2, r3
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004312:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004314:	6a39      	ldr	r1, [r7, #32]
 8004316:	68f8      	ldr	r0, [r7, #12]
 8004318:	f000 f982 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00d      	beq.n	800433e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	2b04      	cmp	r3, #4
 8004328:	d107      	bne.n	800433a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004338:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e050      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800433e:	893b      	ldrh	r3, [r7, #8]
 8004340:	b2da      	uxtb	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800434a:	6a39      	ldr	r1, [r7, #32]
 800434c:	68f8      	ldr	r0, [r7, #12]
 800434e:	f000 f967 	bl	8004620 <I2C_WaitOnTXEFlagUntilTimeout>
 8004352:	4603      	mov	r3, r0
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00d      	beq.n	8004374 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	2b04      	cmp	r3, #4
 800435e:	d107      	bne.n	8004370 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800436e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e035      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004382:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	2200      	movs	r2, #0
 800438c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f82b 	bl	80043ec <I2C_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d00d      	beq.n	80043b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043aa:	d103      	bne.n	80043b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	e013      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80043b8:	897b      	ldrh	r3, [r7, #10]
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	b2da      	uxtb	r2, r3
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ca:	6a3a      	ldr	r2, [r7, #32]
 80043cc:	4906      	ldr	r1, [pc, #24]	@ (80043e8 <I2C_RequestMemoryRead+0x1cc>)
 80043ce:	68f8      	ldr	r0, [r7, #12]
 80043d0:	f000 f886 	bl	80044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043d4:	4603      	mov	r3, r0
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d001      	beq.n	80043de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	00010002 	.word	0x00010002

080043ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043fc:	e048      	b.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004404:	d044      	beq.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004406:	f7fe fc0b 	bl	8002c20 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d302      	bcc.n	800441c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d139      	bne.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	b2db      	uxtb	r3, r3
 8004422:	2b01      	cmp	r3, #1
 8004424:	d10d      	bne.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695b      	ldr	r3, [r3, #20]
 800442c:	43da      	mvns	r2, r3
 800442e:	68bb      	ldr	r3, [r7, #8]
 8004430:	4013      	ands	r3, r2
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b00      	cmp	r3, #0
 8004436:	bf0c      	ite	eq
 8004438:	2301      	moveq	r3, #1
 800443a:	2300      	movne	r3, #0
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	e00c      	b.n	800445c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	43da      	mvns	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	4013      	ands	r3, r2
 800444e:	b29b      	uxth	r3, r3
 8004450:	2b00      	cmp	r3, #0
 8004452:	bf0c      	ite	eq
 8004454:	2301      	moveq	r3, #1
 8004456:	2300      	movne	r3, #0
 8004458:	b2db      	uxtb	r3, r3
 800445a:	461a      	mov	r2, r3
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	429a      	cmp	r2, r3
 8004460:	d116      	bne.n	8004490 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2220      	movs	r2, #32
 800446c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447c:	f043 0220 	orr.w	r2, r3, #32
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e023      	b.n	80044d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	0c1b      	lsrs	r3, r3, #16
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b01      	cmp	r3, #1
 8004498:	d10d      	bne.n	80044b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	43da      	mvns	r2, r3
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	4013      	ands	r3, r2
 80044a6:	b29b      	uxth	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	bf0c      	ite	eq
 80044ac:	2301      	moveq	r3, #1
 80044ae:	2300      	movne	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	461a      	mov	r2, r3
 80044b4:	e00c      	b.n	80044d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	699b      	ldr	r3, [r3, #24]
 80044bc:	43da      	mvns	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4013      	ands	r3, r2
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	bf0c      	ite	eq
 80044c8:	2301      	moveq	r3, #1
 80044ca:	2300      	movne	r3, #0
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	461a      	mov	r2, r3
 80044d0:	79fb      	ldrb	r3, [r7, #7]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d093      	beq.n	80043fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
 80044ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044ee:	e071      	b.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	695b      	ldr	r3, [r3, #20]
 80044f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044fe:	d123      	bne.n	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800450e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004518:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	f043 0204 	orr.w	r2, r3, #4
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e067      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d041      	beq.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004550:	f7fe fb66 	bl	8002c20 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	429a      	cmp	r2, r3
 800455e:	d302      	bcc.n	8004566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d136      	bne.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	0c1b      	lsrs	r3, r3, #16
 800456a:	b2db      	uxtb	r3, r3
 800456c:	2b01      	cmp	r3, #1
 800456e:	d10c      	bne.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	695b      	ldr	r3, [r3, #20]
 8004576:	43da      	mvns	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4013      	ands	r3, r2
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	e00b      	b.n	80045a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	43da      	mvns	r2, r3
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	4013      	ands	r3, r2
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2220      	movs	r2, #32
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	f043 0220 	orr.w	r2, r3, #32
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e021      	b.n	8004618 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	0c1b      	lsrs	r3, r3, #16
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d10c      	bne.n	80045f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695b      	ldr	r3, [r3, #20]
 80045e4:	43da      	mvns	r2, r3
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4013      	ands	r3, r2
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	e00b      	b.n	8004610 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	43da      	mvns	r2, r3
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	4013      	ands	r3, r2
 8004604:	b29b      	uxth	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	bf14      	ite	ne
 800460a:	2301      	movne	r3, #1
 800460c:	2300      	moveq	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	f47f af6d 	bne.w	80044f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004616:	2300      	movs	r3, #0
}
 8004618:	4618      	mov	r0, r3
 800461a:	3710      	adds	r7, #16
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800462c:	e034      	b.n	8004698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 f8e3 	bl	80047fa <I2C_IsAcknowledgeFailed>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e034      	b.n	80046a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004644:	d028      	beq.n	8004698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004646:	f7fe faeb 	bl	8002c20 <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	68ba      	ldr	r2, [r7, #8]
 8004652:	429a      	cmp	r2, r3
 8004654:	d302      	bcc.n	800465c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d11d      	bne.n	8004698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695b      	ldr	r3, [r3, #20]
 8004662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004666:	2b80      	cmp	r3, #128	@ 0x80
 8004668:	d016      	beq.n	8004698 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004684:	f043 0220 	orr.w	r2, r3, #32
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2200      	movs	r2, #0
 8004690:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e007      	b.n	80046a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046a2:	2b80      	cmp	r3, #128	@ 0x80
 80046a4:	d1c3      	bne.n	800462e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3710      	adds	r7, #16
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	60f8      	str	r0, [r7, #12]
 80046b8:	60b9      	str	r1, [r7, #8]
 80046ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046bc:	e034      	b.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f89b 	bl	80047fa <I2C_IsAcknowledgeFailed>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d001      	beq.n	80046ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e034      	b.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046d4:	d028      	beq.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d6:	f7fe faa3 	bl	8002c20 <HAL_GetTick>
 80046da:	4602      	mov	r2, r0
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	1ad3      	subs	r3, r2, r3
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d302      	bcc.n	80046ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d11d      	bne.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	f003 0304 	and.w	r3, r3, #4
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d016      	beq.n	8004728 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e007      	b.n	8004738 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d1c3      	bne.n	80046be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800474c:	e049      	b.n	80047e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	695b      	ldr	r3, [r3, #20]
 8004754:	f003 0310 	and.w	r3, r3, #16
 8004758:	2b10      	cmp	r3, #16
 800475a:	d119      	bne.n	8004790 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f06f 0210 	mvn.w	r2, #16
 8004764:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2220      	movs	r2, #32
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e030      	b.n	80047f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004790:	f7fe fa46 	bl	8002c20 <HAL_GetTick>
 8004794:	4602      	mov	r2, r0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	68ba      	ldr	r2, [r7, #8]
 800479c:	429a      	cmp	r2, r3
 800479e:	d302      	bcc.n	80047a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11d      	bne.n	80047e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047b0:	2b40      	cmp	r3, #64	@ 0x40
 80047b2:	d016      	beq.n	80047e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2220      	movs	r2, #32
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	f043 0220 	orr.w	r2, r3, #32
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e007      	b.n	80047f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047ec:	2b40      	cmp	r3, #64	@ 0x40
 80047ee:	d1ae      	bne.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3710      	adds	r7, #16
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80047fa:	b480      	push	{r7}
 80047fc:	b083      	sub	sp, #12
 80047fe:	af00      	add	r7, sp, #0
 8004800:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	695b      	ldr	r3, [r3, #20]
 8004808:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800480c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004810:	d11b      	bne.n	800484a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800481a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	f043 0204 	orr.w	r2, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr

08004856 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e036      	b.n	80048d6 <HAL_IWDG_Init+0x80>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004870:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f245 5255 	movw	r2, #21845	@ 0x5555
 800487a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6852      	ldr	r2, [r2, #4]
 8004884:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6892      	ldr	r2, [r2, #8]
 800488e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004890:	f7fe f9c6 	bl	8002c20 <HAL_GetTick>
 8004894:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004896:	e011      	b.n	80048bc <HAL_IWDG_Init+0x66>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004898:	f7fe f9c2 	bl	8002c20 <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	f241 323c 	movw	r2, #4924	@ 0x133c
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d908      	bls.n	80048bc <HAL_IWDG_Init+0x66>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d001      	beq.n	80048bc <HAL_IWDG_Init+0x66>
      {
        return HAL_TIMEOUT;
 80048b8:	2303      	movs	r3, #3
 80048ba:	e00c      	b.n	80048d6 <HAL_IWDG_Init+0x80>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0303 	and.w	r3, r3, #3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e6      	bne.n	8004898 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80048d2:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048d4:	2300      	movs	r3, #0
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80048de:	b480      	push	{r7}
 80048e0:	b083      	sub	sp, #12
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80048ee:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80048f0:	2300      	movs	r3, #0
}
 80048f2:	4618      	mov	r0, r3
 80048f4:	370c      	adds	r7, #12
 80048f6:	46bd      	mov	sp, r7
 80048f8:	bc80      	pop	{r7}
 80048fa:	4770      	bx	lr

080048fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b084      	sub	sp, #16
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e0e8      	b.n	8004ae0 <HAL_PCD_Init+0x1e4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f006 faf4 	bl	800af10 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2203      	movs	r2, #3
 800492c:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable DMA mode for FS instance */
  hpcd->Init.dma_enable = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	715a      	strb	r2, [r3, #5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4618      	mov	r0, r3
 800493c:	f002 fa13 	bl	8006d66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	3304      	adds	r3, #4
 8004948:	cb0e      	ldmia	r3, {r1, r2, r3}
 800494a:	f002 f9e9 	bl	8006d20 <USB_CoreInit>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d005      	beq.n	8004960 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2202      	movs	r2, #2
 8004958:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e0bf      	b.n	8004ae0 <HAL_PCD_Init+0x1e4>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2100      	movs	r1, #0
 8004966:	4618      	mov	r0, r3
 8004968:	f002 fa17 	bl	8006d9a <USB_SetCurrentMode>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d005      	beq.n	800497e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e0b0      	b.n	8004ae0 <HAL_PCD_Init+0x1e4>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800497e:	2300      	movs	r3, #0
 8004980:	73fb      	strb	r3, [r7, #15]
 8004982:	e03e      	b.n	8004a02 <HAL_PCD_Init+0x106>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004984:	7bfa      	ldrb	r2, [r7, #15]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	440b      	add	r3, r1
 8004992:	3311      	adds	r3, #17
 8004994:	2201      	movs	r2, #1
 8004996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004998:	7bfa      	ldrb	r2, [r7, #15]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	00db      	lsls	r3, r3, #3
 80049a4:	440b      	add	r3, r1
 80049a6:	3310      	adds	r3, #16
 80049a8:	7bfa      	ldrb	r2, [r7, #15]
 80049aa:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80049ac:	7bfa      	ldrb	r2, [r7, #15]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	009b      	lsls	r3, r3, #2
 80049b4:	4413      	add	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	440b      	add	r3, r1
 80049ba:	3313      	adds	r3, #19
 80049bc:	2200      	movs	r2, #0
 80049be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80049c0:	7bfa      	ldrb	r2, [r7, #15]
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	4613      	mov	r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	4413      	add	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	440b      	add	r3, r1
 80049ce:	3320      	adds	r3, #32
 80049d0:	2200      	movs	r2, #0
 80049d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80049d4:	7bfa      	ldrb	r2, [r7, #15]
 80049d6:	6879      	ldr	r1, [r7, #4]
 80049d8:	4613      	mov	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4413      	add	r3, r2
 80049de:	00db      	lsls	r3, r3, #3
 80049e0:	440b      	add	r3, r1
 80049e2:	3324      	adds	r3, #36	@ 0x24
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	1c5a      	adds	r2, r3, #1
 80049ee:	4613      	mov	r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	4413      	add	r3, r2
 80049f4:	00db      	lsls	r3, r3, #3
 80049f6:	440b      	add	r3, r1
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	3301      	adds	r3, #1
 8004a00:	73fb      	strb	r3, [r7, #15]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	791b      	ldrb	r3, [r3, #4]
 8004a06:	7bfa      	ldrb	r2, [r7, #15]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d3bb      	bcc.n	8004984 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	73fb      	strb	r3, [r7, #15]
 8004a10:	e044      	b.n	8004a9c <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a12:	7bfa      	ldrb	r2, [r7, #15]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	4413      	add	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	440b      	add	r3, r1
 8004a20:	f203 1351 	addw	r3, r3, #337	@ 0x151
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004a28:	7bfa      	ldrb	r2, [r7, #15]
 8004a2a:	6879      	ldr	r1, [r7, #4]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	4413      	add	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	440b      	add	r3, r1
 8004a36:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004a3a:	7bfa      	ldrb	r2, [r7, #15]
 8004a3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	00db      	lsls	r3, r3, #3
 8004a4a:	440b      	add	r3, r1
 8004a4c:	f203 1353 	addw	r3, r3, #339	@ 0x153
 8004a50:	2200      	movs	r2, #0
 8004a52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004a54:	7bfa      	ldrb	r2, [r7, #15]
 8004a56:	6879      	ldr	r1, [r7, #4]
 8004a58:	4613      	mov	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4413      	add	r3, r2
 8004a5e:	00db      	lsls	r3, r3, #3
 8004a60:	440b      	add	r3, r1
 8004a62:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a6a:	7bfa      	ldrb	r2, [r7, #15]
 8004a6c:	6879      	ldr	r1, [r7, #4]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	4413      	add	r3, r2
 8004a74:	00db      	lsls	r3, r3, #3
 8004a76:	440b      	add	r3, r1
 8004a78:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a80:	7bfa      	ldrb	r2, [r7, #15]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	440b      	add	r3, r1
 8004a8e:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8004a92:	2200      	movs	r2, #0
 8004a94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	73fb      	strb	r3, [r7, #15]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	791b      	ldrb	r3, [r3, #4]
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3b5      	bcc.n	8004a12 <HAL_PCD_Init+0x116>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	3304      	adds	r3, #4
 8004aae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ab0:	f002 f97f 	bl	8006db2 <USB_DevInit>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <HAL_PCD_Init+0x1ca>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2202      	movs	r2, #2
 8004abe:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e00c      	b.n	8004ae0 <HAL_PCD_Init+0x1e4>
  }

  hpcd->USB_Address = 0U;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2200      	movs	r2, #0
 8004aca:	735a      	strb	r2, [r3, #13]
  hpcd->State = HAL_PCD_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291
  (void)USB_DevDisconnect(hpcd->Instance);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f004 fbfe 	bl	80092da <USB_DevDisconnect>

  return HAL_OK;
 8004ade:	2300      	movs	r3, #0
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3710      	adds	r7, #16
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d101      	bne.n	8004afe <HAL_PCD_Start+0x16>
 8004afa:	2302      	movs	r3, #2
 8004afc:	e016      	b.n	8004b2c <HAL_PCD_Start+0x44>
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  __HAL_PCD_ENABLE(hpcd);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f002 f915 	bl	8006d3a <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8004b10:	2101      	movs	r1, #1
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f006 fc6f 	bl	800b3f6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f004 fbd2 	bl	80092c6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004b2a:	2300      	movs	r3, #0
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3708      	adds	r7, #8
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}

08004b34 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f004 fbd4 	bl	80092ee <USB_ReadInterrupts>
 8004b46:	61b8      	str	r0, [r7, #24]
  uint16_t store_ep[8];
  uint8_t i;

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d003      	beq.n	8004b5a <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fb1a 	bl	800518c <PCD_EP_ISR_Handler>

    return;
 8004b58:	e119      	b.n	8004d8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8004b5a:	69bb      	ldr	r3, [r7, #24]
 8004b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d013      	beq.n	8004b8c <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b76:	b292      	uxth	r2, r2
 8004b78:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f006 fa42 	bl	800b006 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8004b82:	2100      	movs	r1, #0
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f905 	bl	8004d94 <HAL_PCD_SetAddress>

    return;
 8004b8a:	e100      	b.n	8004d8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8004b8c:	69bb      	ldr	r3, [r7, #24]
 8004b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00c      	beq.n	8004bb0 <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004ba8:	b292      	uxth	r2, r2
 8004baa:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004bae:	e0ee      	b.n	8004d8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8004bb0:	69bb      	ldr	r3, [r7, #24]
 8004bb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00c      	beq.n	8004bd4 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004bc2:	b29a      	uxth	r2, r3
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004bcc:	b292      	uxth	r2, r2
 8004bce:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004bd2:	e0dc      	b.n	8004d8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d027      	beq.n	8004c2e <HAL_PCD_IRQHandler+0xfa>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f022 0204 	bic.w	r2, r2, #4
 8004bf0:	b292      	uxth	r2, r2
 8004bf2:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f022 0208 	bic.w	r2, r2, #8
 8004c08:	b292      	uxth	r2, r2
 8004c0a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f006 fa32 	bl	800b078 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004c26:	b292      	uxth	r2, r2
 8004c28:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004c2c:	e0af      	b.n	8004d8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f000 8083 	beq.w	8004d40 <HAL_PCD_IRQHandler+0x20c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint registers */
    for (i = 0U; i < 8U; i++)
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	77fb      	strb	r3, [r7, #31]
 8004c3e:	e010      	b.n	8004c62 <HAL_PCD_IRQHandler+0x12e>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	461a      	mov	r2, r3
 8004c46:	7ffb      	ldrb	r3, [r7, #31]
 8004c48:	009b      	lsls	r3, r3, #2
 8004c4a:	441a      	add	r2, r3
 8004c4c:	7ffb      	ldrb	r3, [r7, #31]
 8004c4e:	8812      	ldrh	r2, [r2, #0]
 8004c50:	b292      	uxth	r2, r2
 8004c52:	005b      	lsls	r3, r3, #1
 8004c54:	3320      	adds	r3, #32
 8004c56:	443b      	add	r3, r7
 8004c58:	f823 2c18 	strh.w	r2, [r3, #-24]
    for (i = 0U; i < 8U; i++)
 8004c5c:	7ffb      	ldrb	r3, [r7, #31]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	77fb      	strb	r3, [r7, #31]
 8004c62:	7ffb      	ldrb	r3, [r7, #31]
 8004c64:	2b07      	cmp	r3, #7
 8004c66:	d9eb      	bls.n	8004c40 <HAL_PCD_IRQHandler+0x10c>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f042 0201 	orr.w	r2, r2, #1
 8004c7a:	b292      	uxth	r2, r2
 8004c7c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004c88:	b29a      	uxth	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	b292      	uxth	r2, r2
 8004c94:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8004c98:	bf00      	nop
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0f6      	beq.n	8004c9a <HAL_PCD_IRQHandler+0x166>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cbe:	b292      	uxth	r2, r2
 8004cc0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	77fb      	strb	r3, [r7, #31]
 8004cc8:	e00f      	b.n	8004cea <HAL_PCD_IRQHandler+0x1b6>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8004cca:	7ffb      	ldrb	r3, [r7, #31]
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	6812      	ldr	r2, [r2, #0]
 8004cd0:	4611      	mov	r1, r2
 8004cd2:	7ffa      	ldrb	r2, [r7, #31]
 8004cd4:	0092      	lsls	r2, r2, #2
 8004cd6:	440a      	add	r2, r1
 8004cd8:	005b      	lsls	r3, r3, #1
 8004cda:	3320      	adds	r3, #32
 8004cdc:	443b      	add	r3, r7
 8004cde:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8004ce2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8004ce4:	7ffb      	ldrb	r3, [r7, #31]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	7ffb      	ldrb	r3, [r7, #31]
 8004cec:	2b07      	cmp	r3, #7
 8004cee:	d9ec      	bls.n	8004cca <HAL_PCD_IRQHandler+0x196>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f042 0208 	orr.w	r2, r2, #8
 8004d02:	b292      	uxth	r2, r2
 8004d04:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d10:	b29a      	uxth	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d1a:	b292      	uxth	r2, r2
 8004d1c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8004d28:	b29a      	uxth	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0204 	orr.w	r2, r2, #4
 8004d32:	b292      	uxth	r2, r2
 8004d34:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f006 f983 	bl	800b044 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d3e:	e026      	b.n	8004d8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00f      	beq.n	8004d6a <HAL_PCD_IRQHandler+0x236>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8004d5c:	b292      	uxth	r2, r2
 8004d5e:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f006 f941 	bl	800afea <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8004d68:	e011      	b.n	8004d8e <HAL_PCD_IRQHandler+0x25a>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00c      	beq.n	8004d8e <HAL_PCD_IRQHandler+0x25a>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8004d7c:	b29a      	uxth	r2, r3
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d86:	b292      	uxth	r2, r2
 8004d88:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

    return;
 8004d8c:	bf00      	nop
  }
}
 8004d8e:	3720      	adds	r7, #32
 8004d90:	46bd      	mov	sp, r7
 8004d92:	bd80      	pop	{r7, pc}

08004d94 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d101      	bne.n	8004dae <HAL_PCD_SetAddress+0x1a>
 8004daa:	2302      	movs	r3, #2
 8004dac:	e012      	b.n	8004dd4 <HAL_PCD_SetAddress+0x40>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  hpcd->USB_Address = address;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	78fa      	ldrb	r2, [r7, #3]
 8004dba:	735a      	strb	r2, [r3, #13]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	78fa      	ldrb	r2, [r7, #3]
 8004dc2:	4611      	mov	r1, r2
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f004 fa6b 	bl	80092a0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3708      	adds	r7, #8
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	4608      	mov	r0, r1
 8004de6:	4611      	mov	r1, r2
 8004de8:	461a      	mov	r2, r3
 8004dea:	4603      	mov	r3, r0
 8004dec:	70fb      	strb	r3, [r7, #3]
 8004dee:	460b      	mov	r3, r1
 8004df0:	803b      	strh	r3, [r7, #0]
 8004df2:	4613      	mov	r3, r2
 8004df4:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	da0e      	bge.n	8004e20 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e02:	78fb      	ldrb	r3, [r7, #3]
 8004e04:	f003 0207 	and.w	r2, r3, #7
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	3310      	adds	r3, #16
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	4413      	add	r3, r2
 8004e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	705a      	strb	r2, [r3, #1]
 8004e1e:	e00e      	b.n	8004e3e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004e20:	78fb      	ldrb	r3, [r7, #3]
 8004e22:	f003 0207 	and.w	r2, r3, #7
 8004e26:	4613      	mov	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4413      	add	r3, r2
 8004e2c:	00db      	lsls	r3, r3, #3
 8004e2e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	4413      	add	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004e3e:	78fb      	ldrb	r3, [r7, #3]
 8004e40:	f003 0307 	and.w	r3, r3, #7
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004e4a:	883a      	ldrh	r2, [r7, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	78ba      	ldrb	r2, [r7, #2]
 8004e54:	70da      	strb	r2, [r3, #3]
    ep->tx_fifo_num = ep->num;
  }
#endif /* defined (USB_OTG_FS) */

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004e56:	78bb      	ldrb	r3, [r7, #2]
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d102      	bne.n	8004e62 <HAL_PCD_EP_Open+0x86>
  {
    ep->data_pid_start = 0U;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d101      	bne.n	8004e70 <HAL_PCD_EP_Open+0x94>
 8004e6c:	2302      	movs	r3, #2
 8004e6e:	e00e      	b.n	8004e8e <HAL_PCD_EP_Open+0xb2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68f9      	ldr	r1, [r7, #12]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f001 ffb4 	bl	8006dec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return ret;
 8004e8c:	7afb      	ldrb	r3, [r7, #11]
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3710      	adds	r7, #16
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	da0e      	bge.n	8004ec8 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004eaa:	78fb      	ldrb	r3, [r7, #3]
 8004eac:	f003 0207 	and.w	r2, r3, #7
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	4413      	add	r3, r2
 8004eb6:	00db      	lsls	r3, r3, #3
 8004eb8:	3310      	adds	r3, #16
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	705a      	strb	r2, [r3, #1]
 8004ec6:	e00e      	b.n	8004ee6 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	f003 0207 	and.w	r2, r3, #7
 8004ece:	4613      	mov	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4413      	add	r3, r2
 8004ed4:	00db      	lsls	r3, r3, #3
 8004ed6:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004eda:	687a      	ldr	r2, [r7, #4]
 8004edc:	4413      	add	r3, r2
 8004ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ee6:	78fb      	ldrb	r3, [r7, #3]
 8004ee8:	f003 0307 	and.w	r3, r3, #7
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_PCD_EP_Close+0x6a>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e00e      	b.n	8004f1e <HAL_PCD_EP_Close+0x88>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68f9      	ldr	r1, [r7, #12]
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f002 fb2c 	bl	800756c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b086      	sub	sp, #24
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	607a      	str	r2, [r7, #4]
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	460b      	mov	r3, r1
 8004f34:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f36:	7afb      	ldrb	r3, [r7, #11]
 8004f38:	f003 0207 	and.w	r2, r3, #7
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	4413      	add	r3, r2
 8004f42:	00db      	lsls	r3, r3, #3
 8004f44:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	687a      	ldr	r2, [r7, #4]
 8004f52:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	683a      	ldr	r2, [r7, #0]
 8004f58:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	2200      	movs	r2, #0
 8004f64:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f66:	7afb      	ldrb	r3, [r7, #11]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	b2da      	uxtb	r2, r3
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6979      	ldr	r1, [r7, #20]
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f002 fce3 	bl	8007944 <USB_EPStartXfer>

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3718      	adds	r7, #24
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	460b      	mov	r3, r1
 8004f92:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004f94:	78fb      	ldrb	r3, [r7, #3]
 8004f96:	f003 0207 	and.w	r2, r3, #7
 8004f9a:	6879      	ldr	r1, [r7, #4]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	440b      	add	r3, r1
 8004fa6:	f503 73b6 	add.w	r3, r3, #364	@ 0x16c
 8004faa:	681b      	ldr	r3, [r3, #0]
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b086      	sub	sp, #24
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fc6:	7afb      	ldrb	r3, [r7, #11]
 8004fc8:	f003 0207 	and.w	r2, r3, #7
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	3310      	adds	r3, #16
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	4413      	add	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  ep->xfer_len_db = len;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	2201      	movs	r2, #1
 8005000:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005002:	7afb      	ldrb	r3, [r7, #11]
 8005004:	f003 0307 	and.w	r3, r3, #7
 8005008:	b2da      	uxtb	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6979      	ldr	r1, [r7, #20]
 8005014:	4618      	mov	r0, r3
 8005016:	f002 fc95 	bl	8007944 <USB_EPStartXfer>

  return HAL_OK;
 800501a:	2300      	movs	r3, #0
}
 800501c:	4618      	mov	r0, r3
 800501e:	3718      	adds	r7, #24
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005030:	78fb      	ldrb	r3, [r7, #3]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	7912      	ldrb	r2, [r2, #4]
 800503a:	4293      	cmp	r3, r2
 800503c:	d901      	bls.n	8005042 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e04c      	b.n	80050dc <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005046:	2b00      	cmp	r3, #0
 8005048:	da0e      	bge.n	8005068 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	f003 0207 	and.w	r2, r3, #7
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	00db      	lsls	r3, r3, #3
 8005058:	3310      	adds	r3, #16
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	4413      	add	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	2201      	movs	r2, #1
 8005064:	705a      	strb	r2, [r3, #1]
 8005066:	e00c      	b.n	8005082 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	4413      	add	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2201      	movs	r2, #1
 8005086:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	b2da      	uxtb	r2, r3
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800509a:	2b01      	cmp	r3, #1
 800509c:	d101      	bne.n	80050a2 <HAL_PCD_EP_SetStall+0x7e>
 800509e:	2302      	movs	r3, #2
 80050a0:	e01c      	b.n	80050dc <HAL_PCD_EP_SetStall+0xb8>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68f9      	ldr	r1, [r7, #12]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f003 fff8 	bl	80090a6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d108      	bne.n	80050d2 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 80050ca:	4619      	mov	r1, r3
 80050cc:	4610      	mov	r0, r2
 80050ce:	f004 f91d 	bl	800930c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	3710      	adds	r7, #16
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}

080050e4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	460b      	mov	r3, r1
 80050ee:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	f003 030f 	and.w	r3, r3, #15
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	7912      	ldrb	r2, [r2, #4]
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80050fe:	2301      	movs	r3, #1
 8005100:	e040      	b.n	8005184 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005102:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005106:	2b00      	cmp	r3, #0
 8005108:	da0e      	bge.n	8005128 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800510a:	78fb      	ldrb	r3, [r7, #3]
 800510c:	f003 0207 	and.w	r2, r3, #7
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	00db      	lsls	r3, r3, #3
 8005118:	3310      	adds	r3, #16
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	4413      	add	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	705a      	strb	r2, [r3, #1]
 8005126:	e00e      	b.n	8005146 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005128:	78fb      	ldrb	r3, [r7, #3]
 800512a:	f003 0207 	and.w	r2, r3, #7
 800512e:	4613      	mov	r3, r2
 8005130:	009b      	lsls	r3, r3, #2
 8005132:	4413      	add	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2200      	movs	r2, #0
 800514a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	b2da      	uxtb	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3290 	ldrb.w	r3, [r3, #656]	@ 0x290
 800515e:	2b01      	cmp	r3, #1
 8005160:	d101      	bne.n	8005166 <HAL_PCD_EP_ClrStall+0x82>
 8005162:	2302      	movs	r3, #2
 8005164:	e00e      	b.n	8005184 <HAL_PCD_EP_ClrStall+0xa0>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2201      	movs	r2, #1
 800516a:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68f9      	ldr	r1, [r7, #12]
 8005174:	4618      	mov	r0, r3
 8005176:	f003 ffe6 	bl	8009146 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b096      	sub	sp, #88	@ 0x58
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8005194:	e3bb      	b.n	800590e <PCD_EP_ISR_Handler+0x782>
  {
    wIstr = hpcd->Instance->ISTR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 800519e:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80051a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80051a6:	b2db      	uxtb	r3, r3
 80051a8:	f003 030f 	and.w	r3, r3, #15
 80051ac:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

    if (epindex == 0U)
 80051b0:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	f040 8175 	bne.w	80054a4 <PCD_EP_ISR_Handler+0x318>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80051ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d14e      	bne.n	8005264 <PCD_EP_ISR_Handler+0xd8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80051d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80051d6:	81fb      	strh	r3, [r7, #14]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	89fb      	ldrh	r3, [r7, #14]
 80051de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3310      	adds	r3, #16
 80051ee:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80051f8:	b29b      	uxth	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	00db      	lsls	r3, r3, #3
 8005202:	4413      	add	r3, r2
 8005204:	3302      	adds	r3, #2
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	687a      	ldr	r2, [r7, #4]
 800520a:	6812      	ldr	r2, [r2, #0]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005212:	881b      	ldrh	r3, [r3, #0]
 8005214:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8005218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800521c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800521e:	695a      	ldr	r2, [r3, #20]
 8005220:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	441a      	add	r2, r3
 8005226:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005228:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800522a:	2100      	movs	r1, #0
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f005 fec2 	bl	800afb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	7b5b      	ldrb	r3, [r3, #13]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8368 	beq.w	800590e <PCD_EP_ISR_Handler+0x782>
 800523e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	f040 8363 	bne.w	800590e <PCD_EP_ISR_Handler+0x782>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	7b5b      	ldrb	r3, [r3, #13]
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005252:	b2da      	uxtb	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
          hpcd->USB_Address = 0U;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2200      	movs	r2, #0
 8005260:	735a      	strb	r2, [r3, #13]
 8005262:	e354      	b.n	800590e <PCD_EP_ISR_Handler+0x782>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800526a:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8005276:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800527a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800527e:	2b00      	cmp	r3, #0
 8005280:	d034      	beq.n	80052ec <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800528a:	b29b      	uxth	r3, r3
 800528c:	461a      	mov	r2, r3
 800528e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	3306      	adds	r3, #6
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	6812      	ldr	r2, [r2, #0]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80052a4:	881b      	ldrh	r3, [r3, #0]
 80052a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80052aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ac:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f503 7126 	add.w	r1, r3, #664	@ 0x298
 80052b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052ba:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 80052bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052be:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	f004 f873 	bl	80093ac <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80052d2:	4013      	ands	r3, r2
 80052d4:	823b      	strh	r3, [r7, #16]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	8a3a      	ldrh	r2, [r7, #16]
 80052dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80052e0:	b292      	uxth	r2, r2
 80052e2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f005 fe39 	bl	800af5c <HAL_PCD_SetupStageCallback>
 80052ea:	e310      	b.n	800590e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80052ec:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	f280 830c 	bge.w	800590e <PCD_EP_ISR_Handler+0x782>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29a      	uxth	r2, r3
 80052fe:	f640 738f 	movw	r3, #3983	@ 0xf8f
 8005302:	4013      	ands	r3, r2
 8005304:	83fb      	strh	r3, [r7, #30]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	8bfa      	ldrh	r2, [r7, #30]
 800530c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005310:	b292      	uxth	r2, r2
 8005312:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800531c:	b29b      	uxth	r3, r3
 800531e:	461a      	mov	r2, r3
 8005320:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	00db      	lsls	r3, r3, #3
 8005326:	4413      	add	r3, r2
 8005328:	3306      	adds	r3, #6
 800532a:	005b      	lsls	r3, r3, #1
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6812      	ldr	r2, [r2, #0]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800533c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800533e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8005340:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d019      	beq.n	800537c <PCD_EP_ISR_Handler+0x1f0>
 8005348:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d015      	beq.n	800537c <PCD_EP_ISR_Handler+0x1f0>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005356:	6959      	ldr	r1, [r3, #20]
 8005358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800535c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8005360:	b29b      	uxth	r3, r3
 8005362:	f004 f823 	bl	80093ac <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8005366:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005368:	695a      	ldr	r2, [r3, #20]
 800536a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800536c:	69db      	ldr	r3, [r3, #28]
 800536e:	441a      	add	r2, r3
 8005370:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005372:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8005374:	2100      	movs	r1, #0
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f005 fe02 	bl	800af80 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	881b      	ldrh	r3, [r3, #0]
 8005382:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8005386:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800538a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800538e:	2b00      	cmp	r3, #0
 8005390:	f040 82bd 	bne.w	800590e <PCD_EP_ISR_Handler+0x782>
 8005394:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005398:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800539c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80053a0:	f000 82b5 	beq.w	800590e <PCD_EP_ISR_Handler+0x782>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	61bb      	str	r3, [r7, #24]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	4413      	add	r3, r2
 80053ba:	61bb      	str	r3, [r7, #24]
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	881b      	ldrh	r3, [r3, #0]
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	801a      	strh	r2, [r3, #0]
 80053d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80053da:	d91d      	bls.n	8005418 <PCD_EP_ISR_Handler+0x28c>
 80053dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	f003 031f 	and.w	r3, r3, #31
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d102      	bne.n	80053f6 <PCD_EP_ISR_Handler+0x26a>
 80053f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053f2:	3b01      	subs	r3, #1
 80053f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	881b      	ldrh	r3, [r3, #0]
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053fe:	b29b      	uxth	r3, r3
 8005400:	029b      	lsls	r3, r3, #10
 8005402:	b29b      	uxth	r3, r3
 8005404:	4313      	orrs	r3, r2
 8005406:	b29b      	uxth	r3, r3
 8005408:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800540c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005410:	b29a      	uxth	r2, r3
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	801a      	strh	r2, [r3, #0]
 8005416:	e026      	b.n	8005466 <PCD_EP_ISR_Handler+0x2da>
 8005418:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <PCD_EP_ISR_Handler+0x2aa>
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	881b      	ldrh	r3, [r3, #0]
 8005424:	b29b      	uxth	r3, r3
 8005426:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800542a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800542e:	b29a      	uxth	r2, r3
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	801a      	strh	r2, [r3, #0]
 8005434:	e017      	b.n	8005466 <PCD_EP_ISR_Handler+0x2da>
 8005436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	085b      	lsrs	r3, r3, #1
 800543c:	647b      	str	r3, [r7, #68]	@ 0x44
 800543e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005440:	691b      	ldr	r3, [r3, #16]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <PCD_EP_ISR_Handler+0x2c4>
 800544a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800544c:	3301      	adds	r3, #1
 800544e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	881b      	ldrh	r3, [r3, #0]
 8005454:	b29a      	uxth	r2, r3
 8005456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005458:	b29b      	uxth	r3, r3
 800545a:	029b      	lsls	r3, r3, #10
 800545c:	b29b      	uxth	r3, r3
 800545e:	4313      	orrs	r3, r2
 8005460:	b29a      	uxth	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	881b      	ldrh	r3, [r3, #0]
 800546c:	b29b      	uxth	r3, r3
 800546e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005472:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005476:	827b      	strh	r3, [r7, #18]
 8005478:	8a7b      	ldrh	r3, [r7, #18]
 800547a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800547e:	827b      	strh	r3, [r7, #18]
 8005480:	8a7b      	ldrh	r3, [r7, #18]
 8005482:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005486:	827b      	strh	r3, [r7, #18]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	8a7b      	ldrh	r3, [r7, #18]
 800548e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005492:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005496:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800549a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800549e:	b29b      	uxth	r3, r3
 80054a0:	8013      	strh	r3, [r2, #0]
 80054a2:	e234      	b.n	800590e <PCD_EP_ISR_Handler+0x782>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	4413      	add	r3, r2
 80054b2:	881b      	ldrh	r3, [r3, #0]
 80054b4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80054b8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80054bc:	2b00      	cmp	r3, #0
 80054be:	f280 80fc 	bge.w	80056ba <PCD_EP_ISR_Handler+0x52e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	461a      	mov	r2, r3
 80054c8:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	881b      	ldrh	r3, [r3, #0]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	f640 738f 	movw	r3, #3983	@ 0xf8f
 80054d8:	4013      	ands	r3, r2
 80054da:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80054f0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80054f4:	b292      	uxth	r2, r2
 80054f6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80054f8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80054fc:	4613      	mov	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	4413      	add	r3, r2
 8005502:	00db      	lsls	r3, r3, #3
 8005504:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	4413      	add	r3, r2
 800550c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800550e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005510:	7b1b      	ldrb	r3, [r3, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d125      	bne.n	8005562 <PCD_EP_ISR_Handler+0x3d6>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800551e:	b29b      	uxth	r3, r3
 8005520:	461a      	mov	r2, r3
 8005522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	00db      	lsls	r3, r3, #3
 8005528:	4413      	add	r3, r2
 800552a:	3306      	adds	r3, #6
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6812      	ldr	r2, [r2, #0]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005538:	881b      	ldrh	r3, [r3, #0]
 800553a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800553e:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

          if (count != 0U)
 8005542:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 8092 	beq.w	8005670 <PCD_EP_ISR_Handler+0x4e4>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6818      	ldr	r0, [r3, #0]
 8005550:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005552:	6959      	ldr	r1, [r3, #20]
 8005554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005556:	88da      	ldrh	r2, [r3, #6]
 8005558:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800555c:	f003 ff26 	bl	80093ac <USB_ReadPMA>
 8005560:	e086      	b.n	8005670 <PCD_EP_ISR_Handler+0x4e4>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8005562:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005564:	78db      	ldrb	r3, [r3, #3]
 8005566:	2b02      	cmp	r3, #2
 8005568:	d10a      	bne.n	8005580 <PCD_EP_ISR_Handler+0x3f4>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800556a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800556e:	461a      	mov	r2, r3
 8005570:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 f9d9 	bl	800592a <HAL_PCD_EP_DB_Receive>
 8005578:	4603      	mov	r3, r0
 800557a:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
 800557e:	e077      	b.n	8005670 <PCD_EP_ISR_Handler+0x4e4>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	009b      	lsls	r3, r3, #2
 800558c:	4413      	add	r3, r2
 800558e:	881b      	ldrh	r3, [r3, #0]
 8005590:	b29b      	uxth	r3, r3
 8005592:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800559a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	441a      	add	r2, r3
 80055ac:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80055b0:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80055b4:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80055b8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055bc:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	461a      	mov	r2, r3
 80055ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d024      	beq.n	8005628 <PCD_EP_ISR_Handler+0x49c>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80055e6:	b29b      	uxth	r3, r3
 80055e8:	461a      	mov	r2, r3
 80055ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	00db      	lsls	r3, r3, #3
 80055f0:	4413      	add	r3, r2
 80055f2:	3302      	adds	r3, #2
 80055f4:	005b      	lsls	r3, r3, #1
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6812      	ldr	r2, [r2, #0]
 80055fa:	4413      	add	r3, r2
 80055fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005600:	881b      	ldrh	r3, [r3, #0]
 8005602:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005606:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 800560a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800560e:	2b00      	cmp	r3, #0
 8005610:	d02e      	beq.n	8005670 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6818      	ldr	r0, [r3, #0]
 8005616:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005618:	6959      	ldr	r1, [r3, #20]
 800561a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800561c:	891a      	ldrh	r2, [r3, #8]
 800561e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005622:	f003 fec3 	bl	80093ac <USB_ReadPMA>
 8005626:	e023      	b.n	8005670 <PCD_EP_ISR_Handler+0x4e4>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005630:	b29b      	uxth	r3, r3
 8005632:	461a      	mov	r2, r3
 8005634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4413      	add	r3, r2
 800563c:	3306      	adds	r3, #6
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	6812      	ldr	r2, [r2, #0]
 8005644:	4413      	add	r3, r2
 8005646:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800564a:	881b      	ldrh	r3, [r3, #0]
 800564c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005650:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50

              if (count != 0U)
 8005654:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005658:	2b00      	cmp	r3, #0
 800565a:	d009      	beq.n	8005670 <PCD_EP_ISR_Handler+0x4e4>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005662:	6959      	ldr	r1, [r3, #20]
 8005664:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005666:	895a      	ldrh	r2, [r3, #10]
 8005668:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 800566c:	f003 fe9e 	bl	80093ac <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8005670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005678:	441a      	add	r2, r3
 800567a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800567c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800567e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005680:	695a      	ldr	r2, [r3, #20]
 8005682:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8005686:	441a      	add	r2, r3
 8005688:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568a:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800568c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800568e:	699b      	ldr	r3, [r3, #24]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d005      	beq.n	80056a0 <PCD_EP_ISR_Handler+0x514>
 8005694:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8005698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	429a      	cmp	r2, r3
 800569e:	d206      	bcs.n	80056ae <PCD_EP_ISR_Handler+0x522>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80056a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	4619      	mov	r1, r3
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f005 fc6a 	bl	800af80 <HAL_PCD_DataOutStageCallback>
 80056ac:	e005      	b.n	80056ba <PCD_EP_ISR_Handler+0x52e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056b4:	4618      	mov	r0, r3
 80056b6:	f002 f945 	bl	8007944 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80056ba:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 80056be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	f000 8123 	beq.w	800590e <PCD_EP_ISR_Handler+0x782>
      {
        ep = &hpcd->IN_ep[epindex];
 80056c8:	f897 204d 	ldrb.w	r2, [r7, #77]	@ 0x4d
 80056cc:	4613      	mov	r3, r2
 80056ce:	009b      	lsls	r3, r3, #2
 80056d0:	4413      	add	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	3310      	adds	r3, #16
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	4413      	add	r3, r2
 80056da:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	461a      	mov	r2, r3
 80056e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4413      	add	r3, r2
 80056ea:	881b      	ldrh	r3, [r3, #0]
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	f423 43e1 	bic.w	r3, r3, #28800	@ 0x7080
 80056f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056f6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	441a      	add	r2, r3
 8005708:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800570c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005710:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005714:	b29b      	uxth	r3, r3
 8005716:	8013      	strh	r3, [r2, #0]

        if (ep->type == EP_TYPE_ISOC)
 8005718:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800571a:	78db      	ldrb	r3, [r3, #3]
 800571c:	2b01      	cmp	r3, #1
 800571e:	f040 80a2 	bne.w	8005866 <PCD_EP_ISR_Handler+0x6da>
        {
          ep->xfer_len = 0U;
 8005722:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005724:	2200      	movs	r2, #0
 8005726:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 8005728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800572a:	7b1b      	ldrb	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 8093 	beq.w	8005858 <PCD_EP_ISR_Handler+0x6cc>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005732:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005736:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800573a:	2b00      	cmp	r3, #0
 800573c:	d046      	beq.n	80057cc <PCD_EP_ISR_Handler+0x640>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800573e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d126      	bne.n	8005794 <PCD_EP_ISR_Handler+0x608>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	627b      	str	r3, [r7, #36]	@ 0x24
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005754:	b29b      	uxth	r3, r3
 8005756:	461a      	mov	r2, r3
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	4413      	add	r3, r2
 800575c:	627b      	str	r3, [r7, #36]	@ 0x24
 800575e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005760:	781b      	ldrb	r3, [r3, #0]
 8005762:	011a      	lsls	r2, r3, #4
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	4413      	add	r3, r2
 8005768:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800576c:	623b      	str	r3, [r7, #32]
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b29b      	uxth	r3, r3
 8005774:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005778:	b29a      	uxth	r2, r3
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	801a      	strh	r2, [r3, #0]
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	881b      	ldrh	r3, [r3, #0]
 8005782:	b29b      	uxth	r3, r3
 8005784:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005788:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800578c:	b29a      	uxth	r2, r3
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	801a      	strh	r2, [r3, #0]
 8005792:	e061      	b.n	8005858 <PCD_EP_ISR_Handler+0x6cc>
 8005794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005796:	785b      	ldrb	r3, [r3, #1]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d15d      	bne.n	8005858 <PCD_EP_ISR_Handler+0x6cc>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	461a      	mov	r2, r3
 80057ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b0:	4413      	add	r3, r2
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80057b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	011a      	lsls	r2, r3, #4
 80057ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057bc:	4413      	add	r3, r2
 80057be:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80057c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c6:	2200      	movs	r2, #0
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	e045      	b.n	8005858 <PCD_EP_ISR_Handler+0x6cc>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057d4:	785b      	ldrb	r3, [r3, #1]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d126      	bne.n	8005828 <PCD_EP_ISR_Handler+0x69c>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	637b      	str	r3, [r7, #52]	@ 0x34
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	461a      	mov	r2, r3
 80057ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ee:	4413      	add	r3, r2
 80057f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80057f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	011a      	lsls	r2, r3, #4
 80057f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057fa:	4413      	add	r3, r2
 80057fc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005800:	633b      	str	r3, [r7, #48]	@ 0x30
 8005802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005804:	881b      	ldrh	r3, [r3, #0]
 8005806:	b29b      	uxth	r3, r3
 8005808:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800580c:	b29a      	uxth	r2, r3
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	801a      	strh	r2, [r3, #0]
 8005812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005814:	881b      	ldrh	r3, [r3, #0]
 8005816:	b29b      	uxth	r3, r3
 8005818:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800581c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005820:	b29a      	uxth	r2, r3
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	801a      	strh	r2, [r3, #0]
 8005826:	e017      	b.n	8005858 <PCD_EP_ISR_Handler+0x6cc>
 8005828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800582a:	785b      	ldrb	r3, [r3, #1]
 800582c:	2b01      	cmp	r3, #1
 800582e:	d113      	bne.n	8005858 <PCD_EP_ISR_Handler+0x6cc>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005838:	b29b      	uxth	r3, r3
 800583a:	461a      	mov	r2, r3
 800583c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800583e:	4413      	add	r3, r2
 8005840:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005842:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	011a      	lsls	r2, r3, #4
 8005848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800584a:	4413      	add	r3, r2
 800584c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005850:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	2200      	movs	r2, #0
 8005856:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	4619      	mov	r1, r3
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f005 fba9 	bl	800afb6 <HAL_PCD_DataInStageCallback>
 8005864:	e053      	b.n	800590e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 8005866:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800586a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800586e:	2b00      	cmp	r3, #0
 8005870:	d146      	bne.n	8005900 <PCD_EP_ISR_Handler+0x774>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800587a:	b29b      	uxth	r3, r3
 800587c:	461a      	mov	r2, r3
 800587e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	00db      	lsls	r3, r3, #3
 8005884:	4413      	add	r3, r2
 8005886:	3302      	adds	r3, #2
 8005888:	005b      	lsls	r3, r3, #1
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6812      	ldr	r2, [r2, #0]
 800588e:	4413      	add	r3, r2
 8005890:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005894:	881b      	ldrh	r3, [r3, #0]
 8005896:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800589a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

            if (ep->xfer_len > TxPctSize)
 800589e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d907      	bls.n	80058ba <PCD_EP_ISR_Handler+0x72e>
            {
              ep->xfer_len -= TxPctSize;
 80058aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ac:	699a      	ldr	r2, [r3, #24]
 80058ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80058b2:	1ad2      	subs	r2, r2, r3
 80058b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b6:	619a      	str	r2, [r3, #24]
 80058b8:	e002      	b.n	80058c0 <PCD_EP_ISR_Handler+0x734>
            }
            else
            {
              ep->xfer_len = 0U;
 80058ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058bc:	2200      	movs	r2, #0
 80058be:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 80058c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d106      	bne.n	80058d6 <PCD_EP_ISR_Handler+0x74a>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80058c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	4619      	mov	r1, r3
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f005 fb71 	bl	800afb6 <HAL_PCD_DataInStageCallback>
 80058d4:	e01b      	b.n	800590e <PCD_EP_ISR_Handler+0x782>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80058d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058d8:	695a      	ldr	r2, [r3, #20]
 80058da:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80058de:	441a      	add	r2, r3
 80058e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e2:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80058e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e6:	69da      	ldr	r2, [r3, #28]
 80058e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80058ec:	441a      	add	r2, r3
 80058ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f0:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058f8:	4618      	mov	r0, r3
 80058fa:	f002 f823 	bl	8007944 <USB_EPStartXfer>
 80058fe:	e006      	b.n	800590e <PCD_EP_ISR_Handler+0x782>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8005900:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8005904:	461a      	mov	r2, r3
 8005906:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f91b 	bl	8005b44 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8005916:	b29b      	uxth	r3, r3
 8005918:	b21b      	sxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	f6ff ac3b 	blt.w	8005196 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8005920:	2300      	movs	r3, #0
}
 8005922:	4618      	mov	r0, r3
 8005924:	3758      	adds	r7, #88	@ 0x58
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}

0800592a <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800592a:	b580      	push	{r7, lr}
 800592c:	b088      	sub	sp, #32
 800592e:	af00      	add	r7, sp, #0
 8005930:	60f8      	str	r0, [r7, #12]
 8005932:	60b9      	str	r1, [r7, #8]
 8005934:	4613      	mov	r3, r2
 8005936:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005938:	88fb      	ldrh	r3, [r7, #6]
 800593a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d07e      	beq.n	8005a40 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	00db      	lsls	r3, r3, #3
 8005954:	4413      	add	r3, r2
 8005956:	3302      	adds	r3, #2
 8005958:	005b      	lsls	r3, r3, #1
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800596a:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	699a      	ldr	r2, [r3, #24]
 8005970:	8b7b      	ldrh	r3, [r7, #26]
 8005972:	429a      	cmp	r2, r3
 8005974:	d306      	bcc.n	8005984 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	699a      	ldr	r2, [r3, #24]
 800597a:	8b7b      	ldrh	r3, [r7, #26]
 800597c:	1ad2      	subs	r2, r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	619a      	str	r2, [r3, #24]
 8005982:	e002      	b.n	800598a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2200      	movs	r2, #0
 8005988:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d123      	bne.n	80059da <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	461a      	mov	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	4413      	add	r3, r2
 80059a0:	881b      	ldrh	r3, [r3, #0]
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80059a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059ac:	833b      	strh	r3, [r7, #24]
 80059ae:	8b3b      	ldrh	r3, [r7, #24]
 80059b0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80059b4:	833b      	strh	r3, [r7, #24]
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	461a      	mov	r2, r3
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	441a      	add	r2, r3
 80059c4:	8b3b      	ldrh	r3, [r7, #24]
 80059c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80059ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80059ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80059d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80059da:	88fb      	ldrh	r3, [r7, #6]
 80059dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01f      	beq.n	8005a24 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	4413      	add	r3, r2
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059fe:	82fb      	strh	r3, [r7, #22]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	781b      	ldrb	r3, [r3, #0]
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	441a      	add	r2, r3
 8005a0e:	8afb      	ldrh	r3, [r7, #22]
 8005a10:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005a14:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005a18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005a1c:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005a24:	8b7b      	ldrh	r3, [r7, #26]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 8087 	beq.w	8005b3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6818      	ldr	r0, [r3, #0]
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	6959      	ldr	r1, [r3, #20]
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	891a      	ldrh	r2, [r3, #8]
 8005a38:	8b7b      	ldrh	r3, [r7, #26]
 8005a3a:	f003 fcb7 	bl	80093ac <USB_ReadPMA>
 8005a3e:	e07c      	b.n	8005b3a <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	00db      	lsls	r3, r3, #3
 8005a52:	4413      	add	r3, r2
 8005a54:	3306      	adds	r3, #6
 8005a56:	005b      	lsls	r3, r3, #1
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	6812      	ldr	r2, [r2, #0]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a62:	881b      	ldrh	r3, [r3, #0]
 8005a64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005a68:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	699a      	ldr	r2, [r3, #24]
 8005a6e:	8b7b      	ldrh	r3, [r7, #26]
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d306      	bcc.n	8005a82 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	699a      	ldr	r2, [r3, #24]
 8005a78:	8b7b      	ldrh	r3, [r7, #26]
 8005a7a:	1ad2      	subs	r2, r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	619a      	str	r2, [r3, #24]
 8005a80:	e002      	b.n	8005a88 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	2200      	movs	r2, #0
 8005a86:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d123      	bne.n	8005ad8 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	461a      	mov	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	781b      	ldrb	r3, [r3, #0]
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	4413      	add	r3, r2
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005aa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005aaa:	83fb      	strh	r3, [r7, #30]
 8005aac:	8bfb      	ldrh	r3, [r7, #30]
 8005aae:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8005ab2:	83fb      	strh	r3, [r7, #30]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	781b      	ldrb	r3, [r3, #0]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	8bfb      	ldrh	r3, [r7, #30]
 8005ac4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005ac8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005acc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005ad0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ad4:	b29b      	uxth	r3, r3
 8005ad6:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8005ad8:	88fb      	ldrh	r3, [r7, #6]
 8005ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d11f      	bne.n	8005b22 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	781b      	ldrb	r3, [r3, #0]
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005afc:	83bb      	strh	r3, [r7, #28]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	461a      	mov	r2, r3
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	781b      	ldrb	r3, [r3, #0]
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	441a      	add	r2, r3
 8005b0c:	8bbb      	ldrh	r3, [r7, #28]
 8005b0e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005b1a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8005b22:	8b7b      	ldrh	r3, [r7, #26]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	6959      	ldr	r1, [r3, #20]
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	895a      	ldrh	r2, [r3, #10]
 8005b34:	8b7b      	ldrh	r3, [r7, #26]
 8005b36:	f003 fc39 	bl	80093ac <USB_ReadPMA>
    }
  }

  return count;
 8005b3a:	8b7b      	ldrh	r3, [r7, #26]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3720      	adds	r7, #32
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b0a4      	sub	sp, #144	@ 0x90
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8005b52:	88fb      	ldrh	r3, [r7, #6]
 8005b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	f000 81dd 	beq.w	8005f18 <HAL_PCD_EP_DB_Transmit+0x3d4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	461a      	mov	r2, r3
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	00db      	lsls	r3, r3, #3
 8005b70:	4413      	add	r3, r2
 8005b72:	3302      	adds	r3, #2
 8005b74:	005b      	lsls	r3, r3, #1
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	6812      	ldr	r2, [r2, #0]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005b86:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len > TxPctSize)
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	699a      	ldr	r2, [r3, #24]
 8005b8e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d907      	bls.n	8005ba6 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005b9e:	1ad2      	subs	r2, r2, r3
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	619a      	str	r2, [r3, #24]
 8005ba4:	e002      	b.n	8005bac <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 80b9 	bne.w	8005d28 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	785b      	ldrb	r3, [r3, #1]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d126      	bne.n	8005c0c <HAL_PCD_EP_DB_Transmit+0xc8>
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	461a      	mov	r2, r3
 8005bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd2:	4413      	add	r3, r2
 8005bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	011a      	lsls	r2, r3, #4
 8005bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005be4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005bf0:	b29a      	uxth	r2, r3
 8005bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf4:	801a      	strh	r2, [r3, #0]
 8005bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	b29b      	uxth	r3, r3
 8005bfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c08:	801a      	strh	r2, [r3, #0]
 8005c0a:	e01a      	b.n	8005c42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	785b      	ldrb	r3, [r3, #1]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d116      	bne.n	8005c42 <HAL_PCD_EP_DB_Transmit+0xfe>
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	461a      	mov	r2, r3
 8005c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c28:	4413      	add	r3, r2
 8005c2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	781b      	ldrb	r3, [r3, #0]
 8005c30:	011a      	lsls	r2, r3, #4
 8005c32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c34:	4413      	add	r3, r2
 8005c36:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005c3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c3e:	2200      	movs	r2, #0
 8005c40:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	785b      	ldrb	r3, [r3, #1]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d126      	bne.n	8005c9e <HAL_PCD_EP_DB_Transmit+0x15a>
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	61fb      	str	r3, [r7, #28]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	461a      	mov	r2, r3
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	4413      	add	r3, r2
 8005c66:	61fb      	str	r3, [r7, #28]
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	011a      	lsls	r2, r3, #4
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	4413      	add	r3, r2
 8005c72:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	69bb      	ldr	r3, [r7, #24]
 8005c7a:	881b      	ldrh	r3, [r3, #0]
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005c82:	b29a      	uxth	r2, r3
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	801a      	strh	r2, [r3, #0]
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	801a      	strh	r2, [r3, #0]
 8005c9c:	e017      	b.n	8005cce <HAL_PCD_EP_DB_Transmit+0x18a>
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d113      	bne.n	8005cce <HAL_PCD_EP_DB_Transmit+0x18a>
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	461a      	mov	r2, r3
 8005cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb4:	4413      	add	r3, r2
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	011a      	lsls	r2, r3, #4
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	4413      	add	r3, r2
 8005cc2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8005cc6:	623b      	str	r3, [r7, #32]
 8005cc8:	6a3b      	ldr	r3, [r7, #32]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f005 f96e 	bl	800afb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005cda:	88fb      	ldrh	r3, [r7, #6]
 8005cdc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f000 82fc 	beq.w	80062de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005cfc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d00:	82fb      	strh	r3, [r7, #22]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	461a      	mov	r2, r3
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	441a      	add	r2, r3
 8005d10:	8afb      	ldrh	r3, [r7, #22]
 8005d12:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d16:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d1a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d1e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	8013      	strh	r3, [r2, #0]
 8005d26:	e2da      	b.n	80062de <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d021      	beq.n	8005d76 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	461a      	mov	r2, r3
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	b29b      	uxth	r3, r3
 8005d44:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d48:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d4c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	461a      	mov	r2, r3
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	441a      	add	r2, r3
 8005d5e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8005d62:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8005d66:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8005d6a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005d6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	f040 82ae 	bne.w	80062de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	695a      	ldr	r2, [r3, #20]
 8005d86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d8a:	441a      	add	r2, r3
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8005d90:	68bb      	ldr	r3, [r7, #8]
 8005d92:	69da      	ldr	r2, [r3, #28]
 8005d94:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005d98:	441a      	add	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	6a1a      	ldr	r2, [r3, #32]
 8005da2:	68bb      	ldr	r3, [r7, #8]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d30b      	bcc.n	8005dc2 <HAL_PCD_EP_DB_Transmit+0x27e>
        {
          len = ep->maxpacket;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6a1a      	ldr	r2, [r3, #32]
 8005db6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	621a      	str	r2, [r3, #32]
 8005dc0:	e017      	b.n	8005df2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else if (ep->xfer_len_db == 0U)
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	6a1b      	ldr	r3, [r3, #32]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d108      	bne.n	8005ddc <HAL_PCD_EP_DB_Transmit+0x298>
        {
          len = TxPctSize;
 8005dca:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005dce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 8005dd2:	68bb      	ldr	r3, [r7, #8]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 8005dda:	e00a      	b.n	8005df2 <HAL_PCD_EP_DB_Transmit+0x2ae>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          len = ep->xfer_len_db;
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	6a1b      	ldr	r3, [r3, #32]
 8005de8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2200      	movs	r2, #0
 8005df0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	785b      	ldrb	r3, [r3, #1]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d165      	bne.n	8005ec6 <HAL_PCD_EP_DB_Transmit+0x382>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e0e:	4413      	add	r3, r2
 8005e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	011a      	lsls	r2, r3, #4
 8005e18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1a:	4413      	add	r3, r2
 8005e1c:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005e20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e24:	881b      	ldrh	r3, [r3, #0]
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e36:	2b3e      	cmp	r3, #62	@ 0x3e
 8005e38:	d91d      	bls.n	8005e76 <HAL_PCD_EP_DB_Transmit+0x332>
 8005e3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e3e:	095b      	lsrs	r3, r3, #5
 8005e40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e46:	f003 031f 	and.w	r3, r3, #31
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d102      	bne.n	8005e54 <HAL_PCD_EP_DB_Transmit+0x310>
 8005e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e50:	3b01      	subs	r3, #1
 8005e52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	b29a      	uxth	r2, r3
 8005e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	029b      	lsls	r3, r3, #10
 8005e60:	b29b      	uxth	r3, r3
 8005e62:	4313      	orrs	r3, r2
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e72:	801a      	strh	r2, [r3, #0]
 8005e74:	e044      	b.n	8005f00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d10a      	bne.n	8005e94 <HAL_PCD_EP_DB_Transmit+0x350>
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e80:	881b      	ldrh	r3, [r3, #0]
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e8c:	b29a      	uxth	r2, r3
 8005e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e90:	801a      	strh	r2, [r3, #0]
 8005e92:	e035      	b.n	8005f00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005e94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005e98:	085b      	lsrs	r3, r3, #1
 8005e9a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005e9c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005ea0:	f003 0301 	and.w	r3, r3, #1
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d002      	beq.n	8005eae <HAL_PCD_EP_DB_Transmit+0x36a>
 8005ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eaa:	3301      	adds	r3, #1
 8005eac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb0:	881b      	ldrh	r3, [r3, #0]
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec2:	801a      	strh	r2, [r3, #0]
 8005ec4:	e01c      	b.n	8005f00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	785b      	ldrb	r3, [r3, #1]
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d118      	bne.n	8005f00 <HAL_PCD_EP_DB_Transmit+0x3bc>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005edc:	b29b      	uxth	r3, r3
 8005ede:	461a      	mov	r2, r3
 8005ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ee2:	4413      	add	r3, r2
 8005ee4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	011a      	lsls	r2, r3, #4
 8005eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005eee:	4413      	add	r3, r2
 8005ef0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ef4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ef6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005efe:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	6818      	ldr	r0, [r3, #0]
 8005f04:	68bb      	ldr	r3, [r7, #8]
 8005f06:	6959      	ldr	r1, [r3, #20]
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	891a      	ldrh	r2, [r3, #8]
 8005f0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	f003 fa06 	bl	8009322 <USB_WritePMA>
 8005f16:	e1e2      	b.n	80062de <HAL_PCD_EP_DB_Transmit+0x79a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	00db      	lsls	r3, r3, #3
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3306      	adds	r3, #6
 8005f2e:	005b      	lsls	r3, r3, #1
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f3a:	881b      	ldrh	r3, [r3, #0]
 8005f3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005f40:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86

    if (ep->xfer_len >= TxPctSize)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	699a      	ldr	r2, [r3, #24]
 8005f48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d307      	bcc.n	8005f60 <HAL_PCD_EP_DB_Transmit+0x41c>
    {
      ep->xfer_len -= TxPctSize;
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	699a      	ldr	r2, [r3, #24]
 8005f54:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8005f58:	1ad2      	subs	r2, r2, r3
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	619a      	str	r2, [r3, #24]
 8005f5e:	e002      	b.n	8005f66 <HAL_PCD_EP_DB_Transmit+0x422>
    }
    else
    {
      ep->xfer_len = 0U;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2200      	movs	r2, #0
 8005f64:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	f040 80c0 	bne.w	80060f0 <HAL_PCD_EP_DB_Transmit+0x5ac>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	785b      	ldrb	r3, [r3, #1]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d126      	bne.n	8005fc6 <HAL_PCD_EP_DB_Transmit+0x482>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	461a      	mov	r2, r3
 8005f8a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f8c:	4413      	add	r3, r2
 8005f8e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	011a      	lsls	r2, r3, #4
 8005f96:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005f98:	4413      	add	r3, r2
 8005f9a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005f9e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005fa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fa2:	881b      	ldrh	r3, [r3, #0]
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005faa:	b29a      	uxth	r2, r3
 8005fac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fae:	801a      	strh	r2, [r3, #0]
 8005fb0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fb2:	881b      	ldrh	r3, [r3, #0]
 8005fb4:	b29b      	uxth	r3, r3
 8005fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fbe:	b29a      	uxth	r2, r3
 8005fc0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fc2:	801a      	strh	r2, [r3, #0]
 8005fc4:	e01a      	b.n	8005ffc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	785b      	ldrb	r3, [r3, #1]
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d116      	bne.n	8005ffc <HAL_PCD_EP_DB_Transmit+0x4b8>
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8005fdc:	b29b      	uxth	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fe2:	4413      	add	r3, r2
 8005fe4:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	011a      	lsls	r2, r3, #4
 8005fec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fee:	4413      	add	r3, r2
 8005ff0:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8005ff4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	677b      	str	r3, [r7, #116]	@ 0x74
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	785b      	ldrb	r3, [r3, #1]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d12b      	bne.n	8006062 <HAL_PCD_EP_DB_Transmit+0x51e>
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006018:	b29b      	uxth	r3, r3
 800601a:	461a      	mov	r2, r3
 800601c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800601e:	4413      	add	r3, r2
 8006020:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	781b      	ldrb	r3, [r3, #0]
 8006026:	011a      	lsls	r2, r3, #4
 8006028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800602a:	4413      	add	r3, r2
 800602c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8006030:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006034:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006040:	b29a      	uxth	r2, r3
 8006042:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006046:	801a      	strh	r2, [r3, #0]
 8006048:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800604c:	881b      	ldrh	r3, [r3, #0]
 800604e:	b29b      	uxth	r3, r3
 8006050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006058:	b29a      	uxth	r2, r3
 800605a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800605e:	801a      	strh	r2, [r3, #0]
 8006060:	e017      	b.n	8006092 <HAL_PCD_EP_DB_Transmit+0x54e>
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	785b      	ldrb	r3, [r3, #1]
 8006066:	2b01      	cmp	r3, #1
 8006068:	d113      	bne.n	8006092 <HAL_PCD_EP_DB_Transmit+0x54e>
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006072:	b29b      	uxth	r3, r3
 8006074:	461a      	mov	r2, r3
 8006076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006078:	4413      	add	r3, r2
 800607a:	677b      	str	r3, [r7, #116]	@ 0x74
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	011a      	lsls	r2, r3, #4
 8006082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006084:	4413      	add	r3, r2
 8006086:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800608a:	673b      	str	r3, [r7, #112]	@ 0x70
 800608c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800608e:	2200      	movs	r2, #0
 8006090:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	4619      	mov	r1, r3
 8006098:	68f8      	ldr	r0, [r7, #12]
 800609a:	f004 ff8c 	bl	800afb6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800609e:	88fb      	ldrh	r3, [r7, #6]
 80060a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f040 811a 	bne.w	80062de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	461a      	mov	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	4413      	add	r3, r2
 80060b8:	881b      	ldrh	r3, [r3, #0]
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	461a      	mov	r2, r3
 80060ce:	68bb      	ldr	r3, [r7, #8]
 80060d0:	781b      	ldrb	r3, [r3, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	441a      	add	r2, r3
 80060d6:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80060da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80060de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80060e2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80060e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	8013      	strh	r3, [r2, #0]
 80060ee:	e0f6      	b.n	80062de <HAL_PCD_EP_DB_Transmit+0x79a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80060f0:	88fb      	ldrh	r3, [r7, #6]
 80060f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d121      	bne.n	800613e <HAL_PCD_EP_DB_Transmit+0x5fa>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	461a      	mov	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	b29b      	uxth	r3, r3
 800610c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006110:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006114:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	68bb      	ldr	r3, [r7, #8]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	009b      	lsls	r3, r3, #2
 8006124:	441a      	add	r2, r3
 8006126:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 800612a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800612e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006132:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800613a:	b29b      	uxth	r3, r3
 800613c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8006144:	2b01      	cmp	r3, #1
 8006146:	f040 80ca 	bne.w	80062de <HAL_PCD_EP_DB_Transmit+0x79a>
      {
        ep->xfer_buff += TxPctSize;
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	695a      	ldr	r2, [r3, #20]
 800614e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006152:	441a      	add	r2, r3
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006160:	441a      	add	r2, r3
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006166:	68bb      	ldr	r3, [r7, #8]
 8006168:	6a1a      	ldr	r2, [r3, #32]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	429a      	cmp	r2, r3
 8006170:	d30b      	bcc.n	800618a <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db -= len;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	6a1a      	ldr	r2, [r3, #32]
 800617e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006182:	1ad2      	subs	r2, r2, r3
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	621a      	str	r2, [r3, #32]
 8006188:	e017      	b.n	80061ba <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else if (ep->xfer_len_db == 0U)
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6a1b      	ldr	r3, [r3, #32]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d108      	bne.n	80061a4 <HAL_PCD_EP_DB_Transmit+0x660>
        {
          len = TxPctSize;
 8006192:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8006196:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_fill_db = 0U;
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
 80061a2:	e00a      	b.n	80061ba <HAL_PCD_EP_DB_Transmit+0x676>
        }
        else
        {
          len = ep->xfer_len_db;
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
          ep->xfer_len_db = 0U;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	2200      	movs	r2, #0
 80061b0:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	657b      	str	r3, [r7, #84]	@ 0x54
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	785b      	ldrb	r3, [r3, #1]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d165      	bne.n	8006294 <HAL_PCD_EP_DB_Transmit+0x750>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	461a      	mov	r2, r3
 80061da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061dc:	4413      	add	r3, r2
 80061de:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	011a      	lsls	r2, r3, #4
 80061e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80061e8:	4413      	add	r3, r2
 80061ea:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80061ee:	65bb      	str	r3, [r7, #88]	@ 0x58
 80061f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061f2:	881b      	ldrh	r3, [r3, #0]
 80061f4:	b29b      	uxth	r3, r3
 80061f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80061fa:	b29a      	uxth	r2, r3
 80061fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80061fe:	801a      	strh	r2, [r3, #0]
 8006200:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006204:	2b3e      	cmp	r3, #62	@ 0x3e
 8006206:	d91d      	bls.n	8006244 <HAL_PCD_EP_DB_Transmit+0x700>
 8006208:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800620c:	095b      	lsrs	r3, r3, #5
 800620e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006210:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006214:	f003 031f 	and.w	r3, r3, #31
 8006218:	2b00      	cmp	r3, #0
 800621a:	d102      	bne.n	8006222 <HAL_PCD_EP_DB_Transmit+0x6de>
 800621c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800621e:	3b01      	subs	r3, #1
 8006220:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006222:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	b29a      	uxth	r2, r3
 8006228:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800622a:	b29b      	uxth	r3, r3
 800622c:	029b      	lsls	r3, r3, #10
 800622e:	b29b      	uxth	r3, r3
 8006230:	4313      	orrs	r3, r2
 8006232:	b29b      	uxth	r3, r3
 8006234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623c:	b29a      	uxth	r2, r3
 800623e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006240:	801a      	strh	r2, [r3, #0]
 8006242:	e041      	b.n	80062c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006244:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006248:	2b00      	cmp	r3, #0
 800624a:	d10a      	bne.n	8006262 <HAL_PCD_EP_DB_Transmit+0x71e>
 800624c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800624e:	881b      	ldrh	r3, [r3, #0]
 8006250:	b29b      	uxth	r3, r3
 8006252:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006256:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800625a:	b29a      	uxth	r2, r3
 800625c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	e032      	b.n	80062c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006266:	085b      	lsrs	r3, r3, #1
 8006268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800626a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800626e:	f003 0301 	and.w	r3, r3, #1
 8006272:	2b00      	cmp	r3, #0
 8006274:	d002      	beq.n	800627c <HAL_PCD_EP_DB_Transmit+0x738>
 8006276:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006278:	3301      	adds	r3, #1
 800627a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800627c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800627e:	881b      	ldrh	r3, [r3, #0]
 8006280:	b29a      	uxth	r2, r3
 8006282:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006284:	b29b      	uxth	r3, r3
 8006286:	029b      	lsls	r3, r3, #10
 8006288:	b29b      	uxth	r3, r3
 800628a:	4313      	orrs	r3, r2
 800628c:	b29a      	uxth	r2, r3
 800628e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006290:	801a      	strh	r2, [r3, #0]
 8006292:	e019      	b.n	80062c8 <HAL_PCD_EP_DB_Transmit+0x784>
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	785b      	ldrb	r3, [r3, #1]
 8006298:	2b01      	cmp	r3, #1
 800629a:	d115      	bne.n	80062c8 <HAL_PCD_EP_DB_Transmit+0x784>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	461a      	mov	r2, r3
 80062a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062aa:	4413      	add	r3, r2
 80062ac:	657b      	str	r3, [r7, #84]	@ 0x54
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	011a      	lsls	r2, r3, #4
 80062b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80062b6:	4413      	add	r3, r2
 80062b8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80062bc:	653b      	str	r3, [r7, #80]	@ 0x50
 80062be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80062c6:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	6959      	ldr	r1, [r3, #20]
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	895a      	ldrh	r2, [r3, #10]
 80062d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062d8:	b29b      	uxth	r3, r3
 80062da:	f003 f822 	bl	8009322 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	781b      	ldrb	r3, [r3, #0]
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	881b      	ldrh	r3, [r3, #0]
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80062f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80062f8:	82bb      	strh	r3, [r7, #20]
 80062fa:	8abb      	ldrh	r3, [r7, #20]
 80062fc:	f083 0310 	eor.w	r3, r3, #16
 8006300:	82bb      	strh	r3, [r7, #20]
 8006302:	8abb      	ldrh	r3, [r7, #20]
 8006304:	f083 0320 	eor.w	r3, r3, #32
 8006308:	82bb      	strh	r3, [r7, #20]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	461a      	mov	r2, r3
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	441a      	add	r2, r3
 8006318:	8abb      	ldrh	r3, [r7, #20]
 800631a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800631e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006322:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006326:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800632a:	b29b      	uxth	r3, r3
 800632c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3790      	adds	r7, #144	@ 0x90
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	607b      	str	r3, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	817b      	strh	r3, [r7, #10]
 8006346:	4613      	mov	r3, r2
 8006348:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800634a:	897b      	ldrh	r3, [r7, #10]
 800634c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006350:	b29b      	uxth	r3, r3
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00b      	beq.n	800636e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006356:	897b      	ldrh	r3, [r7, #10]
 8006358:	f003 0207 	and.w	r2, r3, #7
 800635c:	4613      	mov	r3, r2
 800635e:	009b      	lsls	r3, r3, #2
 8006360:	4413      	add	r3, r2
 8006362:	00db      	lsls	r3, r3, #3
 8006364:	3310      	adds	r3, #16
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	617b      	str	r3, [r7, #20]
 800636c:	e009      	b.n	8006382 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800636e:	897a      	ldrh	r2, [r7, #10]
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	00db      	lsls	r3, r3, #3
 8006378:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800637c:	68fa      	ldr	r2, [r7, #12]
 800637e:	4413      	add	r3, r2
 8006380:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8006382:	893b      	ldrh	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d107      	bne.n	8006398 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	2200      	movs	r2, #0
 800638c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	b29a      	uxth	r2, r3
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	80da      	strh	r2, [r3, #6]
 8006396:	e00b      	b.n	80063b0 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2201      	movs	r2, #1
 800639c:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0c1b      	lsrs	r3, r3, #16
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	371c      	adds	r7, #28
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bc80      	pop	{r7}
 80063ba:	4770      	bx	lr

080063bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b086      	sub	sp, #24
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d101      	bne.n	80063ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e272      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0301 	and.w	r3, r3, #1
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	f000 8087 	beq.w	80064ea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80063dc:	4b92      	ldr	r3, [pc, #584]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f003 030c 	and.w	r3, r3, #12
 80063e4:	2b04      	cmp	r3, #4
 80063e6:	d00c      	beq.n	8006402 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80063e8:	4b8f      	ldr	r3, [pc, #572]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	f003 030c 	and.w	r3, r3, #12
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d112      	bne.n	800641a <HAL_RCC_OscConfig+0x5e>
 80063f4:	4b8c      	ldr	r3, [pc, #560]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006400:	d10b      	bne.n	800641a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006402:	4b89      	ldr	r3, [pc, #548]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d06c      	beq.n	80064e8 <HAL_RCC_OscConfig+0x12c>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	685b      	ldr	r3, [r3, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d168      	bne.n	80064e8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e24c      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006422:	d106      	bne.n	8006432 <HAL_RCC_OscConfig+0x76>
 8006424:	4b80      	ldr	r3, [pc, #512]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4a7f      	ldr	r2, [pc, #508]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800642a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800642e:	6013      	str	r3, [r2, #0]
 8006430:	e02e      	b.n	8006490 <HAL_RCC_OscConfig+0xd4>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d10c      	bne.n	8006454 <HAL_RCC_OscConfig+0x98>
 800643a:	4b7b      	ldr	r3, [pc, #492]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a7a      	ldr	r2, [pc, #488]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006440:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006444:	6013      	str	r3, [r2, #0]
 8006446:	4b78      	ldr	r3, [pc, #480]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a77      	ldr	r2, [pc, #476]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800644c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e01d      	b.n	8006490 <HAL_RCC_OscConfig+0xd4>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800645c:	d10c      	bne.n	8006478 <HAL_RCC_OscConfig+0xbc>
 800645e:	4b72      	ldr	r3, [pc, #456]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4a71      	ldr	r2, [pc, #452]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006464:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006468:	6013      	str	r3, [r2, #0]
 800646a:	4b6f      	ldr	r3, [pc, #444]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a6e      	ldr	r2, [pc, #440]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006470:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006474:	6013      	str	r3, [r2, #0]
 8006476:	e00b      	b.n	8006490 <HAL_RCC_OscConfig+0xd4>
 8006478:	4b6b      	ldr	r3, [pc, #428]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a6a      	ldr	r2, [pc, #424]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800647e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	4b68      	ldr	r3, [pc, #416]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	4a67      	ldr	r2, [pc, #412]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800648a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800648e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d013      	beq.n	80064c0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006498:	f7fc fbc2 	bl	8002c20 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064a0:	f7fc fbbe 	bl	8002c20 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b64      	cmp	r3, #100	@ 0x64
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e200      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064b2:	4b5d      	ldr	r3, [pc, #372]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d0f0      	beq.n	80064a0 <HAL_RCC_OscConfig+0xe4>
 80064be:	e014      	b.n	80064ea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064c0:	f7fc fbae 	bl	8002c20 <HAL_GetTick>
 80064c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064c6:	e008      	b.n	80064da <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80064c8:	f7fc fbaa 	bl	8002c20 <HAL_GetTick>
 80064cc:	4602      	mov	r2, r0
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	2b64      	cmp	r3, #100	@ 0x64
 80064d4:	d901      	bls.n	80064da <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80064d6:	2303      	movs	r3, #3
 80064d8:	e1ec      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80064da:	4b53      	ldr	r3, [pc, #332]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1f0      	bne.n	80064c8 <HAL_RCC_OscConfig+0x10c>
 80064e6:	e000      	b.n	80064ea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80064e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0302 	and.w	r3, r3, #2
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d063      	beq.n	80065be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80064f6:	4b4c      	ldr	r3, [pc, #304]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 80064f8:	685b      	ldr	r3, [r3, #4]
 80064fa:	f003 030c 	and.w	r3, r3, #12
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00b      	beq.n	800651a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006502:	4b49      	ldr	r3, [pc, #292]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006504:	685b      	ldr	r3, [r3, #4]
 8006506:	f003 030c 	and.w	r3, r3, #12
 800650a:	2b08      	cmp	r3, #8
 800650c:	d11c      	bne.n	8006548 <HAL_RCC_OscConfig+0x18c>
 800650e:	4b46      	ldr	r3, [pc, #280]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006516:	2b00      	cmp	r3, #0
 8006518:	d116      	bne.n	8006548 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800651a:	4b43      	ldr	r3, [pc, #268]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0302 	and.w	r3, r3, #2
 8006522:	2b00      	cmp	r3, #0
 8006524:	d005      	beq.n	8006532 <HAL_RCC_OscConfig+0x176>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d001      	beq.n	8006532 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e1c0      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006532:	4b3d      	ldr	r3, [pc, #244]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	00db      	lsls	r3, r3, #3
 8006540:	4939      	ldr	r1, [pc, #228]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006542:	4313      	orrs	r3, r2
 8006544:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006546:	e03a      	b.n	80065be <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d020      	beq.n	8006592 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006550:	4b36      	ldr	r3, [pc, #216]	@ (800662c <HAL_RCC_OscConfig+0x270>)
 8006552:	2201      	movs	r2, #1
 8006554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006556:	f7fc fb63 	bl	8002c20 <HAL_GetTick>
 800655a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800655c:	e008      	b.n	8006570 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800655e:	f7fc fb5f 	bl	8002c20 <HAL_GetTick>
 8006562:	4602      	mov	r2, r0
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d901      	bls.n	8006570 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800656c:	2303      	movs	r3, #3
 800656e:	e1a1      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006570:	4b2d      	ldr	r3, [pc, #180]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d0f0      	beq.n	800655e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800657c:	4b2a      	ldr	r3, [pc, #168]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	695b      	ldr	r3, [r3, #20]
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	4927      	ldr	r1, [pc, #156]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 800658c:	4313      	orrs	r3, r2
 800658e:	600b      	str	r3, [r1, #0]
 8006590:	e015      	b.n	80065be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006592:	4b26      	ldr	r3, [pc, #152]	@ (800662c <HAL_RCC_OscConfig+0x270>)
 8006594:	2200      	movs	r2, #0
 8006596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006598:	f7fc fb42 	bl	8002c20 <HAL_GetTick>
 800659c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800659e:	e008      	b.n	80065b2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80065a0:	f7fc fb3e 	bl	8002c20 <HAL_GetTick>
 80065a4:	4602      	mov	r2, r0
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	1ad3      	subs	r3, r2, r3
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e180      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80065b2:	4b1d      	ldr	r3, [pc, #116]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1f0      	bne.n	80065a0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f003 0308 	and.w	r3, r3, #8
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d03a      	beq.n	8006640 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	699b      	ldr	r3, [r3, #24]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d019      	beq.n	8006606 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80065d2:	4b17      	ldr	r3, [pc, #92]	@ (8006630 <HAL_RCC_OscConfig+0x274>)
 80065d4:	2201      	movs	r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80065d8:	f7fc fb22 	bl	8002c20 <HAL_GetTick>
 80065dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065de:	e008      	b.n	80065f2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80065e0:	f7fc fb1e 	bl	8002c20 <HAL_GetTick>
 80065e4:	4602      	mov	r2, r0
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	1ad3      	subs	r3, r2, r3
 80065ea:	2b02      	cmp	r3, #2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e160      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80065f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006628 <HAL_RCC_OscConfig+0x26c>)
 80065f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f6:	f003 0302 	and.w	r3, r3, #2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d0f0      	beq.n	80065e0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80065fe:	2001      	movs	r0, #1
 8006600:	f000 faba 	bl	8006b78 <RCC_Delay>
 8006604:	e01c      	b.n	8006640 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006606:	4b0a      	ldr	r3, [pc, #40]	@ (8006630 <HAL_RCC_OscConfig+0x274>)
 8006608:	2200      	movs	r2, #0
 800660a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800660c:	f7fc fb08 	bl	8002c20 <HAL_GetTick>
 8006610:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006612:	e00f      	b.n	8006634 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006614:	f7fc fb04 	bl	8002c20 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d908      	bls.n	8006634 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e146      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
 8006626:	bf00      	nop
 8006628:	40021000 	.word	0x40021000
 800662c:	42420000 	.word	0x42420000
 8006630:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006634:	4b92      	ldr	r3, [pc, #584]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006638:	f003 0302 	and.w	r3, r3, #2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1e9      	bne.n	8006614 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0304 	and.w	r3, r3, #4
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80a6 	beq.w	800679a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800664e:	2300      	movs	r3, #0
 8006650:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006652:	4b8b      	ldr	r3, [pc, #556]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800665a:	2b00      	cmp	r3, #0
 800665c:	d10d      	bne.n	800667a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800665e:	4b88      	ldr	r3, [pc, #544]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006660:	69db      	ldr	r3, [r3, #28]
 8006662:	4a87      	ldr	r2, [pc, #540]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006664:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006668:	61d3      	str	r3, [r2, #28]
 800666a:	4b85      	ldr	r3, [pc, #532]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006672:	60bb      	str	r3, [r7, #8]
 8006674:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006676:	2301      	movs	r3, #1
 8006678:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800667a:	4b82      	ldr	r3, [pc, #520]	@ (8006884 <HAL_RCC_OscConfig+0x4c8>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006682:	2b00      	cmp	r3, #0
 8006684:	d118      	bne.n	80066b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006686:	4b7f      	ldr	r3, [pc, #508]	@ (8006884 <HAL_RCC_OscConfig+0x4c8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a7e      	ldr	r2, [pc, #504]	@ (8006884 <HAL_RCC_OscConfig+0x4c8>)
 800668c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006692:	f7fc fac5 	bl	8002c20 <HAL_GetTick>
 8006696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006698:	e008      	b.n	80066ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800669a:	f7fc fac1 	bl	8002c20 <HAL_GetTick>
 800669e:	4602      	mov	r2, r0
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	1ad3      	subs	r3, r2, r3
 80066a4:	2b64      	cmp	r3, #100	@ 0x64
 80066a6:	d901      	bls.n	80066ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e103      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80066ac:	4b75      	ldr	r3, [pc, #468]	@ (8006884 <HAL_RCC_OscConfig+0x4c8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d0f0      	beq.n	800669a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68db      	ldr	r3, [r3, #12]
 80066bc:	2b01      	cmp	r3, #1
 80066be:	d106      	bne.n	80066ce <HAL_RCC_OscConfig+0x312>
 80066c0:	4b6f      	ldr	r3, [pc, #444]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80066c2:	6a1b      	ldr	r3, [r3, #32]
 80066c4:	4a6e      	ldr	r2, [pc, #440]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80066c6:	f043 0301 	orr.w	r3, r3, #1
 80066ca:	6213      	str	r3, [r2, #32]
 80066cc:	e02d      	b.n	800672a <HAL_RCC_OscConfig+0x36e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10c      	bne.n	80066f0 <HAL_RCC_OscConfig+0x334>
 80066d6:	4b6a      	ldr	r3, [pc, #424]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80066d8:	6a1b      	ldr	r3, [r3, #32]
 80066da:	4a69      	ldr	r2, [pc, #420]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80066dc:	f023 0301 	bic.w	r3, r3, #1
 80066e0:	6213      	str	r3, [r2, #32]
 80066e2:	4b67      	ldr	r3, [pc, #412]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80066e4:	6a1b      	ldr	r3, [r3, #32]
 80066e6:	4a66      	ldr	r2, [pc, #408]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80066e8:	f023 0304 	bic.w	r3, r3, #4
 80066ec:	6213      	str	r3, [r2, #32]
 80066ee:	e01c      	b.n	800672a <HAL_RCC_OscConfig+0x36e>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	2b05      	cmp	r3, #5
 80066f6:	d10c      	bne.n	8006712 <HAL_RCC_OscConfig+0x356>
 80066f8:	4b61      	ldr	r3, [pc, #388]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80066fa:	6a1b      	ldr	r3, [r3, #32]
 80066fc:	4a60      	ldr	r2, [pc, #384]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80066fe:	f043 0304 	orr.w	r3, r3, #4
 8006702:	6213      	str	r3, [r2, #32]
 8006704:	4b5e      	ldr	r3, [pc, #376]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006706:	6a1b      	ldr	r3, [r3, #32]
 8006708:	4a5d      	ldr	r2, [pc, #372]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	6213      	str	r3, [r2, #32]
 8006710:	e00b      	b.n	800672a <HAL_RCC_OscConfig+0x36e>
 8006712:	4b5b      	ldr	r3, [pc, #364]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	4a5a      	ldr	r2, [pc, #360]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	6213      	str	r3, [r2, #32]
 800671e:	4b58      	ldr	r3, [pc, #352]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006720:	6a1b      	ldr	r3, [r3, #32]
 8006722:	4a57      	ldr	r2, [pc, #348]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006724:	f023 0304 	bic.w	r3, r3, #4
 8006728:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d015      	beq.n	800675e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006732:	f7fc fa75 	bl	8002c20 <HAL_GetTick>
 8006736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006738:	e00a      	b.n	8006750 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800673a:	f7fc fa71 	bl	8002c20 <HAL_GetTick>
 800673e:	4602      	mov	r2, r0
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	1ad3      	subs	r3, r2, r3
 8006744:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006748:	4293      	cmp	r3, r2
 800674a:	d901      	bls.n	8006750 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800674c:	2303      	movs	r3, #3
 800674e:	e0b1      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006750:	4b4b      	ldr	r3, [pc, #300]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006752:	6a1b      	ldr	r3, [r3, #32]
 8006754:	f003 0302 	and.w	r3, r3, #2
 8006758:	2b00      	cmp	r3, #0
 800675a:	d0ee      	beq.n	800673a <HAL_RCC_OscConfig+0x37e>
 800675c:	e014      	b.n	8006788 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800675e:	f7fc fa5f 	bl	8002c20 <HAL_GetTick>
 8006762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006764:	e00a      	b.n	800677c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006766:	f7fc fa5b 	bl	8002c20 <HAL_GetTick>
 800676a:	4602      	mov	r2, r0
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	1ad3      	subs	r3, r2, r3
 8006770:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006774:	4293      	cmp	r3, r2
 8006776:	d901      	bls.n	800677c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8006778:	2303      	movs	r3, #3
 800677a:	e09b      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800677c:	4b40      	ldr	r3, [pc, #256]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 800677e:	6a1b      	ldr	r3, [r3, #32]
 8006780:	f003 0302 	and.w	r3, r3, #2
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1ee      	bne.n	8006766 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006788:	7dfb      	ldrb	r3, [r7, #23]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d105      	bne.n	800679a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800678e:	4b3c      	ldr	r3, [pc, #240]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006790:	69db      	ldr	r3, [r3, #28]
 8006792:	4a3b      	ldr	r2, [pc, #236]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006794:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006798:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	69db      	ldr	r3, [r3, #28]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f000 8087 	beq.w	80068b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80067a4:	4b36      	ldr	r3, [pc, #216]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	f003 030c 	and.w	r3, r3, #12
 80067ac:	2b08      	cmp	r3, #8
 80067ae:	d061      	beq.n	8006874 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d146      	bne.n	8006846 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80067b8:	4b33      	ldr	r3, [pc, #204]	@ (8006888 <HAL_RCC_OscConfig+0x4cc>)
 80067ba:	2200      	movs	r2, #0
 80067bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067be:	f7fc fa2f 	bl	8002c20 <HAL_GetTick>
 80067c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067c4:	e008      	b.n	80067d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80067c6:	f7fc fa2b 	bl	8002c20 <HAL_GetTick>
 80067ca:	4602      	mov	r2, r0
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	1ad3      	subs	r3, r2, r3
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d901      	bls.n	80067d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80067d4:	2303      	movs	r3, #3
 80067d6:	e06d      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80067d8:	4b29      	ldr	r3, [pc, #164]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1f0      	bne.n	80067c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a1b      	ldr	r3, [r3, #32]
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ec:	d108      	bne.n	8006800 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80067ee:	4b24      	ldr	r3, [pc, #144]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	4921      	ldr	r1, [pc, #132]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006800:	4b1f      	ldr	r3, [pc, #124]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6a19      	ldr	r1, [r3, #32]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006810:	430b      	orrs	r3, r1
 8006812:	491b      	ldr	r1, [pc, #108]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006814:	4313      	orrs	r3, r2
 8006816:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006818:	4b1b      	ldr	r3, [pc, #108]	@ (8006888 <HAL_RCC_OscConfig+0x4cc>)
 800681a:	2201      	movs	r2, #1
 800681c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800681e:	f7fc f9ff 	bl	8002c20 <HAL_GetTick>
 8006822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006824:	e008      	b.n	8006838 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006826:	f7fc f9fb 	bl	8002c20 <HAL_GetTick>
 800682a:	4602      	mov	r2, r0
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	1ad3      	subs	r3, r2, r3
 8006830:	2b02      	cmp	r3, #2
 8006832:	d901      	bls.n	8006838 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8006834:	2303      	movs	r3, #3
 8006836:	e03d      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006838:	4b11      	ldr	r3, [pc, #68]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0f0      	beq.n	8006826 <HAL_RCC_OscConfig+0x46a>
 8006844:	e035      	b.n	80068b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006846:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <HAL_RCC_OscConfig+0x4cc>)
 8006848:	2200      	movs	r2, #0
 800684a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800684c:	f7fc f9e8 	bl	8002c20 <HAL_GetTick>
 8006850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006852:	e008      	b.n	8006866 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006854:	f7fc f9e4 	bl	8002c20 <HAL_GetTick>
 8006858:	4602      	mov	r2, r0
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	1ad3      	subs	r3, r2, r3
 800685e:	2b02      	cmp	r3, #2
 8006860:	d901      	bls.n	8006866 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006862:	2303      	movs	r3, #3
 8006864:	e026      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8006866:	4b06      	ldr	r3, [pc, #24]	@ (8006880 <HAL_RCC_OscConfig+0x4c4>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800686e:	2b00      	cmp	r3, #0
 8006870:	d1f0      	bne.n	8006854 <HAL_RCC_OscConfig+0x498>
 8006872:	e01e      	b.n	80068b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	69db      	ldr	r3, [r3, #28]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d107      	bne.n	800688c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	e019      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
 8006880:	40021000 	.word	0x40021000
 8006884:	40007000 	.word	0x40007000
 8006888:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800688c:	4b0b      	ldr	r3, [pc, #44]	@ (80068bc <HAL_RCC_OscConfig+0x500>)
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6a1b      	ldr	r3, [r3, #32]
 800689c:	429a      	cmp	r2, r3
 800689e:	d106      	bne.n	80068ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d001      	beq.n	80068b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e000      	b.n	80068b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3718      	adds	r7, #24
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	40021000 	.word	0x40021000

080068c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d101      	bne.n	80068d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e0d0      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80068d4:	4b6a      	ldr	r3, [pc, #424]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c0>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d910      	bls.n	8006904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e2:	4b67      	ldr	r3, [pc, #412]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c0>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f023 0207 	bic.w	r2, r3, #7
 80068ea:	4965      	ldr	r1, [pc, #404]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c0>)
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80068f2:	4b63      	ldr	r3, [pc, #396]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c0>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	683a      	ldr	r2, [r7, #0]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d001      	beq.n	8006904 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8006900:	2301      	movs	r3, #1
 8006902:	e0b8      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f003 0302 	and.w	r3, r3, #2
 800690c:	2b00      	cmp	r3, #0
 800690e:	d020      	beq.n	8006952 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f003 0304 	and.w	r3, r3, #4
 8006918:	2b00      	cmp	r3, #0
 800691a:	d005      	beq.n	8006928 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800691c:	4b59      	ldr	r3, [pc, #356]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	4a58      	ldr	r2, [pc, #352]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006922:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006926:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 0308 	and.w	r3, r3, #8
 8006930:	2b00      	cmp	r3, #0
 8006932:	d005      	beq.n	8006940 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006934:	4b53      	ldr	r3, [pc, #332]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	4a52      	ldr	r2, [pc, #328]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 800693a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800693e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006940:	4b50      	ldr	r3, [pc, #320]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	494d      	ldr	r1, [pc, #308]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 800694e:	4313      	orrs	r3, r2
 8006950:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d040      	beq.n	80069e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b01      	cmp	r3, #1
 8006964:	d107      	bne.n	8006976 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006966:	4b47      	ldr	r3, [pc, #284]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800696e:	2b00      	cmp	r3, #0
 8006970:	d115      	bne.n	800699e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e07f      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	2b02      	cmp	r3, #2
 800697c:	d107      	bne.n	800698e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800697e:	4b41      	ldr	r3, [pc, #260]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006986:	2b00      	cmp	r3, #0
 8006988:	d109      	bne.n	800699e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e073      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698e:	4b3d      	ldr	r3, [pc, #244]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d101      	bne.n	800699e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800699a:	2301      	movs	r3, #1
 800699c:	e06b      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800699e:	4b39      	ldr	r3, [pc, #228]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f023 0203 	bic.w	r2, r3, #3
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	685b      	ldr	r3, [r3, #4]
 80069aa:	4936      	ldr	r1, [pc, #216]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80069b0:	f7fc f936 	bl	8002c20 <HAL_GetTick>
 80069b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069b6:	e00a      	b.n	80069ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80069b8:	f7fc f932 	bl	8002c20 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d901      	bls.n	80069ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80069ca:	2303      	movs	r3, #3
 80069cc:	e053      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80069ce:	4b2d      	ldr	r3, [pc, #180]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 80069d0:	685b      	ldr	r3, [r3, #4]
 80069d2:	f003 020c 	and.w	r2, r3, #12
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	429a      	cmp	r2, r3
 80069de:	d1eb      	bne.n	80069b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80069e0:	4b27      	ldr	r3, [pc, #156]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c0>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f003 0307 	and.w	r3, r3, #7
 80069e8:	683a      	ldr	r2, [r7, #0]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d210      	bcs.n	8006a10 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80069ee:	4b24      	ldr	r3, [pc, #144]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c0>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f023 0207 	bic.w	r2, r3, #7
 80069f6:	4922      	ldr	r1, [pc, #136]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c0>)
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80069fe:	4b20      	ldr	r3, [pc, #128]	@ (8006a80 <HAL_RCC_ClockConfig+0x1c0>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0307 	and.w	r3, r3, #7
 8006a06:	683a      	ldr	r2, [r7, #0]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d001      	beq.n	8006a10 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e032      	b.n	8006a76 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	f003 0304 	and.w	r3, r3, #4
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d008      	beq.n	8006a2e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006a1c:	4b19      	ldr	r3, [pc, #100]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	4916      	ldr	r1, [pc, #88]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f003 0308 	and.w	r3, r3, #8
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006a3a:	4b12      	ldr	r3, [pc, #72]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	00db      	lsls	r3, r3, #3
 8006a48:	490e      	ldr	r1, [pc, #56]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006a4e:	f000 f821 	bl	8006a94 <HAL_RCC_GetSysClockFreq>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4b0b      	ldr	r3, [pc, #44]	@ (8006a84 <HAL_RCC_ClockConfig+0x1c4>)
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	091b      	lsrs	r3, r3, #4
 8006a5a:	f003 030f 	and.w	r3, r3, #15
 8006a5e:	490a      	ldr	r1, [pc, #40]	@ (8006a88 <HAL_RCC_ClockConfig+0x1c8>)
 8006a60:	5ccb      	ldrb	r3, [r1, r3]
 8006a62:	fa22 f303 	lsr.w	r3, r2, r3
 8006a66:	4a09      	ldr	r2, [pc, #36]	@ (8006a8c <HAL_RCC_ClockConfig+0x1cc>)
 8006a68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006a6a:	4b09      	ldr	r3, [pc, #36]	@ (8006a90 <HAL_RCC_ClockConfig+0x1d0>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fc f894 	bl	8002b9c <HAL_InitTick>

  return HAL_OK;
 8006a74:	2300      	movs	r3, #0
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3710      	adds	r7, #16
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop
 8006a80:	40022000 	.word	0x40022000
 8006a84:	40021000 	.word	0x40021000
 8006a88:	0800e840 	.word	0x0800e840
 8006a8c:	20000018 	.word	0x20000018
 8006a90:	2000001c 	.word	0x2000001c

08006a94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b087      	sub	sp, #28
 8006a98:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60bb      	str	r3, [r7, #8]
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	617b      	str	r3, [r7, #20]
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8006aae:	4b1e      	ldr	r3, [pc, #120]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	f003 030c 	and.w	r3, r3, #12
 8006aba:	2b04      	cmp	r3, #4
 8006abc:	d002      	beq.n	8006ac4 <HAL_RCC_GetSysClockFreq+0x30>
 8006abe:	2b08      	cmp	r3, #8
 8006ac0:	d003      	beq.n	8006aca <HAL_RCC_GetSysClockFreq+0x36>
 8006ac2:	e027      	b.n	8006b14 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006ac4:	4b19      	ldr	r3, [pc, #100]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8006ac6:	613b      	str	r3, [r7, #16]
      break;
 8006ac8:	e027      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	0c9b      	lsrs	r3, r3, #18
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	4a17      	ldr	r2, [pc, #92]	@ (8006b30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8006ad4:	5cd3      	ldrb	r3, [r2, r3]
 8006ad6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d010      	beq.n	8006b04 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8006ae2:	4b11      	ldr	r3, [pc, #68]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x94>)
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	0c5b      	lsrs	r3, r3, #17
 8006ae8:	f003 0301 	and.w	r3, r3, #1
 8006aec:	4a11      	ldr	r2, [pc, #68]	@ (8006b34 <HAL_RCC_GetSysClockFreq+0xa0>)
 8006aee:	5cd3      	ldrb	r3, [r2, r3]
 8006af0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a0d      	ldr	r2, [pc, #52]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8006af6:	fb03 f202 	mul.w	r2, r3, r2
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b00:	617b      	str	r3, [r7, #20]
 8006b02:	e004      	b.n	8006b0e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a0c      	ldr	r2, [pc, #48]	@ (8006b38 <HAL_RCC_GetSysClockFreq+0xa4>)
 8006b08:	fb02 f303 	mul.w	r3, r2, r3
 8006b0c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	613b      	str	r3, [r7, #16]
      break;
 8006b12:	e002      	b.n	8006b1a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8006b14:	4b05      	ldr	r3, [pc, #20]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x98>)
 8006b16:	613b      	str	r3, [r7, #16]
      break;
 8006b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b1a:	693b      	ldr	r3, [r7, #16]
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	371c      	adds	r7, #28
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bc80      	pop	{r7}
 8006b24:	4770      	bx	lr
 8006b26:	bf00      	nop
 8006b28:	40021000 	.word	0x40021000
 8006b2c:	007a1200 	.word	0x007a1200
 8006b30:	0800e858 	.word	0x0800e858
 8006b34:	0800e868 	.word	0x0800e868
 8006b38:	003d0900 	.word	0x003d0900

08006b3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b40:	4b02      	ldr	r3, [pc, #8]	@ (8006b4c <HAL_RCC_GetHCLKFreq+0x10>)
 8006b42:	681b      	ldr	r3, [r3, #0]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bc80      	pop	{r7}
 8006b4a:	4770      	bx	lr
 8006b4c:	20000018 	.word	0x20000018

08006b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b54:	f7ff fff2 	bl	8006b3c <HAL_RCC_GetHCLKFreq>
 8006b58:	4602      	mov	r2, r0
 8006b5a:	4b05      	ldr	r3, [pc, #20]	@ (8006b70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	0a1b      	lsrs	r3, r3, #8
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	4903      	ldr	r1, [pc, #12]	@ (8006b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b66:	5ccb      	ldrb	r3, [r1, r3]
 8006b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	40021000 	.word	0x40021000
 8006b74:	0800e850 	.word	0x0800e850

08006b78 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b085      	sub	sp, #20
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006b80:	4b0a      	ldr	r3, [pc, #40]	@ (8006bac <RCC_Delay+0x34>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a0a      	ldr	r2, [pc, #40]	@ (8006bb0 <RCC_Delay+0x38>)
 8006b86:	fba2 2303 	umull	r2, r3, r2, r3
 8006b8a:	0a5b      	lsrs	r3, r3, #9
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	fb02 f303 	mul.w	r3, r2, r3
 8006b92:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8006b94:	bf00      	nop
  }
  while (Delay --);
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	1e5a      	subs	r2, r3, #1
 8006b9a:	60fa      	str	r2, [r7, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1f9      	bne.n	8006b94 <RCC_Delay+0x1c>
}
 8006ba0:	bf00      	nop
 8006ba2:	bf00      	nop
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bc80      	pop	{r7}
 8006baa:	4770      	bx	lr
 8006bac:	20000018 	.word	0x20000018
 8006bb0:	10624dd3 	.word	0x10624dd3

08006bb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b086      	sub	sp, #24
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	613b      	str	r3, [r7, #16]
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d07d      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10d      	bne.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006be0:	4b4c      	ldr	r3, [pc, #304]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	4a4b      	ldr	r2, [pc, #300]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006be6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006bea:	61d3      	str	r3, [r2, #28]
 8006bec:	4b49      	ldr	r3, [pc, #292]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bf4:	60bb      	str	r3, [r7, #8]
 8006bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006bfc:	4b46      	ldr	r3, [pc, #280]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d118      	bne.n	8006c3a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006c08:	4b43      	ldr	r3, [pc, #268]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a42      	ldr	r2, [pc, #264]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006c12:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006c14:	f7fc f804 	bl	8002c20 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c1a:	e008      	b.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c1c:	f7fc f800 	bl	8002c20 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b64      	cmp	r3, #100	@ 0x64
 8006c28:	d901      	bls.n	8006c2e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e06d      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006c2e:	4b3a      	ldr	r3, [pc, #232]	@ (8006d18 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0f0      	beq.n	8006c1c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c3a:	4b36      	ldr	r3, [pc, #216]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c42:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d02e      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d027      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c58:	4b2e      	ldr	r3, [pc, #184]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c60:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c62:	4b2e      	ldr	r3, [pc, #184]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c68:	4b2c      	ldr	r3, [pc, #176]	@ (8006d1c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006c6e:	4a29      	ldr	r2, [pc, #164]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0301 	and.w	r3, r3, #1
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d014      	beq.n	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7e:	f7fb ffcf 	bl	8002c20 <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c84:	e00a      	b.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006c86:	f7fb ffcb 	bl	8002c20 <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d901      	bls.n	8006c9c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8006c98:	2303      	movs	r3, #3
 8006c9a:	e036      	b.n	8006d0a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006c9e:	6a1b      	ldr	r3, [r3, #32]
 8006ca0:	f003 0302 	and.w	r3, r3, #2
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d0ee      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	4917      	ldr	r1, [pc, #92]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8006cba:	7dfb      	ldrb	r3, [r7, #23]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d105      	bne.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc0:	4b14      	ldr	r3, [pc, #80]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	4a13      	ldr	r2, [pc, #76]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d008      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	490b      	ldr	r1, [pc, #44]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0310 	and.w	r3, r3, #16
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006cf6:	4b07      	ldr	r3, [pc, #28]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	4904      	ldr	r1, [pc, #16]	@ (8006d14 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40021000 	.word	0x40021000
 8006d18:	40007000 	.word	0x40007000
 8006d1c:	42420440 	.word	0x42420440

08006d20 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	4638      	mov	r0, r7
 8006d2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3714      	adds	r7, #20
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bc80      	pop	{r7}
 8006d38:	4770      	bx	lr

08006d3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2200      	movs	r2, #0
 8006d46:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d4a:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006d4e:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	b29a      	uxth	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bc80      	pop	{r7}
 8006d64:	4770      	bx	lr

08006d66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8006d6e:	f44f 433f 	mov.w	r3, #48896	@ 0xbf00
 8006d72:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	43db      	mvns	r3, r3
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4013      	ands	r3, r2
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3714      	adds	r7, #20
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bc80      	pop	{r7}
 8006d98:	4770      	bx	lr

08006d9a <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8006d9a:	b480      	push	{r7}
 8006d9c:	b083      	sub	sp, #12
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr

08006db2 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b085      	sub	sp, #20
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	4638      	mov	r0, r7
 8006dbc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8006de0:	2300      	movs	r3, #0
}
 8006de2:	4618      	mov	r0, r3
 8006de4:	3714      	adds	r7, #20
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bc80      	pop	{r7}
 8006dea:	4770      	bx	lr

08006dec <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b09d      	sub	sp, #116	@ 0x74
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006df6:	2300      	movs	r3, #0
 8006df8:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	881b      	ldrh	r3, [r3, #0]
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f423 43ec 	bic.w	r3, r3, #30208	@ 0x7600
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e12:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	78db      	ldrb	r3, [r3, #3]
 8006e1a:	2b03      	cmp	r3, #3
 8006e1c:	d81f      	bhi.n	8006e5e <USB_ActivateEndpoint+0x72>
 8006e1e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <USB_ActivateEndpoint+0x38>)
 8006e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e24:	08006e35 	.word	0x08006e35
 8006e28:	08006e51 	.word	0x08006e51
 8006e2c:	08006e67 	.word	0x08006e67
 8006e30:	08006e43 	.word	0x08006e43
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8006e34:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e38:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006e3c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006e40:	e012      	b.n	8006e68 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8006e42:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e46:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006e4a:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006e4e:	e00b      	b.n	8006e68 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8006e50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e54:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006e58:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
      break;
 8006e5c:	e004      	b.n	8006e68 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8006e5e:	2301      	movs	r3, #1
 8006e60:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
      break;
 8006e64:	e000      	b.n	8006e68 <USB_ActivateEndpoint+0x7c>
      break;
 8006e66:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	781b      	ldrb	r3, [r3, #0]
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	441a      	add	r2, r3
 8006e72:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006e76:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006e7a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006e7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e86:	b29b      	uxth	r3, r3
 8006e88:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	781b      	ldrb	r3, [r3, #0]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	4413      	add	r3, r2
 8006e94:	881b      	ldrh	r3, [r3, #0]
 8006e96:	b29b      	uxth	r3, r3
 8006e98:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	683a      	ldr	r2, [r7, #0]
 8006ea4:	7812      	ldrb	r2, [r2, #0]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	441a      	add	r2, r3
 8006eb6:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8006eba:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006ebe:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006ec2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006ec6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	7b1b      	ldrb	r3, [r3, #12]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f040 8178 	bne.w	80071c8 <USB_ActivateEndpoint+0x3dc>
  {
    if (ep->is_in != 0U)
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	785b      	ldrb	r3, [r3, #1]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	f000 8084 	beq.w	8006fea <USB_ActivateEndpoint+0x1fe>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	61bb      	str	r3, [r7, #24]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	461a      	mov	r2, r3
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	61bb      	str	r3, [r7, #24]
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	011a      	lsls	r2, r3, #4
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	4413      	add	r3, r2
 8006f00:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	88db      	ldrh	r3, [r3, #6]
 8006f0a:	085b      	lsrs	r3, r3, #1
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	005b      	lsls	r3, r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	009b      	lsls	r3, r3, #2
 8006f1e:	4413      	add	r3, r2
 8006f20:	881b      	ldrh	r3, [r3, #0]
 8006f22:	827b      	strh	r3, [r7, #18]
 8006f24:	8a7b      	ldrh	r3, [r7, #18]
 8006f26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d01b      	beq.n	8006f66 <USB_ActivateEndpoint+0x17a>
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f44:	823b      	strh	r3, [r7, #16]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	441a      	add	r2, r3
 8006f50:	8a3b      	ldrh	r3, [r7, #16]
 8006f52:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f56:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006f5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f5e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8006f62:	b29b      	uxth	r3, r3
 8006f64:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	78db      	ldrb	r3, [r3, #3]
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	d020      	beq.n	8006fb0 <USB_ActivateEndpoint+0x1c4>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006f6e:	687a      	ldr	r2, [r7, #4]
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	881b      	ldrh	r3, [r3, #0]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006f80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f84:	81bb      	strh	r3, [r7, #12]
 8006f86:	89bb      	ldrh	r3, [r7, #12]
 8006f88:	f083 0320 	eor.w	r3, r3, #32
 8006f8c:	81bb      	strh	r3, [r7, #12]
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	441a      	add	r2, r3
 8006f98:	89bb      	ldrh	r3, [r7, #12]
 8006f9a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006f9e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fa2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	8013      	strh	r3, [r2, #0]
 8006fae:	e2d5      	b.n	800755c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	009b      	lsls	r3, r3, #2
 8006fb8:	4413      	add	r3, r2
 8006fba:	881b      	ldrh	r3, [r3, #0]
 8006fbc:	b29b      	uxth	r3, r3
 8006fbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006fc2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fc6:	81fb      	strh	r3, [r7, #14]
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	441a      	add	r2, r3
 8006fd2:	89fb      	ldrh	r3, [r7, #14]
 8006fd4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8006fd8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8006fdc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006fe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	8013      	strh	r3, [r2, #0]
 8006fe8:	e2b8      	b.n	800755c <USB_ActivateEndpoint+0x770>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	633b      	str	r3, [r7, #48]	@ 0x30
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8006ff4:	b29b      	uxth	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffa:	4413      	add	r3, r2
 8006ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	011a      	lsls	r2, r3, #4
 8007004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007006:	4413      	add	r3, r2
 8007008:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 800700c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	88db      	ldrh	r3, [r3, #6]
 8007012:	085b      	lsrs	r3, r3, #1
 8007014:	b29b      	uxth	r3, r3
 8007016:	005b      	lsls	r3, r3, #1
 8007018:	b29a      	uxth	r2, r3
 800701a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800701c:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007028:	b29b      	uxth	r3, r3
 800702a:	461a      	mov	r2, r3
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	4413      	add	r3, r2
 8007030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	011a      	lsls	r2, r3, #4
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	4413      	add	r3, r2
 800703c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007040:	627b      	str	r3, [r7, #36]	@ 0x24
 8007042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007044:	881b      	ldrh	r3, [r3, #0]
 8007046:	b29b      	uxth	r3, r3
 8007048:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800704c:	b29a      	uxth	r2, r3
 800704e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007050:	801a      	strh	r2, [r3, #0]
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	691b      	ldr	r3, [r3, #16]
 8007056:	2b3e      	cmp	r3, #62	@ 0x3e
 8007058:	d91d      	bls.n	8007096 <USB_ActivateEndpoint+0x2aa>
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	095b      	lsrs	r3, r3, #5
 8007060:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f003 031f 	and.w	r3, r3, #31
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <USB_ActivateEndpoint+0x288>
 800706e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007070:	3b01      	subs	r3, #1
 8007072:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007074:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007076:	881b      	ldrh	r3, [r3, #0]
 8007078:	b29a      	uxth	r2, r3
 800707a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800707c:	b29b      	uxth	r3, r3
 800707e:	029b      	lsls	r3, r3, #10
 8007080:	b29b      	uxth	r3, r3
 8007082:	4313      	orrs	r3, r2
 8007084:	b29b      	uxth	r3, r3
 8007086:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800708a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800708e:	b29a      	uxth	r2, r3
 8007090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007092:	801a      	strh	r2, [r3, #0]
 8007094:	e026      	b.n	80070e4 <USB_ActivateEndpoint+0x2f8>
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	691b      	ldr	r3, [r3, #16]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <USB_ActivateEndpoint+0x2c8>
 800709e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a0:	881b      	ldrh	r3, [r3, #0]
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	e017      	b.n	80070e4 <USB_ActivateEndpoint+0x2f8>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	691b      	ldr	r3, [r3, #16]
 80070b8:	085b      	lsrs	r3, r3, #1
 80070ba:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	691b      	ldr	r3, [r3, #16]
 80070c0:	f003 0301 	and.w	r3, r3, #1
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d002      	beq.n	80070ce <USB_ActivateEndpoint+0x2e2>
 80070c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070ca:	3301      	adds	r3, #1
 80070cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	881b      	ldrh	r3, [r3, #0]
 80070d2:	b29a      	uxth	r2, r3
 80070d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	029b      	lsls	r3, r3, #10
 80070da:	b29b      	uxth	r3, r3
 80070dc:	4313      	orrs	r3, r2
 80070de:	b29a      	uxth	r2, r3
 80070e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	781b      	ldrb	r3, [r3, #0]
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80070f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80070f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d01b      	beq.n	8007134 <USB_ActivateEndpoint+0x348>
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	881b      	ldrh	r3, [r3, #0]
 8007108:	b29b      	uxth	r3, r3
 800710a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800710e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007112:	843b      	strh	r3, [r7, #32]
 8007114:	687a      	ldr	r2, [r7, #4]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	441a      	add	r2, r3
 800711e:	8c3b      	ldrh	r3, [r7, #32]
 8007120:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007124:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007128:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800712c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007130:	b29b      	uxth	r3, r3
 8007132:	8013      	strh	r3, [r2, #0]

      if (ep->num == 0U)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d124      	bne.n	8007186 <USB_ActivateEndpoint+0x39a>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	4413      	add	r3, r2
 8007146:	881b      	ldrh	r3, [r3, #0]
 8007148:	b29b      	uxth	r3, r3
 800714a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800714e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007152:	83bb      	strh	r3, [r7, #28]
 8007154:	8bbb      	ldrh	r3, [r7, #28]
 8007156:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800715a:	83bb      	strh	r3, [r7, #28]
 800715c:	8bbb      	ldrh	r3, [r7, #28]
 800715e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007162:	83bb      	strh	r3, [r7, #28]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	009b      	lsls	r3, r3, #2
 800716c:	441a      	add	r2, r3
 800716e:	8bbb      	ldrh	r3, [r7, #28]
 8007170:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007174:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007178:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800717c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007180:	b29b      	uxth	r3, r3
 8007182:	8013      	strh	r3, [r2, #0]
 8007184:	e1ea      	b.n	800755c <USB_ActivateEndpoint+0x770>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	781b      	ldrb	r3, [r3, #0]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	4413      	add	r3, r2
 8007190:	881b      	ldrh	r3, [r3, #0]
 8007192:	b29b      	uxth	r3, r3
 8007194:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007198:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800719c:	83fb      	strh	r3, [r7, #30]
 800719e:	8bfb      	ldrh	r3, [r7, #30]
 80071a0:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 80071a4:	83fb      	strh	r3, [r7, #30]
 80071a6:	687a      	ldr	r2, [r7, #4]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	009b      	lsls	r3, r3, #2
 80071ae:	441a      	add	r2, r3
 80071b0:	8bfb      	ldrh	r3, [r7, #30]
 80071b2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071b6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80071be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	8013      	strh	r3, [r2, #0]
 80071c6:	e1c9      	b.n	800755c <USB_ActivateEndpoint+0x770>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	78db      	ldrb	r3, [r3, #3]
 80071cc:	2b02      	cmp	r3, #2
 80071ce:	d11e      	bne.n	800720e <USB_ActivateEndpoint+0x422>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	781b      	ldrb	r3, [r3, #0]
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	881b      	ldrh	r3, [r3, #0]
 80071dc:	b29b      	uxth	r3, r3
 80071de:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80071e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071e6:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	441a      	add	r2, r3
 80071f4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 80071f8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80071fc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007200:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007204:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007208:	b29b      	uxth	r3, r3
 800720a:	8013      	strh	r3, [r2, #0]
 800720c:	e01d      	b.n	800724a <USB_ActivateEndpoint+0x45e>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	009b      	lsls	r3, r3, #2
 8007216:	4413      	add	r3, r2
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	b29b      	uxth	r3, r3
 800721c:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8007220:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007224:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	009b      	lsls	r3, r3, #2
 8007230:	441a      	add	r2, r3
 8007232:	f8b7 3064 	ldrh.w	r3, [r7, #100]	@ 0x64
 8007236:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800723a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800723e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007246:	b29b      	uxth	r3, r3
 8007248:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007254:	b29b      	uxth	r3, r3
 8007256:	461a      	mov	r2, r3
 8007258:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800725a:	4413      	add	r3, r2
 800725c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	011a      	lsls	r2, r3, #4
 8007264:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007266:	4413      	add	r3, r2
 8007268:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800726c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800726e:	683b      	ldr	r3, [r7, #0]
 8007270:	891b      	ldrh	r3, [r3, #8]
 8007272:	085b      	lsrs	r3, r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800727c:	801a      	strh	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	657b      	str	r3, [r7, #84]	@ 0x54
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007288:	b29b      	uxth	r3, r3
 800728a:	461a      	mov	r2, r3
 800728c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800728e:	4413      	add	r3, r2
 8007290:	657b      	str	r3, [r7, #84]	@ 0x54
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	011a      	lsls	r2, r3, #4
 8007298:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800729a:	4413      	add	r3, r2
 800729c:	f503 6381 	add.w	r3, r3, #1032	@ 0x408
 80072a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	895b      	ldrh	r3, [r3, #10]
 80072a6:	085b      	lsrs	r3, r3, #1
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80072b0:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	785b      	ldrb	r3, [r3, #1]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	f040 8093 	bne.w	80073e2 <USB_ActivateEndpoint+0x5f6>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80072bc:	687a      	ldr	r2, [r7, #4]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	009b      	lsls	r3, r3, #2
 80072c4:	4413      	add	r3, r2
 80072c6:	881b      	ldrh	r3, [r3, #0]
 80072c8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80072cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80072d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d01b      	beq.n	8007310 <USB_ActivateEndpoint+0x524>
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	009b      	lsls	r3, r3, #2
 80072e0:	4413      	add	r3, r2
 80072e2:	881b      	ldrh	r3, [r3, #0]
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80072ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ee:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	009b      	lsls	r3, r3, #2
 80072f8:	441a      	add	r2, r3
 80072fa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80072fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007300:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007304:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800730c:	b29b      	uxth	r3, r3
 800730e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	009b      	lsls	r3, r3, #2
 8007318:	4413      	add	r3, r2
 800731a:	881b      	ldrh	r3, [r3, #0]
 800731c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 800731e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8007320:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d01b      	beq.n	8007360 <USB_ActivateEndpoint+0x574>
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	009b      	lsls	r3, r3, #2
 8007330:	4413      	add	r3, r2
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	b29b      	uxth	r3, r3
 8007336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800733a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800733e:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	009b      	lsls	r3, r3, #2
 8007348:	441a      	add	r2, r3
 800734a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800734c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007350:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007354:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007358:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800735c:	b29b      	uxth	r3, r3
 800735e:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4413      	add	r3, r2
 800736a:	881b      	ldrh	r3, [r3, #0]
 800736c:	b29b      	uxth	r3, r3
 800736e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007372:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007376:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007378:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 800737a:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800737e:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007380:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007382:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8007386:	873b      	strh	r3, [r7, #56]	@ 0x38
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	009b      	lsls	r3, r3, #2
 8007390:	441a      	add	r2, r3
 8007392:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8007394:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007398:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800739c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	881b      	ldrh	r3, [r3, #0]
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80073ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073be:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	441a      	add	r2, r3
 80073ca:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80073cc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80073d0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80073d4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80073d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073dc:	b29b      	uxth	r3, r3
 80073de:	8013      	strh	r3, [r2, #0]
 80073e0:	e0bc      	b.n	800755c <USB_ActivateEndpoint+0x770>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	881b      	ldrh	r3, [r3, #0]
 80073ee:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 80073f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 80073f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d01d      	beq.n	800743a <USB_ActivateEndpoint+0x64e>
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	881b      	ldrh	r3, [r3, #0]
 800740a:	b29b      	uxth	r3, r3
 800740c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007410:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007414:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8007418:	687a      	ldr	r2, [r7, #4]
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	009b      	lsls	r3, r3, #2
 8007420:	441a      	add	r2, r3
 8007422:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8007426:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800742a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800742e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007436:	b29b      	uxth	r3, r3
 8007438:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	4413      	add	r3, r2
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 800744a:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 800744e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007452:	2b00      	cmp	r3, #0
 8007454:	d01d      	beq.n	8007492 <USB_ActivateEndpoint+0x6a6>
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	009b      	lsls	r3, r3, #2
 800745e:	4413      	add	r3, r2
 8007460:	881b      	ldrh	r3, [r3, #0]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007468:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800746c:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8007470:	687a      	ldr	r2, [r7, #4]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	441a      	add	r2, r3
 800747a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800747e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007482:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007486:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800748a:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800748e:	b29b      	uxth	r3, r3
 8007490:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007492:	683b      	ldr	r3, [r7, #0]
 8007494:	78db      	ldrb	r3, [r3, #3]
 8007496:	2b01      	cmp	r3, #1
 8007498:	d024      	beq.n	80074e4 <USB_ActivateEndpoint+0x6f8>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	009b      	lsls	r3, r3, #2
 80074a2:	4413      	add	r3, r2
 80074a4:	881b      	ldrh	r3, [r3, #0]
 80074a6:	b29b      	uxth	r3, r3
 80074a8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074b0:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80074b4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80074b8:	f083 0320 	eor.w	r3, r3, #32
 80074bc:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	781b      	ldrb	r3, [r3, #0]
 80074c6:	009b      	lsls	r3, r3, #2
 80074c8:	441a      	add	r2, r3
 80074ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80074ce:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80074d2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80074d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80074da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074de:	b29b      	uxth	r3, r3
 80074e0:	8013      	strh	r3, [r2, #0]
 80074e2:	e01d      	b.n	8007520 <USB_ActivateEndpoint+0x734>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80074e4:	687a      	ldr	r2, [r7, #4]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	4413      	add	r3, r2
 80074ee:	881b      	ldrh	r3, [r3, #0]
 80074f0:	b29b      	uxth	r3, r3
 80074f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80074f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074fa:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	441a      	add	r2, r3
 8007508:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800750c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007510:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007514:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007518:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800751c:	b29b      	uxth	r3, r3
 800751e:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	009b      	lsls	r3, r3, #2
 8007528:	4413      	add	r3, r2
 800752a:	881b      	ldrh	r3, [r3, #0]
 800752c:	b29b      	uxth	r3, r3
 800752e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007532:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007536:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	009b      	lsls	r3, r3, #2
 8007542:	441a      	add	r2, r3
 8007544:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8007548:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800754c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007550:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007554:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007558:	b29b      	uxth	r3, r3
 800755a:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800755c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
}
 8007560:	4618      	mov	r0, r3
 8007562:	3774      	adds	r7, #116	@ 0x74
 8007564:	46bd      	mov	sp, r7
 8007566:	bc80      	pop	{r7}
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop

0800756c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800756c:	b480      	push	{r7}
 800756e:	b08d      	sub	sp, #52	@ 0x34
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	7b1b      	ldrb	r3, [r3, #12]
 800757a:	2b00      	cmp	r3, #0
 800757c:	f040 808e 	bne.w	800769c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	785b      	ldrb	r3, [r3, #1]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d044      	beq.n	8007612 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007588:	687a      	ldr	r2, [r7, #4]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	781b      	ldrb	r3, [r3, #0]
 800758e:	009b      	lsls	r3, r3, #2
 8007590:	4413      	add	r3, r2
 8007592:	881b      	ldrh	r3, [r3, #0]
 8007594:	81bb      	strh	r3, [r7, #12]
 8007596:	89bb      	ldrh	r3, [r7, #12]
 8007598:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800759c:	2b00      	cmp	r3, #0
 800759e:	d01b      	beq.n	80075d8 <USB_DeactivateEndpoint+0x6c>
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	009b      	lsls	r3, r3, #2
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075b6:	817b      	strh	r3, [r7, #10]
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	009b      	lsls	r3, r3, #2
 80075c0:	441a      	add	r2, r3
 80075c2:	897b      	ldrh	r3, [r7, #10]
 80075c4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80075c8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80075cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80075d0:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	683b      	ldr	r3, [r7, #0]
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	881b      	ldrh	r3, [r3, #0]
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ee:	813b      	strh	r3, [r7, #8]
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	009b      	lsls	r3, r3, #2
 80075f8:	441a      	add	r2, r3
 80075fa:	893b      	ldrh	r3, [r7, #8]
 80075fc:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007600:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007604:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800760c:	b29b      	uxth	r3, r3
 800760e:	8013      	strh	r3, [r2, #0]
 8007610:	e192      	b.n	8007938 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	009b      	lsls	r3, r3, #2
 800761a:	4413      	add	r3, r2
 800761c:	881b      	ldrh	r3, [r3, #0]
 800761e:	827b      	strh	r3, [r7, #18]
 8007620:	8a7b      	ldrh	r3, [r7, #18]
 8007622:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007626:	2b00      	cmp	r3, #0
 8007628:	d01b      	beq.n	8007662 <USB_DeactivateEndpoint+0xf6>
 800762a:	687a      	ldr	r2, [r7, #4]
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4413      	add	r3, r2
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b29b      	uxth	r3, r3
 8007638:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800763c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007640:	823b      	strh	r3, [r7, #16]
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	441a      	add	r2, r3
 800764c:	8a3b      	ldrh	r3, [r7, #16]
 800764e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007652:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007656:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800765a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800765e:	b29b      	uxth	r3, r3
 8007660:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	b29b      	uxth	r3, r3
 8007670:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007674:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007678:	81fb      	strh	r3, [r7, #14]
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	009b      	lsls	r3, r3, #2
 8007682:	441a      	add	r2, r3
 8007684:	89fb      	ldrh	r3, [r7, #14]
 8007686:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800768a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800768e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007692:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007696:	b29b      	uxth	r3, r3
 8007698:	8013      	strh	r3, [r2, #0]
 800769a:	e14d      	b.n	8007938 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	785b      	ldrb	r3, [r3, #1]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f040 80a5 	bne.w	80077f0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	781b      	ldrb	r3, [r3, #0]
 80076ac:	009b      	lsls	r3, r3, #2
 80076ae:	4413      	add	r3, r2
 80076b0:	881b      	ldrh	r3, [r3, #0]
 80076b2:	843b      	strh	r3, [r7, #32]
 80076b4:	8c3b      	ldrh	r3, [r7, #32]
 80076b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d01b      	beq.n	80076f6 <USB_DeactivateEndpoint+0x18a>
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	009b      	lsls	r3, r3, #2
 80076c6:	4413      	add	r3, r2
 80076c8:	881b      	ldrh	r3, [r3, #0]
 80076ca:	b29b      	uxth	r3, r3
 80076cc:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80076d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076d4:	83fb      	strh	r3, [r7, #30]
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	781b      	ldrb	r3, [r3, #0]
 80076dc:	009b      	lsls	r3, r3, #2
 80076de:	441a      	add	r2, r3
 80076e0:	8bfb      	ldrh	r3, [r7, #30]
 80076e2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80076e6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80076ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80076ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	781b      	ldrb	r3, [r3, #0]
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	83bb      	strh	r3, [r7, #28]
 8007704:	8bbb      	ldrh	r3, [r7, #28]
 8007706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01b      	beq.n	8007746 <USB_DeactivateEndpoint+0x1da>
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	4413      	add	r3, r2
 8007718:	881b      	ldrh	r3, [r3, #0]
 800771a:	b29b      	uxth	r3, r3
 800771c:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007720:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007724:	837b      	strh	r3, [r7, #26]
 8007726:	687a      	ldr	r2, [r7, #4]
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	009b      	lsls	r3, r3, #2
 800772e:	441a      	add	r2, r3
 8007730:	8b7b      	ldrh	r3, [r7, #26]
 8007732:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007736:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800773a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800773e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8007742:	b29b      	uxth	r3, r3
 8007744:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	781b      	ldrb	r3, [r3, #0]
 800774c:	009b      	lsls	r3, r3, #2
 800774e:	4413      	add	r3, r2
 8007750:	881b      	ldrh	r3, [r3, #0]
 8007752:	b29b      	uxth	r3, r3
 8007754:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007758:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800775c:	833b      	strh	r3, [r7, #24]
 800775e:	687a      	ldr	r2, [r7, #4]
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	441a      	add	r2, r3
 8007768:	8b3b      	ldrh	r3, [r7, #24]
 800776a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800776e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007772:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007776:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800777a:	b29b      	uxth	r3, r3
 800777c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	009b      	lsls	r3, r3, #2
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007794:	82fb      	strh	r3, [r7, #22]
 8007796:	687a      	ldr	r2, [r7, #4]
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	441a      	add	r2, r3
 80077a0:	8afb      	ldrh	r3, [r7, #22]
 80077a2:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077a6:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077aa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077b2:	b29b      	uxth	r3, r3
 80077b4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	4413      	add	r3, r2
 80077c0:	881b      	ldrh	r3, [r3, #0]
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077cc:	82bb      	strh	r3, [r7, #20]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	009b      	lsls	r3, r3, #2
 80077d6:	441a      	add	r2, r3
 80077d8:	8abb      	ldrh	r3, [r7, #20]
 80077da:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80077de:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80077e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80077e6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80077ea:	b29b      	uxth	r3, r3
 80077ec:	8013      	strh	r3, [r2, #0]
 80077ee:	e0a3      	b.n	8007938 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80077f0:	687a      	ldr	r2, [r7, #4]
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	4413      	add	r3, r2
 80077fa:	881b      	ldrh	r3, [r3, #0]
 80077fc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80077fe:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007800:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d01b      	beq.n	8007840 <USB_DeactivateEndpoint+0x2d4>
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	881b      	ldrh	r3, [r3, #0]
 8007814:	b29b      	uxth	r3, r3
 8007816:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800781a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800781e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8007820:	687a      	ldr	r2, [r7, #4]
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	009b      	lsls	r3, r3, #2
 8007828:	441a      	add	r2, r3
 800782a:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800782c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007830:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007834:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800783c:	b29b      	uxth	r3, r3
 800783e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	781b      	ldrb	r3, [r3, #0]
 8007846:	009b      	lsls	r3, r3, #2
 8007848:	4413      	add	r3, r2
 800784a:	881b      	ldrh	r3, [r3, #0]
 800784c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800784e:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007854:	2b00      	cmp	r3, #0
 8007856:	d01b      	beq.n	8007890 <USB_DeactivateEndpoint+0x324>
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	881b      	ldrh	r3, [r3, #0]
 8007864:	b29b      	uxth	r3, r3
 8007866:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800786a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800786e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8007870:	687a      	ldr	r2, [r7, #4]
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	441a      	add	r2, r3
 800787a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800787c:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007880:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007888:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800788c:	b29b      	uxth	r3, r3
 800788e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8007890:	687a      	ldr	r2, [r7, #4]
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	781b      	ldrb	r3, [r3, #0]
 8007896:	009b      	lsls	r3, r3, #2
 8007898:	4413      	add	r3, r2
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	683b      	ldr	r3, [r7, #0]
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	009b      	lsls	r3, r3, #2
 80078b0:	441a      	add	r2, r3
 80078b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80078b4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078b8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078bc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c4:	b29b      	uxth	r3, r3
 80078c6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80078c8:	687a      	ldr	r2, [r7, #4]
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	4413      	add	r3, r2
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80078de:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	009b      	lsls	r3, r3, #2
 80078e8:	441a      	add	r2, r3
 80078ea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078ec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80078f0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80078f4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8007900:	687a      	ldr	r2, [r7, #4]
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	009b      	lsls	r3, r3, #2
 8007908:	4413      	add	r3, r2
 800790a:	881b      	ldrh	r3, [r3, #0]
 800790c:	b29b      	uxth	r3, r3
 800790e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007916:	847b      	strh	r3, [r7, #34]	@ 0x22
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	441a      	add	r2, r3
 8007922:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007924:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007928:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800792c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007930:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007934:	b29b      	uxth	r3, r3
 8007936:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3734      	adds	r7, #52	@ 0x34
 800793e:	46bd      	mov	sp, r7
 8007940:	bc80      	pop	{r7}
 8007942:	4770      	bx	lr

08007944 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b0c2      	sub	sp, #264	@ 0x108
 8007948:	af00      	add	r7, sp, #0
 800794a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800794e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007952:	6018      	str	r0, [r3, #0]
 8007954:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007958:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800795c:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800795e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	785b      	ldrb	r3, [r3, #1]
 800796a:	2b01      	cmp	r3, #1
 800796c:	f040 86b7 	bne.w	80086de <USB_EPStartXfer+0xd9a>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8007970:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007974:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	699a      	ldr	r2, [r3, #24]
 800797c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	691b      	ldr	r3, [r3, #16]
 8007988:	429a      	cmp	r2, r3
 800798a:	d908      	bls.n	800799e <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 800798c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007990:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	691b      	ldr	r3, [r3, #16]
 8007998:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800799c:	e007      	b.n	80079ae <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800799e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079a2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80079ae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079b2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	7b1b      	ldrb	r3, [r3, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d13a      	bne.n	8007a34 <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80079be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079c2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	6959      	ldr	r1, [r3, #20]
 80079ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	88da      	ldrh	r2, [r3, #6]
 80079d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80079e0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80079e4:	6800      	ldr	r0, [r0, #0]
 80079e6:	f001 fc9c 	bl	8009322 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80079ea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079ee:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80079fa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	461a      	mov	r2, r3
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	4413      	add	r3, r2
 8007a0c:	613b      	str	r3, [r7, #16]
 8007a0e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a12:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	781b      	ldrb	r3, [r3, #0]
 8007a1a:	011a      	lsls	r2, r3, #4
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007a24:	60fb      	str	r3, [r7, #12]
 8007a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	801a      	strh	r2, [r3, #0]
 8007a30:	f000 be1f 	b.w	8008672 <USB_EPStartXfer+0xd2e>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8007a34:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a38:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	78db      	ldrb	r3, [r3, #3]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	f040 8462 	bne.w	800830a <USB_EPStartXfer+0x9c6>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8007a46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a1a      	ldr	r2, [r3, #32]
 8007a52:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a56:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	691b      	ldr	r3, [r3, #16]
 8007a5e:	429a      	cmp	r2, r3
 8007a60:	f240 83df 	bls.w	8008222 <USB_EPStartXfer+0x8de>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8007a64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a68:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a6c:	681a      	ldr	r2, [r3, #0]
 8007a6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	4413      	add	r3, r2
 8007a7e:	881b      	ldrh	r3, [r3, #0]
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a8a:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
 8007a8e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a92:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007a9c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	441a      	add	r2, r3
 8007aa8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8007aac:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8007ab0:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8007ab4:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8007ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8007ac0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ac4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	6a1a      	ldr	r2, [r3, #32]
 8007acc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ad0:	1ad2      	subs	r2, r2, r3
 8007ad2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ad6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8007ade:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ae2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007ae6:	681a      	ldr	r2, [r3, #0]
 8007ae8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007aec:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	4413      	add	r3, r2
 8007af8:	881b      	ldrh	r3, [r3, #0]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	f000 81c7 	beq.w	8007e94 <USB_EPStartXfer+0x550>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8007b06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b0a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	785b      	ldrb	r3, [r3, #1]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d177      	bne.n	8007c12 <USB_EPStartXfer+0x2ce>
 8007b22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	461a      	mov	r2, r3
 8007b40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b42:	4413      	add	r3, r2
 8007b44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b46:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007b4a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	011a      	lsls	r2, r3, #4
 8007b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b56:	4413      	add	r3, r2
 8007b58:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	801a      	strh	r2, [r3, #0]
 8007b6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b72:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b74:	d921      	bls.n	8007bba <USB_EPStartXfer+0x276>
 8007b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b7a:	095b      	lsrs	r3, r3, #5
 8007b7c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b84:	f003 031f 	and.w	r3, r3, #31
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d104      	bne.n	8007b96 <USB_EPStartXfer+0x252>
 8007b8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007b90:	3b01      	subs	r3, #1
 8007b92:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	029b      	lsls	r3, r3, #10
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	4313      	orrs	r3, r2
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	801a      	strh	r2, [r3, #0]
 8007bb8:	e050      	b.n	8007c5c <USB_EPStartXfer+0x318>
 8007bba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <USB_EPStartXfer+0x294>
 8007bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc4:	881b      	ldrh	r3, [r3, #0]
 8007bc6:	b29b      	uxth	r3, r3
 8007bc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	801a      	strh	r2, [r3, #0]
 8007bd6:	e041      	b.n	8007c5c <USB_EPStartXfer+0x318>
 8007bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bdc:	085b      	lsrs	r3, r3, #1
 8007bde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007be2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d004      	beq.n	8007bf8 <USB_EPStartXfer+0x2b4>
 8007bee:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfa:	881b      	ldrh	r3, [r3, #0]
 8007bfc:	b29a      	uxth	r2, r3
 8007bfe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	029b      	lsls	r3, r3, #10
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0e:	801a      	strh	r2, [r3, #0]
 8007c10:	e024      	b.n	8007c5c <USB_EPStartXfer+0x318>
 8007c12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c16:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	785b      	ldrb	r3, [r3, #1]
 8007c1e:	2b01      	cmp	r3, #1
 8007c20:	d11c      	bne.n	8007c5c <USB_EPStartXfer+0x318>
 8007c22:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c26:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	461a      	mov	r2, r3
 8007c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c36:	4413      	add	r3, r2
 8007c38:	633b      	str	r3, [r7, #48]	@ 0x30
 8007c3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	011a      	lsls	r2, r3, #4
 8007c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8007c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c56:	b29a      	uxth	r2, r3
 8007c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8007c5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c60:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	895b      	ldrh	r3, [r3, #10]
 8007c68:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007c6c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c70:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	6959      	ldr	r1, [r3, #20]
 8007c78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c7c:	b29b      	uxth	r3, r3
 8007c7e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007c82:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007c86:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007c8a:	6800      	ldr	r0, [r0, #0]
 8007c8c:	f001 fb49 	bl	8009322 <USB_WritePMA>
            ep->xfer_buff += len;
 8007c90:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007c94:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	695a      	ldr	r2, [r3, #20]
 8007c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ca0:	441a      	add	r2, r3
 8007ca2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ca6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8007cae:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cb2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	6a1a      	ldr	r2, [r3, #32]
 8007cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d90f      	bls.n	8007cea <USB_EPStartXfer+0x3a6>
            {
              ep->xfer_len_db -= len;
 8007cca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	6a1a      	ldr	r2, [r3, #32]
 8007cd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007cda:	1ad2      	subs	r2, r2, r3
 8007cdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ce0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	621a      	str	r2, [r3, #32]
 8007ce8:	e00e      	b.n	8007d08 <USB_EPStartXfer+0x3c4>
            }
            else
            {
              len = ep->xfer_len_db;
 8007cea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8007cfa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007cfe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2200      	movs	r2, #0
 8007d06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007d08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	785b      	ldrb	r3, [r3, #1]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d177      	bne.n	8007e08 <USB_EPStartXfer+0x4c4>
 8007d18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	61bb      	str	r3, [r7, #24]
 8007d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	461a      	mov	r2, r3
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	4413      	add	r3, r2
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007d40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	011a      	lsls	r2, r3, #4
 8007d4a:	69bb      	ldr	r3, [r7, #24]
 8007d4c:	4413      	add	r3, r2
 8007d4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007d52:	617b      	str	r3, [r7, #20]
 8007d54:	697b      	ldr	r3, [r7, #20]
 8007d56:	881b      	ldrh	r3, [r3, #0]
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	801a      	strh	r2, [r3, #0]
 8007d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d68:	2b3e      	cmp	r3, #62	@ 0x3e
 8007d6a:	d921      	bls.n	8007db0 <USB_EPStartXfer+0x46c>
 8007d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d70:	095b      	lsrs	r3, r3, #5
 8007d72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d7a:	f003 031f 	and.w	r3, r3, #31
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d104      	bne.n	8007d8c <USB_EPStartXfer+0x448>
 8007d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d86:	3b01      	subs	r3, #1
 8007d88:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	881b      	ldrh	r3, [r3, #0]
 8007d90:	b29a      	uxth	r2, r3
 8007d92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d96:	b29b      	uxth	r3, r3
 8007d98:	029b      	lsls	r3, r3, #10
 8007d9a:	b29b      	uxth	r3, r3
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	b29b      	uxth	r3, r3
 8007da0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007da4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007da8:	b29a      	uxth	r2, r3
 8007daa:	697b      	ldr	r3, [r7, #20]
 8007dac:	801a      	strh	r2, [r3, #0]
 8007dae:	e056      	b.n	8007e5e <USB_EPStartXfer+0x51a>
 8007db0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <USB_EPStartXfer+0x48a>
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	881b      	ldrh	r3, [r3, #0]
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007dc6:	b29a      	uxth	r2, r3
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	801a      	strh	r2, [r3, #0]
 8007dcc:	e047      	b.n	8007e5e <USB_EPStartXfer+0x51a>
 8007dce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007dd2:	085b      	lsrs	r3, r3, #1
 8007dd4:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007dd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d004      	beq.n	8007dee <USB_EPStartXfer+0x4aa>
 8007de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007de8:	3301      	adds	r3, #1
 8007dea:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	881b      	ldrh	r3, [r3, #0]
 8007df2:	b29a      	uxth	r2, r3
 8007df4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007df8:	b29b      	uxth	r3, r3
 8007dfa:	029b      	lsls	r3, r3, #10
 8007dfc:	b29b      	uxth	r3, r3
 8007dfe:	4313      	orrs	r3, r2
 8007e00:	b29a      	uxth	r2, r3
 8007e02:	697b      	ldr	r3, [r7, #20]
 8007e04:	801a      	strh	r2, [r3, #0]
 8007e06:	e02a      	b.n	8007e5e <USB_EPStartXfer+0x51a>
 8007e08:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e0c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	785b      	ldrb	r3, [r3, #1]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d122      	bne.n	8007e5e <USB_EPStartXfer+0x51a>
 8007e18:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e1c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	623b      	str	r3, [r7, #32]
 8007e24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e28:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007e32:	b29b      	uxth	r3, r3
 8007e34:	461a      	mov	r2, r3
 8007e36:	6a3b      	ldr	r3, [r7, #32]
 8007e38:	4413      	add	r3, r2
 8007e3a:	623b      	str	r3, [r7, #32]
 8007e3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	011a      	lsls	r2, r3, #4
 8007e4a:	6a3b      	ldr	r3, [r7, #32]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007e52:	61fb      	str	r3, [r7, #28]
 8007e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e58:	b29a      	uxth	r2, r3
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e62:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	891b      	ldrh	r3, [r3, #8]
 8007e6a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007e6e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e72:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6959      	ldr	r1, [r3, #20]
 8007e7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8007e84:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8007e88:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8007e8c:	6800      	ldr	r0, [r0, #0]
 8007e8e:	f001 fa48 	bl	8009322 <USB_WritePMA>
 8007e92:	e3ee      	b.n	8008672 <USB_EPStartXfer+0xd2e>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007e94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007e98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	785b      	ldrb	r3, [r3, #1]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d177      	bne.n	8007f94 <USB_EPStartXfer+0x650>
 8007ea4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ea8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007eb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ec4:	4413      	add	r3, r2
 8007ec6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ec8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ecc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	011a      	lsls	r2, r3, #4
 8007ed6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ed8:	4413      	add	r3, r2
 8007eda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007ede:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ee0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ee2:	881b      	ldrh	r3, [r3, #0]
 8007ee4:	b29b      	uxth	r3, r3
 8007ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007eee:	801a      	strh	r2, [r3, #0]
 8007ef0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007ef4:	2b3e      	cmp	r3, #62	@ 0x3e
 8007ef6:	d921      	bls.n	8007f3c <USB_EPStartXfer+0x5f8>
 8007ef8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007efc:	095b      	lsrs	r3, r3, #5
 8007efe:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f06:	f003 031f 	and.w	r3, r3, #31
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d104      	bne.n	8007f18 <USB_EPStartXfer+0x5d4>
 8007f0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f12:	3b01      	subs	r3, #1
 8007f14:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f1a:	881b      	ldrh	r3, [r3, #0]
 8007f1c:	b29a      	uxth	r2, r3
 8007f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	029b      	lsls	r3, r3, #10
 8007f26:	b29b      	uxth	r3, r3
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f38:	801a      	strh	r2, [r3, #0]
 8007f3a:	e056      	b.n	8007fea <USB_EPStartXfer+0x6a6>
 8007f3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d10a      	bne.n	8007f5a <USB_EPStartXfer+0x616>
 8007f44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f46:	881b      	ldrh	r3, [r3, #0]
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f52:	b29a      	uxth	r2, r3
 8007f54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f56:	801a      	strh	r2, [r3, #0]
 8007f58:	e047      	b.n	8007fea <USB_EPStartXfer+0x6a6>
 8007f5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f5e:	085b      	lsrs	r3, r3, #1
 8007f60:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f68:	f003 0301 	and.w	r3, r3, #1
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d004      	beq.n	8007f7a <USB_EPStartXfer+0x636>
 8007f70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f74:	3301      	adds	r3, #1
 8007f76:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007f7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29a      	uxth	r2, r3
 8007f80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	029b      	lsls	r3, r3, #10
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e02a      	b.n	8007fea <USB_EPStartXfer+0x6a6>
 8007f94:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	785b      	ldrb	r3, [r3, #1]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d122      	bne.n	8007fea <USB_EPStartXfer+0x6a6>
 8007fa4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fa8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fb4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fc4:	4413      	add	r3, r2
 8007fc6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fc8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fcc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	011a      	lsls	r2, r3, #4
 8007fd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fd8:	4413      	add	r3, r2
 8007fda:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8007fde:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fe4:	b29a      	uxth	r2, r3
 8007fe6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fe8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8007fea:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007fee:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	891b      	ldrh	r3, [r3, #8]
 8007ff6:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8007ffa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8007ffe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6959      	ldr	r1, [r3, #20]
 8008006:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800800a:	b29b      	uxth	r3, r3
 800800c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008010:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008014:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008018:	6800      	ldr	r0, [r0, #0]
 800801a:	f001 f982 	bl	8009322 <USB_WritePMA>
            ep->xfer_buff += len;
 800801e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008022:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	695a      	ldr	r2, [r3, #20]
 800802a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800802e:	441a      	add	r2, r3
 8008030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800803c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008040:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6a1a      	ldr	r2, [r3, #32]
 8008048:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800804c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	691b      	ldr	r3, [r3, #16]
 8008054:	429a      	cmp	r2, r3
 8008056:	d90f      	bls.n	8008078 <USB_EPStartXfer+0x734>
            {
              ep->xfer_len_db -= len;
 8008058:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800805c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6a1a      	ldr	r2, [r3, #32]
 8008064:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008068:	1ad2      	subs	r2, r2, r3
 800806a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800806e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	621a      	str	r2, [r3, #32]
 8008076:	e00e      	b.n	8008096 <USB_EPStartXfer+0x752>
            }
            else
            {
              len = ep->xfer_len_db;
 8008078:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800807c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
              ep->xfer_len_db = 0U;
 8008088:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800808c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2200      	movs	r2, #0
 8008094:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008096:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800809a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	643b      	str	r3, [r7, #64]	@ 0x40
 80080a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	785b      	ldrb	r3, [r3, #1]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d177      	bne.n	80081a2 <USB_EPStartXfer+0x85e>
 80080b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080c2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	461a      	mov	r2, r3
 80080d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d2:	4413      	add	r3, r2
 80080d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080d6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80080da:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	011a      	lsls	r2, r3, #4
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	4413      	add	r3, r2
 80080e8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80080ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080f0:	881b      	ldrh	r3, [r3, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80080f8:	b29a      	uxth	r2, r3
 80080fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80080fc:	801a      	strh	r2, [r3, #0]
 80080fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008102:	2b3e      	cmp	r3, #62	@ 0x3e
 8008104:	d921      	bls.n	800814a <USB_EPStartXfer+0x806>
 8008106:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800810a:	095b      	lsrs	r3, r3, #5
 800810c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008110:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008114:	f003 031f 	and.w	r3, r3, #31
 8008118:	2b00      	cmp	r3, #0
 800811a:	d104      	bne.n	8008126 <USB_EPStartXfer+0x7e2>
 800811c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008120:	3b01      	subs	r3, #1
 8008122:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008126:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008128:	881b      	ldrh	r3, [r3, #0]
 800812a:	b29a      	uxth	r2, r3
 800812c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008130:	b29b      	uxth	r3, r3
 8008132:	029b      	lsls	r3, r3, #10
 8008134:	b29b      	uxth	r3, r3
 8008136:	4313      	orrs	r3, r2
 8008138:	b29b      	uxth	r3, r3
 800813a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800813e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008142:	b29a      	uxth	r2, r3
 8008144:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008146:	801a      	strh	r2, [r3, #0]
 8008148:	e050      	b.n	80081ec <USB_EPStartXfer+0x8a8>
 800814a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800814e:	2b00      	cmp	r3, #0
 8008150:	d10a      	bne.n	8008168 <USB_EPStartXfer+0x824>
 8008152:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008154:	881b      	ldrh	r3, [r3, #0]
 8008156:	b29b      	uxth	r3, r3
 8008158:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800815c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008160:	b29a      	uxth	r2, r3
 8008162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008164:	801a      	strh	r2, [r3, #0]
 8008166:	e041      	b.n	80081ec <USB_EPStartXfer+0x8a8>
 8008168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800816c:	085b      	lsrs	r3, r3, #1
 800816e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008172:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008176:	f003 0301 	and.w	r3, r3, #1
 800817a:	2b00      	cmp	r3, #0
 800817c:	d004      	beq.n	8008188 <USB_EPStartXfer+0x844>
 800817e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008182:	3301      	adds	r3, #1
 8008184:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008188:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800818a:	881b      	ldrh	r3, [r3, #0]
 800818c:	b29a      	uxth	r2, r3
 800818e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008192:	b29b      	uxth	r3, r3
 8008194:	029b      	lsls	r3, r3, #10
 8008196:	b29b      	uxth	r3, r3
 8008198:	4313      	orrs	r3, r2
 800819a:	b29a      	uxth	r2, r3
 800819c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800819e:	801a      	strh	r2, [r3, #0]
 80081a0:	e024      	b.n	80081ec <USB_EPStartXfer+0x8a8>
 80081a2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081a6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	785b      	ldrb	r3, [r3, #1]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d11c      	bne.n	80081ec <USB_EPStartXfer+0x8a8>
 80081b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081b6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80081c0:	b29b      	uxth	r3, r3
 80081c2:	461a      	mov	r2, r3
 80081c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081c6:	4413      	add	r3, r2
 80081c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80081ca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081ce:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	011a      	lsls	r2, r3, #4
 80081d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80081da:	4413      	add	r3, r2
 80081dc:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80081e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80081e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80081ea:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80081ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80081f0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	895b      	ldrh	r3, [r3, #10]
 80081f8:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80081fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008200:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6959      	ldr	r1, [r3, #20]
 8008208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800820c:	b29b      	uxth	r3, r3
 800820e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008212:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008216:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800821a:	6800      	ldr	r0, [r0, #0]
 800821c:	f001 f881 	bl	8009322 <USB_WritePMA>
 8008220:	e227      	b.n	8008672 <USB_EPStartXfer+0xd2e>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8008222:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008226:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6a1b      	ldr	r3, [r3, #32]
 800822e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8008232:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008236:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800823a:	681a      	ldr	r2, [r3, #0]
 800823c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008240:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	881b      	ldrh	r3, [r3, #0]
 800824e:	b29b      	uxth	r3, r3
 8008250:	f423 43e2 	bic.w	r3, r3, #28928	@ 0x7100
 8008254:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008258:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
 800825c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008260:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800826a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	781b      	ldrb	r3, [r3, #0]
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	441a      	add	r2, r3
 8008276:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 800827a:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800827e:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008282:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008286:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800828a:	b29b      	uxth	r3, r3
 800828c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800828e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008292:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800829a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800829e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	461a      	mov	r2, r3
 80082ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082ae:	4413      	add	r3, r2
 80082b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082b2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	011a      	lsls	r2, r3, #4
 80082c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082c2:	4413      	add	r3, r2
 80082c4:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80082c8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082ce:	b29a      	uxth	r2, r3
 80082d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082d2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80082d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082d8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	891b      	ldrh	r3, [r3, #8]
 80082e0:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80082e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80082e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6959      	ldr	r1, [r3, #20]
 80082f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80082fa:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80082fe:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 8008302:	6800      	ldr	r0, [r0, #0]
 8008304:	f001 f80d 	bl	8009322 <USB_WritePMA>
 8008308:	e1b3      	b.n	8008672 <USB_EPStartXfer+0xd2e>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800830a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800830e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	6a1a      	ldr	r2, [r3, #32]
 8008316:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800831a:	1ad2      	subs	r2, r2, r3
 800831c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008320:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8008328:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800832c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008336:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	009b      	lsls	r3, r3, #2
 8008340:	4413      	add	r3, r2
 8008342:	881b      	ldrh	r3, [r3, #0]
 8008344:	b29b      	uxth	r3, r3
 8008346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800834a:	2b00      	cmp	r3, #0
 800834c:	f000 80c6 	beq.w	80084dc <USB_EPStartXfer+0xb98>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8008350:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008354:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	673b      	str	r3, [r7, #112]	@ 0x70
 800835c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008360:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	785b      	ldrb	r3, [r3, #1]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d177      	bne.n	800845c <USB_EPStartXfer+0xb18>
 800836c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008370:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008378:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800837c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008386:	b29b      	uxth	r3, r3
 8008388:	461a      	mov	r2, r3
 800838a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800838c:	4413      	add	r3, r2
 800838e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008390:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008394:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	011a      	lsls	r2, r3, #4
 800839e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80083a0:	4413      	add	r3, r2
 80083a2:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 80083a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80083a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083aa:	881b      	ldrh	r3, [r3, #0]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80083b2:	b29a      	uxth	r2, r3
 80083b4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083b6:	801a      	strh	r2, [r3, #0]
 80083b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083bc:	2b3e      	cmp	r3, #62	@ 0x3e
 80083be:	d921      	bls.n	8008404 <USB_EPStartXfer+0xac0>
 80083c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083c4:	095b      	lsrs	r3, r3, #5
 80083c6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80083ce:	f003 031f 	and.w	r3, r3, #31
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d104      	bne.n	80083e0 <USB_EPStartXfer+0xa9c>
 80083d6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80083da:	3b01      	subs	r3, #1
 80083dc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80083e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80083e2:	881b      	ldrh	r3, [r3, #0]
 80083e4:	b29a      	uxth	r2, r3
 80083e6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 80083ea:	b29b      	uxth	r3, r3
 80083ec:	029b      	lsls	r3, r3, #10
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	4313      	orrs	r3, r2
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80083f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80083fc:	b29a      	uxth	r2, r3
 80083fe:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008400:	801a      	strh	r2, [r3, #0]
 8008402:	e050      	b.n	80084a6 <USB_EPStartXfer+0xb62>
 8008404:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008408:	2b00      	cmp	r3, #0
 800840a:	d10a      	bne.n	8008422 <USB_EPStartXfer+0xade>
 800840c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800840e:	881b      	ldrh	r3, [r3, #0]
 8008410:	b29b      	uxth	r3, r3
 8008412:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008416:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800841a:	b29a      	uxth	r2, r3
 800841c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800841e:	801a      	strh	r2, [r3, #0]
 8008420:	e041      	b.n	80084a6 <USB_EPStartXfer+0xb62>
 8008422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008426:	085b      	lsrs	r3, r3, #1
 8008428:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800842c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008430:	f003 0301 	and.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	d004      	beq.n	8008442 <USB_EPStartXfer+0xafe>
 8008438:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800843c:	3301      	adds	r3, #1
 800843e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008442:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008444:	881b      	ldrh	r3, [r3, #0]
 8008446:	b29a      	uxth	r2, r3
 8008448:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800844c:	b29b      	uxth	r3, r3
 800844e:	029b      	lsls	r3, r3, #10
 8008450:	b29b      	uxth	r3, r3
 8008452:	4313      	orrs	r3, r2
 8008454:	b29a      	uxth	r2, r3
 8008456:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008458:	801a      	strh	r2, [r3, #0]
 800845a:	e024      	b.n	80084a6 <USB_EPStartXfer+0xb62>
 800845c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008460:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d11c      	bne.n	80084a6 <USB_EPStartXfer+0xb62>
 800846c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008470:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 800847a:	b29b      	uxth	r3, r3
 800847c:	461a      	mov	r2, r3
 800847e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008480:	4413      	add	r3, r2
 8008482:	673b      	str	r3, [r7, #112]	@ 0x70
 8008484:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008488:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	011a      	lsls	r2, r3, #4
 8008492:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008494:	4413      	add	r3, r2
 8008496:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800849a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800849c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80084a6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084aa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	895b      	ldrh	r3, [r3, #10]
 80084b2:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80084b6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084ba:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6959      	ldr	r1, [r3, #20]
 80084c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80084c6:	b29b      	uxth	r3, r3
 80084c8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80084cc:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 80084d0:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 80084d4:	6800      	ldr	r0, [r0, #0]
 80084d6:	f000 ff24 	bl	8009322 <USB_WritePMA>
 80084da:	e0ca      	b.n	8008672 <USB_EPStartXfer+0xd2e>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80084dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	785b      	ldrb	r3, [r3, #1]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d177      	bne.n	80085dc <USB_EPStartXfer+0xc98>
 80084ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80084f8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80084fc:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008506:	b29b      	uxth	r3, r3
 8008508:	461a      	mov	r2, r3
 800850a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800850c:	4413      	add	r3, r2
 800850e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008510:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008514:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	011a      	lsls	r2, r3, #4
 800851e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008520:	4413      	add	r3, r2
 8008522:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008526:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008528:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800852a:	881b      	ldrh	r3, [r3, #0]
 800852c:	b29b      	uxth	r3, r3
 800852e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008532:	b29a      	uxth	r2, r3
 8008534:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008536:	801a      	strh	r2, [r3, #0]
 8008538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800853c:	2b3e      	cmp	r3, #62	@ 0x3e
 800853e:	d921      	bls.n	8008584 <USB_EPStartXfer+0xc40>
 8008540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008544:	095b      	lsrs	r3, r3, #5
 8008546:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800854a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800854e:	f003 031f 	and.w	r3, r3, #31
 8008552:	2b00      	cmp	r3, #0
 8008554:	d104      	bne.n	8008560 <USB_EPStartXfer+0xc1c>
 8008556:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800855a:	3b01      	subs	r3, #1
 800855c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008560:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008562:	881b      	ldrh	r3, [r3, #0]
 8008564:	b29a      	uxth	r2, r3
 8008566:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800856a:	b29b      	uxth	r3, r3
 800856c:	029b      	lsls	r3, r3, #10
 800856e:	b29b      	uxth	r3, r3
 8008570:	4313      	orrs	r3, r2
 8008572:	b29b      	uxth	r3, r3
 8008574:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008578:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800857c:	b29a      	uxth	r2, r3
 800857e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008580:	801a      	strh	r2, [r3, #0]
 8008582:	e05c      	b.n	800863e <USB_EPStartXfer+0xcfa>
 8008584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008588:	2b00      	cmp	r3, #0
 800858a:	d10a      	bne.n	80085a2 <USB_EPStartXfer+0xc5e>
 800858c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800858e:	881b      	ldrh	r3, [r3, #0]
 8008590:	b29b      	uxth	r3, r3
 8008592:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008596:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800859a:	b29a      	uxth	r2, r3
 800859c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800859e:	801a      	strh	r2, [r3, #0]
 80085a0:	e04d      	b.n	800863e <USB_EPStartXfer+0xcfa>
 80085a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085a6:	085b      	lsrs	r3, r3, #1
 80085a8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80085ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80085b0:	f003 0301 	and.w	r3, r3, #1
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d004      	beq.n	80085c2 <USB_EPStartXfer+0xc7e>
 80085b8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80085bc:	3301      	adds	r3, #1
 80085be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80085c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085c4:	881b      	ldrh	r3, [r3, #0]
 80085c6:	b29a      	uxth	r2, r3
 80085c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	029b      	lsls	r3, r3, #10
 80085d0:	b29b      	uxth	r3, r3
 80085d2:	4313      	orrs	r3, r2
 80085d4:	b29a      	uxth	r2, r3
 80085d6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085d8:	801a      	strh	r2, [r3, #0]
 80085da:	e030      	b.n	800863e <USB_EPStartXfer+0xcfa>
 80085dc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085e0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	785b      	ldrb	r3, [r3, #1]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d128      	bne.n	800863e <USB_EPStartXfer+0xcfa>
 80085ec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085f0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085fa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80085fe:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008608:	b29b      	uxth	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008610:	4413      	add	r3, r2
 8008612:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008616:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800861a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	011a      	lsls	r2, r3, #4
 8008624:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008628:	4413      	add	r3, r2
 800862a:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 800862e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008632:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008636:	b29a      	uxth	r2, r3
 8008638:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800863c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800863e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008642:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	891b      	ldrh	r3, [r3, #8]
 800864a:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800864e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008652:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	6959      	ldr	r1, [r3, #20]
 800865a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800865e:	b29b      	uxth	r3, r3
 8008660:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8008664:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 8008668:	f5a0 7082 	sub.w	r0, r0, #260	@ 0x104
 800866c:	6800      	ldr	r0, [r0, #0]
 800866e:	f000 fe58 	bl	8009322 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8008672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008680:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	781b      	ldrb	r3, [r3, #0]
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	4413      	add	r3, r2
 800868c:	881b      	ldrh	r3, [r3, #0]
 800868e:	b29b      	uxth	r3, r3
 8008690:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008694:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008698:	817b      	strh	r3, [r7, #10]
 800869a:	897b      	ldrh	r3, [r7, #10]
 800869c:	f083 0310 	eor.w	r3, r3, #16
 80086a0:	817b      	strh	r3, [r7, #10]
 80086a2:	897b      	ldrh	r3, [r7, #10]
 80086a4:	f083 0320 	eor.w	r3, r3, #32
 80086a8:	817b      	strh	r3, [r7, #10]
 80086aa:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086ae:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	781b      	ldrb	r3, [r3, #0]
 80086c0:	009b      	lsls	r3, r3, #2
 80086c2:	441a      	add	r2, r3
 80086c4:	897b      	ldrh	r3, [r7, #10]
 80086c6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80086ca:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80086ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80086d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80086d6:	b29b      	uxth	r3, r3
 80086d8:	8013      	strh	r3, [r2, #0]
 80086da:	f000 bcde 	b.w	800909a <USB_EPStartXfer+0x1756>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80086de:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086e2:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	7b1b      	ldrb	r3, [r3, #12]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f040 80bb 	bne.w	8008866 <USB_EPStartXfer+0xf22>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80086f0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80086f4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	699a      	ldr	r2, [r3, #24]
 80086fc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008700:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	691b      	ldr	r3, [r3, #16]
 8008708:	429a      	cmp	r2, r3
 800870a:	d917      	bls.n	800873c <USB_EPStartXfer+0xdf8>
      {
        len = ep->maxpacket;
 800870c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008710:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	691b      	ldr	r3, [r3, #16]
 8008718:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len -= len;
 800871c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008720:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	699a      	ldr	r2, [r3, #24]
 8008728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800872c:	1ad2      	subs	r2, r2, r3
 800872e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008732:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	619a      	str	r2, [r3, #24]
 800873a:	e00e      	b.n	800875a <USB_EPStartXfer+0xe16>
      }
      else
      {
        len = ep->xfer_len;
 800873c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008740:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	699b      	ldr	r3, [r3, #24]
 8008748:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
        ep->xfer_len = 0U;
 800874c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008750:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2200      	movs	r2, #0
 8008758:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800875a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800875e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008768:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800876c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008776:	b29b      	uxth	r3, r3
 8008778:	461a      	mov	r2, r3
 800877a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800877e:	4413      	add	r3, r2
 8008780:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008784:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008788:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	781b      	ldrb	r3, [r3, #0]
 8008790:	011a      	lsls	r2, r3, #4
 8008792:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8008796:	4413      	add	r3, r2
 8008798:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 800879c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80087a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087a4:	881b      	ldrh	r3, [r3, #0]
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80087ac:	b29a      	uxth	r2, r3
 80087ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087b2:	801a      	strh	r2, [r3, #0]
 80087b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087b8:	2b3e      	cmp	r3, #62	@ 0x3e
 80087ba:	d924      	bls.n	8008806 <USB_EPStartXfer+0xec2>
 80087bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087c0:	095b      	lsrs	r3, r3, #5
 80087c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80087ca:	f003 031f 	and.w	r3, r3, #31
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d104      	bne.n	80087dc <USB_EPStartXfer+0xe98>
 80087d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80087d6:	3b01      	subs	r3, #1
 80087d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80087dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80087e0:	881b      	ldrh	r3, [r3, #0]
 80087e2:	b29a      	uxth	r2, r3
 80087e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80087e8:	b29b      	uxth	r3, r3
 80087ea:	029b      	lsls	r3, r3, #10
 80087ec:	b29b      	uxth	r3, r3
 80087ee:	4313      	orrs	r3, r2
 80087f0:	b29b      	uxth	r3, r3
 80087f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80087f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80087fa:	b29a      	uxth	r2, r3
 80087fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008800:	801a      	strh	r2, [r3, #0]
 8008802:	f000 bc10 	b.w	8009026 <USB_EPStartXfer+0x16e2>
 8008806:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800880a:	2b00      	cmp	r3, #0
 800880c:	d10c      	bne.n	8008828 <USB_EPStartXfer+0xee4>
 800880e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008812:	881b      	ldrh	r3, [r3, #0]
 8008814:	b29b      	uxth	r3, r3
 8008816:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800881a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800881e:	b29a      	uxth	r2, r3
 8008820:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008824:	801a      	strh	r2, [r3, #0]
 8008826:	e3fe      	b.n	8009026 <USB_EPStartXfer+0x16e2>
 8008828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800882c:	085b      	lsrs	r3, r3, #1
 800882e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d004      	beq.n	8008848 <USB_EPStartXfer+0xf04>
 800883e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008842:	3301      	adds	r3, #1
 8008844:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008848:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800884c:	881b      	ldrh	r3, [r3, #0]
 800884e:	b29a      	uxth	r2, r3
 8008850:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8008854:	b29b      	uxth	r3, r3
 8008856:	029b      	lsls	r3, r3, #10
 8008858:	b29b      	uxth	r3, r3
 800885a:	4313      	orrs	r3, r2
 800885c:	b29a      	uxth	r2, r3
 800885e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008862:	801a      	strh	r2, [r3, #0]
 8008864:	e3df      	b.n	8009026 <USB_EPStartXfer+0x16e2>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8008866:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800886a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	78db      	ldrb	r3, [r3, #3]
 8008872:	2b02      	cmp	r3, #2
 8008874:	f040 8218 	bne.w	8008ca8 <USB_EPStartXfer+0x1364>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8008878:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800887c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	785b      	ldrb	r3, [r3, #1]
 8008884:	2b00      	cmp	r3, #0
 8008886:	f040 809d 	bne.w	80089c4 <USB_EPStartXfer+0x1080>
 800888a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800888e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008898:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800889c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	461a      	mov	r2, r3
 80088aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088ae:	4413      	add	r3, r2
 80088b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80088b4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088b8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	011a      	lsls	r2, r3, #4
 80088c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80088c6:	4413      	add	r3, r2
 80088c8:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 80088cc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80088d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088d4:	881b      	ldrh	r3, [r3, #0]
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80088dc:	b29a      	uxth	r2, r3
 80088de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80088e2:	801a      	strh	r2, [r3, #0]
 80088e4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088e8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	2b3e      	cmp	r3, #62	@ 0x3e
 80088f2:	d92b      	bls.n	800894c <USB_EPStartXfer+0x1008>
 80088f4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80088f8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008906:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800890a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	f003 031f 	and.w	r3, r3, #31
 8008916:	2b00      	cmp	r3, #0
 8008918:	d104      	bne.n	8008924 <USB_EPStartXfer+0xfe0>
 800891a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800891e:	3b01      	subs	r3, #1
 8008920:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008924:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008928:	881b      	ldrh	r3, [r3, #0]
 800892a:	b29a      	uxth	r2, r3
 800892c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008930:	b29b      	uxth	r3, r3
 8008932:	029b      	lsls	r3, r3, #10
 8008934:	b29b      	uxth	r3, r3
 8008936:	4313      	orrs	r3, r2
 8008938:	b29b      	uxth	r3, r3
 800893a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800893e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008942:	b29a      	uxth	r2, r3
 8008944:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008948:	801a      	strh	r2, [r3, #0]
 800894a:	e070      	b.n	8008a2e <USB_EPStartXfer+0x10ea>
 800894c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008950:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	691b      	ldr	r3, [r3, #16]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10c      	bne.n	8008976 <USB_EPStartXfer+0x1032>
 800895c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008960:	881b      	ldrh	r3, [r3, #0]
 8008962:	b29b      	uxth	r3, r3
 8008964:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008968:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800896c:	b29a      	uxth	r2, r3
 800896e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8008972:	801a      	strh	r2, [r3, #0]
 8008974:	e05b      	b.n	8008a2e <USB_EPStartXfer+0x10ea>
 8008976:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800897a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	691b      	ldr	r3, [r3, #16]
 8008982:	085b      	lsrs	r3, r3, #1
 8008984:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008988:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800898c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	f003 0301 	and.w	r3, r3, #1
 8008998:	2b00      	cmp	r3, #0
 800899a:	d004      	beq.n	80089a6 <USB_EPStartXfer+0x1062>
 800899c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089a0:	3301      	adds	r3, #1
 80089a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80089a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089aa:	881b      	ldrh	r3, [r3, #0]
 80089ac:	b29a      	uxth	r2, r3
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	029b      	lsls	r3, r3, #10
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	4313      	orrs	r3, r2
 80089ba:	b29a      	uxth	r2, r3
 80089bc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80089c0:	801a      	strh	r2, [r3, #0]
 80089c2:	e034      	b.n	8008a2e <USB_EPStartXfer+0x10ea>
 80089c4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089c8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	785b      	ldrb	r3, [r3, #1]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d12c      	bne.n	8008a2e <USB_EPStartXfer+0x10ea>
 80089d4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089d8:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089e2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80089e6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 80089f0:	b29b      	uxth	r3, r3
 80089f2:	461a      	mov	r2, r3
 80089f4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80089f8:	4413      	add	r3, r2
 80089fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80089fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a02:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	011a      	lsls	r2, r3, #4
 8008a0c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008a10:	4413      	add	r3, r2
 8008a12:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008a16:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008a1a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a1e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	b29a      	uxth	r2, r3
 8008a28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8008a2c:	801a      	strh	r2, [r3, #0]
 8008a2e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a32:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008a3c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a40:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	785b      	ldrb	r3, [r3, #1]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f040 809d 	bne.w	8008b88 <USB_EPStartXfer+0x1244>
 8008a4e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a52:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a5c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a60:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008a6a:	b29b      	uxth	r3, r3
 8008a6c:	461a      	mov	r2, r3
 8008a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a72:	4413      	add	r3, r2
 8008a74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008a78:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008a7c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	781b      	ldrb	r3, [r3, #0]
 8008a84:	011a      	lsls	r2, r3, #4
 8008a86:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008a90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008a94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a98:	881b      	ldrh	r3, [r3, #0]
 8008a9a:	b29b      	uxth	r3, r3
 8008a9c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008aa6:	801a      	strh	r2, [r3, #0]
 8008aa8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008aac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	691b      	ldr	r3, [r3, #16]
 8008ab4:	2b3e      	cmp	r3, #62	@ 0x3e
 8008ab6:	d92b      	bls.n	8008b10 <USB_EPStartXfer+0x11cc>
 8008ab8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008abc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	095b      	lsrs	r3, r3, #5
 8008ac6:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008aca:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ace:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	691b      	ldr	r3, [r3, #16]
 8008ad6:	f003 031f 	and.w	r3, r3, #31
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d104      	bne.n	8008ae8 <USB_EPStartXfer+0x11a4>
 8008ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ae2:	3b01      	subs	r3, #1
 8008ae4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ae8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008aec:	881b      	ldrh	r3, [r3, #0]
 8008aee:	b29a      	uxth	r2, r3
 8008af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008af4:	b29b      	uxth	r3, r3
 8008af6:	029b      	lsls	r3, r3, #10
 8008af8:	b29b      	uxth	r3, r3
 8008afa:	4313      	orrs	r3, r2
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b06:	b29a      	uxth	r2, r3
 8008b08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b0c:	801a      	strh	r2, [r3, #0]
 8008b0e:	e069      	b.n	8008be4 <USB_EPStartXfer+0x12a0>
 8008b10:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b14:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d10c      	bne.n	8008b3a <USB_EPStartXfer+0x11f6>
 8008b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b24:	881b      	ldrh	r3, [r3, #0]
 8008b26:	b29b      	uxth	r3, r3
 8008b28:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008b2c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008b30:	b29a      	uxth	r2, r3
 8008b32:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b36:	801a      	strh	r2, [r3, #0]
 8008b38:	e054      	b.n	8008be4 <USB_EPStartXfer+0x12a0>
 8008b3a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b3e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	085b      	lsrs	r3, r3, #1
 8008b48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b4c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b50:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	691b      	ldr	r3, [r3, #16]
 8008b58:	f003 0301 	and.w	r3, r3, #1
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d004      	beq.n	8008b6a <USB_EPStartXfer+0x1226>
 8008b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b64:	3301      	adds	r3, #1
 8008b66:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008b6a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b6e:	881b      	ldrh	r3, [r3, #0]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008b76:	b29b      	uxth	r3, r3
 8008b78:	029b      	lsls	r3, r3, #10
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	b29a      	uxth	r2, r3
 8008b80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008b84:	801a      	strh	r2, [r3, #0]
 8008b86:	e02d      	b.n	8008be4 <USB_EPStartXfer+0x12a0>
 8008b88:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b8c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	785b      	ldrb	r3, [r3, #1]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d125      	bne.n	8008be4 <USB_EPStartXfer+0x12a0>
 8008b98:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008b9c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ba6:	b29b      	uxth	r3, r3
 8008ba8:	461a      	mov	r2, r3
 8008baa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008bae:	4413      	add	r3, r2
 8008bb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8008bb4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bb8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	781b      	ldrb	r3, [r3, #0]
 8008bc0:	011a      	lsls	r2, r3, #4
 8008bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008bcc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008bd0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bd4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	691b      	ldr	r3, [r3, #16]
 8008bdc:	b29a      	uxth	r2, r3
 8008bde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008be2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8008be4:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008be8:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69db      	ldr	r3, [r3, #28]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f000 8218 	beq.w	8009026 <USB_EPStartXfer+0x16e2>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8008bf6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008bfa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	781b      	ldrb	r3, [r3, #0]
 8008c0c:	009b      	lsls	r3, r3, #2
 8008c0e:	4413      	add	r3, r2
 8008c10:	881b      	ldrh	r3, [r3, #0]
 8008c12:	f8a7 3096 	strh.w	r3, [r7, #150]	@ 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c16:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d005      	beq.n	8008c2e <USB_EPStartXfer+0x12ea>
 8008c22:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d10d      	bne.n	8008c4a <USB_EPStartXfer+0x1306>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c2e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	f040 81f5 	bne.w	8009026 <USB_EPStartXfer+0x16e2>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8008c3c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	@ 0x96
 8008c40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	f040 81ee 	bne.w	8009026 <USB_EPStartXfer+0x16e2>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8008c4a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c4e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c58:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	009b      	lsls	r3, r3, #2
 8008c62:	4413      	add	r3, r2
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008c6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c70:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
 8008c74:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c78:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008c82:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	781b      	ldrb	r3, [r3, #0]
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	441a      	add	r2, r3
 8008c8e:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 8008c92:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8008c96:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8008c9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008c9e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8008ca2:	b29b      	uxth	r3, r3
 8008ca4:	8013      	strh	r3, [r2, #0]
 8008ca6:	e1be      	b.n	8009026 <USB_EPStartXfer+0x16e2>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8008ca8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cac:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	78db      	ldrb	r3, [r3, #3]
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	f040 81b4 	bne.w	8009022 <USB_EPStartXfer+0x16de>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8008cba:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cbe:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	699a      	ldr	r2, [r3, #24]
 8008cc6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cca:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d917      	bls.n	8008d06 <USB_EPStartXfer+0x13c2>
        {
          len = ep->maxpacket;
 8008cd6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cda:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	691b      	ldr	r3, [r3, #16]
 8008ce2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len -= len;
 8008ce6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cea:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	699a      	ldr	r2, [r3, #24]
 8008cf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008cf6:	1ad2      	subs	r2, r2, r3
 8008cf8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008cfc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	619a      	str	r2, [r3, #24]
 8008d04:	e00e      	b.n	8008d24 <USB_EPStartXfer+0x13e0>
        }
        else
        {
          len = ep->xfer_len;
 8008d06:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d0a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	699b      	ldr	r3, [r3, #24]
 8008d12:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
          ep->xfer_len = 0U;
 8008d16:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d1a:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	2200      	movs	r2, #0
 8008d22:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8008d24:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d28:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	785b      	ldrb	r3, [r3, #1]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	f040 8085 	bne.w	8008e40 <USB_EPStartXfer+0x14fc>
 8008d36:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d3a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d44:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d48:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008d52:	b29b      	uxth	r3, r3
 8008d54:	461a      	mov	r2, r3
 8008d56:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d5a:	4413      	add	r3, r2
 8008d5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008d60:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008d64:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	011a      	lsls	r2, r3, #4
 8008d6e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8008d72:	4413      	add	r3, r2
 8008d74:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008d78:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008d7c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d80:	881b      	ldrh	r3, [r3, #0]
 8008d82:	b29b      	uxth	r3, r3
 8008d84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008d88:	b29a      	uxth	r2, r3
 8008d8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008d8e:	801a      	strh	r2, [r3, #0]
 8008d90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d94:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d96:	d923      	bls.n	8008de0 <USB_EPStartXfer+0x149c>
 8008d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008d9c:	095b      	lsrs	r3, r3, #5
 8008d9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008da2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008da6:	f003 031f 	and.w	r3, r3, #31
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d104      	bne.n	8008db8 <USB_EPStartXfer+0x1474>
 8008dae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008db2:	3b01      	subs	r3, #1
 8008db4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008db8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29a      	uxth	r2, r3
 8008dc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	029b      	lsls	r3, r3, #10
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008dd2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008dd6:	b29a      	uxth	r2, r3
 8008dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008ddc:	801a      	strh	r2, [r3, #0]
 8008dde:	e060      	b.n	8008ea2 <USB_EPStartXfer+0x155e>
 8008de0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10c      	bne.n	8008e02 <USB_EPStartXfer+0x14be>
 8008de8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008dec:	881b      	ldrh	r3, [r3, #0]
 8008dee:	b29b      	uxth	r3, r3
 8008df0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008df4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008dfe:	801a      	strh	r2, [r3, #0]
 8008e00:	e04f      	b.n	8008ea2 <USB_EPStartXfer+0x155e>
 8008e02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e06:	085b      	lsrs	r3, r3, #1
 8008e08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e10:	f003 0301 	and.w	r3, r3, #1
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d004      	beq.n	8008e22 <USB_EPStartXfer+0x14de>
 8008e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008e22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e26:	881b      	ldrh	r3, [r3, #0]
 8008e28:	b29a      	uxth	r2, r3
 8008e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	029b      	lsls	r3, r3, #10
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	4313      	orrs	r3, r2
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008e3c:	801a      	strh	r2, [r3, #0]
 8008e3e:	e030      	b.n	8008ea2 <USB_EPStartXfer+0x155e>
 8008e40:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e44:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	785b      	ldrb	r3, [r3, #1]
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	d128      	bne.n	8008ea2 <USB_EPStartXfer+0x155e>
 8008e50:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e54:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008e5e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e62:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008e6c:	b29b      	uxth	r3, r3
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e74:	4413      	add	r3, r2
 8008e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008e7a:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008e7e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	011a      	lsls	r2, r3, #4
 8008e88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e8c:	4413      	add	r3, r2
 8008e8e:	f203 4304 	addw	r3, r3, #1028	@ 0x404
 8008e92:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e96:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008e9a:	b29a      	uxth	r2, r3
 8008e9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8008ea0:	801a      	strh	r2, [r3, #0]
 8008ea2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ea6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008eb0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008eb4:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	785b      	ldrb	r3, [r3, #1]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f040 8085 	bne.w	8008fcc <USB_EPStartXfer+0x1688>
 8008ec2:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ec6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008ed0:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ed4:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8008eec:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ef0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	781b      	ldrb	r3, [r3, #0]
 8008ef8:	011a      	lsls	r2, r3, #4
 8008efa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8008efe:	4413      	add	r3, r2
 8008f00:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8008f04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f08:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	b29b      	uxth	r3, r3
 8008f10:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f14:	b29a      	uxth	r2, r3
 8008f16:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f1a:	801a      	strh	r2, [r3, #0]
 8008f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f20:	2b3e      	cmp	r3, #62	@ 0x3e
 8008f22:	d923      	bls.n	8008f6c <USB_EPStartXfer+0x1628>
 8008f24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f28:	095b      	lsrs	r3, r3, #5
 8008f2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f32:	f003 031f 	and.w	r3, r3, #31
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d104      	bne.n	8008f44 <USB_EPStartXfer+0x1600>
 8008f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f44:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f48:	881b      	ldrh	r3, [r3, #0]
 8008f4a:	b29a      	uxth	r2, r3
 8008f4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008f50:	b29b      	uxth	r3, r3
 8008f52:	029b      	lsls	r3, r3, #10
 8008f54:	b29b      	uxth	r3, r3
 8008f56:	4313      	orrs	r3, r2
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f5e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f62:	b29a      	uxth	r2, r3
 8008f64:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f68:	801a      	strh	r2, [r3, #0]
 8008f6a:	e05c      	b.n	8009026 <USB_EPStartXfer+0x16e2>
 8008f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d10c      	bne.n	8008f8e <USB_EPStartXfer+0x164a>
 8008f74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f78:	881b      	ldrh	r3, [r3, #0]
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8008f80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f8a:	801a      	strh	r2, [r3, #0]
 8008f8c:	e04b      	b.n	8009026 <USB_EPStartXfer+0x16e2>
 8008f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f92:	085b      	lsrs	r3, r3, #1
 8008f94:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008f98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8008f9c:	f003 0301 	and.w	r3, r3, #1
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d004      	beq.n	8008fae <USB_EPStartXfer+0x166a>
 8008fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fa8:	3301      	adds	r3, #1
 8008faa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008fae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fb2:	881b      	ldrh	r3, [r3, #0]
 8008fb4:	b29a      	uxth	r2, r3
 8008fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	029b      	lsls	r3, r3, #10
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	4313      	orrs	r3, r2
 8008fc2:	b29a      	uxth	r2, r3
 8008fc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008fc8:	801a      	strh	r2, [r3, #0]
 8008fca:	e02c      	b.n	8009026 <USB_EPStartXfer+0x16e2>
 8008fcc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	785b      	ldrb	r3, [r3, #1]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d124      	bne.n	8009026 <USB_EPStartXfer+0x16e2>
 8008fdc:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008fe0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	@ 0x50
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	461a      	mov	r2, r3
 8008fee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008ff8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8008ffc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	011a      	lsls	r2, r3, #4
 8009006:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800900a:	4413      	add	r3, r2
 800900c:	f203 430c 	addw	r3, r3, #1036	@ 0x40c
 8009010:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009014:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8009018:	b29a      	uxth	r2, r3
 800901a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800901e:	801a      	strh	r2, [r3, #0]
 8009020:	e001      	b.n	8009026 <USB_EPStartXfer+0x16e2>
      }
      else
      {
        return HAL_ERROR;
 8009022:	2301      	movs	r3, #1
 8009024:	e03a      	b.n	800909c <USB_EPStartXfer+0x1758>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8009026:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800902a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800902e:	681a      	ldr	r2, [r3, #0]
 8009030:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009034:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	781b      	ldrb	r3, [r3, #0]
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	4413      	add	r3, r2
 8009040:	881b      	ldrh	r3, [r3, #0]
 8009042:	b29b      	uxth	r3, r3
 8009044:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009048:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800904c:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009050:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009054:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009058:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 800905c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009060:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009064:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
 8009068:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800906c:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8009070:	681a      	ldr	r2, [r3, #0]
 8009072:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8009076:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	009b      	lsls	r3, r3, #2
 8009080:	441a      	add	r2, r3
 8009082:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009086:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800908a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800908e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009092:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009096:	b29b      	uxth	r3, r3
 8009098:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800909a:	2300      	movs	r3, #0
}
 800909c:	4618      	mov	r0, r3
 800909e:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b085      	sub	sp, #20
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
 80090ae:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	785b      	ldrb	r3, [r3, #1]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d020      	beq.n	80090fa <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80090b8:	687a      	ldr	r2, [r7, #4]
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	781b      	ldrb	r3, [r3, #0]
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	4413      	add	r3, r2
 80090c2:	881b      	ldrh	r3, [r3, #0]
 80090c4:	b29b      	uxth	r3, r3
 80090c6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090ce:	81bb      	strh	r3, [r7, #12]
 80090d0:	89bb      	ldrh	r3, [r7, #12]
 80090d2:	f083 0310 	eor.w	r3, r3, #16
 80090d6:	81bb      	strh	r3, [r7, #12]
 80090d8:	687a      	ldr	r2, [r7, #4]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	441a      	add	r2, r3
 80090e2:	89bb      	ldrh	r3, [r7, #12]
 80090e4:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80090e8:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80090ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80090f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	8013      	strh	r3, [r2, #0]
 80090f8:	e01f      	b.n	800913a <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	683b      	ldr	r3, [r7, #0]
 80090fe:	781b      	ldrb	r3, [r3, #0]
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	4413      	add	r3, r2
 8009104:	881b      	ldrh	r3, [r3, #0]
 8009106:	b29b      	uxth	r3, r3
 8009108:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800910c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009110:	81fb      	strh	r3, [r7, #14]
 8009112:	89fb      	ldrh	r3, [r7, #14]
 8009114:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 8009118:	81fb      	strh	r3, [r7, #14]
 800911a:	687a      	ldr	r2, [r7, #4]
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	781b      	ldrb	r3, [r3, #0]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	441a      	add	r2, r3
 8009124:	89fb      	ldrh	r3, [r7, #14]
 8009126:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800912a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800912e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009132:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009136:	b29b      	uxth	r3, r3
 8009138:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800913a:	2300      	movs	r3, #0
}
 800913c:	4618      	mov	r0, r3
 800913e:	3714      	adds	r7, #20
 8009140:	46bd      	mov	sp, r7
 8009142:	bc80      	pop	{r7}
 8009144:	4770      	bx	lr

08009146 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009146:	b480      	push	{r7}
 8009148:	b087      	sub	sp, #28
 800914a:	af00      	add	r7, sp, #0
 800914c:	6078      	str	r0, [r7, #4]
 800914e:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	7b1b      	ldrb	r3, [r3, #12]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f040 809d 	bne.w	8009294 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	785b      	ldrb	r3, [r3, #1]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d04c      	beq.n	80091fc <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009162:	687a      	ldr	r2, [r7, #4]
 8009164:	683b      	ldr	r3, [r7, #0]
 8009166:	781b      	ldrb	r3, [r3, #0]
 8009168:	009b      	lsls	r3, r3, #2
 800916a:	4413      	add	r3, r2
 800916c:	881b      	ldrh	r3, [r3, #0]
 800916e:	823b      	strh	r3, [r7, #16]
 8009170:	8a3b      	ldrh	r3, [r7, #16]
 8009172:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d01b      	beq.n	80091b2 <USB_EPClearStall+0x6c>
 800917a:	687a      	ldr	r2, [r7, #4]
 800917c:	683b      	ldr	r3, [r7, #0]
 800917e:	781b      	ldrb	r3, [r3, #0]
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	4413      	add	r3, r2
 8009184:	881b      	ldrh	r3, [r3, #0]
 8009186:	b29b      	uxth	r3, r3
 8009188:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800918c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009190:	81fb      	strh	r3, [r7, #14]
 8009192:	687a      	ldr	r2, [r7, #4]
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	781b      	ldrb	r3, [r3, #0]
 8009198:	009b      	lsls	r3, r3, #2
 800919a:	441a      	add	r2, r3
 800919c:	89fb      	ldrh	r3, [r7, #14]
 800919e:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091a2:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091aa:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	78db      	ldrb	r3, [r3, #3]
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d06c      	beq.n	8009294 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80091ba:	687a      	ldr	r2, [r7, #4]
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	4413      	add	r3, r2
 80091c4:	881b      	ldrh	r3, [r3, #0]
 80091c6:	b29b      	uxth	r3, r3
 80091c8:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091d0:	81bb      	strh	r3, [r7, #12]
 80091d2:	89bb      	ldrh	r3, [r7, #12]
 80091d4:	f083 0320 	eor.w	r3, r3, #32
 80091d8:	81bb      	strh	r3, [r7, #12]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	781b      	ldrb	r3, [r3, #0]
 80091e0:	009b      	lsls	r3, r3, #2
 80091e2:	441a      	add	r2, r3
 80091e4:	89bb      	ldrh	r3, [r7, #12]
 80091e6:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80091ea:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80091ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80091f6:	b29b      	uxth	r3, r3
 80091f8:	8013      	strh	r3, [r2, #0]
 80091fa:	e04b      	b.n	8009294 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80091fc:	687a      	ldr	r2, [r7, #4]
 80091fe:	683b      	ldr	r3, [r7, #0]
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	009b      	lsls	r3, r3, #2
 8009204:	4413      	add	r3, r2
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	82fb      	strh	r3, [r7, #22]
 800920a:	8afb      	ldrh	r3, [r7, #22]
 800920c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009210:	2b00      	cmp	r3, #0
 8009212:	d01b      	beq.n	800924c <USB_EPClearStall+0x106>
 8009214:	687a      	ldr	r2, [r7, #4]
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	009b      	lsls	r3, r3, #2
 800921c:	4413      	add	r3, r2
 800921e:	881b      	ldrh	r3, [r3, #0]
 8009220:	b29b      	uxth	r3, r3
 8009222:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8009226:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922a:	82bb      	strh	r3, [r7, #20]
 800922c:	687a      	ldr	r2, [r7, #4]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	781b      	ldrb	r3, [r3, #0]
 8009232:	009b      	lsls	r3, r3, #2
 8009234:	441a      	add	r2, r3
 8009236:	8abb      	ldrh	r3, [r7, #20]
 8009238:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800923c:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009240:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8009244:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009248:	b29b      	uxth	r3, r3
 800924a:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	781b      	ldrb	r3, [r3, #0]
 8009252:	009b      	lsls	r3, r3, #2
 8009254:	4413      	add	r3, r2
 8009256:	881b      	ldrh	r3, [r3, #0]
 8009258:	b29b      	uxth	r3, r3
 800925a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800925e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009262:	827b      	strh	r3, [r7, #18]
 8009264:	8a7b      	ldrh	r3, [r7, #18]
 8009266:	f483 5380 	eor.w	r3, r3, #4096	@ 0x1000
 800926a:	827b      	strh	r3, [r7, #18]
 800926c:	8a7b      	ldrh	r3, [r7, #18]
 800926e:	f483 5300 	eor.w	r3, r3, #8192	@ 0x2000
 8009272:	827b      	strh	r3, [r7, #18]
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	781b      	ldrb	r3, [r3, #0]
 800927a:	009b      	lsls	r3, r3, #2
 800927c:	441a      	add	r2, r3
 800927e:	8a7b      	ldrh	r3, [r7, #18]
 8009280:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 8009284:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 8009288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800928c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009290:	b29b      	uxth	r3, r3
 8009292:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	371c      	adds	r7, #28
 800929a:	46bd      	mov	sp, r7
 800929c:	bc80      	pop	{r7}
 800929e:	4770      	bx	lr

080092a0 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b083      	sub	sp, #12
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	6078      	str	r0, [r7, #4]
 80092a8:	460b      	mov	r3, r1
 80092aa:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80092ac:	78fb      	ldrb	r3, [r7, #3]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d103      	bne.n	80092ba <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2280      	movs	r2, #128	@ 0x80
 80092b6:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80092ba:	2300      	movs	r3, #0
}
 80092bc:	4618      	mov	r0, r3
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bc80      	pop	{r7}
 80092c4:	4770      	bx	lr

080092c6 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80092c6:	b480      	push	{r7}
 80092c8:	b083      	sub	sp, #12
 80092ca:	af00      	add	r7, sp, #0
 80092cc:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80092ce:	2300      	movs	r3, #0
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	370c      	adds	r7, #12
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bc80      	pop	{r7}
 80092d8:	4770      	bx	lr

080092da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80092da:	b480      	push	{r7}
 80092dc:	b083      	sub	sp, #12
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80092e2:	2300      	movs	r3, #0
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	370c      	adds	r7, #12
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bc80      	pop	{r7}
 80092ec:	4770      	bx	lr

080092ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b085      	sub	sp, #20
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8009300:	68fb      	ldr	r3, [r7, #12]
}
 8009302:	4618      	mov	r0, r3
 8009304:	3714      	adds	r7, #20
 8009306:	46bd      	mov	sp, r7
 8009308:	bc80      	pop	{r7}
 800930a:	4770      	bx	lr

0800930c <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800930c:	b480      	push	{r7}
 800930e:	b083      	sub	sp, #12
 8009310:	af00      	add	r7, sp, #0
 8009312:	6078      	str	r0, [r7, #4]
 8009314:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	bc80      	pop	{r7}
 8009320:	4770      	bx	lr

08009322 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8009322:	b480      	push	{r7}
 8009324:	b08b      	sub	sp, #44	@ 0x2c
 8009326:	af00      	add	r7, sp, #0
 8009328:	60f8      	str	r0, [r7, #12]
 800932a:	60b9      	str	r1, [r7, #8]
 800932c:	4611      	mov	r1, r2
 800932e:	461a      	mov	r2, r3
 8009330:	460b      	mov	r3, r1
 8009332:	80fb      	strh	r3, [r7, #6]
 8009334:	4613      	mov	r3, r2
 8009336:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8009338:	88bb      	ldrh	r3, [r7, #4]
 800933a:	3301      	adds	r3, #1
 800933c:	085b      	lsrs	r3, r3, #1
 800933e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8009344:	68bb      	ldr	r3, [r7, #8]
 8009346:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8009348:	88fb      	ldrh	r3, [r7, #6]
 800934a:	005a      	lsls	r2, r3, #1
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009354:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8009356:	69bb      	ldr	r3, [r7, #24]
 8009358:	627b      	str	r3, [r7, #36]	@ 0x24
 800935a:	e01e      	b.n	800939a <USB_WritePMA+0x78>
  {
    WrVal = pBuf[0];
 800935c:	69fb      	ldr	r3, [r7, #28]
 800935e:	781b      	ldrb	r3, [r3, #0]
 8009360:	827b      	strh	r3, [r7, #18]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8009362:	69fb      	ldr	r3, [r7, #28]
 8009364:	3301      	adds	r3, #1
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	021b      	lsls	r3, r3, #8
 800936a:	b21a      	sxth	r2, r3
 800936c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009370:	4313      	orrs	r3, r2
 8009372:	b21b      	sxth	r3, r3
 8009374:	827b      	strh	r3, [r7, #18]
    *pdwVal = (WrVal & 0xFFFFU);
 8009376:	6a3b      	ldr	r3, [r7, #32]
 8009378:	8a7a      	ldrh	r2, [r7, #18]
 800937a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800937c:	6a3b      	ldr	r3, [r7, #32]
 800937e:	3302      	adds	r3, #2
 8009380:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	3302      	adds	r3, #2
 8009386:	623b      	str	r3, [r7, #32]
#endif /* PMA_ACCESS */

    pBuf++;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	3301      	adds	r3, #1
 800938c:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800938e:	69fb      	ldr	r3, [r7, #28]
 8009390:	3301      	adds	r3, #1
 8009392:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8009394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009396:	3b01      	subs	r3, #1
 8009398:	627b      	str	r3, [r7, #36]	@ 0x24
 800939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1dd      	bne.n	800935c <USB_WritePMA+0x3a>
  }
}
 80093a0:	bf00      	nop
 80093a2:	bf00      	nop
 80093a4:	372c      	adds	r7, #44	@ 0x2c
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bc80      	pop	{r7}
 80093aa:	4770      	bx	lr

080093ac <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80093ac:	b480      	push	{r7}
 80093ae:	b08b      	sub	sp, #44	@ 0x2c
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	60f8      	str	r0, [r7, #12]
 80093b4:	60b9      	str	r1, [r7, #8]
 80093b6:	4611      	mov	r1, r2
 80093b8:	461a      	mov	r2, r3
 80093ba:	460b      	mov	r3, r1
 80093bc:	80fb      	strh	r3, [r7, #6]
 80093be:	4613      	mov	r3, r2
 80093c0:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80093c2:	88bb      	ldrh	r3, [r7, #4]
 80093c4:	085b      	lsrs	r3, r3, #1
 80093c6:	b29b      	uxth	r3, r3
 80093c8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80093d2:	88fb      	ldrh	r3, [r7, #6]
 80093d4:	005a      	lsls	r2, r3, #1
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	4413      	add	r3, r2
 80093da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093de:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80093e0:	69bb      	ldr	r3, [r7, #24]
 80093e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e4:	e01b      	b.n	800941e <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80093e6:	6a3b      	ldr	r3, [r7, #32]
 80093e8:	881b      	ldrh	r3, [r3, #0]
 80093ea:	b29b      	uxth	r3, r3
 80093ec:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80093ee:	6a3b      	ldr	r3, [r7, #32]
 80093f0:	3302      	adds	r3, #2
 80093f2:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	b2da      	uxtb	r2, r3
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80093fc:	69fb      	ldr	r3, [r7, #28]
 80093fe:	3301      	adds	r3, #1
 8009400:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 8009402:	693b      	ldr	r3, [r7, #16]
 8009404:	0a1b      	lsrs	r3, r3, #8
 8009406:	b2da      	uxtb	r2, r3
 8009408:	69fb      	ldr	r3, [r7, #28]
 800940a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	3301      	adds	r3, #1
 8009410:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8009412:	6a3b      	ldr	r3, [r7, #32]
 8009414:	3302      	adds	r3, #2
 8009416:	623b      	str	r3, [r7, #32]
  for (count = n; count != 0U; count--)
 8009418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800941a:	3b01      	subs	r3, #1
 800941c:	627b      	str	r3, [r7, #36]	@ 0x24
 800941e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e0      	bne.n	80093e6 <USB_ReadPMA+0x3a>
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8009424:	88bb      	ldrh	r3, [r7, #4]
 8009426:	f003 0301 	and.w	r3, r3, #1
 800942a:	b29b      	uxth	r3, r3
 800942c:	2b00      	cmp	r3, #0
 800942e:	d007      	beq.n	8009440 <USB_ReadPMA+0x94>
  {
    RdVal = *pdwVal;
 8009430:	6a3b      	ldr	r3, [r7, #32]
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	b2da      	uxtb	r2, r3
 800943c:	69fb      	ldr	r3, [r7, #28]
 800943e:	701a      	strb	r2, [r3, #0]
  }
}
 8009440:	bf00      	nop
 8009442:	372c      	adds	r7, #44	@ 0x2c
 8009444:	46bd      	mov	sp, r7
 8009446:	bc80      	pop	{r7}
 8009448:	4770      	bx	lr

0800944a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	7c1b      	ldrb	r3, [r3, #16]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d115      	bne.n	800948e <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009462:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009466:	2202      	movs	r2, #2
 8009468:	2181      	movs	r1, #129	@ 0x81
 800946a:	6878      	ldr	r0, [r7, #4]
 800946c:	f001 fe87 	bl	800b17e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2201      	movs	r2, #1
 8009474:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009476:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800947a:	2202      	movs	r2, #2
 800947c:	2101      	movs	r1, #1
 800947e:	6878      	ldr	r0, [r7, #4]
 8009480:	f001 fe7d 	bl	800b17e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	2201      	movs	r2, #1
 8009488:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
 800948c:	e012      	b.n	80094b4 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800948e:	2340      	movs	r3, #64	@ 0x40
 8009490:	2202      	movs	r2, #2
 8009492:	2181      	movs	r1, #129	@ 0x81
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f001 fe72 	bl	800b17e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2201      	movs	r2, #1
 800949e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80094a0:	2340      	movs	r3, #64	@ 0x40
 80094a2:	2202      	movs	r2, #2
 80094a4:	2101      	movs	r1, #1
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f001 fe69 	bl	800b17e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2201      	movs	r2, #1
 80094b0:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80094b4:	2308      	movs	r3, #8
 80094b6:	2203      	movs	r2, #3
 80094b8:	2182      	movs	r1, #130	@ 0x82
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f001 fe5f 	bl	800b17e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2201      	movs	r2, #1
 80094c4:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80094c6:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80094ca:	f001 ff7f 	bl	800b3cc <USBD_static_malloc>
 80094ce:	4602      	mov	r2, r0
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8

  if (pdev->pClassData == NULL)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d102      	bne.n	80094e6 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80094e0:	2301      	movs	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]
 80094e4:	e026      	b.n	8009534 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ec:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    hcdc->RxState = 0U;
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	2200      	movs	r2, #0
 8009504:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	7c1b      	ldrb	r3, [r3, #16]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d109      	bne.n	8009524 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800951a:	2101      	movs	r1, #1
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f001 ff1e 	bl	800b35e <USBD_LL_PrepareReceive>
 8009522:	e007      	b.n	8009534 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800952a:	2340      	movs	r3, #64	@ 0x40
 800952c:	2101      	movs	r1, #1
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f001 ff15 	bl	800b35e <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009534:	7bfb      	ldrb	r3, [r7, #15]
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800954a:	2300      	movs	r3, #0
 800954c:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800954e:	2181      	movs	r1, #129	@ 0x81
 8009550:	6878      	ldr	r0, [r7, #4]
 8009552:	f001 fe3a 	bl	800b1ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800955c:	2101      	movs	r1, #1
 800955e:	6878      	ldr	r0, [r7, #4]
 8009560:	f001 fe33 	bl	800b1ca <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800956c:	2182      	movs	r1, #130	@ 0x82
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f001 fe2b 	bl	800b1ca <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009580:	2b00      	cmp	r3, #0
 8009582:	d00e      	beq.n	80095a2 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009594:	4618      	mov	r0, r3
 8009596:	f001 ff25 	bl	800b3e4 <USBD_static_free>
    pdev->pClassData = NULL;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  }

  return ret;
 80095a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	3710      	adds	r7, #16
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b086      	sub	sp, #24
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095bc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80095be:	2300      	movs	r3, #0
 80095c0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80095c2:	2300      	movs	r3, #0
 80095c4:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80095c6:	2300      	movs	r3, #0
 80095c8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	781b      	ldrb	r3, [r3, #0]
 80095ce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d039      	beq.n	800964a <USBD_CDC_Setup+0x9e>
 80095d6:	2b20      	cmp	r3, #32
 80095d8:	d17f      	bne.n	80096da <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	88db      	ldrh	r3, [r3, #6]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d029      	beq.n	8009636 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	781b      	ldrb	r3, [r3, #0]
 80095e6:	b25b      	sxtb	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	da11      	bge.n	8009610 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	683a      	ldr	r2, [r7, #0]
 80095f6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80095f8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80095fa:	683a      	ldr	r2, [r7, #0]
 80095fc:	88d2      	ldrh	r2, [r2, #6]
 80095fe:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009600:	6939      	ldr	r1, [r7, #16]
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	88db      	ldrh	r3, [r3, #6]
 8009606:	461a      	mov	r2, r3
 8009608:	6878      	ldr	r0, [r7, #4]
 800960a:	f001 fa05 	bl	800aa18 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800960e:	e06b      	b.n	80096e8 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	785a      	ldrb	r2, [r3, #1]
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	88db      	ldrh	r3, [r3, #6]
 800961e:	b2da      	uxtb	r2, r3
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009626:	6939      	ldr	r1, [r7, #16]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	88db      	ldrh	r3, [r3, #6]
 800962c:	461a      	mov	r2, r3
 800962e:	6878      	ldr	r0, [r7, #4]
 8009630:	f001 fa20 	bl	800aa74 <USBD_CtlPrepareRx>
      break;
 8009634:	e058      	b.n	80096e8 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800963c:	689b      	ldr	r3, [r3, #8]
 800963e:	683a      	ldr	r2, [r7, #0]
 8009640:	7850      	ldrb	r0, [r2, #1]
 8009642:	2200      	movs	r2, #0
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	4798      	blx	r3
      break;
 8009648:	e04e      	b.n	80096e8 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	785b      	ldrb	r3, [r3, #1]
 800964e:	2b0b      	cmp	r3, #11
 8009650:	d02e      	beq.n	80096b0 <USBD_CDC_Setup+0x104>
 8009652:	2b0b      	cmp	r3, #11
 8009654:	dc38      	bgt.n	80096c8 <USBD_CDC_Setup+0x11c>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <USBD_CDC_Setup+0xb4>
 800965a:	2b0a      	cmp	r3, #10
 800965c:	d014      	beq.n	8009688 <USBD_CDC_Setup+0xdc>
 800965e:	e033      	b.n	80096c8 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009666:	2b03      	cmp	r3, #3
 8009668:	d107      	bne.n	800967a <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800966a:	f107 030c 	add.w	r3, r7, #12
 800966e:	2202      	movs	r2, #2
 8009670:	4619      	mov	r1, r3
 8009672:	6878      	ldr	r0, [r7, #4]
 8009674:	f001 f9d0 	bl	800aa18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009678:	e02e      	b.n	80096d8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f001 f961 	bl	800a944 <USBD_CtlError>
            ret = USBD_FAIL;
 8009682:	2302      	movs	r3, #2
 8009684:	75fb      	strb	r3, [r7, #23]
          break;
 8009686:	e027      	b.n	80096d8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800968e:	2b03      	cmp	r3, #3
 8009690:	d107      	bne.n	80096a2 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8009692:	f107 030f 	add.w	r3, r7, #15
 8009696:	2201      	movs	r2, #1
 8009698:	4619      	mov	r1, r3
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f001 f9bc 	bl	800aa18 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80096a0:	e01a      	b.n	80096d8 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80096a2:	6839      	ldr	r1, [r7, #0]
 80096a4:	6878      	ldr	r0, [r7, #4]
 80096a6:	f001 f94d 	bl	800a944 <USBD_CtlError>
            ret = USBD_FAIL;
 80096aa:	2302      	movs	r3, #2
 80096ac:	75fb      	strb	r3, [r7, #23]
          break;
 80096ae:	e013      	b.n	80096d8 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096b6:	2b03      	cmp	r3, #3
 80096b8:	d00d      	beq.n	80096d6 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80096ba:	6839      	ldr	r1, [r7, #0]
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f001 f941 	bl	800a944 <USBD_CtlError>
            ret = USBD_FAIL;
 80096c2:	2302      	movs	r3, #2
 80096c4:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80096c6:	e006      	b.n	80096d6 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80096c8:	6839      	ldr	r1, [r7, #0]
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f001 f93a 	bl	800a944 <USBD_CtlError>
          ret = USBD_FAIL;
 80096d0:	2302      	movs	r3, #2
 80096d2:	75fb      	strb	r3, [r7, #23]
          break;
 80096d4:	e000      	b.n	80096d8 <USBD_CDC_Setup+0x12c>
          break;
 80096d6:	bf00      	nop
      }
      break;
 80096d8:	e006      	b.n	80096e8 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80096da:	6839      	ldr	r1, [r7, #0]
 80096dc:	6878      	ldr	r0, [r7, #4]
 80096de:	f001 f931 	bl	800a944 <USBD_CtlError>
      ret = USBD_FAIL;
 80096e2:	2302      	movs	r3, #2
 80096e4:	75fb      	strb	r3, [r7, #23]
      break;
 80096e6:	bf00      	nop
  }

  return ret;
 80096e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3718      	adds	r7, #24
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b084      	sub	sp, #16
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	460b      	mov	r3, r1
 80096fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009704:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800970c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009714:	2b00      	cmp	r3, #0
 8009716:	d03a      	beq.n	800978e <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009718:	78fa      	ldrb	r2, [r7, #3]
 800971a:	6879      	ldr	r1, [r7, #4]
 800971c:	4613      	mov	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	440b      	add	r3, r1
 8009726:	331c      	adds	r3, #28
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d029      	beq.n	8009782 <USBD_CDC_DataIn+0x90>
 800972e:	78fa      	ldrb	r2, [r7, #3]
 8009730:	6879      	ldr	r1, [r7, #4]
 8009732:	4613      	mov	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	440b      	add	r3, r1
 800973c:	331c      	adds	r3, #28
 800973e:	681a      	ldr	r2, [r3, #0]
 8009740:	78f9      	ldrb	r1, [r7, #3]
 8009742:	68b8      	ldr	r0, [r7, #8]
 8009744:	460b      	mov	r3, r1
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	440b      	add	r3, r1
 800974a:	00db      	lsls	r3, r3, #3
 800974c:	4403      	add	r3, r0
 800974e:	3320      	adds	r3, #32
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	fbb2 f1f3 	udiv	r1, r2, r3
 8009756:	fb01 f303 	mul.w	r3, r1, r3
 800975a:	1ad3      	subs	r3, r2, r3
 800975c:	2b00      	cmp	r3, #0
 800975e:	d110      	bne.n	8009782 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	331c      	adds	r3, #28
 8009770:	2200      	movs	r2, #0
 8009772:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009774:	78f9      	ldrb	r1, [r7, #3]
 8009776:	2300      	movs	r3, #0
 8009778:	2200      	movs	r2, #0
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fdcc 	bl	800b318 <USBD_LL_Transmit>
 8009780:	e003      	b.n	800978a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	2200      	movs	r2, #0
 8009786:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }
    return USBD_OK;
 800978a:	2300      	movs	r3, #0
 800978c:	e000      	b.n	8009790 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800978e:	2302      	movs	r3, #2
  }
}
 8009790:	4618      	mov	r0, r3
 8009792:	3710      	adds	r7, #16
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097aa:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 fdf7 	bl	800b3a4 <USBD_LL_GetRxDataSize>
 80097b6:	4602      	mov	r2, r0
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d00d      	beq.n	80097e4 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80097d6:	68fa      	ldr	r2, [r7, #12]
 80097d8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80097dc:	4611      	mov	r1, r2
 80097de:	4798      	blx	r3

    return USBD_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	e000      	b.n	80097e6 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80097e4:	2302      	movs	r3, #2
  }
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}

080097ee <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80097ee:	b580      	push	{r7, lr}
 80097f0:	b084      	sub	sp, #16
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097fc:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009804:	2b00      	cmp	r3, #0
 8009806:	d014      	beq.n	8009832 <USBD_CDC_EP0_RxReady+0x44>
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800980e:	2bff      	cmp	r3, #255	@ 0xff
 8009810:	d00f      	beq.n	8009832 <USBD_CDC_EP0_RxReady+0x44>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8009818:	689b      	ldr	r3, [r3, #8]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8009820:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8009828:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	22ff      	movs	r2, #255	@ 0xff
 800982e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200

  }
  return USBD_OK;
 8009832:	2300      	movs	r3, #0
}
 8009834:	4618      	mov	r0, r3
 8009836:	3710      	adds	r7, #16
 8009838:	46bd      	mov	sp, r7
 800983a:	bd80      	pop	{r7, pc}

0800983c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2243      	movs	r2, #67	@ 0x43
 8009848:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800984a:	4b03      	ldr	r3, [pc, #12]	@ (8009858 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800984c:	4618      	mov	r0, r3
 800984e:	370c      	adds	r7, #12
 8009850:	46bd      	mov	sp, r7
 8009852:	bc80      	pop	{r7}
 8009854:	4770      	bx	lr
 8009856:	bf00      	nop
 8009858:	200000ac 	.word	0x200000ac

0800985c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800985c:	b480      	push	{r7}
 800985e:	b083      	sub	sp, #12
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2243      	movs	r2, #67	@ 0x43
 8009868:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800986a:	4b03      	ldr	r3, [pc, #12]	@ (8009878 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800986c:	4618      	mov	r0, r3
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	bc80      	pop	{r7}
 8009874:	4770      	bx	lr
 8009876:	bf00      	nop
 8009878:	20000068 	.word	0x20000068

0800987c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800987c:	b480      	push	{r7}
 800987e:	b083      	sub	sp, #12
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2243      	movs	r2, #67	@ 0x43
 8009888:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800988a:	4b03      	ldr	r3, [pc, #12]	@ (8009898 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800988c:	4618      	mov	r0, r3
 800988e:	370c      	adds	r7, #12
 8009890:	46bd      	mov	sp, r7
 8009892:	bc80      	pop	{r7}
 8009894:	4770      	bx	lr
 8009896:	bf00      	nop
 8009898:	200000f0 	.word	0x200000f0

0800989c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	220a      	movs	r2, #10
 80098a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80098aa:	4b03      	ldr	r3, [pc, #12]	@ (80098b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	370c      	adds	r7, #12
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bc80      	pop	{r7}
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	20000024 	.word	0x20000024

080098bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80098bc:	b480      	push	{r7}
 80098be:	b085      	sub	sp, #20
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
 80098c4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80098c6:	2302      	movs	r3, #2
 80098c8:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d005      	beq.n	80098dc <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
    ret = USBD_OK;
 80098d8:	2300      	movs	r3, #0
 80098da:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80098dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3714      	adds	r7, #20
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bc80      	pop	{r7}
 80098e6:	4770      	bx	lr

080098e8 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b087      	sub	sp, #28
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	4613      	mov	r3, r2
 80098f4:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098fc:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	68ba      	ldr	r2, [r7, #8]
 8009902:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009906:	88fa      	ldrh	r2, [r7, #6]
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return USBD_OK;
 800990e:	2300      	movs	r3, #0
}
 8009910:	4618      	mov	r0, r3
 8009912:	371c      	adds	r7, #28
 8009914:	46bd      	mov	sp, r7
 8009916:	bc80      	pop	{r7}
 8009918:	4770      	bx	lr

0800991a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800991a:	b480      	push	{r7}
 800991c:	b085      	sub	sp, #20
 800991e:	af00      	add	r7, sp, #0
 8009920:	6078      	str	r0, [r7, #4]
 8009922:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800992a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	683a      	ldr	r2, [r7, #0]
 8009930:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return USBD_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3714      	adds	r7, #20
 800993a:	46bd      	mov	sp, r7
 800993c:	bc80      	pop	{r7}
 800993e:	4770      	bx	lr

08009940 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8009940:	b580      	push	{r7, lr}
 8009942:	b084      	sub	sp, #16
 8009944:	af00      	add	r7, sp, #0
 8009946:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800994e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009956:	2b00      	cmp	r3, #0
 8009958:	d01c      	beq.n	8009994 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8009960:	2b00      	cmp	r3, #0
 8009962:	d115      	bne.n	8009990 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2201      	movs	r2, #1
 8009968:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
                       (uint16_t)hcdc->TxLength);
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8009982:	b29b      	uxth	r3, r3
 8009984:	2181      	movs	r1, #129	@ 0x81
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f001 fcc6 	bl	800b318 <USBD_LL_Transmit>

      return USBD_OK;
 800998c:	2300      	movs	r3, #0
 800998e:	e002      	b.n	8009996 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8009990:	2301      	movs	r3, #1
 8009992:	e000      	b.n	8009996 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8009994:	2302      	movs	r3, #2
  }
}
 8009996:	4618      	mov	r0, r3
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b084      	sub	sp, #16
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099ac:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d017      	beq.n	80099e8 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	7c1b      	ldrb	r3, [r3, #16]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099ca:	2101      	movs	r1, #1
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f001 fcc6 	bl	800b35e <USBD_LL_PrepareReceive>
 80099d2:	e007      	b.n	80099e4 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80099da:	2340      	movs	r3, #64	@ 0x40
 80099dc:	2101      	movs	r1, #1
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 fcbd 	bl	800b35e <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e000      	b.n	80099ea <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80099e8:	2302      	movs	r3, #2
  }
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3710      	adds	r7, #16
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	4613      	mov	r3, r2
 80099fe:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d101      	bne.n	8009a0a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009a06:	2302      	movs	r3, #2
 8009a08:	e01a      	b.n	8009a40 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d003      	beq.n	8009a2a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	68ba      	ldr	r2, [r7, #8]
 8009a26:	f8c3 22b0 	str.w	r2, [r3, #688]	@ 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	2201      	movs	r2, #1
 8009a2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	79fa      	ldrb	r2, [r7, #7]
 8009a36:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f001 fb2b 	bl	800b094 <USBD_LL_Init>

  return USBD_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	3710      	adds	r7, #16
 8009a44:	46bd      	mov	sp, r7
 8009a46:	bd80      	pop	{r7, pc}

08009a48 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8009a52:	2300      	movs	r3, #0
 8009a54:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d006      	beq.n	8009a6a <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	683a      	ldr	r2, [r7, #0]
 8009a60:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
    status = USBD_OK;
 8009a64:	2300      	movs	r3, #0
 8009a66:	73fb      	strb	r3, [r7, #15]
 8009a68:	e001      	b.n	8009a6e <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8009a6a:	2302      	movs	r3, #2
 8009a6c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bc80      	pop	{r7}
 8009a78:	4770      	bx	lr

08009a7a <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009a7a:	b580      	push	{r7, lr}
 8009a7c:	b082      	sub	sp, #8
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f001 fb60 	bl	800b148 <USBD_LL_Start>

  return USBD_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009a92:	b480      	push	{r7}
 8009a94:	b083      	sub	sp, #12
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bc80      	pop	{r7}
 8009aa4:	4770      	bx	lr

08009aa6 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
 8009aae:	460b      	mov	r3, r1
 8009ab0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009ab2:	2302      	movs	r3, #2
 8009ab4:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d00c      	beq.n	8009ada <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	78fa      	ldrb	r2, [r7, #3]
 8009aca:	4611      	mov	r1, r2
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d101      	bne.n	8009ada <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8009ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3710      	adds	r7, #16
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b082      	sub	sp, #8
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	460b      	mov	r3, r1
 8009aee:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	78fa      	ldrb	r2, [r7, #3]
 8009afa:	4611      	mov	r1, r2
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	4798      	blx	r3

  return USBD_OK;
 8009b00:	2300      	movs	r3, #0
}
 8009b02:	4618      	mov	r0, r3
 8009b04:	3708      	adds	r7, #8
 8009b06:	46bd      	mov	sp, r7
 8009b08:	bd80      	pop	{r7, pc}

08009b0a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009b0a:	b580      	push	{r7, lr}
 8009b0c:	b082      	sub	sp, #8
 8009b0e:	af00      	add	r7, sp, #0
 8009b10:	6078      	str	r0, [r7, #4]
 8009b12:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fed8 	bl	800a8d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2201      	movs	r2, #1
 8009b26:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009b30:	461a      	mov	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009b3e:	f003 031f 	and.w	r3, r3, #31
 8009b42:	2b02      	cmp	r3, #2
 8009b44:	d016      	beq.n	8009b74 <USBD_LL_SetupStage+0x6a>
 8009b46:	2b02      	cmp	r3, #2
 8009b48:	d81c      	bhi.n	8009b84 <USBD_LL_SetupStage+0x7a>
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d002      	beq.n	8009b54 <USBD_LL_SetupStage+0x4a>
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d008      	beq.n	8009b64 <USBD_LL_SetupStage+0x5a>
 8009b52:	e017      	b.n	8009b84 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f000 f9cb 	bl	8009ef8 <USBD_StdDevReq>
      break;
 8009b62:	e01a      	b.n	8009b9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 fa2d 	bl	8009fcc <USBD_StdItfReq>
      break;
 8009b72:	e012      	b.n	8009b9a <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	f503 732a 	add.w	r3, r3, #680	@ 0x2a8
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fa6d 	bl	800a05c <USBD_StdEPReq>
      break;
 8009b82:	e00a      	b.n	8009b9a <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 32a8 	ldrb.w	r3, [r3, #680]	@ 0x2a8
 8009b8a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	4619      	mov	r1, r3
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fb38 	bl	800b208 <USBD_LL_StallEP>
      break;
 8009b98:	bf00      	nop
  }

  return USBD_OK;
 8009b9a:	2300      	movs	r3, #0
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b086      	sub	sp, #24
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	460b      	mov	r3, r1
 8009bae:	607a      	str	r2, [r7, #4]
 8009bb0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009bb2:	7afb      	ldrb	r3, [r7, #11]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d14b      	bne.n	8009c50 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009bbe:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009bc6:	2b03      	cmp	r3, #3
 8009bc8:	d134      	bne.n	8009c34 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8009bca:	697b      	ldr	r3, [r7, #20]
 8009bcc:	68da      	ldr	r2, [r3, #12]
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	691b      	ldr	r3, [r3, #16]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d919      	bls.n	8009c0a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8009bd6:	697b      	ldr	r3, [r7, #20]
 8009bd8:	68da      	ldr	r2, [r3, #12]
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	691b      	ldr	r3, [r3, #16]
 8009bde:	1ad2      	subs	r2, r2, r3
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bec:	429a      	cmp	r2, r3
 8009bee:	d203      	bcs.n	8009bf8 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bf0:	697b      	ldr	r3, [r7, #20]
 8009bf2:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8009bf4:	b29b      	uxth	r3, r3
 8009bf6:	e002      	b.n	8009bfe <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8009bf8:	697b      	ldr	r3, [r7, #20]
 8009bfa:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8009bfc:	b29b      	uxth	r3, r3
 8009bfe:	461a      	mov	r2, r3
 8009c00:	6879      	ldr	r1, [r7, #4]
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f000 ff54 	bl	800aab0 <USBD_CtlContinueRx>
 8009c08:	e038      	b.n	8009c7c <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c10:	691b      	ldr	r3, [r3, #16]
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d00a      	beq.n	8009c2c <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8009c1c:	2b03      	cmp	r3, #3
 8009c1e:	d105      	bne.n	8009c2c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c26:	691b      	ldr	r3, [r3, #16]
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8009c2c:	68f8      	ldr	r0, [r7, #12]
 8009c2e:	f000 ff51 	bl	800aad4 <USBD_CtlSendStatus>
 8009c32:	e023      	b.n	8009c7c <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009c3a:	2b05      	cmp	r3, #5
 8009c3c:	d11e      	bne.n	8009c7c <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2200      	movs	r2, #0
 8009c42:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
        USBD_LL_StallEP(pdev, 0U);
 8009c46:	2100      	movs	r1, #0
 8009c48:	68f8      	ldr	r0, [r7, #12]
 8009c4a:	f001 fadd 	bl	800b208 <USBD_LL_StallEP>
 8009c4e:	e015      	b.n	8009c7c <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c56:	699b      	ldr	r3, [r3, #24]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d00d      	beq.n	8009c78 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8009c62:	2b03      	cmp	r3, #3
 8009c64:	d108      	bne.n	8009c78 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	7afa      	ldrb	r2, [r7, #11]
 8009c70:	4611      	mov	r1, r2
 8009c72:	68f8      	ldr	r0, [r7, #12]
 8009c74:	4798      	blx	r3
 8009c76:	e001      	b.n	8009c7c <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e000      	b.n	8009c7e <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3718      	adds	r7, #24
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b086      	sub	sp, #24
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	60f8      	str	r0, [r7, #12]
 8009c8e:	460b      	mov	r3, r1
 8009c90:	607a      	str	r2, [r7, #4]
 8009c92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d17f      	bne.n	8009d9a <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	3314      	adds	r3, #20
 8009c9e:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009ca6:	2b02      	cmp	r3, #2
 8009ca8:	d15c      	bne.n	8009d64 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8009caa:	697b      	ldr	r3, [r7, #20]
 8009cac:	68da      	ldr	r2, [r3, #12]
 8009cae:	697b      	ldr	r3, [r7, #20]
 8009cb0:	691b      	ldr	r3, [r3, #16]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d915      	bls.n	8009ce2 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	68da      	ldr	r2, [r3, #12]
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	691b      	ldr	r3, [r3, #16]
 8009cbe:	1ad2      	subs	r2, r2, r3
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	68db      	ldr	r3, [r3, #12]
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	461a      	mov	r2, r3
 8009ccc:	6879      	ldr	r1, [r7, #4]
 8009cce:	68f8      	ldr	r0, [r7, #12]
 8009cd0:	f000 febe 	bl	800aa50 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	2100      	movs	r1, #0
 8009cda:	68f8      	ldr	r0, [r7, #12]
 8009cdc:	f001 fb3f 	bl	800b35e <USBD_LL_PrepareReceive>
 8009ce0:	e04e      	b.n	8009d80 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	689b      	ldr	r3, [r3, #8]
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	6912      	ldr	r2, [r2, #16]
 8009cea:	fbb3 f1f2 	udiv	r1, r3, r2
 8009cee:	fb01 f202 	mul.w	r2, r1, r2
 8009cf2:	1a9b      	subs	r3, r3, r2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d11c      	bne.n	8009d32 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	697b      	ldr	r3, [r7, #20]
 8009cfe:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d316      	bcc.n	8009d32 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d20f      	bcs.n	8009d32 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8009d12:	2200      	movs	r2, #0
 8009d14:	2100      	movs	r1, #0
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 fe9a 	bl	800aa50 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009d24:	2300      	movs	r3, #0
 8009d26:	2200      	movs	r2, #0
 8009d28:	2100      	movs	r1, #0
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f001 fb17 	bl	800b35e <USBD_LL_PrepareReceive>
 8009d30:	e026      	b.n	8009d80 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d00a      	beq.n	8009d54 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8009d44:	2b03      	cmp	r3, #3
 8009d46:	d105      	bne.n	8009d54 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009d4e:	68db      	ldr	r3, [r3, #12]
 8009d50:	68f8      	ldr	r0, [r7, #12]
 8009d52:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8009d54:	2180      	movs	r1, #128	@ 0x80
 8009d56:	68f8      	ldr	r0, [r7, #12]
 8009d58:	f001 fa56 	bl	800b208 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8009d5c:	68f8      	ldr	r0, [r7, #12]
 8009d5e:	f000 fecc 	bl	800aafa <USBD_CtlReceiveStatus>
 8009d62:	e00d      	b.n	8009d80 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009d6a:	2b04      	cmp	r3, #4
 8009d6c:	d004      	beq.n	8009d78 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d103      	bne.n	8009d80 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8009d78:	2180      	movs	r1, #128	@ 0x80
 8009d7a:	68f8      	ldr	r0, [r7, #12]
 8009d7c:	f001 fa44 	bl	800b208 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d11d      	bne.n	8009dc6 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8009d8a:	68f8      	ldr	r0, [r7, #12]
 8009d8c:	f7ff fe81 	bl	8009a92 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2200      	movs	r2, #0
 8009d94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009d98:	e015      	b.n	8009dc6 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009da0:	695b      	ldr	r3, [r3, #20]
 8009da2:	2b00      	cmp	r3, #0
 8009da4:	d00d      	beq.n	8009dc2 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8009dac:	2b03      	cmp	r3, #3
 8009dae:	d108      	bne.n	8009dc2 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009db6:	695b      	ldr	r3, [r3, #20]
 8009db8:	7afa      	ldrb	r2, [r7, #11]
 8009dba:	4611      	mov	r1, r2
 8009dbc:	68f8      	ldr	r0, [r7, #12]
 8009dbe:	4798      	blx	r3
 8009dc0:	e001      	b.n	8009dc6 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8009dc2:	2302      	movs	r3, #2
 8009dc4:	e000      	b.n	8009dc8 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8009dc6:	2300      	movs	r3, #0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3718      	adds	r7, #24
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009dd8:	2340      	movs	r3, #64	@ 0x40
 8009dda:	2200      	movs	r2, #0
 8009ddc:	2100      	movs	r1, #0
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f001 f9cd 	bl	800b17e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2201      	movs	r2, #1
 8009de8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	2240      	movs	r2, #64	@ 0x40
 8009df0:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009df4:	2340      	movs	r3, #64	@ 0x40
 8009df6:	2200      	movs	r2, #0
 8009df8:	2180      	movs	r1, #128	@ 0x80
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f001 f9bf 	bl	800b17e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	2201      	movs	r2, #1
 8009e04:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2240      	movs	r2, #64	@ 0x40
 8009e0a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4

  if (pdev->pClassData)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d009      	beq.n	8009e48 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e3a:	685b      	ldr	r3, [r3, #4]
 8009e3c:	687a      	ldr	r2, [r7, #4]
 8009e3e:	6852      	ldr	r2, [r2, #4]
 8009e40:	b2d2      	uxtb	r2, r2
 8009e42:	4611      	mov	r1, r2
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	4798      	blx	r3
  }

  return USBD_OK;
 8009e48:	2300      	movs	r3, #0
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3708      	adds	r7, #8
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b083      	sub	sp, #12
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	460b      	mov	r3, r1
 8009e5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	78fa      	ldrb	r2, [r7, #3]
 8009e62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bc80      	pop	{r7}
 8009e6e:	4770      	bx	lr

08009e70 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009e70:	b480      	push	{r7}
 8009e72:	b083      	sub	sp, #12
 8009e74:	af00      	add	r7, sp, #0
 8009e76:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f893 229c 	ldrb.w	r2, [r3, #668]	@ 0x29c
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2204      	movs	r2, #4
 8009e88:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	370c      	adds	r7, #12
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bc80      	pop	{r7}
 8009e96:	4770      	bx	lr

08009e98 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ea6:	2b04      	cmp	r3, #4
 8009ea8:	d105      	bne.n	8009eb6 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f893 229d 	ldrb.w	r2, [r3, #669]	@ 0x29d
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8009eb6:	2300      	movs	r3, #0
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bc80      	pop	{r7}
 8009ec0:	4770      	bx	lr

08009ec2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	d10b      	bne.n	8009eec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d005      	beq.n	8009eec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009ee6:	69db      	ldr	r3, [r3, #28]
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009eec:	2300      	movs	r3, #0
}
 8009eee:	4618      	mov	r0, r3
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}
	...

08009ef8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b084      	sub	sp, #16
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
 8009f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009f02:	2300      	movs	r3, #0
 8009f04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009f06:	683b      	ldr	r3, [r7, #0]
 8009f08:	781b      	ldrb	r3, [r3, #0]
 8009f0a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009f0e:	2b40      	cmp	r3, #64	@ 0x40
 8009f10:	d005      	beq.n	8009f1e <USBD_StdDevReq+0x26>
 8009f12:	2b40      	cmp	r3, #64	@ 0x40
 8009f14:	d84f      	bhi.n	8009fb6 <USBD_StdDevReq+0xbe>
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d009      	beq.n	8009f2e <USBD_StdDevReq+0x36>
 8009f1a:	2b20      	cmp	r3, #32
 8009f1c:	d14b      	bne.n	8009fb6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	6839      	ldr	r1, [r7, #0]
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	4798      	blx	r3
      break;
 8009f2c:	e048      	b.n	8009fc0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	785b      	ldrb	r3, [r3, #1]
 8009f32:	2b09      	cmp	r3, #9
 8009f34:	d839      	bhi.n	8009faa <USBD_StdDevReq+0xb2>
 8009f36:	a201      	add	r2, pc, #4	@ (adr r2, 8009f3c <USBD_StdDevReq+0x44>)
 8009f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f3c:	08009f8d 	.word	0x08009f8d
 8009f40:	08009fa1 	.word	0x08009fa1
 8009f44:	08009fab 	.word	0x08009fab
 8009f48:	08009f97 	.word	0x08009f97
 8009f4c:	08009fab 	.word	0x08009fab
 8009f50:	08009f6f 	.word	0x08009f6f
 8009f54:	08009f65 	.word	0x08009f65
 8009f58:	08009fab 	.word	0x08009fab
 8009f5c:	08009f83 	.word	0x08009f83
 8009f60:	08009f79 	.word	0x08009f79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009f64:	6839      	ldr	r1, [r7, #0]
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f9dc 	bl	800a324 <USBD_GetDescriptor>
          break;
 8009f6c:	e022      	b.n	8009fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009f6e:	6839      	ldr	r1, [r7, #0]
 8009f70:	6878      	ldr	r0, [r7, #4]
 8009f72:	f000 fb3f 	bl	800a5f4 <USBD_SetAddress>
          break;
 8009f76:	e01d      	b.n	8009fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8009f78:	6839      	ldr	r1, [r7, #0]
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fb7e 	bl	800a67c <USBD_SetConfig>
          break;
 8009f80:	e018      	b.n	8009fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009f82:	6839      	ldr	r1, [r7, #0]
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fc07 	bl	800a798 <USBD_GetConfig>
          break;
 8009f8a:	e013      	b.n	8009fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009f8c:	6839      	ldr	r1, [r7, #0]
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fc37 	bl	800a802 <USBD_GetStatus>
          break;
 8009f94:	e00e      	b.n	8009fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009f96:	6839      	ldr	r1, [r7, #0]
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f000 fc65 	bl	800a868 <USBD_SetFeature>
          break;
 8009f9e:	e009      	b.n	8009fb4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009fa0:	6839      	ldr	r1, [r7, #0]
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 fc74 	bl	800a890 <USBD_ClrFeature>
          break;
 8009fa8:	e004      	b.n	8009fb4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8009faa:	6839      	ldr	r1, [r7, #0]
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f000 fcc9 	bl	800a944 <USBD_CtlError>
          break;
 8009fb2:	bf00      	nop
      }
      break;
 8009fb4:	e004      	b.n	8009fc0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8009fb6:	6839      	ldr	r1, [r7, #0]
 8009fb8:	6878      	ldr	r0, [r7, #4]
 8009fba:	f000 fcc3 	bl	800a944 <USBD_CtlError>
      break;
 8009fbe:	bf00      	nop
  }

  return ret;
 8009fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3710      	adds	r7, #16
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop

08009fcc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009fe2:	2b40      	cmp	r3, #64	@ 0x40
 8009fe4:	d005      	beq.n	8009ff2 <USBD_StdItfReq+0x26>
 8009fe6:	2b40      	cmp	r3, #64	@ 0x40
 8009fe8:	d82e      	bhi.n	800a048 <USBD_StdItfReq+0x7c>
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d001      	beq.n	8009ff2 <USBD_StdItfReq+0x26>
 8009fee:	2b20      	cmp	r3, #32
 8009ff0:	d12a      	bne.n	800a048 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	2b02      	cmp	r3, #2
 8009ffc:	d81d      	bhi.n	800a03a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	889b      	ldrh	r3, [r3, #4]
 800a002:	b2db      	uxtb	r3, r3
 800a004:	2b01      	cmp	r3, #1
 800a006:	d813      	bhi.n	800a030 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	6839      	ldr	r1, [r7, #0]
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	4798      	blx	r3
 800a016:	4603      	mov	r3, r0
 800a018:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	88db      	ldrh	r3, [r3, #6]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d110      	bne.n	800a044 <USBD_StdItfReq+0x78>
 800a022:	7bfb      	ldrb	r3, [r7, #15]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10d      	bne.n	800a044 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 fd53 	bl	800aad4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a02e:	e009      	b.n	800a044 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fc86 	bl	800a944 <USBD_CtlError>
          break;
 800a038:	e004      	b.n	800a044 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800a03a:	6839      	ldr	r1, [r7, #0]
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f000 fc81 	bl	800a944 <USBD_CtlError>
          break;
 800a042:	e000      	b.n	800a046 <USBD_StdItfReq+0x7a>
          break;
 800a044:	bf00      	nop
      }
      break;
 800a046:	e004      	b.n	800a052 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800a048:	6839      	ldr	r1, [r7, #0]
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f000 fc7a 	bl	800a944 <USBD_CtlError>
      break;
 800a050:	bf00      	nop
  }

  return USBD_OK;
 800a052:	2300      	movs	r3, #0
}
 800a054:	4618      	mov	r0, r3
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}

0800a05c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b084      	sub	sp, #16
 800a060:	af00      	add	r7, sp, #0
 800a062:	6078      	str	r0, [r7, #4]
 800a064:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	889b      	ldrh	r3, [r3, #4]
 800a06e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	781b      	ldrb	r3, [r3, #0]
 800a074:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a078:	2b40      	cmp	r3, #64	@ 0x40
 800a07a:	d007      	beq.n	800a08c <USBD_StdEPReq+0x30>
 800a07c:	2b40      	cmp	r3, #64	@ 0x40
 800a07e:	f200 8146 	bhi.w	800a30e <USBD_StdEPReq+0x2b2>
 800a082:	2b00      	cmp	r3, #0
 800a084:	d00a      	beq.n	800a09c <USBD_StdEPReq+0x40>
 800a086:	2b20      	cmp	r3, #32
 800a088:	f040 8141 	bne.w	800a30e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	6839      	ldr	r1, [r7, #0]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	4798      	blx	r3
      break;
 800a09a:	e13d      	b.n	800a318 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a0a4:	2b20      	cmp	r3, #32
 800a0a6:	d10a      	bne.n	800a0be <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a0ae:	689b      	ldr	r3, [r3, #8]
 800a0b0:	6839      	ldr	r1, [r7, #0]
 800a0b2:	6878      	ldr	r0, [r7, #4]
 800a0b4:	4798      	blx	r3
 800a0b6:	4603      	mov	r3, r0
 800a0b8:	73fb      	strb	r3, [r7, #15]

        return ret;
 800a0ba:	7bfb      	ldrb	r3, [r7, #15]
 800a0bc:	e12d      	b.n	800a31a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	785b      	ldrb	r3, [r3, #1]
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	d007      	beq.n	800a0d6 <USBD_StdEPReq+0x7a>
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	f300 811b 	bgt.w	800a302 <USBD_StdEPReq+0x2a6>
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d072      	beq.n	800a1b6 <USBD_StdEPReq+0x15a>
 800a0d0:	2b01      	cmp	r3, #1
 800a0d2:	d03a      	beq.n	800a14a <USBD_StdEPReq+0xee>
 800a0d4:	e115      	b.n	800a302 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d002      	beq.n	800a0e6 <USBD_StdEPReq+0x8a>
 800a0e0:	2b03      	cmp	r3, #3
 800a0e2:	d015      	beq.n	800a110 <USBD_StdEPReq+0xb4>
 800a0e4:	e02b      	b.n	800a13e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a0e6:	7bbb      	ldrb	r3, [r7, #14]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d00c      	beq.n	800a106 <USBD_StdEPReq+0xaa>
 800a0ec:	7bbb      	ldrb	r3, [r7, #14]
 800a0ee:	2b80      	cmp	r3, #128	@ 0x80
 800a0f0:	d009      	beq.n	800a106 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a0f2:	7bbb      	ldrb	r3, [r7, #14]
 800a0f4:	4619      	mov	r1, r3
 800a0f6:	6878      	ldr	r0, [r7, #4]
 800a0f8:	f001 f886 	bl	800b208 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a0fc:	2180      	movs	r1, #128	@ 0x80
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	f001 f882 	bl	800b208 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a104:	e020      	b.n	800a148 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800a106:	6839      	ldr	r1, [r7, #0]
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f000 fc1b 	bl	800a944 <USBD_CtlError>
              break;
 800a10e:	e01b      	b.n	800a148 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	885b      	ldrh	r3, [r3, #2]
 800a114:	2b00      	cmp	r3, #0
 800a116:	d10e      	bne.n	800a136 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 800a118:	7bbb      	ldrb	r3, [r7, #14]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00b      	beq.n	800a136 <USBD_StdEPReq+0xda>
 800a11e:	7bbb      	ldrb	r3, [r7, #14]
 800a120:	2b80      	cmp	r3, #128	@ 0x80
 800a122:	d008      	beq.n	800a136 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	88db      	ldrh	r3, [r3, #6]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d104      	bne.n	800a136 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800a12c:	7bbb      	ldrb	r3, [r7, #14]
 800a12e:	4619      	mov	r1, r3
 800a130:	6878      	ldr	r0, [r7, #4]
 800a132:	f001 f869 	bl	800b208 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 fccc 	bl	800aad4 <USBD_CtlSendStatus>

              break;
 800a13c:	e004      	b.n	800a148 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800a13e:	6839      	ldr	r1, [r7, #0]
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 fbff 	bl	800a944 <USBD_CtlError>
              break;
 800a146:	bf00      	nop
          }
          break;
 800a148:	e0e0      	b.n	800a30c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a150:	2b02      	cmp	r3, #2
 800a152:	d002      	beq.n	800a15a <USBD_StdEPReq+0xfe>
 800a154:	2b03      	cmp	r3, #3
 800a156:	d015      	beq.n	800a184 <USBD_StdEPReq+0x128>
 800a158:	e026      	b.n	800a1a8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a15a:	7bbb      	ldrb	r3, [r7, #14]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d00c      	beq.n	800a17a <USBD_StdEPReq+0x11e>
 800a160:	7bbb      	ldrb	r3, [r7, #14]
 800a162:	2b80      	cmp	r3, #128	@ 0x80
 800a164:	d009      	beq.n	800a17a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800a166:	7bbb      	ldrb	r3, [r7, #14]
 800a168:	4619      	mov	r1, r3
 800a16a:	6878      	ldr	r0, [r7, #4]
 800a16c:	f001 f84c 	bl	800b208 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800a170:	2180      	movs	r1, #128	@ 0x80
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f001 f848 	bl	800b208 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a178:	e01c      	b.n	800a1b4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800a17a:	6839      	ldr	r1, [r7, #0]
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f000 fbe1 	bl	800a944 <USBD_CtlError>
              break;
 800a182:	e017      	b.n	800a1b4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	885b      	ldrh	r3, [r3, #2]
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d112      	bne.n	800a1b2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a18c:	7bbb      	ldrb	r3, [r7, #14]
 800a18e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a192:	2b00      	cmp	r3, #0
 800a194:	d004      	beq.n	800a1a0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800a196:	7bbb      	ldrb	r3, [r7, #14]
 800a198:	4619      	mov	r1, r3
 800a19a:	6878      	ldr	r0, [r7, #4]
 800a19c:	f001 f853 	bl	800b246 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 fc97 	bl	800aad4 <USBD_CtlSendStatus>
              }
              break;
 800a1a6:	e004      	b.n	800a1b2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 fbca 	bl	800a944 <USBD_CtlError>
              break;
 800a1b0:	e000      	b.n	800a1b4 <USBD_StdEPReq+0x158>
              break;
 800a1b2:	bf00      	nop
          }
          break;
 800a1b4:	e0aa      	b.n	800a30c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d002      	beq.n	800a1c6 <USBD_StdEPReq+0x16a>
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d032      	beq.n	800a22a <USBD_StdEPReq+0x1ce>
 800a1c4:	e097      	b.n	800a2f6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a1c6:	7bbb      	ldrb	r3, [r7, #14]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d007      	beq.n	800a1dc <USBD_StdEPReq+0x180>
 800a1cc:	7bbb      	ldrb	r3, [r7, #14]
 800a1ce:	2b80      	cmp	r3, #128	@ 0x80
 800a1d0:	d004      	beq.n	800a1dc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800a1d2:	6839      	ldr	r1, [r7, #0]
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fbb5 	bl	800a944 <USBD_CtlError>
                break;
 800a1da:	e091      	b.n	800a300 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a1dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	da0b      	bge.n	800a1fc <USBD_StdEPReq+0x1a0>
 800a1e4:	7bbb      	ldrb	r3, [r7, #14]
 800a1e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	009b      	lsls	r3, r3, #2
 800a1ee:	4413      	add	r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	3310      	adds	r3, #16
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	4413      	add	r3, r2
 800a1f8:	3304      	adds	r3, #4
 800a1fa:	e00b      	b.n	800a214 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a1fc:	7bbb      	ldrb	r3, [r7, #14]
 800a1fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a202:	4613      	mov	r3, r2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	4413      	add	r3, r2
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a20e:	687a      	ldr	r2, [r7, #4]
 800a210:	4413      	add	r3, r2
 800a212:	3304      	adds	r3, #4
 800a214:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a21c:	68bb      	ldr	r3, [r7, #8]
 800a21e:	2202      	movs	r2, #2
 800a220:	4619      	mov	r1, r3
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f000 fbf8 	bl	800aa18 <USBD_CtlSendData>
              break;
 800a228:	e06a      	b.n	800a300 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a22a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	da11      	bge.n	800a256 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a232:	7bbb      	ldrb	r3, [r7, #14]
 800a234:	f003 020f 	and.w	r2, r3, #15
 800a238:	6879      	ldr	r1, [r7, #4]
 800a23a:	4613      	mov	r3, r2
 800a23c:	009b      	lsls	r3, r3, #2
 800a23e:	4413      	add	r3, r2
 800a240:	009b      	lsls	r3, r3, #2
 800a242:	440b      	add	r3, r1
 800a244:	3318      	adds	r3, #24
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d117      	bne.n	800a27c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a24c:	6839      	ldr	r1, [r7, #0]
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f000 fb78 	bl	800a944 <USBD_CtlError>
                  break;
 800a254:	e054      	b.n	800a300 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a256:	7bbb      	ldrb	r3, [r7, #14]
 800a258:	f003 020f 	and.w	r2, r3, #15
 800a25c:	6879      	ldr	r1, [r7, #4]
 800a25e:	4613      	mov	r3, r2
 800a260:	009b      	lsls	r3, r3, #2
 800a262:	4413      	add	r3, r2
 800a264:	009b      	lsls	r3, r3, #2
 800a266:	440b      	add	r3, r1
 800a268:	f503 73ac 	add.w	r3, r3, #344	@ 0x158
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d104      	bne.n	800a27c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800a272:	6839      	ldr	r1, [r7, #0]
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fb65 	bl	800a944 <USBD_CtlError>
                  break;
 800a27a:	e041      	b.n	800a300 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a27c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a280:	2b00      	cmp	r3, #0
 800a282:	da0b      	bge.n	800a29c <USBD_StdEPReq+0x240>
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a28a:	4613      	mov	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4413      	add	r3, r2
 800a290:	009b      	lsls	r3, r3, #2
 800a292:	3310      	adds	r3, #16
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	4413      	add	r3, r2
 800a298:	3304      	adds	r3, #4
 800a29a:	e00b      	b.n	800a2b4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a29c:	7bbb      	ldrb	r3, [r7, #14]
 800a29e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	009b      	lsls	r3, r3, #2
 800a2aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a2ae:	687a      	ldr	r2, [r7, #4]
 800a2b0:	4413      	add	r3, r2
 800a2b2:	3304      	adds	r3, #4
 800a2b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a2b6:	7bbb      	ldrb	r3, [r7, #14]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d002      	beq.n	800a2c2 <USBD_StdEPReq+0x266>
 800a2bc:	7bbb      	ldrb	r3, [r7, #14]
 800a2be:	2b80      	cmp	r3, #128	@ 0x80
 800a2c0:	d103      	bne.n	800a2ca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	601a      	str	r2, [r3, #0]
 800a2c8:	e00e      	b.n	800a2e8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800a2ca:	7bbb      	ldrb	r3, [r7, #14]
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	6878      	ldr	r0, [r7, #4]
 800a2d0:	f000 ffd8 	bl	800b284 <USBD_LL_IsStallEP>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d003      	beq.n	800a2e2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	601a      	str	r2, [r3, #0]
 800a2e0:	e002      	b.n	800a2e8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	2202      	movs	r2, #2
 800a2ec:	4619      	mov	r1, r3
 800a2ee:	6878      	ldr	r0, [r7, #4]
 800a2f0:	f000 fb92 	bl	800aa18 <USBD_CtlSendData>
              break;
 800a2f4:	e004      	b.n	800a300 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800a2f6:	6839      	ldr	r1, [r7, #0]
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f000 fb23 	bl	800a944 <USBD_CtlError>
              break;
 800a2fe:	bf00      	nop
          }
          break;
 800a300:	e004      	b.n	800a30c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800a302:	6839      	ldr	r1, [r7, #0]
 800a304:	6878      	ldr	r0, [r7, #4]
 800a306:	f000 fb1d 	bl	800a944 <USBD_CtlError>
          break;
 800a30a:	bf00      	nop
      }
      break;
 800a30c:	e004      	b.n	800a318 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 800a30e:	6839      	ldr	r1, [r7, #0]
 800a310:	6878      	ldr	r0, [r7, #4]
 800a312:	f000 fb17 	bl	800a944 <USBD_CtlError>
      break;
 800a316:	bf00      	nop
  }

  return ret;
 800a318:	7bfb      	ldrb	r3, [r7, #15]
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
	...

0800a324 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b084      	sub	sp, #16
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a32e:	2300      	movs	r3, #0
 800a330:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a332:	2300      	movs	r3, #0
 800a334:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a336:	2300      	movs	r3, #0
 800a338:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	885b      	ldrh	r3, [r3, #2]
 800a33e:	0a1b      	lsrs	r3, r3, #8
 800a340:	b29b      	uxth	r3, r3
 800a342:	3b01      	subs	r3, #1
 800a344:	2b06      	cmp	r3, #6
 800a346:	f200 8128 	bhi.w	800a59a <USBD_GetDescriptor+0x276>
 800a34a:	a201      	add	r2, pc, #4	@ (adr r2, 800a350 <USBD_GetDescriptor+0x2c>)
 800a34c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a350:	0800a36d 	.word	0x0800a36d
 800a354:	0800a385 	.word	0x0800a385
 800a358:	0800a3c5 	.word	0x0800a3c5
 800a35c:	0800a59b 	.word	0x0800a59b
 800a360:	0800a59b 	.word	0x0800a59b
 800a364:	0800a53b 	.word	0x0800a53b
 800a368:	0800a567 	.word	0x0800a567
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	687a      	ldr	r2, [r7, #4]
 800a376:	7c12      	ldrb	r2, [r2, #16]
 800a378:	f107 0108 	add.w	r1, r7, #8
 800a37c:	4610      	mov	r0, r2
 800a37e:	4798      	blx	r3
 800a380:	60f8      	str	r0, [r7, #12]
      break;
 800a382:	e112      	b.n	800a5aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	7c1b      	ldrb	r3, [r3, #16]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10d      	bne.n	800a3a8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a394:	f107 0208 	add.w	r2, r7, #8
 800a398:	4610      	mov	r0, r2
 800a39a:	4798      	blx	r3
 800a39c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	3301      	adds	r3, #1
 800a3a2:	2202      	movs	r2, #2
 800a3a4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800a3a6:	e100      	b.n	800a5aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a3b0:	f107 0208 	add.w	r2, r7, #8
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	4798      	blx	r3
 800a3b8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	3301      	adds	r3, #1
 800a3be:	2202      	movs	r2, #2
 800a3c0:	701a      	strb	r2, [r3, #0]
      break;
 800a3c2:	e0f2      	b.n	800a5aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	885b      	ldrh	r3, [r3, #2]
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	2b05      	cmp	r3, #5
 800a3cc:	f200 80ac 	bhi.w	800a528 <USBD_GetDescriptor+0x204>
 800a3d0:	a201      	add	r2, pc, #4	@ (adr r2, 800a3d8 <USBD_GetDescriptor+0xb4>)
 800a3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d6:	bf00      	nop
 800a3d8:	0800a3f1 	.word	0x0800a3f1
 800a3dc:	0800a425 	.word	0x0800a425
 800a3e0:	0800a459 	.word	0x0800a459
 800a3e4:	0800a48d 	.word	0x0800a48d
 800a3e8:	0800a4c1 	.word	0x0800a4c1
 800a3ec:	0800a4f5 	.word	0x0800a4f5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a3f6:	685b      	ldr	r3, [r3, #4]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00b      	beq.n	800a414 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	7c12      	ldrb	r2, [r2, #16]
 800a408:	f107 0108 	add.w	r1, r7, #8
 800a40c:	4610      	mov	r0, r2
 800a40e:	4798      	blx	r3
 800a410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a412:	e091      	b.n	800a538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a414:	6839      	ldr	r1, [r7, #0]
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fa94 	bl	800a944 <USBD_CtlError>
            err++;
 800a41c:	7afb      	ldrb	r3, [r7, #11]
 800a41e:	3301      	adds	r3, #1
 800a420:	72fb      	strb	r3, [r7, #11]
          break;
 800a422:	e089      	b.n	800a538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	d00b      	beq.n	800a448 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a436:	689b      	ldr	r3, [r3, #8]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	7c12      	ldrb	r2, [r2, #16]
 800a43c:	f107 0108 	add.w	r1, r7, #8
 800a440:	4610      	mov	r0, r2
 800a442:	4798      	blx	r3
 800a444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a446:	e077      	b.n	800a538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a448:	6839      	ldr	r1, [r7, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fa7a 	bl	800a944 <USBD_CtlError>
            err++;
 800a450:	7afb      	ldrb	r3, [r7, #11]
 800a452:	3301      	adds	r3, #1
 800a454:	72fb      	strb	r3, [r7, #11]
          break;
 800a456:	e06f      	b.n	800a538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a45e:	68db      	ldr	r3, [r3, #12]
 800a460:	2b00      	cmp	r3, #0
 800a462:	d00b      	beq.n	800a47c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	687a      	ldr	r2, [r7, #4]
 800a46e:	7c12      	ldrb	r2, [r2, #16]
 800a470:	f107 0108 	add.w	r1, r7, #8
 800a474:	4610      	mov	r0, r2
 800a476:	4798      	blx	r3
 800a478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a47a:	e05d      	b.n	800a538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	6878      	ldr	r0, [r7, #4]
 800a480:	f000 fa60 	bl	800a944 <USBD_CtlError>
            err++;
 800a484:	7afb      	ldrb	r3, [r7, #11]
 800a486:	3301      	adds	r3, #1
 800a488:	72fb      	strb	r3, [r7, #11]
          break;
 800a48a:	e055      	b.n	800a538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00b      	beq.n	800a4b0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a49e:	691b      	ldr	r3, [r3, #16]
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	7c12      	ldrb	r2, [r2, #16]
 800a4a4:	f107 0108 	add.w	r1, r7, #8
 800a4a8:	4610      	mov	r0, r2
 800a4aa:	4798      	blx	r3
 800a4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4ae:	e043      	b.n	800a538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4b0:	6839      	ldr	r1, [r7, #0]
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f000 fa46 	bl	800a944 <USBD_CtlError>
            err++;
 800a4b8:	7afb      	ldrb	r3, [r7, #11]
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800a4be:	e03b      	b.n	800a538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d00b      	beq.n	800a4e4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	687a      	ldr	r2, [r7, #4]
 800a4d6:	7c12      	ldrb	r2, [r2, #16]
 800a4d8:	f107 0108 	add.w	r1, r7, #8
 800a4dc:	4610      	mov	r0, r2
 800a4de:	4798      	blx	r3
 800a4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a4e2:	e029      	b.n	800a538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 fa2c 	bl	800a944 <USBD_CtlError>
            err++;
 800a4ec:	7afb      	ldrb	r3, [r7, #11]
 800a4ee:	3301      	adds	r3, #1
 800a4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800a4f2:	e021      	b.n	800a538 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a4fa:	699b      	ldr	r3, [r3, #24]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d00b      	beq.n	800a518 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f8d3 32b0 	ldr.w	r3, [r3, #688]	@ 0x2b0
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	687a      	ldr	r2, [r7, #4]
 800a50a:	7c12      	ldrb	r2, [r2, #16]
 800a50c:	f107 0108 	add.w	r1, r7, #8
 800a510:	4610      	mov	r0, r2
 800a512:	4798      	blx	r3
 800a514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a516:	e00f      	b.n	800a538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a518:	6839      	ldr	r1, [r7, #0]
 800a51a:	6878      	ldr	r0, [r7, #4]
 800a51c:	f000 fa12 	bl	800a944 <USBD_CtlError>
            err++;
 800a520:	7afb      	ldrb	r3, [r7, #11]
 800a522:	3301      	adds	r3, #1
 800a524:	72fb      	strb	r3, [r7, #11]
          break;
 800a526:	e007      	b.n	800a538 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800a528:	6839      	ldr	r1, [r7, #0]
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fa0a 	bl	800a944 <USBD_CtlError>
          err++;
 800a530:	7afb      	ldrb	r3, [r7, #11]
 800a532:	3301      	adds	r3, #1
 800a534:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800a536:	e038      	b.n	800a5aa <USBD_GetDescriptor+0x286>
 800a538:	e037      	b.n	800a5aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	7c1b      	ldrb	r3, [r3, #16]
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a548:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a54a:	f107 0208 	add.w	r2, r7, #8
 800a54e:	4610      	mov	r0, r2
 800a550:	4798      	blx	r3
 800a552:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a554:	e029      	b.n	800a5aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a556:	6839      	ldr	r1, [r7, #0]
 800a558:	6878      	ldr	r0, [r7, #4]
 800a55a:	f000 f9f3 	bl	800a944 <USBD_CtlError>
        err++;
 800a55e:	7afb      	ldrb	r3, [r7, #11]
 800a560:	3301      	adds	r3, #1
 800a562:	72fb      	strb	r3, [r7, #11]
      break;
 800a564:	e021      	b.n	800a5aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	7c1b      	ldrb	r3, [r3, #16]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d10d      	bne.n	800a58a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a576:	f107 0208 	add.w	r2, r7, #8
 800a57a:	4610      	mov	r0, r2
 800a57c:	4798      	blx	r3
 800a57e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	3301      	adds	r3, #1
 800a584:	2207      	movs	r2, #7
 800a586:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a588:	e00f      	b.n	800a5aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a58a:	6839      	ldr	r1, [r7, #0]
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f000 f9d9 	bl	800a944 <USBD_CtlError>
        err++;
 800a592:	7afb      	ldrb	r3, [r7, #11]
 800a594:	3301      	adds	r3, #1
 800a596:	72fb      	strb	r3, [r7, #11]
      break;
 800a598:	e007      	b.n	800a5aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a59a:	6839      	ldr	r1, [r7, #0]
 800a59c:	6878      	ldr	r0, [r7, #4]
 800a59e:	f000 f9d1 	bl	800a944 <USBD_CtlError>
      err++;
 800a5a2:	7afb      	ldrb	r3, [r7, #11]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	72fb      	strb	r3, [r7, #11]
      break;
 800a5a8:	bf00      	nop
  }

  if (err != 0U)
 800a5aa:	7afb      	ldrb	r3, [r7, #11]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d11c      	bne.n	800a5ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800a5b0:	893b      	ldrh	r3, [r7, #8]
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d011      	beq.n	800a5da <USBD_GetDescriptor+0x2b6>
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	88db      	ldrh	r3, [r3, #6]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d00d      	beq.n	800a5da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	88da      	ldrh	r2, [r3, #6]
 800a5c2:	893b      	ldrh	r3, [r7, #8]
 800a5c4:	4293      	cmp	r3, r2
 800a5c6:	bf28      	it	cs
 800a5c8:	4613      	movcs	r3, r2
 800a5ca:	b29b      	uxth	r3, r3
 800a5cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a5ce:	893b      	ldrh	r3, [r7, #8]
 800a5d0:	461a      	mov	r2, r3
 800a5d2:	68f9      	ldr	r1, [r7, #12]
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f000 fa1f 	bl	800aa18 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	88db      	ldrh	r3, [r3, #6]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d104      	bne.n	800a5ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fa76 	bl	800aad4 <USBD_CtlSendStatus>
 800a5e8:	e000      	b.n	800a5ec <USBD_GetDescriptor+0x2c8>
    return;
 800a5ea:	bf00      	nop
    }
  }
}
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
 800a5f2:	bf00      	nop

0800a5f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a5fe:	683b      	ldr	r3, [r7, #0]
 800a600:	889b      	ldrh	r3, [r3, #4]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d130      	bne.n	800a668 <USBD_SetAddress+0x74>
 800a606:	683b      	ldr	r3, [r7, #0]
 800a608:	88db      	ldrh	r3, [r3, #6]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d12c      	bne.n	800a668 <USBD_SetAddress+0x74>
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	885b      	ldrh	r3, [r3, #2]
 800a612:	2b7f      	cmp	r3, #127	@ 0x7f
 800a614:	d828      	bhi.n	800a668 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	885b      	ldrh	r3, [r3, #2]
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a620:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a628:	2b03      	cmp	r3, #3
 800a62a:	d104      	bne.n	800a636 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800a62c:	6839      	ldr	r1, [r7, #0]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f000 f988 	bl	800a944 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a634:	e01d      	b.n	800a672 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	7bfa      	ldrb	r2, [r7, #15]
 800a63a:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a63e:	7bfb      	ldrb	r3, [r7, #15]
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f000 fe49 	bl	800b2da <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fa43 	bl	800aad4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a64e:	7bfb      	ldrb	r3, [r7, #15]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d004      	beq.n	800a65e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	2202      	movs	r2, #2
 800a658:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a65c:	e009      	b.n	800a672 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2201      	movs	r2, #1
 800a662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a666:	e004      	b.n	800a672 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a668:	6839      	ldr	r1, [r7, #0]
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f96a 	bl	800a944 <USBD_CtlError>
  }
}
 800a670:	bf00      	nop
 800a672:	bf00      	nop
 800a674:	3710      	adds	r7, #16
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
	...

0800a67c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
 800a684:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	885b      	ldrh	r3, [r3, #2]
 800a68a:	b2da      	uxtb	r2, r3
 800a68c:	4b41      	ldr	r3, [pc, #260]	@ (800a794 <USBD_SetConfig+0x118>)
 800a68e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a690:	4b40      	ldr	r3, [pc, #256]	@ (800a794 <USBD_SetConfig+0x118>)
 800a692:	781b      	ldrb	r3, [r3, #0]
 800a694:	2b01      	cmp	r3, #1
 800a696:	d904      	bls.n	800a6a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800a698:	6839      	ldr	r1, [r7, #0]
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f000 f952 	bl	800a944 <USBD_CtlError>
 800a6a0:	e075      	b.n	800a78e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	d002      	beq.n	800a6b2 <USBD_SetConfig+0x36>
 800a6ac:	2b03      	cmp	r3, #3
 800a6ae:	d023      	beq.n	800a6f8 <USBD_SetConfig+0x7c>
 800a6b0:	e062      	b.n	800a778 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800a6b2:	4b38      	ldr	r3, [pc, #224]	@ (800a794 <USBD_SetConfig+0x118>)
 800a6b4:	781b      	ldrb	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d01a      	beq.n	800a6f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800a6ba:	4b36      	ldr	r3, [pc, #216]	@ (800a794 <USBD_SetConfig+0x118>)
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	461a      	mov	r2, r3
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2203      	movs	r2, #3
 800a6c8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a6cc:	4b31      	ldr	r3, [pc, #196]	@ (800a794 <USBD_SetConfig+0x118>)
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f7ff f9e7 	bl	8009aa6 <USBD_SetClassConfig>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d104      	bne.n	800a6e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800a6de:	6839      	ldr	r1, [r7, #0]
 800a6e0:	6878      	ldr	r0, [r7, #4]
 800a6e2:	f000 f92f 	bl	800a944 <USBD_CtlError>
            return;
 800a6e6:	e052      	b.n	800a78e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f9f3 	bl	800aad4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a6ee:	e04e      	b.n	800a78e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f9ef 	bl	800aad4 <USBD_CtlSendStatus>
        break;
 800a6f6:	e04a      	b.n	800a78e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800a6f8:	4b26      	ldr	r3, [pc, #152]	@ (800a794 <USBD_SetConfig+0x118>)
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d112      	bne.n	800a726 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2202      	movs	r2, #2
 800a704:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
          pdev->dev_config = cfgidx;
 800a708:	4b22      	ldr	r3, [pc, #136]	@ (800a794 <USBD_SetConfig+0x118>)
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	461a      	mov	r2, r3
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800a712:	4b20      	ldr	r3, [pc, #128]	@ (800a794 <USBD_SetConfig+0x118>)
 800a714:	781b      	ldrb	r3, [r3, #0]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7ff f9e3 	bl	8009ae4 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f000 f9d8 	bl	800aad4 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800a724:	e033      	b.n	800a78e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800a726:	4b1b      	ldr	r3, [pc, #108]	@ (800a794 <USBD_SetConfig+0x118>)
 800a728:	781b      	ldrb	r3, [r3, #0]
 800a72a:	461a      	mov	r2, r3
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	685b      	ldr	r3, [r3, #4]
 800a730:	429a      	cmp	r2, r3
 800a732:	d01d      	beq.n	800a770 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	685b      	ldr	r3, [r3, #4]
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	4619      	mov	r1, r3
 800a73c:	6878      	ldr	r0, [r7, #4]
 800a73e:	f7ff f9d1 	bl	8009ae4 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800a742:	4b14      	ldr	r3, [pc, #80]	@ (800a794 <USBD_SetConfig+0x118>)
 800a744:	781b      	ldrb	r3, [r3, #0]
 800a746:	461a      	mov	r2, r3
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800a74c:	4b11      	ldr	r3, [pc, #68]	@ (800a794 <USBD_SetConfig+0x118>)
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	4619      	mov	r1, r3
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f7ff f9a7 	bl	8009aa6 <USBD_SetClassConfig>
 800a758:	4603      	mov	r3, r0
 800a75a:	2b02      	cmp	r3, #2
 800a75c:	d104      	bne.n	800a768 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800a75e:	6839      	ldr	r1, [r7, #0]
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f000 f8ef 	bl	800a944 <USBD_CtlError>
            return;
 800a766:	e012      	b.n	800a78e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a768:	6878      	ldr	r0, [r7, #4]
 800a76a:	f000 f9b3 	bl	800aad4 <USBD_CtlSendStatus>
        break;
 800a76e:	e00e      	b.n	800a78e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800a770:	6878      	ldr	r0, [r7, #4]
 800a772:	f000 f9af 	bl	800aad4 <USBD_CtlSendStatus>
        break;
 800a776:	e00a      	b.n	800a78e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800a778:	6839      	ldr	r1, [r7, #0]
 800a77a:	6878      	ldr	r0, [r7, #4]
 800a77c:	f000 f8e2 	bl	800a944 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800a780:	4b04      	ldr	r3, [pc, #16]	@ (800a794 <USBD_SetConfig+0x118>)
 800a782:	781b      	ldrb	r3, [r3, #0]
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f7ff f9ac 	bl	8009ae4 <USBD_ClrClassConfig>
        break;
 800a78c:	bf00      	nop
    }
  }
}
 800a78e:	3708      	adds	r7, #8
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	2000077c 	.word	0x2000077c

0800a798 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
 800a7a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	88db      	ldrh	r3, [r3, #6]
 800a7a6:	2b01      	cmp	r3, #1
 800a7a8:	d004      	beq.n	800a7b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a7aa:	6839      	ldr	r1, [r7, #0]
 800a7ac:	6878      	ldr	r0, [r7, #4]
 800a7ae:	f000 f8c9 	bl	800a944 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a7b2:	e022      	b.n	800a7fa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7ba:	2b02      	cmp	r3, #2
 800a7bc:	dc02      	bgt.n	800a7c4 <USBD_GetConfig+0x2c>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	dc03      	bgt.n	800a7ca <USBD_GetConfig+0x32>
 800a7c2:	e015      	b.n	800a7f0 <USBD_GetConfig+0x58>
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d00b      	beq.n	800a7e0 <USBD_GetConfig+0x48>
 800a7c8:	e012      	b.n	800a7f0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3308      	adds	r3, #8
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 f91d 	bl	800aa18 <USBD_CtlSendData>
        break;
 800a7de:	e00c      	b.n	800a7fa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f000 f915 	bl	800aa18 <USBD_CtlSendData>
        break;
 800a7ee:	e004      	b.n	800a7fa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800a7f0:	6839      	ldr	r1, [r7, #0]
 800a7f2:	6878      	ldr	r0, [r7, #4]
 800a7f4:	f000 f8a6 	bl	800a944 <USBD_CtlError>
        break;
 800a7f8:	bf00      	nop
}
 800a7fa:	bf00      	nop
 800a7fc:	3708      	adds	r7, #8
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a802:	b580      	push	{r7, lr}
 800a804:	b082      	sub	sp, #8
 800a806:	af00      	add	r7, sp, #0
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a812:	3b01      	subs	r3, #1
 800a814:	2b02      	cmp	r3, #2
 800a816:	d81e      	bhi.n	800a856 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	88db      	ldrh	r3, [r3, #6]
 800a81c:	2b02      	cmp	r3, #2
 800a81e:	d004      	beq.n	800a82a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800a820:	6839      	ldr	r1, [r7, #0]
 800a822:	6878      	ldr	r0, [r7, #4]
 800a824:	f000 f88e 	bl	800a944 <USBD_CtlError>
        break;
 800a828:	e01a      	b.n	800a860 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2201      	movs	r2, #1
 800a82e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a836:	2b00      	cmp	r3, #0
 800a838:	d005      	beq.n	800a846 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	f043 0202 	orr.w	r2, r3, #2
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	330c      	adds	r3, #12
 800a84a:	2202      	movs	r2, #2
 800a84c:	4619      	mov	r1, r3
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f8e2 	bl	800aa18 <USBD_CtlSendData>
      break;
 800a854:	e004      	b.n	800a860 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800a856:	6839      	ldr	r1, [r7, #0]
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f000 f873 	bl	800a944 <USBD_CtlError>
      break;
 800a85e:	bf00      	nop
  }
}
 800a860:	bf00      	nop
 800a862:	3708      	adds	r7, #8
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}

0800a868 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b082      	sub	sp, #8
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	885b      	ldrh	r3, [r3, #2]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d106      	bne.n	800a888 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    USBD_CtlSendStatus(pdev);
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 f926 	bl	800aad4 <USBD_CtlSendStatus>
  }
}
 800a888:	bf00      	nop
 800a88a:	3708      	adds	r7, #8
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}

0800a890 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	2b02      	cmp	r3, #2
 800a8a4:	d80b      	bhi.n	800a8be <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	885b      	ldrh	r3, [r3, #2]
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d10c      	bne.n	800a8c8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        USBD_CtlSendStatus(pdev);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f000 f90c 	bl	800aad4 <USBD_CtlSendStatus>
      }
      break;
 800a8bc:	e004      	b.n	800a8c8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800a8be:	6839      	ldr	r1, [r7, #0]
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f000 f83f 	bl	800a944 <USBD_CtlError>
      break;
 800a8c6:	e000      	b.n	800a8ca <USBD_ClrFeature+0x3a>
      break;
 800a8c8:	bf00      	nop
  }
}
 800a8ca:	bf00      	nop
 800a8cc:	3708      	adds	r7, #8
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}

0800a8d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a8d2:	b480      	push	{r7}
 800a8d4:	b083      	sub	sp, #12
 800a8d6:	af00      	add	r7, sp, #0
 800a8d8:	6078      	str	r0, [r7, #4]
 800a8da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800a8dc:	683b      	ldr	r3, [r7, #0]
 800a8de:	781a      	ldrb	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800a8e4:	683b      	ldr	r3, [r7, #0]
 800a8e6:	785a      	ldrb	r2, [r3, #1]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	3302      	adds	r3, #2
 800a8f0:	781b      	ldrb	r3, [r3, #0]
 800a8f2:	461a      	mov	r2, r3
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	3303      	adds	r3, #3
 800a8f8:	781b      	ldrb	r3, [r3, #0]
 800a8fa:	021b      	lsls	r3, r3, #8
 800a8fc:	b29b      	uxth	r3, r3
 800a8fe:	4413      	add	r3, r2
 800a900:	b29a      	uxth	r2, r3
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	3304      	adds	r3, #4
 800a90a:	781b      	ldrb	r3, [r3, #0]
 800a90c:	461a      	mov	r2, r3
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	3305      	adds	r3, #5
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	021b      	lsls	r3, r3, #8
 800a916:	b29b      	uxth	r3, r3
 800a918:	4413      	add	r3, r2
 800a91a:	b29a      	uxth	r2, r3
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	3306      	adds	r3, #6
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	3307      	adds	r3, #7
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	b29b      	uxth	r3, r3
 800a932:	4413      	add	r3, r2
 800a934:	b29a      	uxth	r2, r3
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	80da      	strh	r2, [r3, #6]

}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	bc80      	pop	{r7}
 800a942:	4770      	bx	lr

0800a944 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b082      	sub	sp, #8
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
 800a94c:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800a94e:	2180      	movs	r1, #128	@ 0x80
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 fc59 	bl	800b208 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800a956:	2100      	movs	r1, #0
 800a958:	6878      	ldr	r0, [r7, #4]
 800a95a:	f000 fc55 	bl	800b208 <USBD_LL_StallEP>
}
 800a95e:	bf00      	nop
 800a960:	3708      	adds	r7, #8
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}

0800a966 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a966:	b580      	push	{r7, lr}
 800a968:	b086      	sub	sp, #24
 800a96a:	af00      	add	r7, sp, #0
 800a96c:	60f8      	str	r0, [r7, #12]
 800a96e:	60b9      	str	r1, [r7, #8]
 800a970:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a972:	2300      	movs	r3, #0
 800a974:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d032      	beq.n	800a9e2 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800a97c:	68f8      	ldr	r0, [r7, #12]
 800a97e:	f000 f834 	bl	800a9ea <USBD_GetLen>
 800a982:	4603      	mov	r3, r0
 800a984:	3301      	adds	r3, #1
 800a986:	b29b      	uxth	r3, r3
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	b29a      	uxth	r2, r3
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800a990:	7dfb      	ldrb	r3, [r7, #23]
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	75fa      	strb	r2, [r7, #23]
 800a996:	461a      	mov	r2, r3
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	4413      	add	r3, r2
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	7812      	ldrb	r2, [r2, #0]
 800a9a0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
 800a9a4:	1c5a      	adds	r2, r3, #1
 800a9a6:	75fa      	strb	r2, [r7, #23]
 800a9a8:	461a      	mov	r2, r3
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	4413      	add	r3, r2
 800a9ae:	2203      	movs	r2, #3
 800a9b0:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800a9b2:	e012      	b.n	800a9da <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	1c5a      	adds	r2, r3, #1
 800a9b8:	60fa      	str	r2, [r7, #12]
 800a9ba:	7dfa      	ldrb	r2, [r7, #23]
 800a9bc:	1c51      	adds	r1, r2, #1
 800a9be:	75f9      	strb	r1, [r7, #23]
 800a9c0:	4611      	mov	r1, r2
 800a9c2:	68ba      	ldr	r2, [r7, #8]
 800a9c4:	440a      	add	r2, r1
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800a9ca:	7dfb      	ldrb	r3, [r7, #23]
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	75fa      	strb	r2, [r7, #23]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	2200      	movs	r2, #0
 800a9d8:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	781b      	ldrb	r3, [r3, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d1e8      	bne.n	800a9b4 <USBD_GetString+0x4e>
    }
  }
}
 800a9e2:	bf00      	nop
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	bd80      	pop	{r7, pc}

0800a9ea <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a9ea:	b480      	push	{r7}
 800a9ec:	b085      	sub	sp, #20
 800a9ee:	af00      	add	r7, sp, #0
 800a9f0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 800a9f6:	e005      	b.n	800aa04 <USBD_GetLen+0x1a>
  {
    len++;
 800a9f8:	7bfb      	ldrb	r3, [r7, #15]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	73fb      	strb	r3, [r7, #15]
    buf++;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	3301      	adds	r3, #1
 800aa02:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	781b      	ldrb	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1f5      	bne.n	800a9f8 <USBD_GetLen+0xe>
  }

  return len;
 800aa0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa0e:	4618      	mov	r0, r3
 800aa10:	3714      	adds	r7, #20
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bc80      	pop	{r7}
 800aa16:	4770      	bx	lr

0800aa18 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b084      	sub	sp, #16
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	4613      	mov	r3, r2
 800aa24:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	2202      	movs	r2, #2
 800aa2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800aa2e:	88fa      	ldrh	r2, [r7, #6]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800aa34:	88fa      	ldrh	r2, [r7, #6]
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa3a:	88fb      	ldrh	r3, [r7, #6]
 800aa3c:	68ba      	ldr	r2, [r7, #8]
 800aa3e:	2100      	movs	r1, #0
 800aa40:	68f8      	ldr	r0, [r7, #12]
 800aa42:	f000 fc69 	bl	800b318 <USBD_LL_Transmit>

  return USBD_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3710      	adds	r7, #16
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}

0800aa50 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800aa50:	b580      	push	{r7, lr}
 800aa52:	b084      	sub	sp, #16
 800aa54:	af00      	add	r7, sp, #0
 800aa56:	60f8      	str	r0, [r7, #12]
 800aa58:	60b9      	str	r1, [r7, #8]
 800aa5a:	4613      	mov	r3, r2
 800aa5c:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aa5e:	88fb      	ldrh	r3, [r7, #6]
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	2100      	movs	r1, #0
 800aa64:	68f8      	ldr	r0, [r7, #12]
 800aa66:	f000 fc57 	bl	800b318 <USBD_LL_Transmit>

  return USBD_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3710      	adds	r7, #16
 800aa70:	46bd      	mov	sp, r7
 800aa72:	bd80      	pop	{r7, pc}

0800aa74 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	60f8      	str	r0, [r7, #12]
 800aa7c:	60b9      	str	r1, [r7, #8]
 800aa7e:	4613      	mov	r3, r2
 800aa80:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2203      	movs	r2, #3
 800aa86:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800aa8a:	88fa      	ldrh	r2, [r7, #6]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
  pdev->ep_out[0].rem_length   = len;
 800aa92:	88fa      	ldrh	r2, [r7, #6]
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aa9a:	88fb      	ldrh	r3, [r7, #6]
 800aa9c:	68ba      	ldr	r2, [r7, #8]
 800aa9e:	2100      	movs	r1, #0
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f000 fc5c 	bl	800b35e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaa6:	2300      	movs	r3, #0
}
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	3710      	adds	r7, #16
 800aaac:	46bd      	mov	sp, r7
 800aaae:	bd80      	pop	{r7, pc}

0800aab0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b084      	sub	sp, #16
 800aab4:	af00      	add	r7, sp, #0
 800aab6:	60f8      	str	r0, [r7, #12]
 800aab8:	60b9      	str	r1, [r7, #8]
 800aaba:	4613      	mov	r3, r2
 800aabc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800aabe:	88fb      	ldrh	r3, [r7, #6]
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	2100      	movs	r1, #0
 800aac4:	68f8      	ldr	r0, [r7, #12]
 800aac6:	f000 fc4a 	bl	800b35e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3710      	adds	r7, #16
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2204      	movs	r2, #4
 800aae0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800aae4:	2300      	movs	r3, #0
 800aae6:	2200      	movs	r2, #0
 800aae8:	2100      	movs	r1, #0
 800aaea:	6878      	ldr	r0, [r7, #4]
 800aaec:	f000 fc14 	bl	800b318 <USBD_LL_Transmit>

  return USBD_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3708      	adds	r7, #8
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b082      	sub	sp, #8
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2205      	movs	r2, #5
 800ab06:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	2100      	movs	r1, #0
 800ab10:	6878      	ldr	r0, [r7, #4]
 800ab12:	f000 fc24 	bl	800b35e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ab16:	2300      	movs	r3, #0
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ab24:	2200      	movs	r2, #0
 800ab26:	4912      	ldr	r1, [pc, #72]	@ (800ab70 <MX_USB_DEVICE_Init+0x50>)
 800ab28:	4812      	ldr	r0, [pc, #72]	@ (800ab74 <MX_USB_DEVICE_Init+0x54>)
 800ab2a:	f7fe ff62 	bl	80099f2 <USBD_Init>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d001      	beq.n	800ab38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ab34:	f7f7 ff0a 	bl	800294c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ab38:	490f      	ldr	r1, [pc, #60]	@ (800ab78 <MX_USB_DEVICE_Init+0x58>)
 800ab3a:	480e      	ldr	r0, [pc, #56]	@ (800ab74 <MX_USB_DEVICE_Init+0x54>)
 800ab3c:	f7fe ff84 	bl	8009a48 <USBD_RegisterClass>
 800ab40:	4603      	mov	r3, r0
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d001      	beq.n	800ab4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ab46:	f7f7 ff01 	bl	800294c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ab4a:	490c      	ldr	r1, [pc, #48]	@ (800ab7c <MX_USB_DEVICE_Init+0x5c>)
 800ab4c:	4809      	ldr	r0, [pc, #36]	@ (800ab74 <MX_USB_DEVICE_Init+0x54>)
 800ab4e:	f7fe feb5 	bl	80098bc <USBD_CDC_RegisterInterface>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d001      	beq.n	800ab5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ab58:	f7f7 fef8 	bl	800294c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ab5c:	4805      	ldr	r0, [pc, #20]	@ (800ab74 <MX_USB_DEVICE_Init+0x54>)
 800ab5e:	f7fe ff8c 	bl	8009a7a <USBD_Start>
 800ab62:	4603      	mov	r3, r0
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d001      	beq.n	800ab6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ab68:	f7f7 fef0 	bl	800294c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ab6c:	bf00      	nop
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	20000144 	.word	0x20000144
 800ab74:	20000780 	.word	0x20000780
 800ab78:	20000030 	.word	0x20000030
 800ab7c:	20000134 	.word	0x20000134

0800ab80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ab84:	2200      	movs	r2, #0
 800ab86:	4905      	ldr	r1, [pc, #20]	@ (800ab9c <CDC_Init_FS+0x1c>)
 800ab88:	4805      	ldr	r0, [pc, #20]	@ (800aba0 <CDC_Init_FS+0x20>)
 800ab8a:	f7fe fead 	bl	80098e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ab8e:	4905      	ldr	r1, [pc, #20]	@ (800aba4 <CDC_Init_FS+0x24>)
 800ab90:	4803      	ldr	r0, [pc, #12]	@ (800aba0 <CDC_Init_FS+0x20>)
 800ab92:	f7fe fec2 	bl	800991a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ab96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20000e44 	.word	0x20000e44
 800aba0:	20000780 	.word	0x20000780
 800aba4:	20000a44 	.word	0x20000a44

0800aba8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800aba8:	b480      	push	{r7}
 800abaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800abac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800abae:	4618      	mov	r0, r3
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bc80      	pop	{r7}
 800abb4:	4770      	bx	lr
	...

0800abb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	4603      	mov	r3, r0
 800abc0:	6039      	str	r1, [r7, #0]
 800abc2:	71fb      	strb	r3, [r7, #7]
 800abc4:	4613      	mov	r3, r2
 800abc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800abc8:	79fb      	ldrb	r3, [r7, #7]
 800abca:	2b23      	cmp	r3, #35	@ 0x23
 800abcc:	d84a      	bhi.n	800ac64 <CDC_Control_FS+0xac>
 800abce:	a201      	add	r2, pc, #4	@ (adr r2, 800abd4 <CDC_Control_FS+0x1c>)
 800abd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abd4:	0800ac65 	.word	0x0800ac65
 800abd8:	0800ac65 	.word	0x0800ac65
 800abdc:	0800ac65 	.word	0x0800ac65
 800abe0:	0800ac65 	.word	0x0800ac65
 800abe4:	0800ac65 	.word	0x0800ac65
 800abe8:	0800ac65 	.word	0x0800ac65
 800abec:	0800ac65 	.word	0x0800ac65
 800abf0:	0800ac65 	.word	0x0800ac65
 800abf4:	0800ac65 	.word	0x0800ac65
 800abf8:	0800ac65 	.word	0x0800ac65
 800abfc:	0800ac65 	.word	0x0800ac65
 800ac00:	0800ac65 	.word	0x0800ac65
 800ac04:	0800ac65 	.word	0x0800ac65
 800ac08:	0800ac65 	.word	0x0800ac65
 800ac0c:	0800ac65 	.word	0x0800ac65
 800ac10:	0800ac65 	.word	0x0800ac65
 800ac14:	0800ac65 	.word	0x0800ac65
 800ac18:	0800ac65 	.word	0x0800ac65
 800ac1c:	0800ac65 	.word	0x0800ac65
 800ac20:	0800ac65 	.word	0x0800ac65
 800ac24:	0800ac65 	.word	0x0800ac65
 800ac28:	0800ac65 	.word	0x0800ac65
 800ac2c:	0800ac65 	.word	0x0800ac65
 800ac30:	0800ac65 	.word	0x0800ac65
 800ac34:	0800ac65 	.word	0x0800ac65
 800ac38:	0800ac65 	.word	0x0800ac65
 800ac3c:	0800ac65 	.word	0x0800ac65
 800ac40:	0800ac65 	.word	0x0800ac65
 800ac44:	0800ac65 	.word	0x0800ac65
 800ac48:	0800ac65 	.word	0x0800ac65
 800ac4c:	0800ac65 	.word	0x0800ac65
 800ac50:	0800ac65 	.word	0x0800ac65
 800ac54:	0800ac65 	.word	0x0800ac65
 800ac58:	0800ac65 	.word	0x0800ac65
 800ac5c:	0800ac65 	.word	0x0800ac65
 800ac60:	0800ac65 	.word	0x0800ac65
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ac64:	bf00      	nop
  }

  return (USBD_OK);
 800ac66:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bc80      	pop	{r7}
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop

0800ac74 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
 800ac7c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ac7e:	6879      	ldr	r1, [r7, #4]
 800ac80:	4808      	ldr	r0, [pc, #32]	@ (800aca4 <CDC_Receive_FS+0x30>)
 800ac82:	f7fe fe4a 	bl	800991a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ac86:	4807      	ldr	r0, [pc, #28]	@ (800aca4 <CDC_Receive_FS+0x30>)
 800ac88:	f7fe fe89 	bl	800999e <USBD_CDC_ReceivePacket>
  USB_RxIT(Buf, Len[0]);
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	b2db      	uxtb	r3, r3
 800ac92:	4619      	mov	r1, r3
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f7f7 faad 	bl	80021f4 <USB_RxIT>
  return (USBD_OK);
 800ac9a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3708      	adds	r7, #8
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20000780 	.word	0x20000780

0800aca8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
 800acb0:	460b      	mov	r3, r1
 800acb2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800acb4:	2300      	movs	r3, #0
 800acb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800acb8:	4b0d      	ldr	r3, [pc, #52]	@ (800acf0 <CDC_Transmit_FS+0x48>)
 800acba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acbe:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d001      	beq.n	800acce <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800acca:	2301      	movs	r3, #1
 800accc:	e00b      	b.n	800ace6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800acce:	887b      	ldrh	r3, [r7, #2]
 800acd0:	461a      	mov	r2, r3
 800acd2:	6879      	ldr	r1, [r7, #4]
 800acd4:	4806      	ldr	r0, [pc, #24]	@ (800acf0 <CDC_Transmit_FS+0x48>)
 800acd6:	f7fe fe07 	bl	80098e8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800acda:	4805      	ldr	r0, [pc, #20]	@ (800acf0 <CDC_Transmit_FS+0x48>)
 800acdc:	f7fe fe30 	bl	8009940 <USBD_CDC_TransmitPacket>
 800ace0:	4603      	mov	r3, r0
 800ace2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ace4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ace6:	4618      	mov	r0, r3
 800ace8:	3710      	adds	r7, #16
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	20000780 	.word	0x20000780

0800acf4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	4603      	mov	r3, r0
 800acfc:	6039      	str	r1, [r7, #0]
 800acfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2212      	movs	r2, #18
 800ad04:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ad06:	4b03      	ldr	r3, [pc, #12]	@ (800ad14 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	370c      	adds	r7, #12
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bc80      	pop	{r7}
 800ad10:	4770      	bx	lr
 800ad12:	bf00      	nop
 800ad14:	20000160 	.word	0x20000160

0800ad18 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad18:	b480      	push	{r7}
 800ad1a:	b083      	sub	sp, #12
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	4603      	mov	r3, r0
 800ad20:	6039      	str	r1, [r7, #0]
 800ad22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	2204      	movs	r2, #4
 800ad28:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ad2a:	4b03      	ldr	r3, [pc, #12]	@ (800ad38 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	370c      	adds	r7, #12
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bc80      	pop	{r7}
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop
 800ad38:	20000174 	.word	0x20000174

0800ad3c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b082      	sub	sp, #8
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	4603      	mov	r3, r0
 800ad44:	6039      	str	r1, [r7, #0]
 800ad46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ad48:	79fb      	ldrb	r3, [r7, #7]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d105      	bne.n	800ad5a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	4907      	ldr	r1, [pc, #28]	@ (800ad70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad52:	4808      	ldr	r0, [pc, #32]	@ (800ad74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad54:	f7ff fe07 	bl	800a966 <USBD_GetString>
 800ad58:	e004      	b.n	800ad64 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ad5a:	683a      	ldr	r2, [r7, #0]
 800ad5c:	4904      	ldr	r1, [pc, #16]	@ (800ad70 <USBD_FS_ProductStrDescriptor+0x34>)
 800ad5e:	4805      	ldr	r0, [pc, #20]	@ (800ad74 <USBD_FS_ProductStrDescriptor+0x38>)
 800ad60:	f7ff fe01 	bl	800a966 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ad64:	4b02      	ldr	r3, [pc, #8]	@ (800ad70 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	3708      	adds	r7, #8
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	bd80      	pop	{r7, pc}
 800ad6e:	bf00      	nop
 800ad70:	20001244 	.word	0x20001244
 800ad74:	0800bfe4 	.word	0x0800bfe4

0800ad78 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	4603      	mov	r3, r0
 800ad80:	6039      	str	r1, [r7, #0]
 800ad82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ad84:	683a      	ldr	r2, [r7, #0]
 800ad86:	4904      	ldr	r1, [pc, #16]	@ (800ad98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ad88:	4804      	ldr	r0, [pc, #16]	@ (800ad9c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ad8a:	f7ff fdec 	bl	800a966 <USBD_GetString>
  return USBD_StrDesc;
 800ad8e:	4b02      	ldr	r3, [pc, #8]	@ (800ad98 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ad90:	4618      	mov	r0, r3
 800ad92:	3708      	adds	r7, #8
 800ad94:	46bd      	mov	sp, r7
 800ad96:	bd80      	pop	{r7, pc}
 800ad98:	20001244 	.word	0x20001244
 800ad9c:	0800bffc 	.word	0x0800bffc

0800ada0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	4603      	mov	r3, r0
 800ada8:	6039      	str	r1, [r7, #0]
 800adaa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	221a      	movs	r2, #26
 800adb0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800adb2:	f000 f843 	bl	800ae3c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800adb6:	4b02      	ldr	r3, [pc, #8]	@ (800adc0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800adb8:	4618      	mov	r0, r3
 800adba:	3708      	adds	r7, #8
 800adbc:	46bd      	mov	sp, r7
 800adbe:	bd80      	pop	{r7, pc}
 800adc0:	20000178 	.word	0x20000178

0800adc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b082      	sub	sp, #8
 800adc8:	af00      	add	r7, sp, #0
 800adca:	4603      	mov	r3, r0
 800adcc:	6039      	str	r1, [r7, #0]
 800adce:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800add0:	79fb      	ldrb	r3, [r7, #7]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d105      	bne.n	800ade2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800add6:	683a      	ldr	r2, [r7, #0]
 800add8:	4907      	ldr	r1, [pc, #28]	@ (800adf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800adda:	4808      	ldr	r0, [pc, #32]	@ (800adfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800addc:	f7ff fdc3 	bl	800a966 <USBD_GetString>
 800ade0:	e004      	b.n	800adec <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ade2:	683a      	ldr	r2, [r7, #0]
 800ade4:	4904      	ldr	r1, [pc, #16]	@ (800adf8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ade6:	4805      	ldr	r0, [pc, #20]	@ (800adfc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ade8:	f7ff fdbd 	bl	800a966 <USBD_GetString>
  }
  return USBD_StrDesc;
 800adec:	4b02      	ldr	r3, [pc, #8]	@ (800adf8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}
 800adf6:	bf00      	nop
 800adf8:	20001244 	.word	0x20001244
 800adfc:	0800c010 	.word	0x0800c010

0800ae00 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	4603      	mov	r3, r0
 800ae08:	6039      	str	r1, [r7, #0]
 800ae0a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ae0c:	79fb      	ldrb	r3, [r7, #7]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d105      	bne.n	800ae1e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	4907      	ldr	r1, [pc, #28]	@ (800ae34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae16:	4808      	ldr	r0, [pc, #32]	@ (800ae38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae18:	f7ff fda5 	bl	800a966 <USBD_GetString>
 800ae1c:	e004      	b.n	800ae28 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ae1e:	683a      	ldr	r2, [r7, #0]
 800ae20:	4904      	ldr	r1, [pc, #16]	@ (800ae34 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ae22:	4805      	ldr	r0, [pc, #20]	@ (800ae38 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ae24:	f7ff fd9f 	bl	800a966 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ae28:	4b02      	ldr	r3, [pc, #8]	@ (800ae34 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3708      	adds	r7, #8
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}
 800ae32:	bf00      	nop
 800ae34:	20001244 	.word	0x20001244
 800ae38:	0800c01c 	.word	0x0800c01c

0800ae3c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ae42:	4b0f      	ldr	r3, [pc, #60]	@ (800ae80 <Get_SerialNum+0x44>)
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ae48:	4b0e      	ldr	r3, [pc, #56]	@ (800ae84 <Get_SerialNum+0x48>)
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ae4e:	4b0e      	ldr	r3, [pc, #56]	@ (800ae88 <Get_SerialNum+0x4c>)
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	4413      	add	r3, r2
 800ae5a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d009      	beq.n	800ae76 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ae62:	2208      	movs	r2, #8
 800ae64:	4909      	ldr	r1, [pc, #36]	@ (800ae8c <Get_SerialNum+0x50>)
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f000 f814 	bl	800ae94 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ae6c:	2204      	movs	r2, #4
 800ae6e:	4908      	ldr	r1, [pc, #32]	@ (800ae90 <Get_SerialNum+0x54>)
 800ae70:	68b8      	ldr	r0, [r7, #8]
 800ae72:	f000 f80f 	bl	800ae94 <IntToUnicode>
  }
}
 800ae76:	bf00      	nop
 800ae78:	3710      	adds	r7, #16
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}
 800ae7e:	bf00      	nop
 800ae80:	1ffff7e8 	.word	0x1ffff7e8
 800ae84:	1ffff7ec 	.word	0x1ffff7ec
 800ae88:	1ffff7f0 	.word	0x1ffff7f0
 800ae8c:	2000017a 	.word	0x2000017a
 800ae90:	2000018a 	.word	0x2000018a

0800ae94 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b087      	sub	sp, #28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	4613      	mov	r3, r2
 800aea0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aea2:	2300      	movs	r3, #0
 800aea4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aea6:	2300      	movs	r3, #0
 800aea8:	75fb      	strb	r3, [r7, #23]
 800aeaa:	e027      	b.n	800aefc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	0f1b      	lsrs	r3, r3, #28
 800aeb0:	2b09      	cmp	r3, #9
 800aeb2:	d80b      	bhi.n	800aecc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	0f1b      	lsrs	r3, r3, #28
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	7dfb      	ldrb	r3, [r7, #23]
 800aebc:	005b      	lsls	r3, r3, #1
 800aebe:	4619      	mov	r1, r3
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	440b      	add	r3, r1
 800aec4:	3230      	adds	r2, #48	@ 0x30
 800aec6:	b2d2      	uxtb	r2, r2
 800aec8:	701a      	strb	r2, [r3, #0]
 800aeca:	e00a      	b.n	800aee2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	0f1b      	lsrs	r3, r3, #28
 800aed0:	b2da      	uxtb	r2, r3
 800aed2:	7dfb      	ldrb	r3, [r7, #23]
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	4619      	mov	r1, r3
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	440b      	add	r3, r1
 800aedc:	3237      	adds	r2, #55	@ 0x37
 800aede:	b2d2      	uxtb	r2, r2
 800aee0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	011b      	lsls	r3, r3, #4
 800aee6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aee8:	7dfb      	ldrb	r3, [r7, #23]
 800aeea:	005b      	lsls	r3, r3, #1
 800aeec:	3301      	adds	r3, #1
 800aeee:	68ba      	ldr	r2, [r7, #8]
 800aef0:	4413      	add	r3, r2
 800aef2:	2200      	movs	r2, #0
 800aef4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	3301      	adds	r3, #1
 800aefa:	75fb      	strb	r3, [r7, #23]
 800aefc:	7dfa      	ldrb	r2, [r7, #23]
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	429a      	cmp	r2, r3
 800af02:	d3d3      	bcc.n	800aeac <IntToUnicode+0x18>
  }
}
 800af04:	bf00      	nop
 800af06:	bf00      	nop
 800af08:	371c      	adds	r7, #28
 800af0a:	46bd      	mov	sp, r7
 800af0c:	bc80      	pop	{r7}
 800af0e:	4770      	bx	lr

0800af10 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b084      	sub	sp, #16
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a0d      	ldr	r2, [pc, #52]	@ (800af54 <HAL_PCD_MspInit+0x44>)
 800af1e:	4293      	cmp	r3, r2
 800af20:	d113      	bne.n	800af4a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800af22:	4b0d      	ldr	r3, [pc, #52]	@ (800af58 <HAL_PCD_MspInit+0x48>)
 800af24:	69db      	ldr	r3, [r3, #28]
 800af26:	4a0c      	ldr	r2, [pc, #48]	@ (800af58 <HAL_PCD_MspInit+0x48>)
 800af28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800af2c:	61d3      	str	r3, [r2, #28]
 800af2e:	4b0a      	ldr	r3, [pc, #40]	@ (800af58 <HAL_PCD_MspInit+0x48>)
 800af30:	69db      	ldr	r3, [r3, #28]
 800af32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800af36:	60fb      	str	r3, [r7, #12]
 800af38:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800af3a:	2200      	movs	r2, #0
 800af3c:	2100      	movs	r1, #0
 800af3e:	2014      	movs	r0, #20
 800af40:	f7f7 ff73 	bl	8002e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800af44:	2014      	movs	r0, #20
 800af46:	f7f7 ff8c 	bl	8002e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800af4a:	bf00      	nop
 800af4c:	3710      	adds	r7, #16
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	40005c00 	.word	0x40005c00
 800af58:	40021000 	.word	0x40021000

0800af5c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	f503 7326 	add.w	r3, r3, #664	@ 0x298
 800af70:	4619      	mov	r1, r3
 800af72:	4610      	mov	r0, r2
 800af74:	f7fe fdc9 	bl	8009b0a <USBD_LL_SetupStage>
}
 800af78:	bf00      	nop
 800af7a:	3708      	adds	r7, #8
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bd80      	pop	{r7, pc}

0800af80 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b082      	sub	sp, #8
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
 800af88:	460b      	mov	r3, r1
 800af8a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800af92:	78fa      	ldrb	r2, [r7, #3]
 800af94:	6879      	ldr	r1, [r7, #4]
 800af96:	4613      	mov	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	4413      	add	r3, r2
 800af9c:	00db      	lsls	r3, r3, #3
 800af9e:	440b      	add	r3, r1
 800afa0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	78fb      	ldrb	r3, [r7, #3]
 800afa8:	4619      	mov	r1, r3
 800afaa:	f7fe fdfb 	bl	8009ba4 <USBD_LL_DataOutStage>
}
 800afae:	bf00      	nop
 800afb0:	3708      	adds	r7, #8
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b082      	sub	sp, #8
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
 800afbe:	460b      	mov	r3, r1
 800afc0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	f8d3 02d4 	ldr.w	r0, [r3, #724]	@ 0x2d4
 800afc8:	78fa      	ldrb	r2, [r7, #3]
 800afca:	6879      	ldr	r1, [r7, #4]
 800afcc:	4613      	mov	r3, r2
 800afce:	009b      	lsls	r3, r3, #2
 800afd0:	4413      	add	r3, r2
 800afd2:	00db      	lsls	r3, r3, #3
 800afd4:	440b      	add	r3, r1
 800afd6:	3324      	adds	r3, #36	@ 0x24
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	78fb      	ldrb	r3, [r7, #3]
 800afdc:	4619      	mov	r1, r3
 800afde:	f7fe fe52 	bl	8009c86 <USBD_LL_DataInStage>
}
 800afe2:	bf00      	nop
 800afe4:	3708      	adds	r7, #8
 800afe6:	46bd      	mov	sp, r7
 800afe8:	bd80      	pop	{r7, pc}

0800afea <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800afea:	b580      	push	{r7, lr}
 800afec:	b082      	sub	sp, #8
 800afee:	af00      	add	r7, sp, #0
 800aff0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe ff62 	bl	8009ec2 <USBD_LL_SOF>
}
 800affe:	bf00      	nop
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b006:	b580      	push	{r7, lr}
 800b008:	b084      	sub	sp, #16
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b00e:	2301      	movs	r3, #1
 800b010:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	799b      	ldrb	r3, [r3, #6]
 800b016:	2b02      	cmp	r3, #2
 800b018:	d001      	beq.n	800b01e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b01a:	f7f7 fc97 	bl	800294c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b024:	7bfa      	ldrb	r2, [r7, #15]
 800b026:	4611      	mov	r1, r2
 800b028:	4618      	mov	r0, r3
 800b02a:	f7fe ff12 	bl	8009e52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b034:	4618      	mov	r0, r3
 800b036:	f7fe fecb 	bl	8009dd0 <USBD_LL_Reset>
}
 800b03a:	bf00      	nop
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
	...

0800b044 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b052:	4618      	mov	r0, r3
 800b054:	f7fe ff0c 	bl	8009e70 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	7a9b      	ldrb	r3, [r3, #10]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d005      	beq.n	800b06c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b060:	4b04      	ldr	r3, [pc, #16]	@ (800b074 <HAL_PCD_SuspendCallback+0x30>)
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	4a03      	ldr	r2, [pc, #12]	@ (800b074 <HAL_PCD_SuspendCallback+0x30>)
 800b066:	f043 0306 	orr.w	r3, r3, #6
 800b06a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	e000ed00 	.word	0xe000ed00

0800b078 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe ff06 	bl	8009e98 <USBD_LL_Resume>
}
 800b08c:	bf00      	nop
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b094:	b580      	push	{r7, lr}
 800b096:	b082      	sub	sp, #8
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800b09c:	4a28      	ldr	r2, [pc, #160]	@ (800b140 <USBD_LL_Init+0xac>)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	f8c2 32d4 	str.w	r3, [r2, #724]	@ 0x2d4
  pdev->pData = &hpcd_USB_FS;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	4a26      	ldr	r2, [pc, #152]	@ (800b140 <USBD_LL_Init+0xac>)
 800b0a8:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0

  hpcd_USB_FS.Instance = USB;
 800b0ac:	4b24      	ldr	r3, [pc, #144]	@ (800b140 <USBD_LL_Init+0xac>)
 800b0ae:	4a25      	ldr	r2, [pc, #148]	@ (800b144 <USBD_LL_Init+0xb0>)
 800b0b0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800b0b2:	4b23      	ldr	r3, [pc, #140]	@ (800b140 <USBD_LL_Init+0xac>)
 800b0b4:	2208      	movs	r2, #8
 800b0b6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800b0b8:	4b21      	ldr	r3, [pc, #132]	@ (800b140 <USBD_LL_Init+0xac>)
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800b0be:	4b20      	ldr	r3, [pc, #128]	@ (800b140 <USBD_LL_Init+0xac>)
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 800b0c4:	4b1e      	ldr	r3, [pc, #120]	@ (800b140 <USBD_LL_Init+0xac>)
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800b0ca:	4b1d      	ldr	r3, [pc, #116]	@ (800b140 <USBD_LL_Init+0xac>)
 800b0cc:	2200      	movs	r2, #0
 800b0ce:	731a      	strb	r2, [r3, #12]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800b0d0:	481b      	ldr	r0, [pc, #108]	@ (800b140 <USBD_LL_Init+0xac>)
 800b0d2:	f7f9 fc13 	bl	80048fc <HAL_PCD_Init>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d001      	beq.n	800b0e0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 800b0dc:	f7f7 fc36 	bl	800294c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b0e6:	2318      	movs	r3, #24
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	2100      	movs	r1, #0
 800b0ec:	f7fb f924 	bl	8006338 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b0f6:	2358      	movs	r3, #88	@ 0x58
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	2180      	movs	r1, #128	@ 0x80
 800b0fc:	f7fb f91c 	bl	8006338 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b106:	23c0      	movs	r3, #192	@ 0xc0
 800b108:	2200      	movs	r2, #0
 800b10a:	2181      	movs	r1, #129	@ 0x81
 800b10c:	f7fb f914 	bl	8006338 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b116:	f44f 7388 	mov.w	r3, #272	@ 0x110
 800b11a:	2200      	movs	r2, #0
 800b11c:	2101      	movs	r1, #1
 800b11e:	f7fb f90b 	bl	8006338 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b12c:	2200      	movs	r2, #0
 800b12e:	2182      	movs	r1, #130	@ 0x82
 800b130:	f7fb f902 	bl	8006338 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800b134:	2300      	movs	r3, #0
}
 800b136:	4618      	mov	r0, r3
 800b138:	3708      	adds	r7, #8
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	20001444 	.word	0x20001444
 800b144:	40005c00 	.word	0x40005c00

0800b148 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b15e:	4618      	mov	r0, r3
 800b160:	f7f9 fcc2 	bl	8004ae8 <HAL_PCD_Start>
 800b164:	4603      	mov	r3, r0
 800b166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b168:	7bfb      	ldrb	r3, [r7, #15]
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 f94e 	bl	800b40c <USBD_Get_USB_Status>
 800b170:	4603      	mov	r3, r0
 800b172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b174:	7bbb      	ldrb	r3, [r7, #14]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3710      	adds	r7, #16
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b084      	sub	sp, #16
 800b182:	af00      	add	r7, sp, #0
 800b184:	6078      	str	r0, [r7, #4]
 800b186:	4608      	mov	r0, r1
 800b188:	4611      	mov	r1, r2
 800b18a:	461a      	mov	r2, r3
 800b18c:	4603      	mov	r3, r0
 800b18e:	70fb      	strb	r3, [r7, #3]
 800b190:	460b      	mov	r3, r1
 800b192:	70bb      	strb	r3, [r7, #2]
 800b194:	4613      	mov	r3, r2
 800b196:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b19c:	2300      	movs	r3, #0
 800b19e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b1a6:	78bb      	ldrb	r3, [r7, #2]
 800b1a8:	883a      	ldrh	r2, [r7, #0]
 800b1aa:	78f9      	ldrb	r1, [r7, #3]
 800b1ac:	f7f9 fe16 	bl	8004ddc <HAL_PCD_EP_Open>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1b4:	7bfb      	ldrb	r3, [r7, #15]
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f000 f928 	bl	800b40c <USBD_Get_USB_Status>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3710      	adds	r7, #16
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b1ca:	b580      	push	{r7, lr}
 800b1cc:	b084      	sub	sp, #16
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	460b      	mov	r3, r1
 800b1d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b1e4:	78fa      	ldrb	r2, [r7, #3]
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	4618      	mov	r0, r3
 800b1ea:	f7f9 fe54 	bl	8004e96 <HAL_PCD_EP_Close>
 800b1ee:	4603      	mov	r3, r0
 800b1f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 f909 	bl	800b40c <USBD_Get_USB_Status>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
 800b210:	460b      	mov	r3, r1
 800b212:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b214:	2300      	movs	r3, #0
 800b216:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b222:	78fa      	ldrb	r2, [r7, #3]
 800b224:	4611      	mov	r1, r2
 800b226:	4618      	mov	r0, r3
 800b228:	f7f9 fefc 	bl	8005024 <HAL_PCD_EP_SetStall>
 800b22c:	4603      	mov	r3, r0
 800b22e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b230:	7bfb      	ldrb	r3, [r7, #15]
 800b232:	4618      	mov	r0, r3
 800b234:	f000 f8ea 	bl	800b40c <USBD_Get_USB_Status>
 800b238:	4603      	mov	r3, r0
 800b23a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3710      	adds	r7, #16
 800b242:	46bd      	mov	sp, r7
 800b244:	bd80      	pop	{r7, pc}

0800b246 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b246:	b580      	push	{r7, lr}
 800b248:	b084      	sub	sp, #16
 800b24a:	af00      	add	r7, sp, #0
 800b24c:	6078      	str	r0, [r7, #4]
 800b24e:	460b      	mov	r3, r1
 800b250:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b252:	2300      	movs	r3, #0
 800b254:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b256:	2300      	movs	r3, #0
 800b258:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b260:	78fa      	ldrb	r2, [r7, #3]
 800b262:	4611      	mov	r1, r2
 800b264:	4618      	mov	r0, r3
 800b266:	f7f9 ff3d 	bl	80050e4 <HAL_PCD_EP_ClrStall>
 800b26a:	4603      	mov	r3, r0
 800b26c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b26e:	7bfb      	ldrb	r3, [r7, #15]
 800b270:	4618      	mov	r0, r3
 800b272:	f000 f8cb 	bl	800b40c <USBD_Get_USB_Status>
 800b276:	4603      	mov	r3, r0
 800b278:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b27a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b27c:	4618      	mov	r0, r3
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}

0800b284 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b284:	b480      	push	{r7}
 800b286:	b085      	sub	sp, #20
 800b288:	af00      	add	r7, sp, #0
 800b28a:	6078      	str	r0, [r7, #4]
 800b28c:	460b      	mov	r3, r1
 800b28e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b296:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b298:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	da0b      	bge.n	800b2b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b2a0:	78fb      	ldrb	r3, [r7, #3]
 800b2a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2a6:	68f9      	ldr	r1, [r7, #12]
 800b2a8:	4613      	mov	r3, r2
 800b2aa:	009b      	lsls	r3, r3, #2
 800b2ac:	4413      	add	r3, r2
 800b2ae:	00db      	lsls	r3, r3, #3
 800b2b0:	440b      	add	r3, r1
 800b2b2:	3312      	adds	r3, #18
 800b2b4:	781b      	ldrb	r3, [r3, #0]
 800b2b6:	e00b      	b.n	800b2d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b2b8:	78fb      	ldrb	r3, [r7, #3]
 800b2ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b2be:	68f9      	ldr	r1, [r7, #12]
 800b2c0:	4613      	mov	r3, r2
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	4413      	add	r3, r2
 800b2c6:	00db      	lsls	r3, r3, #3
 800b2c8:	440b      	add	r3, r1
 800b2ca:	f503 73a9 	add.w	r3, r3, #338	@ 0x152
 800b2ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3714      	adds	r7, #20
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	bc80      	pop	{r7}
 800b2d8:	4770      	bx	lr

0800b2da <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b2da:	b580      	push	{r7, lr}
 800b2dc:	b084      	sub	sp, #16
 800b2de:	af00      	add	r7, sp, #0
 800b2e0:	6078      	str	r0, [r7, #4]
 800b2e2:	460b      	mov	r3, r1
 800b2e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b2f4:	78fa      	ldrb	r2, [r7, #3]
 800b2f6:	4611      	mov	r1, r2
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	f7f9 fd4b 	bl	8004d94 <HAL_PCD_SetAddress>
 800b2fe:	4603      	mov	r3, r0
 800b300:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b302:	7bfb      	ldrb	r3, [r7, #15]
 800b304:	4618      	mov	r0, r3
 800b306:	f000 f881 	bl	800b40c <USBD_Get_USB_Status>
 800b30a:	4603      	mov	r3, r0
 800b30c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b30e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3710      	adds	r7, #16
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b086      	sub	sp, #24
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	607a      	str	r2, [r7, #4]
 800b322:	461a      	mov	r2, r3
 800b324:	460b      	mov	r3, r1
 800b326:	72fb      	strb	r3, [r7, #11]
 800b328:	4613      	mov	r3, r2
 800b32a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b32c:	2300      	movs	r3, #0
 800b32e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b330:	2300      	movs	r3, #0
 800b332:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b33a:	893b      	ldrh	r3, [r7, #8]
 800b33c:	7af9      	ldrb	r1, [r7, #11]
 800b33e:	687a      	ldr	r2, [r7, #4]
 800b340:	f7f9 fe39 	bl	8004fb6 <HAL_PCD_EP_Transmit>
 800b344:	4603      	mov	r3, r0
 800b346:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b348:	7dfb      	ldrb	r3, [r7, #23]
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 f85e 	bl	800b40c <USBD_Get_USB_Status>
 800b350:	4603      	mov	r3, r0
 800b352:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b354:	7dbb      	ldrb	r3, [r7, #22]
}
 800b356:	4618      	mov	r0, r3
 800b358:	3718      	adds	r7, #24
 800b35a:	46bd      	mov	sp, r7
 800b35c:	bd80      	pop	{r7, pc}

0800b35e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800b35e:	b580      	push	{r7, lr}
 800b360:	b086      	sub	sp, #24
 800b362:	af00      	add	r7, sp, #0
 800b364:	60f8      	str	r0, [r7, #12]
 800b366:	607a      	str	r2, [r7, #4]
 800b368:	461a      	mov	r2, r3
 800b36a:	460b      	mov	r3, r1
 800b36c:	72fb      	strb	r3, [r7, #11]
 800b36e:	4613      	mov	r3, r2
 800b370:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b372:	2300      	movs	r3, #0
 800b374:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b376:	2300      	movs	r3, #0
 800b378:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	@ 0x2c0
 800b380:	893b      	ldrh	r3, [r7, #8]
 800b382:	7af9      	ldrb	r1, [r7, #11]
 800b384:	687a      	ldr	r2, [r7, #4]
 800b386:	f7f9 fdce 	bl	8004f26 <HAL_PCD_EP_Receive>
 800b38a:	4603      	mov	r3, r0
 800b38c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b38e:	7dfb      	ldrb	r3, [r7, #23]
 800b390:	4618      	mov	r0, r3
 800b392:	f000 f83b 	bl	800b40c <USBD_Get_USB_Status>
 800b396:	4603      	mov	r3, r0
 800b398:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b39a:	7dbb      	ldrb	r3, [r7, #22]
}
 800b39c:	4618      	mov	r0, r3
 800b39e:	3718      	adds	r7, #24
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	bd80      	pop	{r7, pc}

0800b3a4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	460b      	mov	r3, r1
 800b3ae:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 800b3b6:	78fa      	ldrb	r2, [r7, #3]
 800b3b8:	4611      	mov	r1, r2
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7f9 fde4 	bl	8004f88 <HAL_PCD_EP_GetRxCount>
 800b3c0:	4603      	mov	r3, r0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}
	...

0800b3cc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b3d4:	4b02      	ldr	r3, [pc, #8]	@ (800b3e0 <USBD_static_malloc+0x14>)
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	370c      	adds	r7, #12
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bc80      	pop	{r7}
 800b3de:	4770      	bx	lr
 800b3e0:	2000171c 	.word	0x2000171c

0800b3e4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b083      	sub	sp, #12
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]

}
 800b3ec:	bf00      	nop
 800b3ee:	370c      	adds	r7, #12
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bc80      	pop	{r7}
 800b3f4:	4770      	bx	lr

0800b3f6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b3f6:	b480      	push	{r7}
 800b3f8:	b083      	sub	sp, #12
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
 800b3fe:	460b      	mov	r3, r1
 800b400:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800b402:	bf00      	nop
 800b404:	370c      	adds	r7, #12
 800b406:	46bd      	mov	sp, r7
 800b408:	bc80      	pop	{r7}
 800b40a:	4770      	bx	lr

0800b40c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b40c:	b480      	push	{r7}
 800b40e:	b085      	sub	sp, #20
 800b410:	af00      	add	r7, sp, #0
 800b412:	4603      	mov	r3, r0
 800b414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b416:	2300      	movs	r3, #0
 800b418:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b41a:	79fb      	ldrb	r3, [r7, #7]
 800b41c:	2b03      	cmp	r3, #3
 800b41e:	d817      	bhi.n	800b450 <USBD_Get_USB_Status+0x44>
 800b420:	a201      	add	r2, pc, #4	@ (adr r2, 800b428 <USBD_Get_USB_Status+0x1c>)
 800b422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b426:	bf00      	nop
 800b428:	0800b439 	.word	0x0800b439
 800b42c:	0800b43f 	.word	0x0800b43f
 800b430:	0800b445 	.word	0x0800b445
 800b434:	0800b44b 	.word	0x0800b44b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b438:	2300      	movs	r3, #0
 800b43a:	73fb      	strb	r3, [r7, #15]
    break;
 800b43c:	e00b      	b.n	800b456 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b43e:	2302      	movs	r3, #2
 800b440:	73fb      	strb	r3, [r7, #15]
    break;
 800b442:	e008      	b.n	800b456 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b444:	2301      	movs	r3, #1
 800b446:	73fb      	strb	r3, [r7, #15]
    break;
 800b448:	e005      	b.n	800b456 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b44a:	2302      	movs	r3, #2
 800b44c:	73fb      	strb	r3, [r7, #15]
    break;
 800b44e:	e002      	b.n	800b456 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b450:	2302      	movs	r3, #2
 800b452:	73fb      	strb	r3, [r7, #15]
    break;
 800b454:	bf00      	nop
  }
  return usb_status;
 800b456:	7bfb      	ldrb	r3, [r7, #15]
}
 800b458:	4618      	mov	r0, r3
 800b45a:	3714      	adds	r7, #20
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bc80      	pop	{r7}
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop

0800b464 <siprintf>:
 800b464:	b40e      	push	{r1, r2, r3}
 800b466:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b46a:	b500      	push	{lr}
 800b46c:	b09c      	sub	sp, #112	@ 0x70
 800b46e:	ab1d      	add	r3, sp, #116	@ 0x74
 800b470:	9002      	str	r0, [sp, #8]
 800b472:	9006      	str	r0, [sp, #24]
 800b474:	9107      	str	r1, [sp, #28]
 800b476:	9104      	str	r1, [sp, #16]
 800b478:	4808      	ldr	r0, [pc, #32]	@ (800b49c <siprintf+0x38>)
 800b47a:	4909      	ldr	r1, [pc, #36]	@ (800b4a0 <siprintf+0x3c>)
 800b47c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b480:	9105      	str	r1, [sp, #20]
 800b482:	6800      	ldr	r0, [r0, #0]
 800b484:	a902      	add	r1, sp, #8
 800b486:	9301      	str	r3, [sp, #4]
 800b488:	f000 f9a8 	bl	800b7dc <_svfiprintf_r>
 800b48c:	2200      	movs	r2, #0
 800b48e:	9b02      	ldr	r3, [sp, #8]
 800b490:	701a      	strb	r2, [r3, #0]
 800b492:	b01c      	add	sp, #112	@ 0x70
 800b494:	f85d eb04 	ldr.w	lr, [sp], #4
 800b498:	b003      	add	sp, #12
 800b49a:	4770      	bx	lr
 800b49c:	20000194 	.word	0x20000194
 800b4a0:	ffff0208 	.word	0xffff0208

0800b4a4 <memset>:
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	4402      	add	r2, r0
 800b4a8:	4293      	cmp	r3, r2
 800b4aa:	d100      	bne.n	800b4ae <memset+0xa>
 800b4ac:	4770      	bx	lr
 800b4ae:	f803 1b01 	strb.w	r1, [r3], #1
 800b4b2:	e7f9      	b.n	800b4a8 <memset+0x4>

0800b4b4 <strstr>:
 800b4b4:	780a      	ldrb	r2, [r1, #0]
 800b4b6:	b570      	push	{r4, r5, r6, lr}
 800b4b8:	b96a      	cbnz	r2, 800b4d6 <strstr+0x22>
 800b4ba:	bd70      	pop	{r4, r5, r6, pc}
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d109      	bne.n	800b4d4 <strstr+0x20>
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	4605      	mov	r5, r0
 800b4c4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d0f6      	beq.n	800b4ba <strstr+0x6>
 800b4cc:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800b4d0:	429e      	cmp	r6, r3
 800b4d2:	d0f7      	beq.n	800b4c4 <strstr+0x10>
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	7803      	ldrb	r3, [r0, #0]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d1ef      	bne.n	800b4bc <strstr+0x8>
 800b4dc:	4618      	mov	r0, r3
 800b4de:	e7ec      	b.n	800b4ba <strstr+0x6>

0800b4e0 <__errno>:
 800b4e0:	4b01      	ldr	r3, [pc, #4]	@ (800b4e8 <__errno+0x8>)
 800b4e2:	6818      	ldr	r0, [r3, #0]
 800b4e4:	4770      	bx	lr
 800b4e6:	bf00      	nop
 800b4e8:	20000194 	.word	0x20000194

0800b4ec <__libc_init_array>:
 800b4ec:	b570      	push	{r4, r5, r6, lr}
 800b4ee:	2600      	movs	r6, #0
 800b4f0:	4d0c      	ldr	r5, [pc, #48]	@ (800b524 <__libc_init_array+0x38>)
 800b4f2:	4c0d      	ldr	r4, [pc, #52]	@ (800b528 <__libc_init_array+0x3c>)
 800b4f4:	1b64      	subs	r4, r4, r5
 800b4f6:	10a4      	asrs	r4, r4, #2
 800b4f8:	42a6      	cmp	r6, r4
 800b4fa:	d109      	bne.n	800b510 <__libc_init_array+0x24>
 800b4fc:	f000 fc78 	bl	800bdf0 <_init>
 800b500:	2600      	movs	r6, #0
 800b502:	4d0a      	ldr	r5, [pc, #40]	@ (800b52c <__libc_init_array+0x40>)
 800b504:	4c0a      	ldr	r4, [pc, #40]	@ (800b530 <__libc_init_array+0x44>)
 800b506:	1b64      	subs	r4, r4, r5
 800b508:	10a4      	asrs	r4, r4, #2
 800b50a:	42a6      	cmp	r6, r4
 800b50c:	d105      	bne.n	800b51a <__libc_init_array+0x2e>
 800b50e:	bd70      	pop	{r4, r5, r6, pc}
 800b510:	f855 3b04 	ldr.w	r3, [r5], #4
 800b514:	4798      	blx	r3
 800b516:	3601      	adds	r6, #1
 800b518:	e7ee      	b.n	800b4f8 <__libc_init_array+0xc>
 800b51a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b51e:	4798      	blx	r3
 800b520:	3601      	adds	r6, #1
 800b522:	e7f2      	b.n	800b50a <__libc_init_array+0x1e>
 800b524:	0800e8a0 	.word	0x0800e8a0
 800b528:	0800e8a0 	.word	0x0800e8a0
 800b52c:	0800e8a0 	.word	0x0800e8a0
 800b530:	0800e8a4 	.word	0x0800e8a4

0800b534 <__retarget_lock_acquire_recursive>:
 800b534:	4770      	bx	lr

0800b536 <__retarget_lock_release_recursive>:
 800b536:	4770      	bx	lr

0800b538 <_free_r>:
 800b538:	b538      	push	{r3, r4, r5, lr}
 800b53a:	4605      	mov	r5, r0
 800b53c:	2900      	cmp	r1, #0
 800b53e:	d040      	beq.n	800b5c2 <_free_r+0x8a>
 800b540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b544:	1f0c      	subs	r4, r1, #4
 800b546:	2b00      	cmp	r3, #0
 800b548:	bfb8      	it	lt
 800b54a:	18e4      	addlt	r4, r4, r3
 800b54c:	f000 f8de 	bl	800b70c <__malloc_lock>
 800b550:	4a1c      	ldr	r2, [pc, #112]	@ (800b5c4 <_free_r+0x8c>)
 800b552:	6813      	ldr	r3, [r2, #0]
 800b554:	b933      	cbnz	r3, 800b564 <_free_r+0x2c>
 800b556:	6063      	str	r3, [r4, #4]
 800b558:	6014      	str	r4, [r2, #0]
 800b55a:	4628      	mov	r0, r5
 800b55c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b560:	f000 b8da 	b.w	800b718 <__malloc_unlock>
 800b564:	42a3      	cmp	r3, r4
 800b566:	d908      	bls.n	800b57a <_free_r+0x42>
 800b568:	6820      	ldr	r0, [r4, #0]
 800b56a:	1821      	adds	r1, r4, r0
 800b56c:	428b      	cmp	r3, r1
 800b56e:	bf01      	itttt	eq
 800b570:	6819      	ldreq	r1, [r3, #0]
 800b572:	685b      	ldreq	r3, [r3, #4]
 800b574:	1809      	addeq	r1, r1, r0
 800b576:	6021      	streq	r1, [r4, #0]
 800b578:	e7ed      	b.n	800b556 <_free_r+0x1e>
 800b57a:	461a      	mov	r2, r3
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	b10b      	cbz	r3, 800b584 <_free_r+0x4c>
 800b580:	42a3      	cmp	r3, r4
 800b582:	d9fa      	bls.n	800b57a <_free_r+0x42>
 800b584:	6811      	ldr	r1, [r2, #0]
 800b586:	1850      	adds	r0, r2, r1
 800b588:	42a0      	cmp	r0, r4
 800b58a:	d10b      	bne.n	800b5a4 <_free_r+0x6c>
 800b58c:	6820      	ldr	r0, [r4, #0]
 800b58e:	4401      	add	r1, r0
 800b590:	1850      	adds	r0, r2, r1
 800b592:	4283      	cmp	r3, r0
 800b594:	6011      	str	r1, [r2, #0]
 800b596:	d1e0      	bne.n	800b55a <_free_r+0x22>
 800b598:	6818      	ldr	r0, [r3, #0]
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	4408      	add	r0, r1
 800b59e:	6010      	str	r0, [r2, #0]
 800b5a0:	6053      	str	r3, [r2, #4]
 800b5a2:	e7da      	b.n	800b55a <_free_r+0x22>
 800b5a4:	d902      	bls.n	800b5ac <_free_r+0x74>
 800b5a6:	230c      	movs	r3, #12
 800b5a8:	602b      	str	r3, [r5, #0]
 800b5aa:	e7d6      	b.n	800b55a <_free_r+0x22>
 800b5ac:	6820      	ldr	r0, [r4, #0]
 800b5ae:	1821      	adds	r1, r4, r0
 800b5b0:	428b      	cmp	r3, r1
 800b5b2:	bf01      	itttt	eq
 800b5b4:	6819      	ldreq	r1, [r3, #0]
 800b5b6:	685b      	ldreq	r3, [r3, #4]
 800b5b8:	1809      	addeq	r1, r1, r0
 800b5ba:	6021      	streq	r1, [r4, #0]
 800b5bc:	6063      	str	r3, [r4, #4]
 800b5be:	6054      	str	r4, [r2, #4]
 800b5c0:	e7cb      	b.n	800b55a <_free_r+0x22>
 800b5c2:	bd38      	pop	{r3, r4, r5, pc}
 800b5c4:	20001a80 	.word	0x20001a80

0800b5c8 <sbrk_aligned>:
 800b5c8:	b570      	push	{r4, r5, r6, lr}
 800b5ca:	4e0f      	ldr	r6, [pc, #60]	@ (800b608 <sbrk_aligned+0x40>)
 800b5cc:	460c      	mov	r4, r1
 800b5ce:	6831      	ldr	r1, [r6, #0]
 800b5d0:	4605      	mov	r5, r0
 800b5d2:	b911      	cbnz	r1, 800b5da <sbrk_aligned+0x12>
 800b5d4:	f000 fbaa 	bl	800bd2c <_sbrk_r>
 800b5d8:	6030      	str	r0, [r6, #0]
 800b5da:	4621      	mov	r1, r4
 800b5dc:	4628      	mov	r0, r5
 800b5de:	f000 fba5 	bl	800bd2c <_sbrk_r>
 800b5e2:	1c43      	adds	r3, r0, #1
 800b5e4:	d103      	bne.n	800b5ee <sbrk_aligned+0x26>
 800b5e6:	f04f 34ff 	mov.w	r4, #4294967295
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	bd70      	pop	{r4, r5, r6, pc}
 800b5ee:	1cc4      	adds	r4, r0, #3
 800b5f0:	f024 0403 	bic.w	r4, r4, #3
 800b5f4:	42a0      	cmp	r0, r4
 800b5f6:	d0f8      	beq.n	800b5ea <sbrk_aligned+0x22>
 800b5f8:	1a21      	subs	r1, r4, r0
 800b5fa:	4628      	mov	r0, r5
 800b5fc:	f000 fb96 	bl	800bd2c <_sbrk_r>
 800b600:	3001      	adds	r0, #1
 800b602:	d1f2      	bne.n	800b5ea <sbrk_aligned+0x22>
 800b604:	e7ef      	b.n	800b5e6 <sbrk_aligned+0x1e>
 800b606:	bf00      	nop
 800b608:	20001a7c 	.word	0x20001a7c

0800b60c <_malloc_r>:
 800b60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b610:	1ccd      	adds	r5, r1, #3
 800b612:	f025 0503 	bic.w	r5, r5, #3
 800b616:	3508      	adds	r5, #8
 800b618:	2d0c      	cmp	r5, #12
 800b61a:	bf38      	it	cc
 800b61c:	250c      	movcc	r5, #12
 800b61e:	2d00      	cmp	r5, #0
 800b620:	4606      	mov	r6, r0
 800b622:	db01      	blt.n	800b628 <_malloc_r+0x1c>
 800b624:	42a9      	cmp	r1, r5
 800b626:	d904      	bls.n	800b632 <_malloc_r+0x26>
 800b628:	230c      	movs	r3, #12
 800b62a:	6033      	str	r3, [r6, #0]
 800b62c:	2000      	movs	r0, #0
 800b62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b632:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b708 <_malloc_r+0xfc>
 800b636:	f000 f869 	bl	800b70c <__malloc_lock>
 800b63a:	f8d8 3000 	ldr.w	r3, [r8]
 800b63e:	461c      	mov	r4, r3
 800b640:	bb44      	cbnz	r4, 800b694 <_malloc_r+0x88>
 800b642:	4629      	mov	r1, r5
 800b644:	4630      	mov	r0, r6
 800b646:	f7ff ffbf 	bl	800b5c8 <sbrk_aligned>
 800b64a:	1c43      	adds	r3, r0, #1
 800b64c:	4604      	mov	r4, r0
 800b64e:	d158      	bne.n	800b702 <_malloc_r+0xf6>
 800b650:	f8d8 4000 	ldr.w	r4, [r8]
 800b654:	4627      	mov	r7, r4
 800b656:	2f00      	cmp	r7, #0
 800b658:	d143      	bne.n	800b6e2 <_malloc_r+0xd6>
 800b65a:	2c00      	cmp	r4, #0
 800b65c:	d04b      	beq.n	800b6f6 <_malloc_r+0xea>
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	4639      	mov	r1, r7
 800b662:	4630      	mov	r0, r6
 800b664:	eb04 0903 	add.w	r9, r4, r3
 800b668:	f000 fb60 	bl	800bd2c <_sbrk_r>
 800b66c:	4581      	cmp	r9, r0
 800b66e:	d142      	bne.n	800b6f6 <_malloc_r+0xea>
 800b670:	6821      	ldr	r1, [r4, #0]
 800b672:	4630      	mov	r0, r6
 800b674:	1a6d      	subs	r5, r5, r1
 800b676:	4629      	mov	r1, r5
 800b678:	f7ff ffa6 	bl	800b5c8 <sbrk_aligned>
 800b67c:	3001      	adds	r0, #1
 800b67e:	d03a      	beq.n	800b6f6 <_malloc_r+0xea>
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	442b      	add	r3, r5
 800b684:	6023      	str	r3, [r4, #0]
 800b686:	f8d8 3000 	ldr.w	r3, [r8]
 800b68a:	685a      	ldr	r2, [r3, #4]
 800b68c:	bb62      	cbnz	r2, 800b6e8 <_malloc_r+0xdc>
 800b68e:	f8c8 7000 	str.w	r7, [r8]
 800b692:	e00f      	b.n	800b6b4 <_malloc_r+0xa8>
 800b694:	6822      	ldr	r2, [r4, #0]
 800b696:	1b52      	subs	r2, r2, r5
 800b698:	d420      	bmi.n	800b6dc <_malloc_r+0xd0>
 800b69a:	2a0b      	cmp	r2, #11
 800b69c:	d917      	bls.n	800b6ce <_malloc_r+0xc2>
 800b69e:	1961      	adds	r1, r4, r5
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	6025      	str	r5, [r4, #0]
 800b6a4:	bf18      	it	ne
 800b6a6:	6059      	strne	r1, [r3, #4]
 800b6a8:	6863      	ldr	r3, [r4, #4]
 800b6aa:	bf08      	it	eq
 800b6ac:	f8c8 1000 	streq.w	r1, [r8]
 800b6b0:	5162      	str	r2, [r4, r5]
 800b6b2:	604b      	str	r3, [r1, #4]
 800b6b4:	4630      	mov	r0, r6
 800b6b6:	f000 f82f 	bl	800b718 <__malloc_unlock>
 800b6ba:	f104 000b 	add.w	r0, r4, #11
 800b6be:	1d23      	adds	r3, r4, #4
 800b6c0:	f020 0007 	bic.w	r0, r0, #7
 800b6c4:	1ac2      	subs	r2, r0, r3
 800b6c6:	bf1c      	itt	ne
 800b6c8:	1a1b      	subne	r3, r3, r0
 800b6ca:	50a3      	strne	r3, [r4, r2]
 800b6cc:	e7af      	b.n	800b62e <_malloc_r+0x22>
 800b6ce:	6862      	ldr	r2, [r4, #4]
 800b6d0:	42a3      	cmp	r3, r4
 800b6d2:	bf0c      	ite	eq
 800b6d4:	f8c8 2000 	streq.w	r2, [r8]
 800b6d8:	605a      	strne	r2, [r3, #4]
 800b6da:	e7eb      	b.n	800b6b4 <_malloc_r+0xa8>
 800b6dc:	4623      	mov	r3, r4
 800b6de:	6864      	ldr	r4, [r4, #4]
 800b6e0:	e7ae      	b.n	800b640 <_malloc_r+0x34>
 800b6e2:	463c      	mov	r4, r7
 800b6e4:	687f      	ldr	r7, [r7, #4]
 800b6e6:	e7b6      	b.n	800b656 <_malloc_r+0x4a>
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	d1fb      	bne.n	800b6e8 <_malloc_r+0xdc>
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	6053      	str	r3, [r2, #4]
 800b6f4:	e7de      	b.n	800b6b4 <_malloc_r+0xa8>
 800b6f6:	230c      	movs	r3, #12
 800b6f8:	4630      	mov	r0, r6
 800b6fa:	6033      	str	r3, [r6, #0]
 800b6fc:	f000 f80c 	bl	800b718 <__malloc_unlock>
 800b700:	e794      	b.n	800b62c <_malloc_r+0x20>
 800b702:	6005      	str	r5, [r0, #0]
 800b704:	e7d6      	b.n	800b6b4 <_malloc_r+0xa8>
 800b706:	bf00      	nop
 800b708:	20001a80 	.word	0x20001a80

0800b70c <__malloc_lock>:
 800b70c:	4801      	ldr	r0, [pc, #4]	@ (800b714 <__malloc_lock+0x8>)
 800b70e:	f7ff bf11 	b.w	800b534 <__retarget_lock_acquire_recursive>
 800b712:	bf00      	nop
 800b714:	20001a78 	.word	0x20001a78

0800b718 <__malloc_unlock>:
 800b718:	4801      	ldr	r0, [pc, #4]	@ (800b720 <__malloc_unlock+0x8>)
 800b71a:	f7ff bf0c 	b.w	800b536 <__retarget_lock_release_recursive>
 800b71e:	bf00      	nop
 800b720:	20001a78 	.word	0x20001a78

0800b724 <__ssputs_r>:
 800b724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b728:	461f      	mov	r7, r3
 800b72a:	688e      	ldr	r6, [r1, #8]
 800b72c:	4682      	mov	sl, r0
 800b72e:	42be      	cmp	r6, r7
 800b730:	460c      	mov	r4, r1
 800b732:	4690      	mov	r8, r2
 800b734:	680b      	ldr	r3, [r1, #0]
 800b736:	d82d      	bhi.n	800b794 <__ssputs_r+0x70>
 800b738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b73c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b740:	d026      	beq.n	800b790 <__ssputs_r+0x6c>
 800b742:	6965      	ldr	r5, [r4, #20]
 800b744:	6909      	ldr	r1, [r1, #16]
 800b746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b74a:	eba3 0901 	sub.w	r9, r3, r1
 800b74e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b752:	1c7b      	adds	r3, r7, #1
 800b754:	444b      	add	r3, r9
 800b756:	106d      	asrs	r5, r5, #1
 800b758:	429d      	cmp	r5, r3
 800b75a:	bf38      	it	cc
 800b75c:	461d      	movcc	r5, r3
 800b75e:	0553      	lsls	r3, r2, #21
 800b760:	d527      	bpl.n	800b7b2 <__ssputs_r+0x8e>
 800b762:	4629      	mov	r1, r5
 800b764:	f7ff ff52 	bl	800b60c <_malloc_r>
 800b768:	4606      	mov	r6, r0
 800b76a:	b360      	cbz	r0, 800b7c6 <__ssputs_r+0xa2>
 800b76c:	464a      	mov	r2, r9
 800b76e:	6921      	ldr	r1, [r4, #16]
 800b770:	f000 fafa 	bl	800bd68 <memcpy>
 800b774:	89a3      	ldrh	r3, [r4, #12]
 800b776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b77e:	81a3      	strh	r3, [r4, #12]
 800b780:	6126      	str	r6, [r4, #16]
 800b782:	444e      	add	r6, r9
 800b784:	6026      	str	r6, [r4, #0]
 800b786:	463e      	mov	r6, r7
 800b788:	6165      	str	r5, [r4, #20]
 800b78a:	eba5 0509 	sub.w	r5, r5, r9
 800b78e:	60a5      	str	r5, [r4, #8]
 800b790:	42be      	cmp	r6, r7
 800b792:	d900      	bls.n	800b796 <__ssputs_r+0x72>
 800b794:	463e      	mov	r6, r7
 800b796:	4632      	mov	r2, r6
 800b798:	4641      	mov	r1, r8
 800b79a:	6820      	ldr	r0, [r4, #0]
 800b79c:	f000 faac 	bl	800bcf8 <memmove>
 800b7a0:	2000      	movs	r0, #0
 800b7a2:	68a3      	ldr	r3, [r4, #8]
 800b7a4:	1b9b      	subs	r3, r3, r6
 800b7a6:	60a3      	str	r3, [r4, #8]
 800b7a8:	6823      	ldr	r3, [r4, #0]
 800b7aa:	4433      	add	r3, r6
 800b7ac:	6023      	str	r3, [r4, #0]
 800b7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7b2:	462a      	mov	r2, r5
 800b7b4:	f000 fae6 	bl	800bd84 <_realloc_r>
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	2800      	cmp	r0, #0
 800b7bc:	d1e0      	bne.n	800b780 <__ssputs_r+0x5c>
 800b7be:	4650      	mov	r0, sl
 800b7c0:	6921      	ldr	r1, [r4, #16]
 800b7c2:	f7ff feb9 	bl	800b538 <_free_r>
 800b7c6:	230c      	movs	r3, #12
 800b7c8:	f8ca 3000 	str.w	r3, [sl]
 800b7cc:	89a3      	ldrh	r3, [r4, #12]
 800b7ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b7d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b7d6:	81a3      	strh	r3, [r4, #12]
 800b7d8:	e7e9      	b.n	800b7ae <__ssputs_r+0x8a>
	...

0800b7dc <_svfiprintf_r>:
 800b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7e0:	4698      	mov	r8, r3
 800b7e2:	898b      	ldrh	r3, [r1, #12]
 800b7e4:	4607      	mov	r7, r0
 800b7e6:	061b      	lsls	r3, r3, #24
 800b7e8:	460d      	mov	r5, r1
 800b7ea:	4614      	mov	r4, r2
 800b7ec:	b09d      	sub	sp, #116	@ 0x74
 800b7ee:	d510      	bpl.n	800b812 <_svfiprintf_r+0x36>
 800b7f0:	690b      	ldr	r3, [r1, #16]
 800b7f2:	b973      	cbnz	r3, 800b812 <_svfiprintf_r+0x36>
 800b7f4:	2140      	movs	r1, #64	@ 0x40
 800b7f6:	f7ff ff09 	bl	800b60c <_malloc_r>
 800b7fa:	6028      	str	r0, [r5, #0]
 800b7fc:	6128      	str	r0, [r5, #16]
 800b7fe:	b930      	cbnz	r0, 800b80e <_svfiprintf_r+0x32>
 800b800:	230c      	movs	r3, #12
 800b802:	603b      	str	r3, [r7, #0]
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	b01d      	add	sp, #116	@ 0x74
 800b80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b80e:	2340      	movs	r3, #64	@ 0x40
 800b810:	616b      	str	r3, [r5, #20]
 800b812:	2300      	movs	r3, #0
 800b814:	9309      	str	r3, [sp, #36]	@ 0x24
 800b816:	2320      	movs	r3, #32
 800b818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b81c:	2330      	movs	r3, #48	@ 0x30
 800b81e:	f04f 0901 	mov.w	r9, #1
 800b822:	f8cd 800c 	str.w	r8, [sp, #12]
 800b826:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800b9c0 <_svfiprintf_r+0x1e4>
 800b82a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b82e:	4623      	mov	r3, r4
 800b830:	469a      	mov	sl, r3
 800b832:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b836:	b10a      	cbz	r2, 800b83c <_svfiprintf_r+0x60>
 800b838:	2a25      	cmp	r2, #37	@ 0x25
 800b83a:	d1f9      	bne.n	800b830 <_svfiprintf_r+0x54>
 800b83c:	ebba 0b04 	subs.w	fp, sl, r4
 800b840:	d00b      	beq.n	800b85a <_svfiprintf_r+0x7e>
 800b842:	465b      	mov	r3, fp
 800b844:	4622      	mov	r2, r4
 800b846:	4629      	mov	r1, r5
 800b848:	4638      	mov	r0, r7
 800b84a:	f7ff ff6b 	bl	800b724 <__ssputs_r>
 800b84e:	3001      	adds	r0, #1
 800b850:	f000 80a7 	beq.w	800b9a2 <_svfiprintf_r+0x1c6>
 800b854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b856:	445a      	add	r2, fp
 800b858:	9209      	str	r2, [sp, #36]	@ 0x24
 800b85a:	f89a 3000 	ldrb.w	r3, [sl]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	f000 809f 	beq.w	800b9a2 <_svfiprintf_r+0x1c6>
 800b864:	2300      	movs	r3, #0
 800b866:	f04f 32ff 	mov.w	r2, #4294967295
 800b86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b86e:	f10a 0a01 	add.w	sl, sl, #1
 800b872:	9304      	str	r3, [sp, #16]
 800b874:	9307      	str	r3, [sp, #28]
 800b876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b87a:	931a      	str	r3, [sp, #104]	@ 0x68
 800b87c:	4654      	mov	r4, sl
 800b87e:	2205      	movs	r2, #5
 800b880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b884:	484e      	ldr	r0, [pc, #312]	@ (800b9c0 <_svfiprintf_r+0x1e4>)
 800b886:	f000 fa61 	bl	800bd4c <memchr>
 800b88a:	9a04      	ldr	r2, [sp, #16]
 800b88c:	b9d8      	cbnz	r0, 800b8c6 <_svfiprintf_r+0xea>
 800b88e:	06d0      	lsls	r0, r2, #27
 800b890:	bf44      	itt	mi
 800b892:	2320      	movmi	r3, #32
 800b894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b898:	0711      	lsls	r1, r2, #28
 800b89a:	bf44      	itt	mi
 800b89c:	232b      	movmi	r3, #43	@ 0x2b
 800b89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8a8:	d015      	beq.n	800b8d6 <_svfiprintf_r+0xfa>
 800b8aa:	4654      	mov	r4, sl
 800b8ac:	2000      	movs	r0, #0
 800b8ae:	f04f 0c0a 	mov.w	ip, #10
 800b8b2:	9a07      	ldr	r2, [sp, #28]
 800b8b4:	4621      	mov	r1, r4
 800b8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ba:	3b30      	subs	r3, #48	@ 0x30
 800b8bc:	2b09      	cmp	r3, #9
 800b8be:	d94b      	bls.n	800b958 <_svfiprintf_r+0x17c>
 800b8c0:	b1b0      	cbz	r0, 800b8f0 <_svfiprintf_r+0x114>
 800b8c2:	9207      	str	r2, [sp, #28]
 800b8c4:	e014      	b.n	800b8f0 <_svfiprintf_r+0x114>
 800b8c6:	eba0 0308 	sub.w	r3, r0, r8
 800b8ca:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ce:	4313      	orrs	r3, r2
 800b8d0:	46a2      	mov	sl, r4
 800b8d2:	9304      	str	r3, [sp, #16]
 800b8d4:	e7d2      	b.n	800b87c <_svfiprintf_r+0xa0>
 800b8d6:	9b03      	ldr	r3, [sp, #12]
 800b8d8:	1d19      	adds	r1, r3, #4
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	9103      	str	r1, [sp, #12]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	bfbb      	ittet	lt
 800b8e2:	425b      	neglt	r3, r3
 800b8e4:	f042 0202 	orrlt.w	r2, r2, #2
 800b8e8:	9307      	strge	r3, [sp, #28]
 800b8ea:	9307      	strlt	r3, [sp, #28]
 800b8ec:	bfb8      	it	lt
 800b8ee:	9204      	strlt	r2, [sp, #16]
 800b8f0:	7823      	ldrb	r3, [r4, #0]
 800b8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800b8f4:	d10a      	bne.n	800b90c <_svfiprintf_r+0x130>
 800b8f6:	7863      	ldrb	r3, [r4, #1]
 800b8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8fa:	d132      	bne.n	800b962 <_svfiprintf_r+0x186>
 800b8fc:	9b03      	ldr	r3, [sp, #12]
 800b8fe:	3402      	adds	r4, #2
 800b900:	1d1a      	adds	r2, r3, #4
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	9203      	str	r2, [sp, #12]
 800b906:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b90a:	9305      	str	r3, [sp, #20]
 800b90c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800b9c4 <_svfiprintf_r+0x1e8>
 800b910:	2203      	movs	r2, #3
 800b912:	4650      	mov	r0, sl
 800b914:	7821      	ldrb	r1, [r4, #0]
 800b916:	f000 fa19 	bl	800bd4c <memchr>
 800b91a:	b138      	cbz	r0, 800b92c <_svfiprintf_r+0x150>
 800b91c:	2240      	movs	r2, #64	@ 0x40
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	eba0 000a 	sub.w	r0, r0, sl
 800b924:	4082      	lsls	r2, r0
 800b926:	4313      	orrs	r3, r2
 800b928:	3401      	adds	r4, #1
 800b92a:	9304      	str	r3, [sp, #16]
 800b92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b930:	2206      	movs	r2, #6
 800b932:	4825      	ldr	r0, [pc, #148]	@ (800b9c8 <_svfiprintf_r+0x1ec>)
 800b934:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b938:	f000 fa08 	bl	800bd4c <memchr>
 800b93c:	2800      	cmp	r0, #0
 800b93e:	d036      	beq.n	800b9ae <_svfiprintf_r+0x1d2>
 800b940:	4b22      	ldr	r3, [pc, #136]	@ (800b9cc <_svfiprintf_r+0x1f0>)
 800b942:	bb1b      	cbnz	r3, 800b98c <_svfiprintf_r+0x1b0>
 800b944:	9b03      	ldr	r3, [sp, #12]
 800b946:	3307      	adds	r3, #7
 800b948:	f023 0307 	bic.w	r3, r3, #7
 800b94c:	3308      	adds	r3, #8
 800b94e:	9303      	str	r3, [sp, #12]
 800b950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b952:	4433      	add	r3, r6
 800b954:	9309      	str	r3, [sp, #36]	@ 0x24
 800b956:	e76a      	b.n	800b82e <_svfiprintf_r+0x52>
 800b958:	460c      	mov	r4, r1
 800b95a:	2001      	movs	r0, #1
 800b95c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b960:	e7a8      	b.n	800b8b4 <_svfiprintf_r+0xd8>
 800b962:	2300      	movs	r3, #0
 800b964:	f04f 0c0a 	mov.w	ip, #10
 800b968:	4619      	mov	r1, r3
 800b96a:	3401      	adds	r4, #1
 800b96c:	9305      	str	r3, [sp, #20]
 800b96e:	4620      	mov	r0, r4
 800b970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b974:	3a30      	subs	r2, #48	@ 0x30
 800b976:	2a09      	cmp	r2, #9
 800b978:	d903      	bls.n	800b982 <_svfiprintf_r+0x1a6>
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d0c6      	beq.n	800b90c <_svfiprintf_r+0x130>
 800b97e:	9105      	str	r1, [sp, #20]
 800b980:	e7c4      	b.n	800b90c <_svfiprintf_r+0x130>
 800b982:	4604      	mov	r4, r0
 800b984:	2301      	movs	r3, #1
 800b986:	fb0c 2101 	mla	r1, ip, r1, r2
 800b98a:	e7f0      	b.n	800b96e <_svfiprintf_r+0x192>
 800b98c:	ab03      	add	r3, sp, #12
 800b98e:	9300      	str	r3, [sp, #0]
 800b990:	462a      	mov	r2, r5
 800b992:	4638      	mov	r0, r7
 800b994:	4b0e      	ldr	r3, [pc, #56]	@ (800b9d0 <_svfiprintf_r+0x1f4>)
 800b996:	a904      	add	r1, sp, #16
 800b998:	f3af 8000 	nop.w
 800b99c:	1c42      	adds	r2, r0, #1
 800b99e:	4606      	mov	r6, r0
 800b9a0:	d1d6      	bne.n	800b950 <_svfiprintf_r+0x174>
 800b9a2:	89ab      	ldrh	r3, [r5, #12]
 800b9a4:	065b      	lsls	r3, r3, #25
 800b9a6:	f53f af2d 	bmi.w	800b804 <_svfiprintf_r+0x28>
 800b9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9ac:	e72c      	b.n	800b808 <_svfiprintf_r+0x2c>
 800b9ae:	ab03      	add	r3, sp, #12
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	4638      	mov	r0, r7
 800b9b6:	4b06      	ldr	r3, [pc, #24]	@ (800b9d0 <_svfiprintf_r+0x1f4>)
 800b9b8:	a904      	add	r1, sp, #16
 800b9ba:	f000 f87d 	bl	800bab8 <_printf_i>
 800b9be:	e7ed      	b.n	800b99c <_svfiprintf_r+0x1c0>
 800b9c0:	0800e86a 	.word	0x0800e86a
 800b9c4:	0800e870 	.word	0x0800e870
 800b9c8:	0800e874 	.word	0x0800e874
 800b9cc:	00000000 	.word	0x00000000
 800b9d0:	0800b725 	.word	0x0800b725

0800b9d4 <_printf_common>:
 800b9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9d8:	4616      	mov	r6, r2
 800b9da:	4698      	mov	r8, r3
 800b9dc:	688a      	ldr	r2, [r1, #8]
 800b9de:	690b      	ldr	r3, [r1, #16]
 800b9e0:	4607      	mov	r7, r0
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	bfb8      	it	lt
 800b9e6:	4613      	movlt	r3, r2
 800b9e8:	6033      	str	r3, [r6, #0]
 800b9ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b9ee:	460c      	mov	r4, r1
 800b9f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9f4:	b10a      	cbz	r2, 800b9fa <_printf_common+0x26>
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	6033      	str	r3, [r6, #0]
 800b9fa:	6823      	ldr	r3, [r4, #0]
 800b9fc:	0699      	lsls	r1, r3, #26
 800b9fe:	bf42      	ittt	mi
 800ba00:	6833      	ldrmi	r3, [r6, #0]
 800ba02:	3302      	addmi	r3, #2
 800ba04:	6033      	strmi	r3, [r6, #0]
 800ba06:	6825      	ldr	r5, [r4, #0]
 800ba08:	f015 0506 	ands.w	r5, r5, #6
 800ba0c:	d106      	bne.n	800ba1c <_printf_common+0x48>
 800ba0e:	f104 0a19 	add.w	sl, r4, #25
 800ba12:	68e3      	ldr	r3, [r4, #12]
 800ba14:	6832      	ldr	r2, [r6, #0]
 800ba16:	1a9b      	subs	r3, r3, r2
 800ba18:	42ab      	cmp	r3, r5
 800ba1a:	dc2b      	bgt.n	800ba74 <_printf_common+0xa0>
 800ba1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba20:	6822      	ldr	r2, [r4, #0]
 800ba22:	3b00      	subs	r3, #0
 800ba24:	bf18      	it	ne
 800ba26:	2301      	movne	r3, #1
 800ba28:	0692      	lsls	r2, r2, #26
 800ba2a:	d430      	bmi.n	800ba8e <_printf_common+0xba>
 800ba2c:	4641      	mov	r1, r8
 800ba2e:	4638      	mov	r0, r7
 800ba30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba34:	47c8      	blx	r9
 800ba36:	3001      	adds	r0, #1
 800ba38:	d023      	beq.n	800ba82 <_printf_common+0xae>
 800ba3a:	6823      	ldr	r3, [r4, #0]
 800ba3c:	6922      	ldr	r2, [r4, #16]
 800ba3e:	f003 0306 	and.w	r3, r3, #6
 800ba42:	2b04      	cmp	r3, #4
 800ba44:	bf14      	ite	ne
 800ba46:	2500      	movne	r5, #0
 800ba48:	6833      	ldreq	r3, [r6, #0]
 800ba4a:	f04f 0600 	mov.w	r6, #0
 800ba4e:	bf08      	it	eq
 800ba50:	68e5      	ldreq	r5, [r4, #12]
 800ba52:	f104 041a 	add.w	r4, r4, #26
 800ba56:	bf08      	it	eq
 800ba58:	1aed      	subeq	r5, r5, r3
 800ba5a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ba5e:	bf08      	it	eq
 800ba60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba64:	4293      	cmp	r3, r2
 800ba66:	bfc4      	itt	gt
 800ba68:	1a9b      	subgt	r3, r3, r2
 800ba6a:	18ed      	addgt	r5, r5, r3
 800ba6c:	42b5      	cmp	r5, r6
 800ba6e:	d11a      	bne.n	800baa6 <_printf_common+0xd2>
 800ba70:	2000      	movs	r0, #0
 800ba72:	e008      	b.n	800ba86 <_printf_common+0xb2>
 800ba74:	2301      	movs	r3, #1
 800ba76:	4652      	mov	r2, sl
 800ba78:	4641      	mov	r1, r8
 800ba7a:	4638      	mov	r0, r7
 800ba7c:	47c8      	blx	r9
 800ba7e:	3001      	adds	r0, #1
 800ba80:	d103      	bne.n	800ba8a <_printf_common+0xb6>
 800ba82:	f04f 30ff 	mov.w	r0, #4294967295
 800ba86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba8a:	3501      	adds	r5, #1
 800ba8c:	e7c1      	b.n	800ba12 <_printf_common+0x3e>
 800ba8e:	2030      	movs	r0, #48	@ 0x30
 800ba90:	18e1      	adds	r1, r4, r3
 800ba92:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ba96:	1c5a      	adds	r2, r3, #1
 800ba98:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ba9c:	4422      	add	r2, r4
 800ba9e:	3302      	adds	r3, #2
 800baa0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800baa4:	e7c2      	b.n	800ba2c <_printf_common+0x58>
 800baa6:	2301      	movs	r3, #1
 800baa8:	4622      	mov	r2, r4
 800baaa:	4641      	mov	r1, r8
 800baac:	4638      	mov	r0, r7
 800baae:	47c8      	blx	r9
 800bab0:	3001      	adds	r0, #1
 800bab2:	d0e6      	beq.n	800ba82 <_printf_common+0xae>
 800bab4:	3601      	adds	r6, #1
 800bab6:	e7d9      	b.n	800ba6c <_printf_common+0x98>

0800bab8 <_printf_i>:
 800bab8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800babc:	7e0f      	ldrb	r7, [r1, #24]
 800babe:	4691      	mov	r9, r2
 800bac0:	2f78      	cmp	r7, #120	@ 0x78
 800bac2:	4680      	mov	r8, r0
 800bac4:	460c      	mov	r4, r1
 800bac6:	469a      	mov	sl, r3
 800bac8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800baca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bace:	d807      	bhi.n	800bae0 <_printf_i+0x28>
 800bad0:	2f62      	cmp	r7, #98	@ 0x62
 800bad2:	d80a      	bhi.n	800baea <_printf_i+0x32>
 800bad4:	2f00      	cmp	r7, #0
 800bad6:	f000 80d3 	beq.w	800bc80 <_printf_i+0x1c8>
 800bada:	2f58      	cmp	r7, #88	@ 0x58
 800badc:	f000 80ba 	beq.w	800bc54 <_printf_i+0x19c>
 800bae0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bae4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bae8:	e03a      	b.n	800bb60 <_printf_i+0xa8>
 800baea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800baee:	2b15      	cmp	r3, #21
 800baf0:	d8f6      	bhi.n	800bae0 <_printf_i+0x28>
 800baf2:	a101      	add	r1, pc, #4	@ (adr r1, 800baf8 <_printf_i+0x40>)
 800baf4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800baf8:	0800bb51 	.word	0x0800bb51
 800bafc:	0800bb65 	.word	0x0800bb65
 800bb00:	0800bae1 	.word	0x0800bae1
 800bb04:	0800bae1 	.word	0x0800bae1
 800bb08:	0800bae1 	.word	0x0800bae1
 800bb0c:	0800bae1 	.word	0x0800bae1
 800bb10:	0800bb65 	.word	0x0800bb65
 800bb14:	0800bae1 	.word	0x0800bae1
 800bb18:	0800bae1 	.word	0x0800bae1
 800bb1c:	0800bae1 	.word	0x0800bae1
 800bb20:	0800bae1 	.word	0x0800bae1
 800bb24:	0800bc67 	.word	0x0800bc67
 800bb28:	0800bb8f 	.word	0x0800bb8f
 800bb2c:	0800bc21 	.word	0x0800bc21
 800bb30:	0800bae1 	.word	0x0800bae1
 800bb34:	0800bae1 	.word	0x0800bae1
 800bb38:	0800bc89 	.word	0x0800bc89
 800bb3c:	0800bae1 	.word	0x0800bae1
 800bb40:	0800bb8f 	.word	0x0800bb8f
 800bb44:	0800bae1 	.word	0x0800bae1
 800bb48:	0800bae1 	.word	0x0800bae1
 800bb4c:	0800bc29 	.word	0x0800bc29
 800bb50:	6833      	ldr	r3, [r6, #0]
 800bb52:	1d1a      	adds	r2, r3, #4
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	6032      	str	r2, [r6, #0]
 800bb58:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb5c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb60:	2301      	movs	r3, #1
 800bb62:	e09e      	b.n	800bca2 <_printf_i+0x1ea>
 800bb64:	6833      	ldr	r3, [r6, #0]
 800bb66:	6820      	ldr	r0, [r4, #0]
 800bb68:	1d19      	adds	r1, r3, #4
 800bb6a:	6031      	str	r1, [r6, #0]
 800bb6c:	0606      	lsls	r6, r0, #24
 800bb6e:	d501      	bpl.n	800bb74 <_printf_i+0xbc>
 800bb70:	681d      	ldr	r5, [r3, #0]
 800bb72:	e003      	b.n	800bb7c <_printf_i+0xc4>
 800bb74:	0645      	lsls	r5, r0, #25
 800bb76:	d5fb      	bpl.n	800bb70 <_printf_i+0xb8>
 800bb78:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bb7c:	2d00      	cmp	r5, #0
 800bb7e:	da03      	bge.n	800bb88 <_printf_i+0xd0>
 800bb80:	232d      	movs	r3, #45	@ 0x2d
 800bb82:	426d      	negs	r5, r5
 800bb84:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bb88:	230a      	movs	r3, #10
 800bb8a:	4859      	ldr	r0, [pc, #356]	@ (800bcf0 <_printf_i+0x238>)
 800bb8c:	e011      	b.n	800bbb2 <_printf_i+0xfa>
 800bb8e:	6821      	ldr	r1, [r4, #0]
 800bb90:	6833      	ldr	r3, [r6, #0]
 800bb92:	0608      	lsls	r0, r1, #24
 800bb94:	f853 5b04 	ldr.w	r5, [r3], #4
 800bb98:	d402      	bmi.n	800bba0 <_printf_i+0xe8>
 800bb9a:	0649      	lsls	r1, r1, #25
 800bb9c:	bf48      	it	mi
 800bb9e:	b2ad      	uxthmi	r5, r5
 800bba0:	2f6f      	cmp	r7, #111	@ 0x6f
 800bba2:	6033      	str	r3, [r6, #0]
 800bba4:	bf14      	ite	ne
 800bba6:	230a      	movne	r3, #10
 800bba8:	2308      	moveq	r3, #8
 800bbaa:	4851      	ldr	r0, [pc, #324]	@ (800bcf0 <_printf_i+0x238>)
 800bbac:	2100      	movs	r1, #0
 800bbae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbb2:	6866      	ldr	r6, [r4, #4]
 800bbb4:	2e00      	cmp	r6, #0
 800bbb6:	bfa8      	it	ge
 800bbb8:	6821      	ldrge	r1, [r4, #0]
 800bbba:	60a6      	str	r6, [r4, #8]
 800bbbc:	bfa4      	itt	ge
 800bbbe:	f021 0104 	bicge.w	r1, r1, #4
 800bbc2:	6021      	strge	r1, [r4, #0]
 800bbc4:	b90d      	cbnz	r5, 800bbca <_printf_i+0x112>
 800bbc6:	2e00      	cmp	r6, #0
 800bbc8:	d04b      	beq.n	800bc62 <_printf_i+0x1aa>
 800bbca:	4616      	mov	r6, r2
 800bbcc:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbd0:	fb03 5711 	mls	r7, r3, r1, r5
 800bbd4:	5dc7      	ldrb	r7, [r0, r7]
 800bbd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbda:	462f      	mov	r7, r5
 800bbdc:	42bb      	cmp	r3, r7
 800bbde:	460d      	mov	r5, r1
 800bbe0:	d9f4      	bls.n	800bbcc <_printf_i+0x114>
 800bbe2:	2b08      	cmp	r3, #8
 800bbe4:	d10b      	bne.n	800bbfe <_printf_i+0x146>
 800bbe6:	6823      	ldr	r3, [r4, #0]
 800bbe8:	07df      	lsls	r7, r3, #31
 800bbea:	d508      	bpl.n	800bbfe <_printf_i+0x146>
 800bbec:	6923      	ldr	r3, [r4, #16]
 800bbee:	6861      	ldr	r1, [r4, #4]
 800bbf0:	4299      	cmp	r1, r3
 800bbf2:	bfde      	ittt	le
 800bbf4:	2330      	movle	r3, #48	@ 0x30
 800bbf6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bbfa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bbfe:	1b92      	subs	r2, r2, r6
 800bc00:	6122      	str	r2, [r4, #16]
 800bc02:	464b      	mov	r3, r9
 800bc04:	4621      	mov	r1, r4
 800bc06:	4640      	mov	r0, r8
 800bc08:	f8cd a000 	str.w	sl, [sp]
 800bc0c:	aa03      	add	r2, sp, #12
 800bc0e:	f7ff fee1 	bl	800b9d4 <_printf_common>
 800bc12:	3001      	adds	r0, #1
 800bc14:	d14a      	bne.n	800bcac <_printf_i+0x1f4>
 800bc16:	f04f 30ff 	mov.w	r0, #4294967295
 800bc1a:	b004      	add	sp, #16
 800bc1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc20:	6823      	ldr	r3, [r4, #0]
 800bc22:	f043 0320 	orr.w	r3, r3, #32
 800bc26:	6023      	str	r3, [r4, #0]
 800bc28:	2778      	movs	r7, #120	@ 0x78
 800bc2a:	4832      	ldr	r0, [pc, #200]	@ (800bcf4 <_printf_i+0x23c>)
 800bc2c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc30:	6823      	ldr	r3, [r4, #0]
 800bc32:	6831      	ldr	r1, [r6, #0]
 800bc34:	061f      	lsls	r7, r3, #24
 800bc36:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc3a:	d402      	bmi.n	800bc42 <_printf_i+0x18a>
 800bc3c:	065f      	lsls	r7, r3, #25
 800bc3e:	bf48      	it	mi
 800bc40:	b2ad      	uxthmi	r5, r5
 800bc42:	6031      	str	r1, [r6, #0]
 800bc44:	07d9      	lsls	r1, r3, #31
 800bc46:	bf44      	itt	mi
 800bc48:	f043 0320 	orrmi.w	r3, r3, #32
 800bc4c:	6023      	strmi	r3, [r4, #0]
 800bc4e:	b11d      	cbz	r5, 800bc58 <_printf_i+0x1a0>
 800bc50:	2310      	movs	r3, #16
 800bc52:	e7ab      	b.n	800bbac <_printf_i+0xf4>
 800bc54:	4826      	ldr	r0, [pc, #152]	@ (800bcf0 <_printf_i+0x238>)
 800bc56:	e7e9      	b.n	800bc2c <_printf_i+0x174>
 800bc58:	6823      	ldr	r3, [r4, #0]
 800bc5a:	f023 0320 	bic.w	r3, r3, #32
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	e7f6      	b.n	800bc50 <_printf_i+0x198>
 800bc62:	4616      	mov	r6, r2
 800bc64:	e7bd      	b.n	800bbe2 <_printf_i+0x12a>
 800bc66:	6833      	ldr	r3, [r6, #0]
 800bc68:	6825      	ldr	r5, [r4, #0]
 800bc6a:	1d18      	adds	r0, r3, #4
 800bc6c:	6961      	ldr	r1, [r4, #20]
 800bc6e:	6030      	str	r0, [r6, #0]
 800bc70:	062e      	lsls	r6, r5, #24
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	d501      	bpl.n	800bc7a <_printf_i+0x1c2>
 800bc76:	6019      	str	r1, [r3, #0]
 800bc78:	e002      	b.n	800bc80 <_printf_i+0x1c8>
 800bc7a:	0668      	lsls	r0, r5, #25
 800bc7c:	d5fb      	bpl.n	800bc76 <_printf_i+0x1be>
 800bc7e:	8019      	strh	r1, [r3, #0]
 800bc80:	2300      	movs	r3, #0
 800bc82:	4616      	mov	r6, r2
 800bc84:	6123      	str	r3, [r4, #16]
 800bc86:	e7bc      	b.n	800bc02 <_printf_i+0x14a>
 800bc88:	6833      	ldr	r3, [r6, #0]
 800bc8a:	2100      	movs	r1, #0
 800bc8c:	1d1a      	adds	r2, r3, #4
 800bc8e:	6032      	str	r2, [r6, #0]
 800bc90:	681e      	ldr	r6, [r3, #0]
 800bc92:	6862      	ldr	r2, [r4, #4]
 800bc94:	4630      	mov	r0, r6
 800bc96:	f000 f859 	bl	800bd4c <memchr>
 800bc9a:	b108      	cbz	r0, 800bca0 <_printf_i+0x1e8>
 800bc9c:	1b80      	subs	r0, r0, r6
 800bc9e:	6060      	str	r0, [r4, #4]
 800bca0:	6863      	ldr	r3, [r4, #4]
 800bca2:	6123      	str	r3, [r4, #16]
 800bca4:	2300      	movs	r3, #0
 800bca6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcaa:	e7aa      	b.n	800bc02 <_printf_i+0x14a>
 800bcac:	4632      	mov	r2, r6
 800bcae:	4649      	mov	r1, r9
 800bcb0:	4640      	mov	r0, r8
 800bcb2:	6923      	ldr	r3, [r4, #16]
 800bcb4:	47d0      	blx	sl
 800bcb6:	3001      	adds	r0, #1
 800bcb8:	d0ad      	beq.n	800bc16 <_printf_i+0x15e>
 800bcba:	6823      	ldr	r3, [r4, #0]
 800bcbc:	079b      	lsls	r3, r3, #30
 800bcbe:	d413      	bmi.n	800bce8 <_printf_i+0x230>
 800bcc0:	68e0      	ldr	r0, [r4, #12]
 800bcc2:	9b03      	ldr	r3, [sp, #12]
 800bcc4:	4298      	cmp	r0, r3
 800bcc6:	bfb8      	it	lt
 800bcc8:	4618      	movlt	r0, r3
 800bcca:	e7a6      	b.n	800bc1a <_printf_i+0x162>
 800bccc:	2301      	movs	r3, #1
 800bcce:	4632      	mov	r2, r6
 800bcd0:	4649      	mov	r1, r9
 800bcd2:	4640      	mov	r0, r8
 800bcd4:	47d0      	blx	sl
 800bcd6:	3001      	adds	r0, #1
 800bcd8:	d09d      	beq.n	800bc16 <_printf_i+0x15e>
 800bcda:	3501      	adds	r5, #1
 800bcdc:	68e3      	ldr	r3, [r4, #12]
 800bcde:	9903      	ldr	r1, [sp, #12]
 800bce0:	1a5b      	subs	r3, r3, r1
 800bce2:	42ab      	cmp	r3, r5
 800bce4:	dcf2      	bgt.n	800bccc <_printf_i+0x214>
 800bce6:	e7eb      	b.n	800bcc0 <_printf_i+0x208>
 800bce8:	2500      	movs	r5, #0
 800bcea:	f104 0619 	add.w	r6, r4, #25
 800bcee:	e7f5      	b.n	800bcdc <_printf_i+0x224>
 800bcf0:	0800e87b 	.word	0x0800e87b
 800bcf4:	0800e88c 	.word	0x0800e88c

0800bcf8 <memmove>:
 800bcf8:	4288      	cmp	r0, r1
 800bcfa:	b510      	push	{r4, lr}
 800bcfc:	eb01 0402 	add.w	r4, r1, r2
 800bd00:	d902      	bls.n	800bd08 <memmove+0x10>
 800bd02:	4284      	cmp	r4, r0
 800bd04:	4623      	mov	r3, r4
 800bd06:	d807      	bhi.n	800bd18 <memmove+0x20>
 800bd08:	1e43      	subs	r3, r0, #1
 800bd0a:	42a1      	cmp	r1, r4
 800bd0c:	d008      	beq.n	800bd20 <memmove+0x28>
 800bd0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd16:	e7f8      	b.n	800bd0a <memmove+0x12>
 800bd18:	4601      	mov	r1, r0
 800bd1a:	4402      	add	r2, r0
 800bd1c:	428a      	cmp	r2, r1
 800bd1e:	d100      	bne.n	800bd22 <memmove+0x2a>
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd2a:	e7f7      	b.n	800bd1c <memmove+0x24>

0800bd2c <_sbrk_r>:
 800bd2c:	b538      	push	{r3, r4, r5, lr}
 800bd2e:	2300      	movs	r3, #0
 800bd30:	4d05      	ldr	r5, [pc, #20]	@ (800bd48 <_sbrk_r+0x1c>)
 800bd32:	4604      	mov	r4, r0
 800bd34:	4608      	mov	r0, r1
 800bd36:	602b      	str	r3, [r5, #0]
 800bd38:	f7f6 feb8 	bl	8002aac <_sbrk>
 800bd3c:	1c43      	adds	r3, r0, #1
 800bd3e:	d102      	bne.n	800bd46 <_sbrk_r+0x1a>
 800bd40:	682b      	ldr	r3, [r5, #0]
 800bd42:	b103      	cbz	r3, 800bd46 <_sbrk_r+0x1a>
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	bd38      	pop	{r3, r4, r5, pc}
 800bd48:	20001a74 	.word	0x20001a74

0800bd4c <memchr>:
 800bd4c:	4603      	mov	r3, r0
 800bd4e:	b510      	push	{r4, lr}
 800bd50:	b2c9      	uxtb	r1, r1
 800bd52:	4402      	add	r2, r0
 800bd54:	4293      	cmp	r3, r2
 800bd56:	4618      	mov	r0, r3
 800bd58:	d101      	bne.n	800bd5e <memchr+0x12>
 800bd5a:	2000      	movs	r0, #0
 800bd5c:	e003      	b.n	800bd66 <memchr+0x1a>
 800bd5e:	7804      	ldrb	r4, [r0, #0]
 800bd60:	3301      	adds	r3, #1
 800bd62:	428c      	cmp	r4, r1
 800bd64:	d1f6      	bne.n	800bd54 <memchr+0x8>
 800bd66:	bd10      	pop	{r4, pc}

0800bd68 <memcpy>:
 800bd68:	440a      	add	r2, r1
 800bd6a:	4291      	cmp	r1, r2
 800bd6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd70:	d100      	bne.n	800bd74 <memcpy+0xc>
 800bd72:	4770      	bx	lr
 800bd74:	b510      	push	{r4, lr}
 800bd76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd7a:	4291      	cmp	r1, r2
 800bd7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd80:	d1f9      	bne.n	800bd76 <memcpy+0xe>
 800bd82:	bd10      	pop	{r4, pc}

0800bd84 <_realloc_r>:
 800bd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd88:	4680      	mov	r8, r0
 800bd8a:	4615      	mov	r5, r2
 800bd8c:	460c      	mov	r4, r1
 800bd8e:	b921      	cbnz	r1, 800bd9a <_realloc_r+0x16>
 800bd90:	4611      	mov	r1, r2
 800bd92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd96:	f7ff bc39 	b.w	800b60c <_malloc_r>
 800bd9a:	b92a      	cbnz	r2, 800bda8 <_realloc_r+0x24>
 800bd9c:	f7ff fbcc 	bl	800b538 <_free_r>
 800bda0:	2400      	movs	r4, #0
 800bda2:	4620      	mov	r0, r4
 800bda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bda8:	f000 f81a 	bl	800bde0 <_malloc_usable_size_r>
 800bdac:	4285      	cmp	r5, r0
 800bdae:	4606      	mov	r6, r0
 800bdb0:	d802      	bhi.n	800bdb8 <_realloc_r+0x34>
 800bdb2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800bdb6:	d8f4      	bhi.n	800bda2 <_realloc_r+0x1e>
 800bdb8:	4629      	mov	r1, r5
 800bdba:	4640      	mov	r0, r8
 800bdbc:	f7ff fc26 	bl	800b60c <_malloc_r>
 800bdc0:	4607      	mov	r7, r0
 800bdc2:	2800      	cmp	r0, #0
 800bdc4:	d0ec      	beq.n	800bda0 <_realloc_r+0x1c>
 800bdc6:	42b5      	cmp	r5, r6
 800bdc8:	462a      	mov	r2, r5
 800bdca:	4621      	mov	r1, r4
 800bdcc:	bf28      	it	cs
 800bdce:	4632      	movcs	r2, r6
 800bdd0:	f7ff ffca 	bl	800bd68 <memcpy>
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	4640      	mov	r0, r8
 800bdd8:	f7ff fbae 	bl	800b538 <_free_r>
 800bddc:	463c      	mov	r4, r7
 800bdde:	e7e0      	b.n	800bda2 <_realloc_r+0x1e>

0800bde0 <_malloc_usable_size_r>:
 800bde0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bde4:	1f18      	subs	r0, r3, #4
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	bfbc      	itt	lt
 800bdea:	580b      	ldrlt	r3, [r1, r0]
 800bdec:	18c0      	addlt	r0, r0, r3
 800bdee:	4770      	bx	lr

0800bdf0 <_init>:
 800bdf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf2:	bf00      	nop
 800bdf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdf6:	bc08      	pop	{r3}
 800bdf8:	469e      	mov	lr, r3
 800bdfa:	4770      	bx	lr

0800bdfc <_fini>:
 800bdfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdfe:	bf00      	nop
 800be00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be02:	bc08      	pop	{r3}
 800be04:	469e      	mov	lr, r3
 800be06:	4770      	bx	lr
