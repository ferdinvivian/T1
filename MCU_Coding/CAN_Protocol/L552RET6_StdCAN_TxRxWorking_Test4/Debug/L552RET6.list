
L552RET6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc4  080001f8  080001f8  000011f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08009dc0  08009dc0  0000adc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a288  0800a288  0000c1dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800a288  0800a288  0000b288  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a290  0800a290  0000c1dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a290  0800a290  0000b290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a294  0800a294  0000b294  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001dc  20000000  0800a298  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  200001dc  0800a474  0000c1dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  0800a474  0000c49c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0000c1dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001121b  00000000  00000000  0000c212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024a4  00000000  00000000  0001d42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e10  00000000  00000000  0001f8d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abd  00000000  00000000  000206e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029338  00000000  00000000  000211a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001041e  00000000  00000000  0004a4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010540a  00000000  00000000  0005a8fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015fd05  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f90  00000000  00000000  0015fd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  00164cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001dc 	.word	0x200001dc
 8000214:	00000000 	.word	0x00000000
 8000218:	08009da4 	.word	0x08009da4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001e0 	.word	0x200001e0
 8000234:	08009da4 	.word	0x08009da4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_drsub>:
 8000248:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800024c:	e002      	b.n	8000254 <__adddf3>
 800024e:	bf00      	nop

08000250 <__aeabi_dsub>:
 8000250:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000254 <__adddf3>:
 8000254:	b530      	push	{r4, r5, lr}
 8000256:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800025a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800025e:	ea94 0f05 	teq	r4, r5
 8000262:	bf08      	it	eq
 8000264:	ea90 0f02 	teqeq	r0, r2
 8000268:	bf1f      	itttt	ne
 800026a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800026e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000272:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000276:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800027a:	f000 80e2 	beq.w	8000442 <__adddf3+0x1ee>
 800027e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000282:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000286:	bfb8      	it	lt
 8000288:	426d      	neglt	r5, r5
 800028a:	dd0c      	ble.n	80002a6 <__adddf3+0x52>
 800028c:	442c      	add	r4, r5
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	ea82 0000 	eor.w	r0, r2, r0
 800029a:	ea83 0101 	eor.w	r1, r3, r1
 800029e:	ea80 0202 	eor.w	r2, r0, r2
 80002a2:	ea81 0303 	eor.w	r3, r1, r3
 80002a6:	2d36      	cmp	r5, #54	@ 0x36
 80002a8:	bf88      	it	hi
 80002aa:	bd30      	pophi	{r4, r5, pc}
 80002ac:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002b0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002b4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002bc:	d002      	beq.n	80002c4 <__adddf3+0x70>
 80002be:	4240      	negs	r0, r0
 80002c0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002c4:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002cc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002d0:	d002      	beq.n	80002d8 <__adddf3+0x84>
 80002d2:	4252      	negs	r2, r2
 80002d4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d8:	ea94 0f05 	teq	r4, r5
 80002dc:	f000 80a7 	beq.w	800042e <__adddf3+0x1da>
 80002e0:	f1a4 0401 	sub.w	r4, r4, #1
 80002e4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e8:	db0d      	blt.n	8000306 <__adddf3+0xb2>
 80002ea:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ee:	fa22 f205 	lsr.w	r2, r2, r5
 80002f2:	1880      	adds	r0, r0, r2
 80002f4:	f141 0100 	adc.w	r1, r1, #0
 80002f8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002fc:	1880      	adds	r0, r0, r2
 80002fe:	fa43 f305 	asr.w	r3, r3, r5
 8000302:	4159      	adcs	r1, r3
 8000304:	e00e      	b.n	8000324 <__adddf3+0xd0>
 8000306:	f1a5 0520 	sub.w	r5, r5, #32
 800030a:	f10e 0e20 	add.w	lr, lr, #32
 800030e:	2a01      	cmp	r2, #1
 8000310:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000314:	bf28      	it	cs
 8000316:	f04c 0c02 	orrcs.w	ip, ip, #2
 800031a:	fa43 f305 	asr.w	r3, r3, r5
 800031e:	18c0      	adds	r0, r0, r3
 8000320:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000324:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000328:	d507      	bpl.n	800033a <__adddf3+0xe6>
 800032a:	f04f 0e00 	mov.w	lr, #0
 800032e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000332:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000336:	eb6e 0101 	sbc.w	r1, lr, r1
 800033a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800033e:	d31b      	bcc.n	8000378 <__adddf3+0x124>
 8000340:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000344:	d30c      	bcc.n	8000360 <__adddf3+0x10c>
 8000346:	0849      	lsrs	r1, r1, #1
 8000348:	ea5f 0030 	movs.w	r0, r0, rrx
 800034c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000350:	f104 0401 	add.w	r4, r4, #1
 8000354:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000358:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800035c:	f080 809a 	bcs.w	8000494 <__adddf3+0x240>
 8000360:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	ea41 0105 	orr.w	r1, r1, r5
 8000376:	bd30      	pop	{r4, r5, pc}
 8000378:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800037c:	4140      	adcs	r0, r0
 800037e:	eb41 0101 	adc.w	r1, r1, r1
 8000382:	3c01      	subs	r4, #1
 8000384:	bf28      	it	cs
 8000386:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800038a:	d2e9      	bcs.n	8000360 <__adddf3+0x10c>
 800038c:	f091 0f00 	teq	r1, #0
 8000390:	bf04      	itt	eq
 8000392:	4601      	moveq	r1, r0
 8000394:	2000      	moveq	r0, #0
 8000396:	fab1 f381 	clz	r3, r1
 800039a:	bf08      	it	eq
 800039c:	3320      	addeq	r3, #32
 800039e:	f1a3 030b 	sub.w	r3, r3, #11
 80003a2:	f1b3 0220 	subs.w	r2, r3, #32
 80003a6:	da0c      	bge.n	80003c2 <__adddf3+0x16e>
 80003a8:	320c      	adds	r2, #12
 80003aa:	dd08      	ble.n	80003be <__adddf3+0x16a>
 80003ac:	f102 0c14 	add.w	ip, r2, #20
 80003b0:	f1c2 020c 	rsb	r2, r2, #12
 80003b4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b8:	fa21 f102 	lsr.w	r1, r1, r2
 80003bc:	e00c      	b.n	80003d8 <__adddf3+0x184>
 80003be:	f102 0214 	add.w	r2, r2, #20
 80003c2:	bfd8      	it	le
 80003c4:	f1c2 0c20 	rsble	ip, r2, #32
 80003c8:	fa01 f102 	lsl.w	r1, r1, r2
 80003cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003d0:	bfdc      	itt	le
 80003d2:	ea41 010c 	orrle.w	r1, r1, ip
 80003d6:	4090      	lslle	r0, r2
 80003d8:	1ae4      	subs	r4, r4, r3
 80003da:	bfa2      	ittt	ge
 80003dc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003e0:	4329      	orrge	r1, r5
 80003e2:	bd30      	popge	{r4, r5, pc}
 80003e4:	ea6f 0404 	mvn.w	r4, r4
 80003e8:	3c1f      	subs	r4, #31
 80003ea:	da1c      	bge.n	8000426 <__adddf3+0x1d2>
 80003ec:	340c      	adds	r4, #12
 80003ee:	dc0e      	bgt.n	800040e <__adddf3+0x1ba>
 80003f0:	f104 0414 	add.w	r4, r4, #20
 80003f4:	f1c4 0220 	rsb	r2, r4, #32
 80003f8:	fa20 f004 	lsr.w	r0, r0, r4
 80003fc:	fa01 f302 	lsl.w	r3, r1, r2
 8000400:	ea40 0003 	orr.w	r0, r0, r3
 8000404:	fa21 f304 	lsr.w	r3, r1, r4
 8000408:	ea45 0103 	orr.w	r1, r5, r3
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f1c4 040c 	rsb	r4, r4, #12
 8000412:	f1c4 0220 	rsb	r2, r4, #32
 8000416:	fa20 f002 	lsr.w	r0, r0, r2
 800041a:	fa01 f304 	lsl.w	r3, r1, r4
 800041e:	ea40 0003 	orr.w	r0, r0, r3
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	fa21 f004 	lsr.w	r0, r1, r4
 800042a:	4629      	mov	r1, r5
 800042c:	bd30      	pop	{r4, r5, pc}
 800042e:	f094 0f00 	teq	r4, #0
 8000432:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000436:	bf06      	itte	eq
 8000438:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800043c:	3401      	addeq	r4, #1
 800043e:	3d01      	subne	r5, #1
 8000440:	e74e      	b.n	80002e0 <__adddf3+0x8c>
 8000442:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000446:	bf18      	it	ne
 8000448:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044c:	d029      	beq.n	80004a2 <__adddf3+0x24e>
 800044e:	ea94 0f05 	teq	r4, r5
 8000452:	bf08      	it	eq
 8000454:	ea90 0f02 	teqeq	r0, r2
 8000458:	d005      	beq.n	8000466 <__adddf3+0x212>
 800045a:	ea54 0c00 	orrs.w	ip, r4, r0
 800045e:	bf04      	itt	eq
 8000460:	4619      	moveq	r1, r3
 8000462:	4610      	moveq	r0, r2
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	ea91 0f03 	teq	r1, r3
 800046a:	bf1e      	ittt	ne
 800046c:	2100      	movne	r1, #0
 800046e:	2000      	movne	r0, #0
 8000470:	bd30      	popne	{r4, r5, pc}
 8000472:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000476:	d105      	bne.n	8000484 <__adddf3+0x230>
 8000478:	0040      	lsls	r0, r0, #1
 800047a:	4149      	adcs	r1, r1
 800047c:	bf28      	it	cs
 800047e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000482:	bd30      	pop	{r4, r5, pc}
 8000484:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000488:	bf3c      	itt	cc
 800048a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800048e:	bd30      	popcc	{r4, r5, pc}
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000494:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000498:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800049c:	f04f 0000 	mov.w	r0, #0
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004a6:	bf1a      	itte	ne
 80004a8:	4619      	movne	r1, r3
 80004aa:	4610      	movne	r0, r2
 80004ac:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004b0:	bf1c      	itt	ne
 80004b2:	460b      	movne	r3, r1
 80004b4:	4602      	movne	r2, r0
 80004b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004ba:	bf06      	itte	eq
 80004bc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004c0:	ea91 0f03 	teqeq	r1, r3
 80004c4:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	bf00      	nop

080004cc <__aeabi_ui2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004e0:	f04f 0500 	mov.w	r5, #0
 80004e4:	f04f 0100 	mov.w	r1, #0
 80004e8:	e750      	b.n	800038c <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_i2d>:
 80004ec:	f090 0f00 	teq	r0, #0
 80004f0:	bf04      	itt	eq
 80004f2:	2100      	moveq	r1, #0
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000500:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000504:	bf48      	it	mi
 8000506:	4240      	negmi	r0, r0
 8000508:	f04f 0100 	mov.w	r1, #0
 800050c:	e73e      	b.n	800038c <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_f2d>:
 8000510:	0042      	lsls	r2, r0, #1
 8000512:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000516:	ea4f 0131 	mov.w	r1, r1, rrx
 800051a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800051e:	bf1f      	itttt	ne
 8000520:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000524:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000528:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800052c:	4770      	bxne	lr
 800052e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000532:	bf08      	it	eq
 8000534:	4770      	bxeq	lr
 8000536:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800053a:	bf04      	itt	eq
 800053c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000540:	4770      	bxeq	lr
 8000542:	b530      	push	{r4, r5, lr}
 8000544:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000550:	e71c      	b.n	800038c <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_ul2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f04f 0500 	mov.w	r5, #0
 8000562:	e00a      	b.n	800057a <__aeabi_l2d+0x16>

08000564 <__aeabi_l2d>:
 8000564:	ea50 0201 	orrs.w	r2, r0, r1
 8000568:	bf08      	it	eq
 800056a:	4770      	bxeq	lr
 800056c:	b530      	push	{r4, r5, lr}
 800056e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000572:	d502      	bpl.n	800057a <__aeabi_l2d+0x16>
 8000574:	4240      	negs	r0, r0
 8000576:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800057a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800057e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000582:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000586:	f43f aed8 	beq.w	800033a <__adddf3+0xe6>
 800058a:	f04f 0203 	mov.w	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800059a:	bf18      	it	ne
 800059c:	3203      	addne	r2, #3
 800059e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005a2:	f1c2 0320 	rsb	r3, r2, #32
 80005a6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005aa:	fa20 f002 	lsr.w	r0, r0, r2
 80005ae:	fa01 fe03 	lsl.w	lr, r1, r3
 80005b2:	ea40 000e 	orr.w	r0, r0, lr
 80005b6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ba:	4414      	add	r4, r2
 80005bc:	e6bd      	b.n	800033a <__adddf3+0xe6>
 80005be:	bf00      	nop

080005c0 <__aeabi_dmul>:
 80005c0:	b570      	push	{r4, r5, r6, lr}
 80005c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ce:	bf1d      	ittte	ne
 80005d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005d4:	ea94 0f0c 	teqne	r4, ip
 80005d8:	ea95 0f0c 	teqne	r5, ip
 80005dc:	f000 f8de 	bleq	800079c <__aeabi_dmul+0x1dc>
 80005e0:	442c      	add	r4, r5
 80005e2:	ea81 0603 	eor.w	r6, r1, r3
 80005e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005f2:	bf18      	it	ne
 80005f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000600:	d038      	beq.n	8000674 <__aeabi_dmul+0xb4>
 8000602:	fba0 ce02 	umull	ip, lr, r0, r2
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800060e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000612:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000616:	f04f 0600 	mov.w	r6, #0
 800061a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800061e:	f09c 0f00 	teq	ip, #0
 8000622:	bf18      	it	ne
 8000624:	f04e 0e01 	orrne.w	lr, lr, #1
 8000628:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800062c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000630:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000634:	d204      	bcs.n	8000640 <__aeabi_dmul+0x80>
 8000636:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800063a:	416d      	adcs	r5, r5
 800063c:	eb46 0606 	adc.w	r6, r6, r6
 8000640:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000644:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000648:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800064c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000650:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000654:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000658:	bf88      	it	hi
 800065a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800065e:	d81e      	bhi.n	800069e <__aeabi_dmul+0xde>
 8000660:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000664:	bf08      	it	eq
 8000666:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800066a:	f150 0000 	adcs.w	r0, r0, #0
 800066e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000678:	ea46 0101 	orr.w	r1, r6, r1
 800067c:	ea40 0002 	orr.w	r0, r0, r2
 8000680:	ea81 0103 	eor.w	r1, r1, r3
 8000684:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000688:	bfc2      	ittt	gt
 800068a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800068e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000692:	bd70      	popgt	{r4, r5, r6, pc}
 8000694:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000698:	f04f 0e00 	mov.w	lr, #0
 800069c:	3c01      	subs	r4, #1
 800069e:	f300 80ab 	bgt.w	80007f8 <__aeabi_dmul+0x238>
 80006a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006a6:	bfde      	ittt	le
 80006a8:	2000      	movle	r0, #0
 80006aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006ae:	bd70      	pople	{r4, r5, r6, pc}
 80006b0:	f1c4 0400 	rsb	r4, r4, #0
 80006b4:	3c20      	subs	r4, #32
 80006b6:	da35      	bge.n	8000724 <__aeabi_dmul+0x164>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc1b      	bgt.n	80006f4 <__aeabi_dmul+0x134>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0520 	rsb	r5, r4, #32
 80006c4:	fa00 f305 	lsl.w	r3, r0, r5
 80006c8:	fa20 f004 	lsr.w	r0, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea40 0002 	orr.w	r0, r0, r2
 80006d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e0:	fa21 f604 	lsr.w	r6, r1, r4
 80006e4:	eb42 0106 	adc.w	r1, r2, r6
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 040c 	rsb	r4, r4, #12
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000700:	fa20 f005 	lsr.w	r0, r0, r5
 8000704:	fa01 f204 	lsl.w	r2, r1, r4
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000710:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000714:	f141 0100 	adc.w	r1, r1, #0
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 0520 	rsb	r5, r4, #32
 8000728:	fa00 f205 	lsl.w	r2, r0, r5
 800072c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000730:	fa20 f304 	lsr.w	r3, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea43 0302 	orr.w	r3, r3, r2
 800073c:	fa21 f004 	lsr.w	r0, r1, r4
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	fa21 f204 	lsr.w	r2, r1, r4
 8000748:	ea20 0002 	bic.w	r0, r0, r2
 800074c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f094 0f00 	teq	r4, #0
 8000760:	d10f      	bne.n	8000782 <__aeabi_dmul+0x1c2>
 8000762:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000766:	0040      	lsls	r0, r0, #1
 8000768:	eb41 0101 	adc.w	r1, r1, r1
 800076c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000770:	bf08      	it	eq
 8000772:	3c01      	subeq	r4, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1a6>
 8000776:	ea41 0106 	orr.w	r1, r1, r6
 800077a:	f095 0f00 	teq	r5, #0
 800077e:	bf18      	it	ne
 8000780:	4770      	bxne	lr
 8000782:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000786:	0052      	lsls	r2, r2, #1
 8000788:	eb43 0303 	adc.w	r3, r3, r3
 800078c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000790:	bf08      	it	eq
 8000792:	3d01      	subeq	r5, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1c6>
 8000796:	ea43 0306 	orr.w	r3, r3, r6
 800079a:	4770      	bx	lr
 800079c:	ea94 0f0c 	teq	r4, ip
 80007a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007a4:	bf18      	it	ne
 80007a6:	ea95 0f0c 	teqne	r5, ip
 80007aa:	d00c      	beq.n	80007c6 <__aeabi_dmul+0x206>
 80007ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b0:	bf18      	it	ne
 80007b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b6:	d1d1      	bne.n	800075c <__aeabi_dmul+0x19c>
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ca:	bf06      	itte	eq
 80007cc:	4610      	moveq	r0, r2
 80007ce:	4619      	moveq	r1, r3
 80007d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d4:	d019      	beq.n	800080a <__aeabi_dmul+0x24a>
 80007d6:	ea94 0f0c 	teq	r4, ip
 80007da:	d102      	bne.n	80007e2 <__aeabi_dmul+0x222>
 80007dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007e0:	d113      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007e2:	ea95 0f0c 	teq	r5, ip
 80007e6:	d105      	bne.n	80007f4 <__aeabi_dmul+0x234>
 80007e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ec:	bf1c      	itt	ne
 80007ee:	4610      	movne	r0, r2
 80007f0:	4619      	movne	r1, r3
 80007f2:	d10a      	bne.n	800080a <__aeabi_dmul+0x24a>
 80007f4:	ea81 0103 	eor.w	r1, r1, r3
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000800:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000804:	f04f 0000 	mov.w	r0, #0
 8000808:	bd70      	pop	{r4, r5, r6, pc}
 800080a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800080e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000812:	bd70      	pop	{r4, r5, r6, pc}

08000814 <__aeabi_ddiv>:
 8000814:	b570      	push	{r4, r5, r6, lr}
 8000816:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800081a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800081e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000822:	bf1d      	ittte	ne
 8000824:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000828:	ea94 0f0c 	teqne	r4, ip
 800082c:	ea95 0f0c 	teqne	r5, ip
 8000830:	f000 f8a7 	bleq	8000982 <__aeabi_ddiv+0x16e>
 8000834:	eba4 0405 	sub.w	r4, r4, r5
 8000838:	ea81 0e03 	eor.w	lr, r1, r3
 800083c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000840:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000844:	f000 8088 	beq.w	8000958 <__aeabi_ddiv+0x144>
 8000848:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800084c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000850:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000854:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000858:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800085c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000860:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000864:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000868:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800086c:	429d      	cmp	r5, r3
 800086e:	bf08      	it	eq
 8000870:	4296      	cmpeq	r6, r2
 8000872:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000876:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800087a:	d202      	bcs.n	8000882 <__aeabi_ddiv+0x6e>
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	1ab6      	subs	r6, r6, r2
 8000884:	eb65 0503 	sbc.w	r5, r5, r3
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000892:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008f0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008f4:	d018      	beq.n	8000928 <__aeabi_ddiv+0x114>
 80008f6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008fa:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008fe:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000902:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000906:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800090a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800090e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000912:	d1c0      	bne.n	8000896 <__aeabi_ddiv+0x82>
 8000914:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000918:	d10b      	bne.n	8000932 <__aeabi_ddiv+0x11e>
 800091a:	ea41 0100 	orr.w	r1, r1, r0
 800091e:	f04f 0000 	mov.w	r0, #0
 8000922:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000926:	e7b6      	b.n	8000896 <__aeabi_ddiv+0x82>
 8000928:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800092c:	bf04      	itt	eq
 800092e:	4301      	orreq	r1, r0
 8000930:	2000      	moveq	r0, #0
 8000932:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000936:	bf88      	it	hi
 8000938:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800093c:	f63f aeaf 	bhi.w	800069e <__aeabi_dmul+0xde>
 8000940:	ebb5 0c03 	subs.w	ip, r5, r3
 8000944:	bf04      	itt	eq
 8000946:	ebb6 0c02 	subseq.w	ip, r6, r2
 800094a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800094e:	f150 0000 	adcs.w	r0, r0, #0
 8000952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000956:	bd70      	pop	{r4, r5, r6, pc}
 8000958:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800095c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000960:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000964:	bfc2      	ittt	gt
 8000966:	ebd4 050c 	rsbsgt	r5, r4, ip
 800096a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800096e:	bd70      	popgt	{r4, r5, r6, pc}
 8000970:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000974:	f04f 0e00 	mov.w	lr, #0
 8000978:	3c01      	subs	r4, #1
 800097a:	e690      	b.n	800069e <__aeabi_dmul+0xde>
 800097c:	ea45 0e06 	orr.w	lr, r5, r6
 8000980:	e68d      	b.n	800069e <__aeabi_dmul+0xde>
 8000982:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000986:	ea94 0f0c 	teq	r4, ip
 800098a:	bf08      	it	eq
 800098c:	ea95 0f0c 	teqeq	r5, ip
 8000990:	f43f af3b 	beq.w	800080a <__aeabi_dmul+0x24a>
 8000994:	ea94 0f0c 	teq	r4, ip
 8000998:	d10a      	bne.n	80009b0 <__aeabi_ddiv+0x19c>
 800099a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800099e:	f47f af34 	bne.w	800080a <__aeabi_dmul+0x24a>
 80009a2:	ea95 0f0c 	teq	r5, ip
 80009a6:	f47f af25 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009aa:	4610      	mov	r0, r2
 80009ac:	4619      	mov	r1, r3
 80009ae:	e72c      	b.n	800080a <__aeabi_dmul+0x24a>
 80009b0:	ea95 0f0c 	teq	r5, ip
 80009b4:	d106      	bne.n	80009c4 <__aeabi_ddiv+0x1b0>
 80009b6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ba:	f43f aefd 	beq.w	80007b8 <__aeabi_dmul+0x1f8>
 80009be:	4610      	mov	r0, r2
 80009c0:	4619      	mov	r1, r3
 80009c2:	e722      	b.n	800080a <__aeabi_dmul+0x24a>
 80009c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ce:	f47f aec5 	bne.w	800075c <__aeabi_dmul+0x19c>
 80009d2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009d6:	f47f af0d 	bne.w	80007f4 <__aeabi_dmul+0x234>
 80009da:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009de:	f47f aeeb 	bne.w	80007b8 <__aeabi_dmul+0x1f8>
 80009e2:	e712      	b.n	800080a <__aeabi_dmul+0x24a>

080009e4 <__gedf2>:
 80009e4:	f04f 3cff 	mov.w	ip, #4294967295
 80009e8:	e006      	b.n	80009f8 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__ledf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	e002      	b.n	80009f8 <__cmpdf2+0x4>
 80009f2:	bf00      	nop

080009f4 <__cmpdf2>:
 80009f4:	f04f 0c01 	mov.w	ip, #1
 80009f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a0e:	d01b      	beq.n	8000a48 <__cmpdf2+0x54>
 8000a10:	b001      	add	sp, #4
 8000a12:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a16:	bf0c      	ite	eq
 8000a18:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a1c:	ea91 0f03 	teqne	r1, r3
 8000a20:	bf02      	ittt	eq
 8000a22:	ea90 0f02 	teqeq	r0, r2
 8000a26:	2000      	moveq	r0, #0
 8000a28:	4770      	bxeq	lr
 8000a2a:	f110 0f00 	cmn.w	r0, #0
 8000a2e:	ea91 0f03 	teq	r1, r3
 8000a32:	bf58      	it	pl
 8000a34:	4299      	cmppl	r1, r3
 8000a36:	bf08      	it	eq
 8000a38:	4290      	cmpeq	r0, r2
 8000a3a:	bf2c      	ite	cs
 8000a3c:	17d8      	asrcs	r0, r3, #31
 8000a3e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a42:	f040 0001 	orr.w	r0, r0, #1
 8000a46:	4770      	bx	lr
 8000a48:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d102      	bne.n	8000a58 <__cmpdf2+0x64>
 8000a52:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a56:	d107      	bne.n	8000a68 <__cmpdf2+0x74>
 8000a58:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a5c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a60:	d1d6      	bne.n	8000a10 <__cmpdf2+0x1c>
 8000a62:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a66:	d0d3      	beq.n	8000a10 <__cmpdf2+0x1c>
 8000a68:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdrcmple>:
 8000a70:	4684      	mov	ip, r0
 8000a72:	4610      	mov	r0, r2
 8000a74:	4662      	mov	r2, ip
 8000a76:	468c      	mov	ip, r1
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4663      	mov	r3, ip
 8000a7c:	e000      	b.n	8000a80 <__aeabi_cdcmpeq>
 8000a7e:	bf00      	nop

08000a80 <__aeabi_cdcmpeq>:
 8000a80:	b501      	push	{r0, lr}
 8000a82:	f7ff ffb7 	bl	80009f4 <__cmpdf2>
 8000a86:	2800      	cmp	r0, #0
 8000a88:	bf48      	it	mi
 8000a8a:	f110 0f00 	cmnmi.w	r0, #0
 8000a8e:	bd01      	pop	{r0, pc}

08000a90 <__aeabi_dcmpeq>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff fff4 	bl	8000a80 <__aeabi_cdcmpeq>
 8000a98:	bf0c      	ite	eq
 8000a9a:	2001      	moveq	r0, #1
 8000a9c:	2000      	movne	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmplt>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffea 	bl	8000a80 <__aeabi_cdcmpeq>
 8000aac:	bf34      	ite	cc
 8000aae:	2001      	movcc	r0, #1
 8000ab0:	2000      	movcs	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmple>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffe0 	bl	8000a80 <__aeabi_cdcmpeq>
 8000ac0:	bf94      	ite	ls
 8000ac2:	2001      	movls	r0, #1
 8000ac4:	2000      	movhi	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmpge>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffce 	bl	8000a70 <__aeabi_cdrcmple>
 8000ad4:	bf94      	ite	ls
 8000ad6:	2001      	movls	r0, #1
 8000ad8:	2000      	movhi	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmpgt>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffc4 	bl	8000a70 <__aeabi_cdrcmple>
 8000ae8:	bf34      	ite	cc
 8000aea:	2001      	movcc	r0, #1
 8000aec:	2000      	movcs	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpun>:
 8000af4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000afc:	d102      	bne.n	8000b04 <__aeabi_dcmpun+0x10>
 8000afe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b02:	d10a      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b04:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b0c:	d102      	bne.n	8000b14 <__aeabi_dcmpun+0x20>
 8000b0e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_dcmpun+0x26>
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0001 	mov.w	r0, #1
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2iz>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b28:	d215      	bcs.n	8000b56 <__aeabi_d2iz+0x36>
 8000b2a:	d511      	bpl.n	8000b50 <__aeabi_d2iz+0x30>
 8000b2c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b30:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b34:	d912      	bls.n	8000b5c <__aeabi_d2iz+0x3c>
 8000b36:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b3e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b42:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	4240      	negne	r0, r0
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b5a:	d105      	bne.n	8000b68 <__aeabi_d2iz+0x48>
 8000b5c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	bf08      	it	eq
 8000b62:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <__aeabi_d2uiz>:
 8000b70:	004a      	lsls	r2, r1, #1
 8000b72:	d211      	bcs.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b74:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b78:	d211      	bcs.n	8000b9e <__aeabi_d2uiz+0x2e>
 8000b7a:	d50d      	bpl.n	8000b98 <__aeabi_d2uiz+0x28>
 8000b7c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b80:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b84:	d40e      	bmi.n	8000ba4 <__aeabi_d2uiz+0x34>
 8000b86:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b8e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b92:	fa23 f002 	lsr.w	r0, r3, r2
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_d2uiz+0x3a>
 8000ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2f>:
 8000bb0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb8:	bf24      	itt	cs
 8000bba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bbe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bc2:	d90d      	bls.n	8000be0 <__aeabi_d2f+0x30>
 8000bc4:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bcc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd0:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bd4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd8:	bf08      	it	eq
 8000bda:	f020 0001 	biceq.w	r0, r0, #1
 8000bde:	4770      	bx	lr
 8000be0:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000be4:	d121      	bne.n	8000c2a <__aeabi_d2f+0x7a>
 8000be6:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bea:	bfbc      	itt	lt
 8000bec:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf0:	4770      	bxlt	lr
 8000bf2:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bf6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bfa:	f1c2 0218 	rsb	r2, r2, #24
 8000bfe:	f1c2 0c20 	rsb	ip, r2, #32
 8000c02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c06:	fa20 f002 	lsr.w	r0, r0, r2
 8000c0a:	bf18      	it	ne
 8000c0c:	f040 0001 	orrne.w	r0, r0, #1
 8000c10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c1c:	ea40 000c 	orr.w	r0, r0, ip
 8000c20:	fa23 f302 	lsr.w	r3, r3, r2
 8000c24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c28:	e7cc      	b.n	8000bc4 <__aeabi_d2f+0x14>
 8000c2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2e:	d107      	bne.n	8000c40 <__aeabi_d2f+0x90>
 8000c30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c34:	bf1e      	ittt	ne
 8000c36:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c3a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c3e:	4770      	bxne	lr
 8000c40:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c44:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop

08000c50 <__aeabi_uldivmod>:
 8000c50:	b953      	cbnz	r3, 8000c68 <__aeabi_uldivmod+0x18>
 8000c52:	b94a      	cbnz	r2, 8000c68 <__aeabi_uldivmod+0x18>
 8000c54:	2900      	cmp	r1, #0
 8000c56:	bf08      	it	eq
 8000c58:	2800      	cmpeq	r0, #0
 8000c5a:	bf1c      	itt	ne
 8000c5c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c60:	f04f 30ff 	movne.w	r0, #4294967295
 8000c64:	f000 b9b4 	b.w	8000fd0 <__aeabi_idiv0>
 8000c68:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c70:	f000 f83c 	bl	8000cec <__udivmoddi4>
 8000c74:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7c:	b004      	add	sp, #16
 8000c7e:	4770      	bx	lr

08000c80 <__aeabi_d2lz>:
 8000c80:	b538      	push	{r3, r4, r5, lr}
 8000c82:	2200      	movs	r2, #0
 8000c84:	2300      	movs	r3, #0
 8000c86:	4604      	mov	r4, r0
 8000c88:	460d      	mov	r5, r1
 8000c8a:	f7ff ff0b 	bl	8000aa4 <__aeabi_dcmplt>
 8000c8e:	b928      	cbnz	r0, 8000c9c <__aeabi_d2lz+0x1c>
 8000c90:	4620      	mov	r0, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c98:	f000 b80a 	b.w	8000cb0 <__aeabi_d2ulz>
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ca2:	f000 f805 	bl	8000cb0 <__aeabi_d2ulz>
 8000ca6:	4240      	negs	r0, r0
 8000ca8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cac:	bd38      	pop	{r3, r4, r5, pc}
 8000cae:	bf00      	nop

08000cb0 <__aeabi_d2ulz>:
 8000cb0:	b5d0      	push	{r4, r6, r7, lr}
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce4 <__aeabi_d2ulz+0x34>)
 8000cb6:	4606      	mov	r6, r0
 8000cb8:	460f      	mov	r7, r1
 8000cba:	f7ff fc81 	bl	80005c0 <__aeabi_dmul>
 8000cbe:	f7ff ff57 	bl	8000b70 <__aeabi_d2uiz>
 8000cc2:	4604      	mov	r4, r0
 8000cc4:	f7ff fc02 	bl	80004cc <__aeabi_ui2d>
 8000cc8:	2200      	movs	r2, #0
 8000cca:	4b07      	ldr	r3, [pc, #28]	@ (8000ce8 <__aeabi_d2ulz+0x38>)
 8000ccc:	f7ff fc78 	bl	80005c0 <__aeabi_dmul>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4630      	mov	r0, r6
 8000cd6:	4639      	mov	r1, r7
 8000cd8:	f7ff faba 	bl	8000250 <__aeabi_dsub>
 8000cdc:	f7ff ff48 	bl	8000b70 <__aeabi_d2uiz>
 8000ce0:	4621      	mov	r1, r4
 8000ce2:	bdd0      	pop	{r4, r6, r7, pc}
 8000ce4:	3df00000 	.word	0x3df00000
 8000ce8:	41f00000 	.word	0x41f00000

08000cec <__udivmoddi4>:
 8000cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000cf0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8000cf2:	460c      	mov	r4, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14d      	bne.n	8000d94 <__udivmoddi4+0xa8>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	460f      	mov	r7, r1
 8000cfc:	4684      	mov	ip, r0
 8000cfe:	4696      	mov	lr, r2
 8000d00:	fab2 f382 	clz	r3, r2
 8000d04:	d960      	bls.n	8000dc8 <__udivmoddi4+0xdc>
 8000d06:	b14b      	cbz	r3, 8000d1c <__udivmoddi4+0x30>
 8000d08:	fa02 fe03 	lsl.w	lr, r2, r3
 8000d0c:	f1c3 0220 	rsb	r2, r3, #32
 8000d10:	409f      	lsls	r7, r3
 8000d12:	fa00 fc03 	lsl.w	ip, r0, r3
 8000d16:	fa20 f202 	lsr.w	r2, r0, r2
 8000d1a:	4317      	orrs	r7, r2
 8000d1c:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8000d20:	fa1f f48e 	uxth.w	r4, lr
 8000d24:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000d28:	fbb7 f1f6 	udiv	r1, r7, r6
 8000d2c:	fb06 7711 	mls	r7, r6, r1, r7
 8000d30:	fb01 f004 	mul.w	r0, r1, r4
 8000d34:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d38:	4290      	cmp	r0, r2
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x62>
 8000d3c:	eb1e 0202 	adds.w	r2, lr, r2
 8000d40:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x60>
 8000d46:	4290      	cmp	r0, r2
 8000d48:	f200 812d 	bhi.w	8000fa6 <__udivmoddi4+0x2ba>
 8000d4c:	4639      	mov	r1, r7
 8000d4e:	1a12      	subs	r2, r2, r0
 8000d50:	fa1f fc8c 	uxth.w	ip, ip
 8000d54:	fbb2 f0f6 	udiv	r0, r2, r6
 8000d58:	fb06 2210 	mls	r2, r6, r0, r2
 8000d5c:	fb00 f404 	mul.w	r4, r0, r4
 8000d60:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000d64:	4564      	cmp	r4, ip
 8000d66:	d908      	bls.n	8000d7a <__udivmoddi4+0x8e>
 8000d68:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000d6c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d70:	d202      	bcs.n	8000d78 <__udivmoddi4+0x8c>
 8000d72:	4564      	cmp	r4, ip
 8000d74:	f200 811a 	bhi.w	8000fac <__udivmoddi4+0x2c0>
 8000d78:	4610      	mov	r0, r2
 8000d7a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7e:	ebac 0c04 	sub.w	ip, ip, r4
 8000d82:	2100      	movs	r1, #0
 8000d84:	b125      	cbz	r5, 8000d90 <__udivmoddi4+0xa4>
 8000d86:	fa2c f303 	lsr.w	r3, ip, r3
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	e9c5 3200 	strd	r3, r2, [r5]
 8000d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d94:	428b      	cmp	r3, r1
 8000d96:	d905      	bls.n	8000da4 <__udivmoddi4+0xb8>
 8000d98:	b10d      	cbz	r5, 8000d9e <__udivmoddi4+0xb2>
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	2100      	movs	r1, #0
 8000da0:	4608      	mov	r0, r1
 8000da2:	e7f5      	b.n	8000d90 <__udivmoddi4+0xa4>
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d14d      	bne.n	8000e48 <__udivmoddi4+0x15c>
 8000dac:	42a3      	cmp	r3, r4
 8000dae:	f0c0 80f2 	bcc.w	8000f96 <__udivmoddi4+0x2aa>
 8000db2:	4290      	cmp	r0, r2
 8000db4:	f080 80ef 	bcs.w	8000f96 <__udivmoddi4+0x2aa>
 8000db8:	4606      	mov	r6, r0
 8000dba:	4623      	mov	r3, r4
 8000dbc:	4608      	mov	r0, r1
 8000dbe:	2d00      	cmp	r5, #0
 8000dc0:	d0e6      	beq.n	8000d90 <__udivmoddi4+0xa4>
 8000dc2:	e9c5 6300 	strd	r6, r3, [r5]
 8000dc6:	e7e3      	b.n	8000d90 <__udivmoddi4+0xa4>
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	f040 80a2 	bne.w	8000f12 <__udivmoddi4+0x226>
 8000dce:	1a8a      	subs	r2, r1, r2
 8000dd0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000dd4:	fa1f f68e 	uxth.w	r6, lr
 8000dd8:	2101      	movs	r1, #1
 8000dda:	fbb2 f4f7 	udiv	r4, r2, r7
 8000dde:	fb07 2014 	mls	r0, r7, r4, r2
 8000de2:	ea4f 421c 	mov.w	r2, ip, lsr #16
 8000de6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dea:	fb06 f004 	mul.w	r0, r6, r4
 8000dee:	4290      	cmp	r0, r2
 8000df0:	d90f      	bls.n	8000e12 <__udivmoddi4+0x126>
 8000df2:	eb1e 0202 	adds.w	r2, lr, r2
 8000df6:	f104 38ff 	add.w	r8, r4, #4294967295
 8000dfa:	bf2c      	ite	cs
 8000dfc:	f04f 0901 	movcs.w	r9, #1
 8000e00:	f04f 0900 	movcc.w	r9, #0
 8000e04:	4290      	cmp	r0, r2
 8000e06:	d903      	bls.n	8000e10 <__udivmoddi4+0x124>
 8000e08:	f1b9 0f00 	cmp.w	r9, #0
 8000e0c:	f000 80c8 	beq.w	8000fa0 <__udivmoddi4+0x2b4>
 8000e10:	4644      	mov	r4, r8
 8000e12:	1a12      	subs	r2, r2, r0
 8000e14:	fa1f fc8c 	uxth.w	ip, ip
 8000e18:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e1c:	fb07 2210 	mls	r2, r7, r0, r2
 8000e20:	fb00 f606 	mul.w	r6, r0, r6
 8000e24:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000e28:	4566      	cmp	r6, ip
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x152>
 8000e2c:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000e30:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e34:	d202      	bcs.n	8000e3c <__udivmoddi4+0x150>
 8000e36:	4566      	cmp	r6, ip
 8000e38:	f200 80bb 	bhi.w	8000fb2 <__udivmoddi4+0x2c6>
 8000e3c:	4610      	mov	r0, r2
 8000e3e:	ebac 0c06 	sub.w	ip, ip, r6
 8000e42:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e46:	e79d      	b.n	8000d84 <__udivmoddi4+0x98>
 8000e48:	f1c1 0620 	rsb	r6, r1, #32
 8000e4c:	408b      	lsls	r3, r1
 8000e4e:	fa04 fe01 	lsl.w	lr, r4, r1
 8000e52:	fa22 f706 	lsr.w	r7, r2, r6
 8000e56:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e5a:	40f4      	lsrs	r4, r6
 8000e5c:	408a      	lsls	r2, r1
 8000e5e:	431f      	orrs	r7, r3
 8000e60:	ea4e 030c 	orr.w	r3, lr, ip
 8000e64:	fa00 fe01 	lsl.w	lr, r0, r1
 8000e68:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000e6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e70:	fa1f fc87 	uxth.w	ip, r7
 8000e74:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e78:	fb08 4410 	mls	r4, r8, r0, r4
 8000e7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e80:	fb00 f90c 	mul.w	r9, r0, ip
 8000e84:	45a1      	cmp	r9, r4
 8000e86:	d90e      	bls.n	8000ea6 <__udivmoddi4+0x1ba>
 8000e88:	193c      	adds	r4, r7, r4
 8000e8a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e8e:	bf2c      	ite	cs
 8000e90:	f04f 0b01 	movcs.w	fp, #1
 8000e94:	f04f 0b00 	movcc.w	fp, #0
 8000e98:	45a1      	cmp	r9, r4
 8000e9a:	d903      	bls.n	8000ea4 <__udivmoddi4+0x1b8>
 8000e9c:	f1bb 0f00 	cmp.w	fp, #0
 8000ea0:	f000 8093 	beq.w	8000fca <__udivmoddi4+0x2de>
 8000ea4:	4650      	mov	r0, sl
 8000ea6:	eba4 0409 	sub.w	r4, r4, r9
 8000eaa:	fa1f f983 	uxth.w	r9, r3
 8000eae:	fbb4 f3f8 	udiv	r3, r4, r8
 8000eb2:	fb08 4413 	mls	r4, r8, r3, r4
 8000eb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ebe:	45a4      	cmp	ip, r4
 8000ec0:	d906      	bls.n	8000ed0 <__udivmoddi4+0x1e4>
 8000ec2:	193c      	adds	r4, r7, r4
 8000ec4:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ec8:	d201      	bcs.n	8000ece <__udivmoddi4+0x1e2>
 8000eca:	45a4      	cmp	ip, r4
 8000ecc:	d87a      	bhi.n	8000fc4 <__udivmoddi4+0x2d8>
 8000ece:	4643      	mov	r3, r8
 8000ed0:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ed4:	eba4 040c 	sub.w	r4, r4, ip
 8000ed8:	fba0 9802 	umull	r9, r8, r0, r2
 8000edc:	4544      	cmp	r4, r8
 8000ede:	46cc      	mov	ip, r9
 8000ee0:	4643      	mov	r3, r8
 8000ee2:	d302      	bcc.n	8000eea <__udivmoddi4+0x1fe>
 8000ee4:	d106      	bne.n	8000ef4 <__udivmoddi4+0x208>
 8000ee6:	45ce      	cmp	lr, r9
 8000ee8:	d204      	bcs.n	8000ef4 <__udivmoddi4+0x208>
 8000eea:	3801      	subs	r0, #1
 8000eec:	ebb9 0c02 	subs.w	ip, r9, r2
 8000ef0:	eb68 0307 	sbc.w	r3, r8, r7
 8000ef4:	b15d      	cbz	r5, 8000f0e <__udivmoddi4+0x222>
 8000ef6:	ebbe 020c 	subs.w	r2, lr, ip
 8000efa:	eb64 0403 	sbc.w	r4, r4, r3
 8000efe:	fa04 f606 	lsl.w	r6, r4, r6
 8000f02:	fa22 f301 	lsr.w	r3, r2, r1
 8000f06:	40cc      	lsrs	r4, r1
 8000f08:	431e      	orrs	r6, r3
 8000f0a:	e9c5 6400 	strd	r6, r4, [r5]
 8000f0e:	2100      	movs	r1, #0
 8000f10:	e73e      	b.n	8000d90 <__udivmoddi4+0xa4>
 8000f12:	fa02 fe03 	lsl.w	lr, r2, r3
 8000f16:	f1c3 0120 	rsb	r1, r3, #32
 8000f1a:	fa04 f203 	lsl.w	r2, r4, r3
 8000f1e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000f28:	fa20 f101 	lsr.w	r1, r0, r1
 8000f2c:	fa1f f68e 	uxth.w	r6, lr
 8000f30:	fbb4 f0f7 	udiv	r0, r4, r7
 8000f34:	430a      	orrs	r2, r1
 8000f36:	fb07 4410 	mls	r4, r7, r0, r4
 8000f3a:	0c11      	lsrs	r1, r2, #16
 8000f3c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8000f40:	fb00 f406 	mul.w	r4, r0, r6
 8000f44:	428c      	cmp	r4, r1
 8000f46:	d90e      	bls.n	8000f66 <__udivmoddi4+0x27a>
 8000f48:	eb1e 0101 	adds.w	r1, lr, r1
 8000f4c:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f50:	bf2c      	ite	cs
 8000f52:	f04f 0901 	movcs.w	r9, #1
 8000f56:	f04f 0900 	movcc.w	r9, #0
 8000f5a:	428c      	cmp	r4, r1
 8000f5c:	d902      	bls.n	8000f64 <__udivmoddi4+0x278>
 8000f5e:	f1b9 0f00 	cmp.w	r9, #0
 8000f62:	d02c      	beq.n	8000fbe <__udivmoddi4+0x2d2>
 8000f64:	4640      	mov	r0, r8
 8000f66:	1b09      	subs	r1, r1, r4
 8000f68:	b292      	uxth	r2, r2
 8000f6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f6e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f72:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f76:	fb04 f106 	mul.w	r1, r4, r6
 8000f7a:	4291      	cmp	r1, r2
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x2a2>
 8000f7e:	eb1e 0202 	adds.w	r2, lr, r2
 8000f82:	f104 38ff 	add.w	r8, r4, #4294967295
 8000f86:	d201      	bcs.n	8000f8c <__udivmoddi4+0x2a0>
 8000f88:	4291      	cmp	r1, r2
 8000f8a:	d815      	bhi.n	8000fb8 <__udivmoddi4+0x2cc>
 8000f8c:	4644      	mov	r4, r8
 8000f8e:	1a52      	subs	r2, r2, r1
 8000f90:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000f94:	e721      	b.n	8000dda <__udivmoddi4+0xee>
 8000f96:	1a86      	subs	r6, r0, r2
 8000f98:	eb64 0303 	sbc.w	r3, r4, r3
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	e70e      	b.n	8000dbe <__udivmoddi4+0xd2>
 8000fa0:	3c02      	subs	r4, #2
 8000fa2:	4472      	add	r2, lr
 8000fa4:	e735      	b.n	8000e12 <__udivmoddi4+0x126>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4472      	add	r2, lr
 8000faa:	e6d0      	b.n	8000d4e <__udivmoddi4+0x62>
 8000fac:	44f4      	add	ip, lr
 8000fae:	3802      	subs	r0, #2
 8000fb0:	e6e3      	b.n	8000d7a <__udivmoddi4+0x8e>
 8000fb2:	44f4      	add	ip, lr
 8000fb4:	3802      	subs	r0, #2
 8000fb6:	e742      	b.n	8000e3e <__udivmoddi4+0x152>
 8000fb8:	3c02      	subs	r4, #2
 8000fba:	4472      	add	r2, lr
 8000fbc:	e7e7      	b.n	8000f8e <__udivmoddi4+0x2a2>
 8000fbe:	3802      	subs	r0, #2
 8000fc0:	4471      	add	r1, lr
 8000fc2:	e7d0      	b.n	8000f66 <__udivmoddi4+0x27a>
 8000fc4:	3b02      	subs	r3, #2
 8000fc6:	443c      	add	r4, r7
 8000fc8:	e782      	b.n	8000ed0 <__udivmoddi4+0x1e4>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	443c      	add	r4, r7
 8000fce:	e76a      	b.n	8000ea6 <__udivmoddi4+0x1ba>

08000fd0 <__aeabi_idiv0>:
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop

08000fd4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fd8:	f000 fd1b 	bl	8001a12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fdc:	f000 f878 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fe0:	f000 f996 	bl	8001310 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000fe4:	f000 f8d8 	bl	8001198 <MX_FDCAN1_Init>
  MX_USART2_UART_Init();
 8000fe8:	f000 f944 	bl	8001274 <MX_USART2_UART_Init>
  MX_ICACHE_Init();
 8000fec:	f000 f92e 	bl	800124c <MX_ICACHE_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8000ff0:	f000 f8bd 	bl	800116e <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, (const uint8_t *)"GABI \n\r", 7, 100);
 8000ff4:	2364      	movs	r3, #100	@ 0x64
 8000ff6:	2207      	movs	r2, #7
 8000ff8:	492d      	ldr	r1, [pc, #180]	@ (80010b0 <main+0xdc>)
 8000ffa:	482e      	ldr	r0, [pc, #184]	@ (80010b4 <main+0xe0>)
 8000ffc:	f003 fca0 	bl	8004940 <HAL_UART_Transmit>
  HAL_Delay(100);
 8001000:	2064      	movs	r0, #100	@ 0x64
 8001002:	f000 fd7d 	bl	8001b00 <HAL_Delay>

  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK)
 8001006:	482c      	ldr	r0, [pc, #176]	@ (80010b8 <main+0xe4>)
 8001008:	f001 f85a 	bl	80020c0 <HAL_FDCAN_Start>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <main+0x42>
  {
      Error_Handler();
 8001012:	f000 fa15 	bl	8001440 <Error_Handler>
  }

  TxHeader.Identifier = 0x123;
 8001016:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <main+0xe8>)
 8001018:	f240 1223 	movw	r2, #291	@ 0x123
 800101c:	601a      	str	r2, [r3, #0]
  TxHeader.IdType = FDCAN_STANDARD_ID;
 800101e:	4b27      	ldr	r3, [pc, #156]	@ (80010bc <main+0xe8>)
 8001020:	2200      	movs	r2, #0
 8001022:	605a      	str	r2, [r3, #4]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 8001024:	4b25      	ldr	r3, [pc, #148]	@ (80010bc <main+0xe8>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 800102a:	4b24      	ldr	r3, [pc, #144]	@ (80010bc <main+0xe8>)
 800102c:	2208      	movs	r2, #8
 800102e:	60da      	str	r2, [r3, #12]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001030:	4b22      	ldr	r3, [pc, #136]	@ (80010bc <main+0xe8>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8001036:	4b21      	ldr	r3, [pc, #132]	@ (80010bc <main+0xe8>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 800103c:	4b1f      	ldr	r3, [pc, #124]	@ (80010bc <main+0xe8>)
 800103e:	2200      	movs	r2, #0
 8001040:	619a      	str	r2, [r3, #24]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8001042:	4b1e      	ldr	r3, [pc, #120]	@ (80010bc <main+0xe8>)
 8001044:	2200      	movs	r2, #0
 8001046:	61da      	str	r2, [r3, #28]
  TxHeader.MessageMarker = 0;
 8001048:	4b1c      	ldr	r3, [pc, #112]	@ (80010bc <main+0xe8>)
 800104a:	2200      	movs	r2, #0
 800104c:	621a      	str	r2, [r3, #32]

  HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	4819      	ldr	r0, [pc, #100]	@ (80010b8 <main+0xe4>)
 8001054:	f001 f9a8 	bl	80023a8 <HAL_FDCAN_ActivateNotification>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 8001058:	4a19      	ldr	r2, [pc, #100]	@ (80010c0 <main+0xec>)
 800105a:	4918      	ldr	r1, [pc, #96]	@ (80010bc <main+0xe8>)
 800105c:	4816      	ldr	r0, [pc, #88]	@ (80010b8 <main+0xe4>)
 800105e:	f001 f857 	bl	8002110 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <main+0x98>
	  {
	      Error_Handler();
 8001068:	f000 f9ea 	bl	8001440 <Error_Handler>
	  }
	  TxData[0] = Inc/100 ;
 800106c:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <main+0xf0>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4a15      	ldr	r2, [pc, #84]	@ (80010c8 <main+0xf4>)
 8001072:	fba2 2303 	umull	r2, r3, r2, r3
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	b2da      	uxtb	r2, r3
 800107a:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <main+0xec>)
 800107c:	701a      	strb	r2, [r3, #0]
	  TxData[1] = Inc%10 ;
 800107e:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <main+0xf0>)
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	4b12      	ldr	r3, [pc, #72]	@ (80010cc <main+0xf8>)
 8001084:	fba3 1302 	umull	r1, r3, r3, r2
 8001088:	08d9      	lsrs	r1, r3, #3
 800108a:	460b      	mov	r3, r1
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	440b      	add	r3, r1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b0a      	ldr	r3, [pc, #40]	@ (80010c0 <main+0xec>)
 8001098:	705a      	strb	r2, [r3, #1]
	  Inc+=1;
 800109a:	4b0a      	ldr	r3, [pc, #40]	@ (80010c4 <main+0xf0>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	3301      	adds	r3, #1
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4b08      	ldr	r3, [pc, #32]	@ (80010c4 <main+0xf0>)
 80010a4:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(100);
 80010a6:	2064      	movs	r0, #100	@ 0x64
 80010a8:	f000 fd2a 	bl	8001b00 <HAL_Delay>
	  if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData) != HAL_OK)
 80010ac:	e7d4      	b.n	8001058 <main+0x84>
 80010ae:	bf00      	nop
 80010b0:	08009dc0 	.word	0x08009dc0
 80010b4:	2000025c 	.word	0x2000025c
 80010b8:	200001f8 	.word	0x200001f8
 80010bc:	200002f0 	.word	0x200002f0
 80010c0:	20000000 	.word	0x20000000
 80010c4:	20000344 	.word	0x20000344
 80010c8:	51eb851f 	.word	0x51eb851f
 80010cc:	cccccccd 	.word	0xcccccccd

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b098      	sub	sp, #96	@ 0x60
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0318 	add.w	r3, r7, #24
 80010da:	2248      	movs	r2, #72	@ 0x48
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f005 fa6f 	bl	80065c2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE2) != HAL_OK)
 80010f2:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80010f6:	f001 fe73 	bl	8002de0 <HAL_PWREx_ControlVoltageScaling>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001100:	f000 f99e 	bl	8001440 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001108:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800110c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110e:	2302      	movs	r3, #2
 8001110:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001112:	2303      	movs	r3, #3
 8001114:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 2;
 8001116:	2302      	movs	r3, #2
 8001118:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLN = 8;
 800111a:	2308      	movs	r3, #8
 800111c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800111e:	2307      	movs	r3, #7
 8001120:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001122:	2302      	movs	r3, #2
 8001124:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001126:	2302      	movs	r3, #2
 8001128:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800112a:	f107 0318 	add.w	r3, r7, #24
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fee6 	bl	8002f00 <HAL_RCC_OscConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800113a:	f000 f981 	bl	8001440 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113e:	230f      	movs	r3, #15
 8001140:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8001142:	2302      	movs	r3, #2
 8001144:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001146:	2300      	movs	r3, #0
 8001148:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114e:	2300      	movs	r3, #0
 8001150:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2102      	movs	r1, #2
 8001156:	4618      	mov	r0, r3
 8001158:	f002 fba8 	bl	80038ac <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001162:	f000 f96d 	bl	8001440 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3760      	adds	r7, #96	@ 0x60
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}

0800116e <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	af00      	add	r7, sp, #0
  /* FDCAN1_IT0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8001172:	2200      	movs	r2, #0
 8001174:	2100      	movs	r1, #0
 8001176:	2027      	movs	r0, #39	@ 0x27
 8001178:	f000 fdc1 	bl	8001cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800117c:	2027      	movs	r0, #39	@ 0x27
 800117e:	f000 fdd8 	bl	8001d32 <HAL_NVIC_EnableIRQ>
  /* FDCAN1_IT1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8001182:	2200      	movs	r2, #0
 8001184:	2100      	movs	r1, #0
 8001186:	2028      	movs	r0, #40	@ 0x28
 8001188:	f000 fdb9 	bl	8001cfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 800118c:	2028      	movs	r0, #40	@ 0x28
 800118e:	f000 fdd0 	bl	8001d32 <HAL_NVIC_EnableIRQ>
}
 8001192:	bf00      	nop
 8001194:	bd80      	pop	{r7, pc}
	...

08001198 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b086      	sub	sp, #24
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800119e:	4b29      	ldr	r3, [pc, #164]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011a0:	4a29      	ldr	r2, [pc, #164]	@ (8001248 <MX_FDCAN1_Init+0xb0>)
 80011a2:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80011a4:	4b27      	ldr	r3, [pc, #156]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80011aa:	4b26      	ldr	r3, [pc, #152]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80011b0:	4b24      	ldr	r3, [pc, #144]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80011b6:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80011bc:	4b21      	ldr	r3, [pc, #132]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011be:	2200      	movs	r2, #0
 80011c0:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80011c2:	4b20      	ldr	r3, [pc, #128]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 80011c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011ca:	2203      	movs	r2, #3
 80011cc:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80011ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 12;
 80011d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011d6:	220c      	movs	r2, #12
 80011d8:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80011da:	4b1a      	ldr	r3, [pc, #104]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011dc:	2202      	movs	r2, #2
 80011de:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80011e0:	4b18      	ldr	r3, [pc, #96]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80011e6:	4b17      	ldr	r3, [pc, #92]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011e8:	2201      	movs	r2, #1
 80011ea:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011ee:	2201      	movs	r2, #1
 80011f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80011f2:	4b14      	ldr	r3, [pc, #80]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 10;
 80011f8:	4b12      	ldr	r3, [pc, #72]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 80011fa:	220a      	movs	r2, #10
 80011fc:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 80011fe:	4b11      	ldr	r3, [pc, #68]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 8001200:	2200      	movs	r2, #0
 8001202:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001204:	4b0f      	ldr	r3, [pc, #60]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 8001206:	2200      	movs	r2, #0
 8001208:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800120a:	480e      	ldr	r0, [pc, #56]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 800120c:	f000 fdac 	bl	8001d68 <HAL_FDCAN_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 8001216:	f000 f913 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
  FDCAN_FilterTypeDef sFilterConfig;
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001222:	2302      	movs	r3, #2
 8001224:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001226:	2301      	movs	r3, #1
 8001228:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x00000000;
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x00000000; // Accept all
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig);
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	4803      	ldr	r0, [pc, #12]	@ (8001244 <MX_FDCAN1_Init+0xac>)
 8001238:	f000 fee8 	bl	800200c <HAL_FDCAN_ConfigFilter>

  /* USER CODE END FDCAN1_Init 2 */

}
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001f8 	.word	0x200001f8
 8001248:	4000a400 	.word	0x4000a400

0800124c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8001250:	2000      	movs	r0, #0
 8001252:	f001 fd87 	bl	8002d64 <HAL_ICACHE_ConfigAssociativityMode>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 800125c:	f000 f8f0 	bl	8001440 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8001260:	f001 fda0 	bl	8002da4 <HAL_ICACHE_Enable>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 800126a:	f000 f8e9 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001278:	4b23      	ldr	r3, [pc, #140]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 800127a:	4a24      	ldr	r2, [pc, #144]	@ (800130c <MX_USART2_UART_Init+0x98>)
 800127c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800127e:	4b22      	ldr	r3, [pc, #136]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 8001280:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001284:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 8001288:	2200      	movs	r2, #0
 800128a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800128c:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001292:	4b1d      	ldr	r3, [pc, #116]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 800129a:	220c      	movs	r2, #12
 800129c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800129e:	4b1a      	ldr	r3, [pc, #104]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 80012a4:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 80012a6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012aa:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012be:	4812      	ldr	r0, [pc, #72]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 80012c0:	f003 faee 	bl	80048a0 <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80012ca:	f000 f8b9 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ce:	2100      	movs	r1, #0
 80012d0:	480d      	ldr	r0, [pc, #52]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 80012d2:	f004 f91b 	bl	800550c <HAL_UARTEx_SetTxFifoThreshold>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_USART2_UART_Init+0x6c>
  {
    Error_Handler();
 80012dc:	f000 f8b0 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4809      	ldr	r0, [pc, #36]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 80012e4:	f004 f950 	bl	8005588 <HAL_UARTEx_SetRxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_USART2_UART_Init+0x7e>
  {
    Error_Handler();
 80012ee:	f000 f8a7 	bl	8001440 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_USART2_UART_Init+0x94>)
 80012f4:	f004 f8d1 	bl	800549a <HAL_UARTEx_DisableFifoMode>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_USART2_UART_Init+0x8e>
  {
    Error_Handler();
 80012fe:	f000 f89f 	bl	8001440 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	2000025c 	.word	0x2000025c
 800130c:	40004400 	.word	0x40004400

08001310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	@ 0x28
 8001314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b36      	ldr	r3, [pc, #216]	@ (8001400 <MX_GPIO_Init+0xf0>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800132a:	4a35      	ldr	r2, [pc, #212]	@ (8001400 <MX_GPIO_Init+0xf0>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001332:	4b33      	ldr	r3, [pc, #204]	@ (8001400 <MX_GPIO_Init+0xf0>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b30      	ldr	r3, [pc, #192]	@ (8001400 <MX_GPIO_Init+0xf0>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001342:	4a2f      	ldr	r2, [pc, #188]	@ (8001400 <MX_GPIO_Init+0xf0>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001348:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800134a:	4b2d      	ldr	r3, [pc, #180]	@ (8001400 <MX_GPIO_Init+0xf0>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800134e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b2a      	ldr	r3, [pc, #168]	@ (8001400 <MX_GPIO_Init+0xf0>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800135a:	4a29      	ldr	r2, [pc, #164]	@ (8001400 <MX_GPIO_Init+0xf0>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001362:	4b27      	ldr	r3, [pc, #156]	@ (8001400 <MX_GPIO_Init+0xf0>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <MX_GPIO_Init+0xf0>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001372:	4a23      	ldr	r2, [pc, #140]	@ (8001400 <MX_GPIO_Init+0xf0>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <MX_GPIO_Init+0xf0>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2110      	movs	r1, #16
 800138a:	481e      	ldr	r0, [pc, #120]	@ (8001404 <MX_GPIO_Init+0xf4>)
 800138c:	f001 fcd2 	bl	8002d34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001390:	2310      	movs	r3, #16
 8001392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4817      	ldr	r0, [pc, #92]	@ (8001404 <MX_GPIO_Init+0xf4>)
 80013a8:	f001 fb44 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80013ac:	f248 0304 	movw	r3, #32772	@ 0x8004
 80013b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ba:	f107 0314 	add.w	r3, r7, #20
 80013be:	4619      	mov	r1, r3
 80013c0:	4811      	ldr	r0, [pc, #68]	@ (8001408 <MX_GPIO_Init+0xf8>)
 80013c2:	f001 fb37 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013c6:	23c0      	movs	r3, #192	@ 0xc0
 80013c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013d2:	f107 0314 	add.w	r3, r7, #20
 80013d6:	4619      	mov	r1, r3
 80013d8:	480c      	ldr	r0, [pc, #48]	@ (800140c <MX_GPIO_Init+0xfc>)
 80013da:	f001 fb2b 	bl	8002a34 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4804      	ldr	r0, [pc, #16]	@ (8001404 <MX_GPIO_Init+0xf4>)
 80013f4:	f001 fb1e 	bl	8002a34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	@ 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	42020000 	.word	0x42020000
 8001408:	42020400 	.word	0x42020400
 800140c:	42020800 	.word	0x42020800

08001410 <HAL_FDCAN_RxFifo0Callback>:

/* USER CODE BEGIN 4 */
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0) {
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <HAL_FDCAN_RxFifo0Callback+0x20>

        HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData);
 8001424:	4b04      	ldr	r3, [pc, #16]	@ (8001438 <HAL_FDCAN_RxFifo0Callback+0x28>)
 8001426:	4a05      	ldr	r2, [pc, #20]	@ (800143c <HAL_FDCAN_RxFifo0Callback+0x2c>)
 8001428:	2140      	movs	r1, #64	@ 0x40
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 feb4 	bl	8002198 <HAL_FDCAN_GetRxMessage>
        // Process RxData here
    }
}
 8001430:	bf00      	nop
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	2000033c 	.word	0x2000033c
 800143c:	20000314 	.word	0x20000314

08001440 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
}
 8001446:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <Error_Handler+0x8>

0800144c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001452:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <HAL_MspInit+0x44>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001456:	4a0e      	ldr	r2, [pc, #56]	@ (8001490 <HAL_MspInit+0x44>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6613      	str	r3, [r2, #96]	@ 0x60
 800145e:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <HAL_MspInit+0x44>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	607b      	str	r3, [r7, #4]
 8001468:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <HAL_MspInit+0x44>)
 800146c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800146e:	4a08      	ldr	r2, [pc, #32]	@ (8001490 <HAL_MspInit+0x44>)
 8001470:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001474:	6593      	str	r3, [r2, #88]	@ 0x58
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <HAL_MspInit+0x44>)
 8001478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800147a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001482:	f001 fd09 	bl	8002e98 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40021000 	.word	0x40021000

08001494 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b0ae      	sub	sp, #184	@ 0xb8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014ac:	f107 0310 	add.w	r3, r7, #16
 80014b0:	2294      	movs	r2, #148	@ 0x94
 80014b2:	2100      	movs	r1, #0
 80014b4:	4618      	mov	r0, r3
 80014b6:	f005 f884 	bl	80065c2 <memset>
  if(hfdcan->Instance==FDCAN1)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a28      	ldr	r2, [pc, #160]	@ (8001560 <HAL_FDCAN_MspInit+0xcc>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d149      	bne.n	8001558 <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80014c4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014c8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80014ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80014ce:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d0:	f107 0310 	add.w	r3, r7, #16
 80014d4:	4618      	mov	r0, r3
 80014d6:	f002 fccd 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80014e0:	f7ff ffae 	bl	8001440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN1_CLK_ENABLE();
 80014e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001564 <HAL_FDCAN_MspInit+0xd0>)
 80014e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001564 <HAL_FDCAN_MspInit+0xd0>)
 80014ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014ee:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80014f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001564 <HAL_FDCAN_MspInit+0xd0>)
 80014f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014f8:	60fb      	str	r3, [r7, #12]
 80014fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b19      	ldr	r3, [pc, #100]	@ (8001564 <HAL_FDCAN_MspInit+0xd0>)
 80014fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001500:	4a18      	ldr	r2, [pc, #96]	@ (8001564 <HAL_FDCAN_MspInit+0xd0>)
 8001502:	f043 0302 	orr.w	r3, r3, #2
 8001506:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001508:	4b16      	ldr	r3, [pc, #88]	@ (8001564 <HAL_FDCAN_MspInit+0xd0>)
 800150a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001514:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001518:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151c:	2302      	movs	r3, #2
 800151e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800152e:	2309      	movs	r3, #9
 8001530:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001534:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001538:	4619      	mov	r1, r3
 800153a:	480b      	ldr	r0, [pc, #44]	@ (8001568 <HAL_FDCAN_MspInit+0xd4>)
 800153c:	f001 fa7a 	bl	8002a34 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB8);
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <HAL_FDCAN_MspInit+0xd8>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	4a09      	ldr	r2, [pc, #36]	@ (800156c <HAL_FDCAN_MspInit+0xd8>)
 8001546:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800154a:	6053      	str	r3, [r2, #4]

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 800154c:	4b07      	ldr	r3, [pc, #28]	@ (800156c <HAL_FDCAN_MspInit+0xd8>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4a06      	ldr	r2, [pc, #24]	@ (800156c <HAL_FDCAN_MspInit+0xd8>)
 8001552:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001556:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8001558:	bf00      	nop
 800155a:	37b8      	adds	r7, #184	@ 0xb8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	4000a400 	.word	0x4000a400
 8001564:	40021000 	.word	0x40021000
 8001568:	42020400 	.word	0x42020400
 800156c:	40010000 	.word	0x40010000

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b0ae      	sub	sp, #184	@ 0xb8
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001588:	f107 0310 	add.w	r3, r7, #16
 800158c:	2294      	movs	r2, #148	@ 0x94
 800158e:	2100      	movs	r1, #0
 8001590:	4618      	mov	r0, r3
 8001592:	f005 f816 	bl	80065c2 <memset>
  if(huart->Instance==USART2)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <HAL_UART_MspInit+0xb0>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d13a      	bne.n	8001616 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80015a0:	2302      	movs	r3, #2
 80015a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80015a4:	2300      	movs	r3, #0
 80015a6:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4618      	mov	r0, r3
 80015ae:	f002 fc61 	bl	8003e74 <HAL_RCCEx_PeriphCLKConfig>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80015b8:	f7ff ff42 	bl	8001440 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <HAL_UART_MspInit+0xb4>)
 80015be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c0:	4a18      	ldr	r2, [pc, #96]	@ (8001624 <HAL_UART_MspInit+0xb4>)
 80015c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80015c8:	4b16      	ldr	r3, [pc, #88]	@ (8001624 <HAL_UART_MspInit+0xb4>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d4:	4b13      	ldr	r3, [pc, #76]	@ (8001624 <HAL_UART_MspInit+0xb4>)
 80015d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015d8:	4a12      	ldr	r2, [pc, #72]	@ (8001624 <HAL_UART_MspInit+0xb4>)
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015e0:	4b10      	ldr	r3, [pc, #64]	@ (8001624 <HAL_UART_MspInit+0xb4>)
 80015e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015e4:	f003 0301 	and.w	r3, r3, #1
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015ec:	230c      	movs	r3, #12
 80015ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f2:	2302      	movs	r3, #2
 80015f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001604:	2307      	movs	r3, #7
 8001606:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800160e:	4619      	mov	r1, r3
 8001610:	4805      	ldr	r0, [pc, #20]	@ (8001628 <HAL_UART_MspInit+0xb8>)
 8001612:	f001 fa0f 	bl	8002a34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001616:	bf00      	nop
 8001618:	37b8      	adds	r7, #184	@ 0xb8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40004400 	.word	0x40004400
 8001624:	40021000 	.word	0x40021000
 8001628:	42020000 	.word	0x42020000

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001682:	f000 fa1d 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <FDCAN1_IT0_IRQHandler+0x10>)
 8001692:	f000 ff6f 	bl	8002574 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200001f8 	.word	0x200001f8

080016a0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <FDCAN1_IT1_IRQHandler+0x10>)
 80016a6:	f000 ff65 	bl	8002574 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200001f8 	.word	0x200001f8

080016b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  return 1;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_kill>:

int _kill(int pid, int sig)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ce:	f004 ffcb 	bl	8006668 <__errno>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2216      	movs	r2, #22
 80016d6:	601a      	str	r2, [r3, #0]
  return -1;
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_exit>:

void _exit (int status)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ffe7 	bl	80016c4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016f6:	bf00      	nop
 80016f8:	e7fd      	b.n	80016f6 <_exit+0x12>

080016fa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b086      	sub	sp, #24
 80016fe:	af00      	add	r7, sp, #0
 8001700:	60f8      	str	r0, [r7, #12]
 8001702:	60b9      	str	r1, [r7, #8]
 8001704:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e00a      	b.n	8001722 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800170c:	f3af 8000 	nop.w
 8001710:	4601      	mov	r1, r0
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	1c5a      	adds	r2, r3, #1
 8001716:	60ba      	str	r2, [r7, #8]
 8001718:	b2ca      	uxtb	r2, r1
 800171a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	429a      	cmp	r2, r3
 8001728:	dbf0      	blt.n	800170c <_read+0x12>
  }

  return len;
 800172a:	687b      	ldr	r3, [r7, #4]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	2300      	movs	r3, #0
 8001742:	617b      	str	r3, [r7, #20]
 8001744:	e009      	b.n	800175a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001746:	68bb      	ldr	r3, [r7, #8]
 8001748:	1c5a      	adds	r2, r3, #1
 800174a:	60ba      	str	r2, [r7, #8]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	3301      	adds	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	dbf1      	blt.n	8001746 <_write+0x12>
  }
  return len;
 8001762:	687b      	ldr	r3, [r7, #4]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3718      	adds	r7, #24
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <_close>:

int _close(int file)
{
 800176c:	b480      	push	{r7}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001774:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001778:	4618      	mov	r0, r3
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001794:	605a      	str	r2, [r3, #4]
  return 0;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr

080017a4 <_isatty>:

int _isatty(int file)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017ac:	2301      	movs	r3, #1
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ba:	b480      	push	{r7}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60f8      	str	r0, [r7, #12]
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017c6:	2300      	movs	r3, #0
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3714      	adds	r7, #20
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	@ (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	@ (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	@ (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	@ (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f004 ff30 	bl	8006668 <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	@ (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	@ (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20030000 	.word	0x20030000
 8001834:	00000400 	.word	0x00000400
 8001838:	20000348 	.word	0x20000348
 800183c:	200004a0 	.word	0x200004a0

08001840 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	@ (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	@ (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001864:	b480      	push	{r7}
 8001866:	b087      	sub	sp, #28
 8001868:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 800186a:	4b4f      	ldr	r3, [pc, #316]	@ (80019a8 <SystemCoreClockUpdate+0x144>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0308 	and.w	r3, r3, #8
 8001872:	2b00      	cmp	r3, #0
 8001874:	d107      	bne.n	8001886 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001876:	4b4c      	ldr	r3, [pc, #304]	@ (80019a8 <SystemCoreClockUpdate+0x144>)
 8001878:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800187c:	0a1b      	lsrs	r3, r3, #8
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	617b      	str	r3, [r7, #20]
 8001884:	e005      	b.n	8001892 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001886:	4b48      	ldr	r3, [pc, #288]	@ (80019a8 <SystemCoreClockUpdate+0x144>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001892:	4a46      	ldr	r2, [pc, #280]	@ (80019ac <SystemCoreClockUpdate+0x148>)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800189a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800189c:	4b42      	ldr	r3, [pc, #264]	@ (80019a8 <SystemCoreClockUpdate+0x144>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d866      	bhi.n	8001976 <SystemCoreClockUpdate+0x112>
 80018a8:	a201      	add	r2, pc, #4	@ (adr r2, 80018b0 <SystemCoreClockUpdate+0x4c>)
 80018aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018ae:	bf00      	nop
 80018b0:	080018e5 	.word	0x080018e5
 80018b4:	08001977 	.word	0x08001977
 80018b8:	08001977 	.word	0x08001977
 80018bc:	08001977 	.word	0x08001977
 80018c0:	080018ed 	.word	0x080018ed
 80018c4:	08001977 	.word	0x08001977
 80018c8:	08001977 	.word	0x08001977
 80018cc:	08001977 	.word	0x08001977
 80018d0:	080018f5 	.word	0x080018f5
 80018d4:	08001977 	.word	0x08001977
 80018d8:	08001977 	.word	0x08001977
 80018dc:	08001977 	.word	0x08001977
 80018e0:	080018fd 	.word	0x080018fd
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 80018e4:	4a32      	ldr	r2, [pc, #200]	@ (80019b0 <SystemCoreClockUpdate+0x14c>)
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	6013      	str	r3, [r2, #0]
      break;
 80018ea:	e048      	b.n	800197e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80018ec:	4b30      	ldr	r3, [pc, #192]	@ (80019b0 <SystemCoreClockUpdate+0x14c>)
 80018ee:	4a31      	ldr	r2, [pc, #196]	@ (80019b4 <SystemCoreClockUpdate+0x150>)
 80018f0:	601a      	str	r2, [r3, #0]
      break;
 80018f2:	e044      	b.n	800197e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80018f4:	4b2e      	ldr	r3, [pc, #184]	@ (80019b0 <SystemCoreClockUpdate+0x14c>)
 80018f6:	4a30      	ldr	r2, [pc, #192]	@ (80019b8 <SystemCoreClockUpdate+0x154>)
 80018f8:	601a      	str	r2, [r3, #0]
      break;
 80018fa:	e040      	b.n	800197e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80018fc:	4b2a      	ldr	r3, [pc, #168]	@ (80019a8 <SystemCoreClockUpdate+0x144>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f003 0303 	and.w	r3, r3, #3
 8001904:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001906:	4b28      	ldr	r3, [pc, #160]	@ (80019a8 <SystemCoreClockUpdate+0x144>)
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	091b      	lsrs	r3, r3, #4
 800190c:	f003 030f 	and.w	r3, r3, #15
 8001910:	3301      	adds	r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2b02      	cmp	r3, #2
 8001918:	d003      	beq.n	8001922 <SystemCoreClockUpdate+0xbe>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2b03      	cmp	r3, #3
 800191e:	d006      	beq.n	800192e <SystemCoreClockUpdate+0xca>
 8001920:	e00b      	b.n	800193a <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001922:	4a24      	ldr	r2, [pc, #144]	@ (80019b4 <SystemCoreClockUpdate+0x150>)
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	613b      	str	r3, [r7, #16]
          break;
 800192c:	e00b      	b.n	8001946 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 800192e:	4a22      	ldr	r2, [pc, #136]	@ (80019b8 <SystemCoreClockUpdate+0x154>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	fbb2 f3f3 	udiv	r3, r2, r3
 8001936:	613b      	str	r3, [r7, #16]
          break;
 8001938:	e005      	b.n	8001946 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001942:	613b      	str	r3, [r7, #16]
          break;
 8001944:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001946:	4b18      	ldr	r3, [pc, #96]	@ (80019a8 <SystemCoreClockUpdate+0x144>)
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	fb02 f303 	mul.w	r3, r2, r3
 8001956:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001958:	4b13      	ldr	r3, [pc, #76]	@ (80019a8 <SystemCoreClockUpdate+0x144>)
 800195a:	68db      	ldr	r3, [r3, #12]
 800195c:	0e5b      	lsrs	r3, r3, #25
 800195e:	f003 0303 	and.w	r3, r3, #3
 8001962:	3301      	adds	r3, #1
 8001964:	005b      	lsls	r3, r3, #1
 8001966:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001970:	4a0f      	ldr	r2, [pc, #60]	@ (80019b0 <SystemCoreClockUpdate+0x14c>)
 8001972:	6013      	str	r3, [r2, #0]
      break;
 8001974:	e003      	b.n	800197e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001976:	4a0e      	ldr	r2, [pc, #56]	@ (80019b0 <SystemCoreClockUpdate+0x14c>)
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	6013      	str	r3, [r2, #0]
      break;
 800197c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <SystemCoreClockUpdate+0x144>)
 8001980:	689b      	ldr	r3, [r3, #8]
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	f003 030f 	and.w	r3, r3, #15
 8001988:	4a0c      	ldr	r2, [pc, #48]	@ (80019bc <SystemCoreClockUpdate+0x158>)
 800198a:	5cd3      	ldrb	r3, [r2, r3]
 800198c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 800198e:	4b08      	ldr	r3, [pc, #32]	@ (80019b0 <SystemCoreClockUpdate+0x14c>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	fa22 f303 	lsr.w	r3, r2, r3
 8001998:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <SystemCoreClockUpdate+0x14c>)
 800199a:	6013      	str	r3, [r2, #0]
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr
 80019a8:	40021000 	.word	0x40021000
 80019ac:	08009de0 	.word	0x08009de0
 80019b0:	20000008 	.word	0x20000008
 80019b4:	00f42400 	.word	0x00f42400
 80019b8:	016e3600 	.word	0x016e3600
 80019bc:	08009dc8 	.word	0x08009dc8

080019c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 80019c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019c4:	f7ff ff3c 	bl	8001840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019c8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019ca:	e003      	b.n	80019d4 <LoopCopyDataInit>

080019cc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019cc:	4b0b      	ldr	r3, [pc, #44]	@ (80019fc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019ce:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019d0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019d2:	3104      	adds	r1, #4

080019d4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019d4:	480a      	ldr	r0, [pc, #40]	@ (8001a00 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019d6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <LoopForever+0xe>)
	adds	r2, r0, r1
 80019d8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019da:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019dc:	d3f6      	bcc.n	80019cc <CopyDataInit>
	ldr	r2, =_sbss
 80019de:	4a0a      	ldr	r2, [pc, #40]	@ (8001a08 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019e0:	e002      	b.n	80019e8 <LoopFillZerobss>

080019e2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019e2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019e4:	f842 3b04 	str.w	r3, [r2], #4

080019e8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019e8:	4b08      	ldr	r3, [pc, #32]	@ (8001a0c <LoopForever+0x16>)
	cmp	r2, r3
 80019ea:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019ec:	d3f9      	bcc.n	80019e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80019ee:	f004 fe41 	bl	8006674 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019f2:	f7ff faef 	bl	8000fd4 <main>

080019f6 <LoopForever>:

LoopForever:
    b LoopForever
 80019f6:	e7fe      	b.n	80019f6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80019f8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80019fc:	0800a298 	.word	0x0800a298
	ldr	r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a04:	200001dc 	.word	0x200001dc
	ldr	r2, =_sbss
 8001a08:	200001dc 	.word	0x200001dc
	ldr	r3, = _ebss
 8001a0c:	2000049c 	.word	0x2000049c

08001a10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a10:	e7fe      	b.n	8001a10 <ADC1_2_IRQHandler>

08001a12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8001a1c:	2004      	movs	r0, #4
 8001a1e:	f000 f963 	bl	8001ce8 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8001a22:	f7ff ff1f 	bl	8001864 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a26:	2007      	movs	r0, #7
 8001a28:	f000 f80e 	bl	8001a48 <HAL_InitTick>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	71fb      	strb	r3, [r7, #7]
 8001a36:	e001      	b.n	8001a3c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a38:	f7ff fd08 	bl	800144c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
	...

08001a48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a50:	2300      	movs	r3, #0
 8001a52:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001a54:	4b17      	ldr	r3, [pc, #92]	@ (8001ab4 <HAL_InitTick+0x6c>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d023      	beq.n	8001aa4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001a5c:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_InitTick+0x70>)
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	4b14      	ldr	r3, [pc, #80]	@ (8001ab4 <HAL_InitTick+0x6c>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 f96b 	bl	8001d4e <HAL_SYSTICK_Config>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10f      	bne.n	8001a9e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b07      	cmp	r3, #7
 8001a82:	d809      	bhi.n	8001a98 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a84:	2200      	movs	r2, #0
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	f04f 30ff 	mov.w	r0, #4294967295
 8001a8c:	f000 f937 	bl	8001cfe <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a90:	4a0a      	ldr	r2, [pc, #40]	@ (8001abc <HAL_InitTick+0x74>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6013      	str	r3, [r2, #0]
 8001a96:	e007      	b.n	8001aa8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	73fb      	strb	r3, [r7, #15]
 8001a9c:	e004      	b.n	8001aa8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	73fb      	strb	r3, [r7, #15]
 8001aa2:	e001      	b.n	8001aa8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	20000010 	.word	0x20000010
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	2000000c 	.word	0x2000000c

08001ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	@ (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	@ (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000010 	.word	0x20000010
 8001ae4:	2000034c 	.word	0x2000034c

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	@ (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	2000034c 	.word	0x2000034c

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000010 	.word	0x20000010

08001b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b58:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b64:	4013      	ands	r3, r2
 8001b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b6c:	68bb      	ldr	r3, [r7, #8]
 8001b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b7a:	4a04      	ldr	r2, [pc, #16]	@ (8001b8c <__NVIC_SetPriorityGrouping+0x44>)
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	60d3      	str	r3, [r2, #12]
}
 8001b80:	bf00      	nop
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	e000ed00 	.word	0xe000ed00

08001b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b94:	4b04      	ldr	r3, [pc, #16]	@ (8001ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	0a1b      	lsrs	r3, r3, #8
 8001b9a:	f003 0307 	and.w	r3, r3, #7
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	e000ed00 	.word	0xe000ed00

08001bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	db0b      	blt.n	8001bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 021f 	and.w	r2, r3, #31
 8001bc4:	4907      	ldr	r1, [pc, #28]	@ (8001be4 <__NVIC_EnableIRQ+0x38>)
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	095b      	lsrs	r3, r3, #5
 8001bcc:	2001      	movs	r0, #1
 8001bce:	fa00 f202 	lsl.w	r2, r0, r2
 8001bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100

08001be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	6039      	str	r1, [r7, #0]
 8001bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	db0a      	blt.n	8001c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	b2da      	uxtb	r2, r3
 8001c00:	490c      	ldr	r1, [pc, #48]	@ (8001c34 <__NVIC_SetPriority+0x4c>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	0152      	lsls	r2, r2, #5
 8001c08:	b2d2      	uxtb	r2, r2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c10:	e00a      	b.n	8001c28 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	b2da      	uxtb	r2, r3
 8001c16:	4908      	ldr	r1, [pc, #32]	@ (8001c38 <__NVIC_SetPriority+0x50>)
 8001c18:	79fb      	ldrb	r3, [r7, #7]
 8001c1a:	f003 030f 	and.w	r3, r3, #15
 8001c1e:	3b04      	subs	r3, #4
 8001c20:	0152      	lsls	r2, r2, #5
 8001c22:	b2d2      	uxtb	r2, r2
 8001c24:	440b      	add	r3, r1
 8001c26:	761a      	strb	r2, [r3, #24]
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	e000e100 	.word	0xe000e100
 8001c38:	e000ed00 	.word	0xe000ed00

08001c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b089      	sub	sp, #36	@ 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	60f8      	str	r0, [r7, #12]
 8001c44:	60b9      	str	r1, [r7, #8]
 8001c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f003 0307 	and.w	r3, r3, #7
 8001c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	f1c3 0307 	rsb	r3, r3, #7
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	bf28      	it	cs
 8001c5a:	2303      	movcs	r3, #3
 8001c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3303      	adds	r3, #3
 8001c62:	2b06      	cmp	r3, #6
 8001c64:	d902      	bls.n	8001c6c <NVIC_EncodePriority+0x30>
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3b04      	subs	r3, #4
 8001c6a:	e000      	b.n	8001c6e <NVIC_EncodePriority+0x32>
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	f04f 32ff 	mov.w	r2, #4294967295
 8001c74:	69bb      	ldr	r3, [r7, #24]
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	401a      	ands	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c84:	f04f 31ff 	mov.w	r1, #4294967295
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8e:	43d9      	mvns	r1, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c94:	4313      	orrs	r3, r2
         );
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3724      	adds	r7, #36	@ 0x24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
	...

08001ca4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001cb4:	d301      	bcc.n	8001cba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e00f      	b.n	8001cda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cba:	4a0a      	ldr	r2, [pc, #40]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cc2:	2107      	movs	r1, #7
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f7ff ff8e 	bl	8001be8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ccc:	4b05      	ldr	r3, [pc, #20]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cd2:	4b04      	ldr	r3, [pc, #16]	@ (8001ce4 <SysTick_Config+0x40>)
 8001cd4:	2207      	movs	r2, #7
 8001cd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	e000e010 	.word	0xe000e010

08001ce8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ff29 	bl	8001b48 <__NVIC_SetPriorityGrouping>
}
 8001cf6:	bf00      	nop
 8001cf8:	3708      	adds	r7, #8
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b086      	sub	sp, #24
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	4603      	mov	r3, r0
 8001d06:	60b9      	str	r1, [r7, #8]
 8001d08:	607a      	str	r2, [r7, #4]
 8001d0a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff40 	bl	8001b90 <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff90 	bl	8001c3c <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5f 	bl	8001be8 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff33 	bl	8001bac <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa4 	bl	8001ca4 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e142      	b.n	8002000 <HAL_FDCAN_Init+0x298>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d106      	bne.n	8001d94 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff fb80 	bl	8001494 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	699a      	ldr	r2, [r3, #24]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0210 	bic.w	r2, r2, #16
 8001da2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001da4:	f7ff fea0 	bl	8001ae8 <HAL_GetTick>
 8001da8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001daa:	e012      	b.n	8001dd2 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001dac:	f7ff fe9c 	bl	8001ae8 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b0a      	cmp	r3, #10
 8001db8:	d90b      	bls.n	8001dd2 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e116      	b.n	8002000 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	699b      	ldr	r3, [r3, #24]
 8001dd8:	f003 0308 	and.w	r3, r3, #8
 8001ddc:	2b08      	cmp	r3, #8
 8001dde:	d0e5      	beq.n	8001dac <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	699a      	ldr	r2, [r3, #24]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0201 	orr.w	r2, r2, #1
 8001dee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001df0:	f7ff fe7a 	bl	8001ae8 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001df6:	e012      	b.n	8001e1e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001df8:	f7ff fe76 	bl	8001ae8 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b0a      	cmp	r3, #10
 8001e04:	d90b      	bls.n	8001e1e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e0a:	f043 0201 	orr.w	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2203      	movs	r2, #3
 8001e16:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0f0      	b.n	8002000 <HAL_FDCAN_Init+0x298>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d0e5      	beq.n	8001df8 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0202 	orr.w	r2, r2, #2
 8001e3a:	619a      	str	r2, [r3, #24]

  /* Configure Clock divider */
  FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8001e3c:	4a72      	ldr	r2, [pc, #456]	@ (8002008 <HAL_FDCAN_Init+0x2a0>)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	6013      	str	r3, [r2, #0]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	7c1b      	ldrb	r3, [r3, #16]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d108      	bne.n	8001e5e <HAL_FDCAN_Init+0xf6>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699a      	ldr	r2, [r3, #24]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e5a:	619a      	str	r2, [r3, #24]
 8001e5c:	e007      	b.n	8001e6e <HAL_FDCAN_Init+0x106>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699a      	ldr	r2, [r3, #24]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001e6c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7c5b      	ldrb	r3, [r3, #17]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d108      	bne.n	8001e88 <HAL_FDCAN_Init+0x120>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e84:	619a      	str	r2, [r3, #24]
 8001e86:	e007      	b.n	8001e98 <HAL_FDCAN_Init+0x130>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	699a      	ldr	r2, [r3, #24]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001e96:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	7c9b      	ldrb	r3, [r3, #18]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d108      	bne.n	8001eb2 <HAL_FDCAN_Init+0x14a>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	699a      	ldr	r2, [r3, #24]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001eae:	619a      	str	r2, [r3, #24]
 8001eb0:	e007      	b.n	8001ec2 <HAL_FDCAN_Init+0x15a>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	699a      	ldr	r2, [r3, #24]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001ec0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001ee6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	691a      	ldr	r2, [r3, #16]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0210 	bic.w	r2, r2, #16
 8001ef6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d108      	bne.n	8001f12 <HAL_FDCAN_Init+0x1aa>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	699a      	ldr	r2, [r3, #24]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f042 0204 	orr.w	r2, r2, #4
 8001f0e:	619a      	str	r2, [r3, #24]
 8001f10:	e02c      	b.n	8001f6c <HAL_FDCAN_Init+0x204>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	68db      	ldr	r3, [r3, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d028      	beq.n	8001f6c <HAL_FDCAN_Init+0x204>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d01c      	beq.n	8001f5c <HAL_FDCAN_Init+0x1f4>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699a      	ldr	r2, [r3, #24]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001f30:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	691a      	ldr	r2, [r3, #16]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f042 0210 	orr.w	r2, r2, #16
 8001f40:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d110      	bne.n	8001f6c <HAL_FDCAN_Init+0x204>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	699a      	ldr	r2, [r3, #24]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 0220 	orr.w	r2, r2, #32
 8001f58:	619a      	str	r2, [r3, #24]
 8001f5a:	e007      	b.n	8001f6c <HAL_FDCAN_Init+0x204>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699b      	ldr	r3, [r3, #24]
 8001f70:	3b01      	subs	r3, #1
 8001f72:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	69db      	ldr	r3, [r3, #28]
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f7c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001f84:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	695b      	ldr	r3, [r3, #20]
 8001f8c:	3b01      	subs	r3, #1
 8001f8e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001f94:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001f96:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001fa0:	d115      	bne.n	8001fce <HAL_FDCAN_Init+0x266>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa6:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fac:	3b01      	subs	r3, #1
 8001fae:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001fb0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8001fba:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8001fca:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8001fcc:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001fe4:	6878      	ldr	r0, [r7, #4]
 8001fe6:	f000 fc53 	bl	8002890 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 8001ffe:	2300      	movs	r3, #0
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	4000a500 	.word	0x4000a500

0800200c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 800200c:	b480      	push	{r7}
 800200e:	b087      	sub	sp, #28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800201c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800201e:	7dfb      	ldrb	r3, [r7, #23]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d002      	beq.n	800202a <HAL_FDCAN_ConfigFilter+0x1e>
 8002024:	7dfb      	ldrb	r3, [r7, #23]
 8002026:	2b02      	cmp	r3, #2
 8002028:	d13d      	bne.n	80020a6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d119      	bne.n	8002066 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800203e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8002046:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	4413      	add	r3, r2
 800205c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	e01d      	b.n	80020a2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	68db      	ldr	r3, [r3, #12]
 800206a:	075a      	lsls	r2, r3, #29
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	079a      	lsls	r2, r3, #30
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	695b      	ldr	r3, [r3, #20]
 800207e:	4313      	orrs	r3, r2
 8002080:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	693a      	ldr	r2, [r7, #16]
 8002094:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	3304      	adds	r3, #4
 800209a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80020a2:	2300      	movs	r3, #0
 80020a4:	e006      	b.n	80020b4 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020aa:	f043 0202 	orr.w	r2, r3, #2
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
  }
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b083      	sub	sp, #12
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d110      	bne.n	80020f6 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2202      	movs	r2, #2
 80020d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f022 0201 	bic.w	r2, r2, #1
 80020ea:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 80020f2:	2300      	movs	r3, #0
 80020f4:	e006      	b.n	8002104 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fa:	f043 0204 	orr.w	r2, r3, #4
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
  }
}
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                                const uint8_t *pTxData)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002122:	b2db      	uxtb	r3, r3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d12c      	bne.n	8002182 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002130:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d007      	beq.n	8002148 <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800213c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e023      	b.n	8002190 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	68b9      	ldr	r1, [r7, #8]
 800215e:	68f8      	ldr	r0, [r7, #12]
 8002160:	f000 fbec 	bl	800293c <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2101      	movs	r1, #1
 800216a:	697a      	ldr	r2, [r7, #20]
 800216c:	fa01 f202 	lsl.w	r2, r1, r2
 8002170:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8002174:	2201      	movs	r2, #1
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	409a      	lsls	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Return function status */
    return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e006      	b.n	8002190 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002186:	f043 0208 	orr.w	r2, r3, #8
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
  }
}
 8002190:	4618      	mov	r0, r3
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8002198:	b480      	push	{r7}
 800219a:	b08b      	sub	sp, #44	@ 0x2c
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
 80021a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80021b0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80021b2:	7efb      	ldrb	r3, [r7, #27]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	f040 80e8 	bne.w	800238a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	2b40      	cmp	r3, #64	@ 0x40
 80021be:	d137      	bne.n	8002230 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d107      	bne.n	80021e0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0db      	b.n	8002398 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e8:	0e1b      	lsrs	r3, r3, #24
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d10a      	bne.n	8002208 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80021fa:	0a5b      	lsrs	r3, r3, #9
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d101      	bne.n	8002208 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002204:	2301      	movs	r3, #1
 8002206:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	69fa      	ldr	r2, [r7, #28]
 8002218:	4413      	add	r3, r2
 800221a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	440b      	add	r3, r1
 800222c:	627b      	str	r3, [r7, #36]	@ 0x24
 800222e:	e036      	b.n	800229e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002238:	f003 030f 	and.w	r3, r3, #15
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002244:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0a3      	b.n	8002398 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002258:	0e1b      	lsrs	r3, r3, #24
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10a      	bne.n	8002278 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800226a:	0a1b      	lsrs	r3, r3, #8
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8002274:	2301      	movs	r3, #1
 8002276:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002280:	0a1b      	lsrs	r3, r3, #8
 8002282:	f003 0303 	and.w	r3, r3, #3
 8002286:	69fa      	ldr	r2, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002290:	69fa      	ldr	r2, [r7, #28]
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	440b      	add	r3, r1
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800229e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d107      	bne.n	80022c2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80022b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0c9b      	lsrs	r3, r3, #18
 80022b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e005      	b.n	80022ce <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80022c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80022ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80022da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80022e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e8:	3304      	adds	r3, #4
 80022ea:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b29a      	uxth	r2, r3
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80022f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0c1b      	lsrs	r3, r3, #16
 80022fc:	f003 020f 	and.w	r2, r3, #15
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8002304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8002310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	0e1b      	lsrs	r3, r3, #24
 8002322:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800232a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0fda      	lsrs	r2, r3, #31
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8002334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002336:	3304      	adds	r3, #4
 8002338:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800233a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800233c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
 8002342:	e00a      	b.n	800235a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	441a      	add	r2, r3
 800234a:	6839      	ldr	r1, [r7, #0]
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	440b      	add	r3, r1
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8002354:	6a3b      	ldr	r3, [r7, #32]
 8002356:	3301      	adds	r3, #1
 8002358:	623b      	str	r3, [r7, #32]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8002360:	5cd3      	ldrb	r3, [r2, r3]
 8002362:	461a      	mov	r2, r3
 8002364:	6a3b      	ldr	r3, [r7, #32]
 8002366:	4293      	cmp	r3, r2
 8002368:	d3ec      	bcc.n	8002344 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b40      	cmp	r3, #64	@ 0x40
 800236e:	d105      	bne.n	800237c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69fa      	ldr	r2, [r7, #28]
 8002376:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800237a:	e004      	b.n	8002386 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	69fa      	ldr	r2, [r7, #28]
 8002382:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	e006      	b.n	8002398 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238e:	f043 0208 	orr.w	r2, r3, #8
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
  }
}
 8002398:	4618      	mov	r0, r3
 800239a:	372c      	adds	r7, #44	@ 0x2c
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	08009e20 	.word	0x08009e20

080023a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b087      	sub	sp, #28
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80023ba:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80023bc:	7dfb      	ldrb	r3, [r7, #23]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d003      	beq.n	80023ca <HAL_FDCAN_ActivateNotification+0x22>
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	f040 80c8 	bne.w	800255a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023d0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	f003 0301 	and.w	r3, r3, #1
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d03b      	beq.n	800245e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d004      	beq.n	80023fa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	f003 0302 	and.w	r3, r3, #2
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d031      	beq.n	800245e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8002400:	2b00      	cmp	r3, #0
 8002402:	d004      	beq.n	800240e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b00      	cmp	r3, #0
 800240c:	d027      	beq.n	800245e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b00      	cmp	r3, #0
 8002420:	d01d      	beq.n	800245e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	f003 0310 	and.w	r3, r3, #16
 8002432:	2b00      	cmp	r3, #0
 8002434:	d013      	beq.n	800245e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	f003 0320 	and.w	r3, r3, #32
 8002446:	2b00      	cmp	r3, #0
 8002448:	d009      	beq.n	800245e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00c      	beq.n	800246e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d107      	bne.n	800246e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f042 0201 	orr.w	r2, r2, #1
 800246c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	f003 0307 	and.w	r3, r3, #7
 8002474:	2b00      	cmp	r3, #0
 8002476:	d004      	beq.n	8002482 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d13b      	bne.n	80024fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d131      	bne.n	80024fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800249c:	2b00      	cmp	r3, #0
 800249e:	d004      	beq.n	80024aa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d127      	bne.n	80024fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d004      	beq.n	80024be <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d11d      	bne.n	80024fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d113      	bne.n	80024fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d004      	beq.n	80024e6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	f003 0320 	and.w	r3, r3, #32
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d109      	bne.n	80024fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00c      	beq.n	800250a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f042 0202 	orr.w	r2, r2, #2
 8002508:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002510:	2b00      	cmp	r3, #0
 8002512:	d009      	beq.n	8002528 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	430a      	orrs	r2, r1
 8002524:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	430a      	orrs	r2, r1
 8002542:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68ba      	ldr	r2, [r7, #8]
 8002552:	430a      	orrs	r2, r1
 8002554:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8002556:	2300      	movs	r3, #0
 8002558:	e006      	b.n	8002568 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800255e:	f043 0202 	orr.w	r2, r3, #2
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
  }
}
 8002568:	4618      	mov	r0, r3
 800256a:	371c      	adds	r7, #28
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08c      	sub	sp, #48	@ 0x30
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002582:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8002586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002590:	4013      	ands	r3, r2
 8002592:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025a8:	4013      	ands	r3, r2
 80025aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80025b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025c0:	4013      	ands	r3, r2
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ca:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80025ce:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d6:	6a3a      	ldr	r2, [r7, #32]
 80025d8:	4013      	ands	r3, r2
 80025da:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80025e6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025ee:	69fa      	ldr	r2, [r7, #28]
 80025f0:	4013      	ands	r3, r2
 80025f2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025fa:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002602:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d006      	beq.n	8002626 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2240      	movs	r2, #64	@ 0x40
 800261e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f916 	bl	8002852 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d019      	beq.n	8002664 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d014      	beq.n	8002664 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8002642:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800265a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800265c:	6939      	ldr	r1, [r7, #16]
 800265e:	6878      	ldr	r0, [r7, #4]
 8002660:	f000 f8d8 	bl	8002814 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8002664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002666:	2b00      	cmp	r3, #0
 8002668:	d007      	beq.n	800267a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002670:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8002672:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 f8a2 	bl	80027be <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800267a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267c:	2b00      	cmp	r3, #0
 800267e:	d007      	beq.n	8002690 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002686:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8002688:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe fec0 	bl	8001410 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8002690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800269c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800269e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 f897 	bl	80027d4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d00c      	beq.n	80026ca <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80026b0:	69bb      	ldr	r3, [r7, #24]
 80026b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80026c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f890 	bl	80027ea <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d018      	beq.n	8002706 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d013      	beq.n	8002706 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80026e6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	4013      	ands	r3, r2
 80026f4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2280      	movs	r2, #128	@ 0x80
 80026fc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80026fe:	68f9      	ldr	r1, [r7, #12]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f87c 	bl	80027fe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00c      	beq.n	800272a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d007      	beq.n	800272a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002722:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f880 	bl	800282a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00c      	beq.n	800274e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d007      	beq.n	800274e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002746:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 f878 	bl	800283e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d00f      	beq.n	8002778 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d00a      	beq.n	8002778 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800276a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002770:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d007      	beq.n	800278e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	69fa      	ldr	r2, [r7, #28]
 8002784:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8002786:	69f9      	ldr	r1, [r7, #28]
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 f876 	bl	800287a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800278e:	6a3b      	ldr	r3, [r7, #32]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d009      	beq.n	80027a8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6a3a      	ldr	r2, [r7, #32]
 800279a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80027a0:	6a3b      	ldr	r3, [r7, #32]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d002      	beq.n	80027b6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f858 	bl	8002866 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80027b6:	bf00      	nop
 80027b8:	3730      	adds	r7, #48	@ 0x30
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80027c8:	bf00      	nop
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
 8002806:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800281e:	bf00      	nop
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr

0800283e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]
 8002882:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8002898:	4b27      	ldr	r3, [pc, #156]	@ (8002938 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 800289a:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028aa:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028b2:	041a      	lsls	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028d0:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d8:	061a      	lsls	r2, r3, #24
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	430a      	orrs	r2, r1
 80028e0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	60fb      	str	r3, [r7, #12]
 8002910:	e005      	b.n	800291e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	3304      	adds	r3, #4
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	429a      	cmp	r2, r3
 8002928:	d3f3      	bcc.n	8002912 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	4000ac00 	.word	0x4000ac00

0800293c <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(const FDCAN_HandleTypeDef *hfdcan, const FDCAN_TxHeaderTypeDef *pTxHeader,
                                   const uint8_t *pTxData, uint32_t BufferIndex)
{
 800293c:	b480      	push	{r7}
 800293e:	b089      	sub	sp, #36	@ 0x24
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
 8002948:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10a      	bne.n	8002968 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800295a:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002962:	4313      	orrs	r3, r2
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	e00a      	b.n	800297e <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002970:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8002976:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002978:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800297c:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8002988:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800298e:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002994:	431a      	orrs	r2, r3
                 (pTxHeader->DataLength << 16U));
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	68db      	ldr	r3, [r3, #12]
 800299a:	041b      	lsls	r3, r3, #16
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800299c:	4313      	orrs	r3, r2
 800299e:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80029a4:	683a      	ldr	r2, [r7, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4413      	add	r3, r2
 80029ac:	00db      	lsls	r3, r3, #3
 80029ae:	440b      	add	r3, r1
 80029b0:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	69fa      	ldr	r2, [r7, #28]
 80029b6:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	3304      	adds	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	3304      	adds	r3, #4
 80029c8:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	e020      	b.n	8002a12 <FDCAN_CopyMessageToRAM+0xd6>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	3303      	adds	r3, #3
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	3302      	adds	r3, #2
 80029e0:	6879      	ldr	r1, [r7, #4]
 80029e2:	440b      	add	r3, r1
 80029e4:	781b      	ldrb	r3, [r3, #0]
 80029e6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80029e8:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	3301      	adds	r3, #1
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	440b      	add	r3, r1
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80029f6:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80029f8:	6879      	ldr	r1, [r7, #4]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	440a      	add	r2, r1
 80029fe:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8002a00:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	3304      	adds	r3, #4
 8002a0a:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	3304      	adds	r3, #4
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4a06      	ldr	r2, [pc, #24]	@ (8002a30 <FDCAN_CopyMessageToRAM+0xf4>)
 8002a18:	5cd3      	ldrb	r3, [r2, r3]
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d3d6      	bcc.n	80029d0 <FDCAN_CopyMessageToRAM+0x94>
  }
}
 8002a22:	bf00      	nop
 8002a24:	bf00      	nop
 8002a26:	3724      	adds	r7, #36	@ 0x24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	08009e20 	.word	0x08009e20

08002a34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002a42:	e158      	b.n	8002cf6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	2101      	movs	r1, #1
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a50:	4013      	ands	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 814a 	beq.w	8002cf0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d005      	beq.n	8002a74 <HAL_GPIO_Init+0x40>
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0303 	and.w	r3, r3, #3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d130      	bne.n	8002ad6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	2203      	movs	r2, #3
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	43db      	mvns	r3, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4013      	ands	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68da      	ldr	r2, [r3, #12]
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	693a      	ldr	r2, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	693a      	ldr	r2, [r7, #16]
 8002aa2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002aaa:	2201      	movs	r2, #1
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43db      	mvns	r3, r3
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	091b      	lsrs	r3, r3, #4
 8002ac0:	f003 0201 	and.w	r2, r3, #1
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	693a      	ldr	r2, [r7, #16]
 8002ad4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d017      	beq.n	8002b12 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	2203      	movs	r2, #3
 8002aee:	fa02 f303 	lsl.w	r3, r2, r3
 8002af2:	43db      	mvns	r3, r3
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4013      	ands	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	689a      	ldr	r2, [r3, #8]
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	fa02 f303 	lsl.w	r3, r2, r3
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 0303 	and.w	r3, r3, #3
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d123      	bne.n	8002b66 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	08da      	lsrs	r2, r3, #3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	3208      	adds	r2, #8
 8002b26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	08da      	lsrs	r2, r3, #3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3208      	adds	r2, #8
 8002b60:	6939      	ldr	r1, [r7, #16]
 8002b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	2203      	movs	r2, #3
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0203 	and.w	r2, r3, #3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b8e:	693a      	ldr	r2, [r7, #16]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	693a      	ldr	r2, [r7, #16]
 8002b98:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	f000 80a4 	beq.w	8002cf0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8002ba8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3318      	adds	r3, #24
 8002bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bb4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	220f      	movs	r2, #15
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a52      	ldr	r2, [pc, #328]	@ (8002d18 <HAL_GPIO_Init+0x2e4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d025      	beq.n	8002c20 <HAL_GPIO_Init+0x1ec>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a51      	ldr	r2, [pc, #324]	@ (8002d1c <HAL_GPIO_Init+0x2e8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d01f      	beq.n	8002c1c <HAL_GPIO_Init+0x1e8>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a50      	ldr	r2, [pc, #320]	@ (8002d20 <HAL_GPIO_Init+0x2ec>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d019      	beq.n	8002c18 <HAL_GPIO_Init+0x1e4>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a4f      	ldr	r2, [pc, #316]	@ (8002d24 <HAL_GPIO_Init+0x2f0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d013      	beq.n	8002c14 <HAL_GPIO_Init+0x1e0>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a4e      	ldr	r2, [pc, #312]	@ (8002d28 <HAL_GPIO_Init+0x2f4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d00d      	beq.n	8002c10 <HAL_GPIO_Init+0x1dc>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a4d      	ldr	r2, [pc, #308]	@ (8002d2c <HAL_GPIO_Init+0x2f8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d007      	beq.n	8002c0c <HAL_GPIO_Init+0x1d8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a4c      	ldr	r2, [pc, #304]	@ (8002d30 <HAL_GPIO_Init+0x2fc>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d101      	bne.n	8002c08 <HAL_GPIO_Init+0x1d4>
 8002c04:	2306      	movs	r3, #6
 8002c06:	e00c      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c08:	2307      	movs	r3, #7
 8002c0a:	e00a      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c0c:	2305      	movs	r3, #5
 8002c0e:	e008      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e006      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c14:	2303      	movs	r3, #3
 8002c16:	e004      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e002      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <HAL_GPIO_Init+0x1ee>
 8002c20:	2300      	movs	r3, #0
 8002c22:	697a      	ldr	r2, [r7, #20]
 8002c24:	f002 0203 	and.w	r2, r2, #3
 8002c28:	00d2      	lsls	r2, r2, #3
 8002c2a:	4093      	lsls	r3, r2
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8002c32:	4938      	ldr	r1, [pc, #224]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	089b      	lsrs	r3, r3, #2
 8002c38:	3318      	adds	r3, #24
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c40:	4b34      	ldr	r3, [pc, #208]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	693a      	ldr	r2, [r7, #16]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002c64:	4a2b      	ldr	r2, [pc, #172]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002c6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	43db      	mvns	r3, r3
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4013      	ands	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c8e:	4a21      	ldr	r2, [pc, #132]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c94:	4b1f      	ldr	r3, [pc, #124]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d003      	beq.n	8002cba <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002cba:	4a16      	ldr	r2, [pc, #88]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        temp = EXTI->IMR1;
 8002cc2:	4b14      	ldr	r3, [pc, #80]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002cc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	693a      	ldr	r2, [r7, #16]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <HAL_GPIO_Init+0x2e0>)
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }

    position++;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f47f ae9f 	bne.w	8002a44 <HAL_GPIO_Init+0x10>
  }
}
 8002d06:	bf00      	nop
 8002d08:	bf00      	nop
 8002d0a:	371c      	adds	r7, #28
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	4002f400 	.word	0x4002f400
 8002d18:	42020000 	.word	0x42020000
 8002d1c:	42020400 	.word	0x42020400
 8002d20:	42020800 	.word	0x42020800
 8002d24:	42020c00 	.word	0x42020c00
 8002d28:	42021000 	.word	0x42021000
 8002d2c:	42021400 	.word	0x42021400
 8002d30:	42021800 	.word	0x42021800

08002d34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	807b      	strh	r3, [r7, #2]
 8002d40:	4613      	mov	r3, r2
 8002d42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d44:	787b      	ldrb	r3, [r7, #1]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002d4a:	887a      	ldrh	r2, [r7, #2]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002d50:	e002      	b.n	8002d58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002d52:	887a      	ldrh	r2, [r7, #2]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b085      	sub	sp, #20
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
 8002d80:	e007      	b.n	8002d92 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f023 0204 	bic.w	r2, r3, #4
 8002d8a:	4905      	ldr	r1, [pc, #20]	@ (8002da0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	600b      	str	r3, [r1, #0]
  }

  return status;
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40030400 	.word	0x40030400

08002da4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8002da4:	b480      	push	{r7}
 8002da6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <HAL_ICACHE_Enable+0x1c>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a04      	ldr	r2, [pc, #16]	@ (8002dc0 <HAL_ICACHE_Enable+0x1c>)
 8002dae:	f043 0301 	orr.w	r3, r3, #1
 8002db2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8002db4:	2300      	movs	r3, #0
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40030400 	.word	0x40030400

08002dc4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8002dc8:	4b04      	ldr	r3, [pc, #16]	@ (8002ddc <HAL_PWREx_GetVoltageRange+0x18>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr
 8002dda:	bf00      	nop
 8002ddc:	40007000 	.word	0x40007000

08002de0 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8002de8:	4b27      	ldr	r3, [pc, #156]	@ (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002df0:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8002df2:	f000 f861 	bl	8002eb8 <HAL_PWREx_SMPS_GetEffectiveMode>
 8002df6:	4603      	mov	r3, r0
 8002df8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dfc:	d101      	bne.n	8002e02 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e03e      	b.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8002e02:	4b21      	ldr	r3, [pc, #132]	@ (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e0a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e0e:	d101      	bne.n	8002e14 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e035      	b.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8002e14:	68ba      	ldr	r2, [r7, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d101      	bne.n	8002e20 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e02f      	b.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002e20:	4b19      	ldr	r3, [pc, #100]	@ (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 8002e28:	4917      	ldr	r1, [pc, #92]	@ (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8002e30:	4b16      	ldr	r3, [pc, #88]	@ (8002e8c <HAL_PWREx_ControlVoltageScaling+0xac>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	095b      	lsrs	r3, r3, #5
 8002e36:	4a16      	ldr	r2, [pc, #88]	@ (8002e90 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8002e38:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3c:	09db      	lsrs	r3, r3, #7
 8002e3e:	2232      	movs	r2, #50	@ 0x32
 8002e40:	fb02 f303 	mul.w	r3, r2, r3
 8002e44:	4a13      	ldr	r2, [pc, #76]	@ (8002e94 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8002e46:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4a:	08db      	lsrs	r3, r3, #3
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e50:	e002      	b.n	8002e58 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e58:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e64:	d102      	bne.n	8002e6c <HAL_PWREx_ControlVoltageScaling+0x8c>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f2      	bne.n	8002e52 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e6c:	4b06      	ldr	r3, [pc, #24]	@ (8002e88 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e6e:	695b      	ldr	r3, [r3, #20]
 8002e70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e78:	d101      	bne.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e000      	b.n	8002e80 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	20000008 	.word	0x20000008
 8002e90:	0a7c5ac5 	.word	0x0a7c5ac5
 8002e94:	cccccccd 	.word	0xcccccccd

08002e98 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002e9c:	4b05      	ldr	r3, [pc, #20]	@ (8002eb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	4a04      	ldr	r2, [pc, #16]	@ (8002eb4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002ea2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ea6:	6093      	str	r3, [r2, #8]
}
 8002ea8:	bf00      	nop
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
 8002eb2:	bf00      	nop
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8002ebe:	4b0f      	ldr	r3, [pc, #60]	@ (8002efc <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8002ece:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ed2:	607b      	str	r3, [r7, #4]
 8002ed4:	e00a      	b.n	8002eec <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d103      	bne.n	8002ee8 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8002ee0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002ee4:	607b      	str	r3, [r7, #4]
 8002ee6:	e001      	b.n	8002eec <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8002eec:	687b      	ldr	r3, [r7, #4]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	40007000 	.word	0x40007000

08002f00 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b088      	sub	sp, #32
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d102      	bne.n	8002f14 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f000 bcc2 	b.w	8003898 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f14:	4b99      	ldr	r3, [pc, #612]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 030c 	and.w	r3, r3, #12
 8002f1c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f1e:	4b97      	ldr	r3, [pc, #604]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002f20:	68db      	ldr	r3, [r3, #12]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80e9 	beq.w	8003108 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d006      	beq.n	8002f4a <HAL_RCC_OscConfig+0x4a>
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	2b0c      	cmp	r3, #12
 8002f40:	f040 8083 	bne.w	800304a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d17f      	bne.n	800304a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f4a:	4b8c      	ldr	r3, [pc, #560]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d006      	beq.n	8002f64 <HAL_RCC_OscConfig+0x64>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	69db      	ldr	r3, [r3, #28]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d102      	bne.n	8002f64 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f000 bc9a 	b.w	8003898 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f68:	4b84      	ldr	r3, [pc, #528]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d004      	beq.n	8002f7e <HAL_RCC_OscConfig+0x7e>
 8002f74:	4b81      	ldr	r3, [pc, #516]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f7c:	e005      	b.n	8002f8a <HAL_RCC_OscConfig+0x8a>
 8002f7e:	4b7f      	ldr	r3, [pc, #508]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002f80:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d224      	bcs.n	8002fd8 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fe9c 	bl	8003cd0 <RCC_SetFlashLatencyFromMSIRange>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	f000 bc7a 	b.w	8003898 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa4:	4b75      	ldr	r3, [pc, #468]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a74      	ldr	r2, [pc, #464]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002faa:	f043 0308 	orr.w	r3, r3, #8
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	4b72      	ldr	r3, [pc, #456]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	496f      	ldr	r1, [pc, #444]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fc2:	4b6e      	ldr	r3, [pc, #440]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	021b      	lsls	r3, r3, #8
 8002fd0:	496a      	ldr	r1, [pc, #424]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	604b      	str	r3, [r1, #4]
 8002fd6:	e026      	b.n	8003026 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fd8:	4b68      	ldr	r3, [pc, #416]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4a67      	ldr	r2, [pc, #412]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002fde:	f043 0308 	orr.w	r3, r3, #8
 8002fe2:	6013      	str	r3, [r2, #0]
 8002fe4:	4b65      	ldr	r3, [pc, #404]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ff0:	4962      	ldr	r1, [pc, #392]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ff6:	4b61      	ldr	r3, [pc, #388]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	495d      	ldr	r1, [pc, #372]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fe5b 	bl	8003cd0 <RCC_SetFlashLatencyFromMSIRange>
 800301a:	4603      	mov	r3, r0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	f000 bc39 	b.w	8003898 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003026:	f000 fe17 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 800302a:	4603      	mov	r3, r0
 800302c:	4a54      	ldr	r2, [pc, #336]	@ (8003180 <HAL_RCC_OscConfig+0x280>)
 800302e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003030:	4b54      	ldr	r3, [pc, #336]	@ (8003184 <HAL_RCC_OscConfig+0x284>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fe fd07 	bl	8001a48 <HAL_InitTick>
 800303a:	4603      	mov	r3, r0
 800303c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 800303e:	7bfb      	ldrb	r3, [r7, #15]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d060      	beq.n	8003106 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8003044:	7bfb      	ldrb	r3, [r7, #15]
 8003046:	f000 bc27 	b.w	8003898 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d039      	beq.n	80030c6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003052:	4b4a      	ldr	r3, [pc, #296]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a49      	ldr	r2, [pc, #292]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800305e:	f7fe fd43 	bl	8001ae8 <HAL_GetTick>
 8003062:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003064:	e00f      	b.n	8003086 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003066:	f7fe fd3f 	bl	8001ae8 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	2b02      	cmp	r3, #2
 8003072:	d908      	bls.n	8003086 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003074:	4b41      	ldr	r3, [pc, #260]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d102      	bne.n	8003086 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8003080:	2303      	movs	r3, #3
 8003082:	f000 bc09 	b.w	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003086:	4b3d      	ldr	r3, [pc, #244]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 0302 	and.w	r3, r3, #2
 800308e:	2b00      	cmp	r3, #0
 8003090:	d0e9      	beq.n	8003066 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003092:	4b3a      	ldr	r3, [pc, #232]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a39      	ldr	r2, [pc, #228]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003098:	f043 0308 	orr.w	r3, r3, #8
 800309c:	6013      	str	r3, [r2, #0]
 800309e:	4b37      	ldr	r3, [pc, #220]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030aa:	4934      	ldr	r1, [pc, #208]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030b0:	4b32      	ldr	r3, [pc, #200]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6a1b      	ldr	r3, [r3, #32]
 80030bc:	021b      	lsls	r3, r3, #8
 80030be:	492f      	ldr	r1, [pc, #188]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	604b      	str	r3, [r1, #4]
 80030c4:	e020      	b.n	8003108 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80030c6:	4b2d      	ldr	r3, [pc, #180]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a2c      	ldr	r2, [pc, #176]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 80030cc:	f023 0301 	bic.w	r3, r3, #1
 80030d0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d2:	f7fe fd09 	bl	8001ae8 <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030d8:	e00e      	b.n	80030f8 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030da:	f7fe fd05 	bl	8001ae8 <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d907      	bls.n	80030f8 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030e8:	4b24      	ldr	r3, [pc, #144]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e3cf      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030f8:	4b20      	ldr	r3, [pc, #128]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ea      	bne.n	80030da <HAL_RCC_OscConfig+0x1da>
 8003104:	e000      	b.n	8003108 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003106:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d07e      	beq.n	8003212 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b08      	cmp	r3, #8
 8003118:	d005      	beq.n	8003126 <HAL_RCC_OscConfig+0x226>
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b0c      	cmp	r3, #12
 800311e:	d10e      	bne.n	800313e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	2b03      	cmp	r3, #3
 8003124:	d10b      	bne.n	800313e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003126:	4b15      	ldr	r3, [pc, #84]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d06e      	beq.n	8003210 <HAL_RCC_OscConfig+0x310>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d16a      	bne.n	8003210 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e3ac      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x256>
 8003148:	4b0c      	ldr	r3, [pc, #48]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a0b      	ldr	r2, [pc, #44]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	e024      	b.n	80031a0 <HAL_RCC_OscConfig+0x2a0>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800315e:	d113      	bne.n	8003188 <HAL_RCC_OscConfig+0x288>
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a05      	ldr	r2, [pc, #20]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003166:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b03      	ldr	r3, [pc, #12]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a02      	ldr	r2, [pc, #8]	@ (800317c <HAL_RCC_OscConfig+0x27c>)
 8003172:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003176:	6013      	str	r3, [r2, #0]
 8003178:	e012      	b.n	80031a0 <HAL_RCC_OscConfig+0x2a0>
 800317a:	bf00      	nop
 800317c:	40021000 	.word	0x40021000
 8003180:	20000008 	.word	0x20000008
 8003184:	2000000c 	.word	0x2000000c
 8003188:	4b8b      	ldr	r3, [pc, #556]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a8a      	ldr	r2, [pc, #552]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800318e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003192:	6013      	str	r3, [r2, #0]
 8003194:	4b88      	ldr	r3, [pc, #544]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a87      	ldr	r2, [pc, #540]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800319a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800319e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d019      	beq.n	80031dc <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fe fc9e 	bl	8001ae8 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ae:	e00e      	b.n	80031ce <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031b0:	f7fe fc9a 	bl	8001ae8 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b64      	cmp	r3, #100	@ 0x64
 80031bc:	d907      	bls.n	80031ce <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031be:	4b7e      	ldr	r3, [pc, #504]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e364      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031ce:	4b7a      	ldr	r3, [pc, #488]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ea      	beq.n	80031b0 <HAL_RCC_OscConfig+0x2b0>
 80031da:	e01a      	b.n	8003212 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031dc:	f7fe fc84 	bl	8001ae8 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031e2:	e00e      	b.n	8003202 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031e4:	f7fe fc80 	bl	8001ae8 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b64      	cmp	r3, #100	@ 0x64
 80031f0:	d907      	bls.n	8003202 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031f2:	4b71      	ldr	r3, [pc, #452]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e34a      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003202:	4b6d      	ldr	r3, [pc, #436]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1ea      	bne.n	80031e4 <HAL_RCC_OscConfig+0x2e4>
 800320e:	e000      	b.n	8003212 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d06c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b04      	cmp	r3, #4
 8003222:	d005      	beq.n	8003230 <HAL_RCC_OscConfig+0x330>
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	2b0c      	cmp	r3, #12
 8003228:	d119      	bne.n	800325e <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b02      	cmp	r3, #2
 800322e:	d116      	bne.n	800325e <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003230:	4b61      	ldr	r3, [pc, #388]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_OscConfig+0x348>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d101      	bne.n	8003248 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e327      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003248:	4b5b      	ldr	r3, [pc, #364]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	061b      	lsls	r3, r3, #24
 8003256:	4958      	ldr	r1, [pc, #352]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800325c:	e04c      	b.n	80032f8 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d029      	beq.n	80032ba <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003266:	4b54      	ldr	r3, [pc, #336]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a53      	ldr	r2, [pc, #332]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800326c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe fc39 	bl	8001ae8 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003278:	e00e      	b.n	8003298 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800327a:	f7fe fc35 	bl	8001ae8 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d907      	bls.n	8003298 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003288:	4b4b      	ldr	r3, [pc, #300]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003290:	2b00      	cmp	r3, #0
 8003292:	d101      	bne.n	8003298 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e2ff      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003298:	4b47      	ldr	r3, [pc, #284]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d0ea      	beq.n	800327a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a4:	4b44      	ldr	r3, [pc, #272]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	691b      	ldr	r3, [r3, #16]
 80032b0:	061b      	lsls	r3, r3, #24
 80032b2:	4941      	ldr	r1, [pc, #260]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	604b      	str	r3, [r1, #4]
 80032b8:	e01e      	b.n	80032f8 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032ba:	4b3f      	ldr	r3, [pc, #252]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a3e      	ldr	r2, [pc, #248]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80032c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c6:	f7fe fc0f 	bl	8001ae8 <HAL_GetTick>
 80032ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032cc:	e00e      	b.n	80032ec <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ce:	f7fe fc0b 	bl	8001ae8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d907      	bls.n	80032ec <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032dc:	4b36      	ldr	r3, [pc, #216]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e2d5      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80032ec:	4b32      	ldr	r3, [pc, #200]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1ea      	bne.n	80032ce <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d062      	beq.n	80033ca <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d038      	beq.n	800337e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003314:	4b28      	ldr	r3, [pc, #160]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800331a:	4a27      	ldr	r2, [pc, #156]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800331c:	f023 0310 	bic.w	r3, r3, #16
 8003320:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8003324:	e007      	b.n	8003336 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 8003326:	4b24      	ldr	r3, [pc, #144]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800332c:	4a22      	ldr	r2, [pc, #136]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800332e:	f043 0310 	orr.w	r3, r3, #16
 8003332:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003336:	4b20      	ldr	r3, [pc, #128]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003338:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800333c:	4a1e      	ldr	r2, [pc, #120]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800333e:	f043 0301 	orr.w	r3, r3, #1
 8003342:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003346:	f7fe fbcf 	bl	8001ae8 <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800334c:	e00f      	b.n	800336e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334e:	f7fe fbcb 	bl	8001ae8 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b07      	cmp	r3, #7
 800335a:	d908      	bls.n	800336e <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800335c:	4b16      	ldr	r3, [pc, #88]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 800335e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e294      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800336e:	4b12      	ldr	r3, [pc, #72]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003370:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003374:	f003 0302 	and.w	r3, r3, #2
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0e8      	beq.n	800334e <HAL_RCC_OscConfig+0x44e>
 800337c:	e025      	b.n	80033ca <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800337e:	4b0e      	ldr	r3, [pc, #56]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003380:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003384:	4a0c      	ldr	r2, [pc, #48]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 8003386:	f023 0301 	bic.w	r3, r3, #1
 800338a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338e:	f7fe fbab 	bl	8001ae8 <HAL_GetTick>
 8003392:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003394:	e012      	b.n	80033bc <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003396:	f7fe fba7 	bl	8001ae8 <HAL_GetTick>
 800339a:	4602      	mov	r2, r0
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b07      	cmp	r3, #7
 80033a2:	d90b      	bls.n	80033bc <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a4:	4b04      	ldr	r3, [pc, #16]	@ (80033b8 <HAL_RCC_OscConfig+0x4b8>)
 80033a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d004      	beq.n	80033bc <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e270      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033bc:	4ba8      	ldr	r3, [pc, #672]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80033be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1e5      	bne.n	8003396 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f000 812d 	beq.w	8003632 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033d8:	2300      	movs	r3, #0
 80033da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033dc:	4ba0      	ldr	r3, [pc, #640]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80033de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10d      	bne.n	8003404 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033e8:	4b9d      	ldr	r3, [pc, #628]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80033ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033ec:	4a9c      	ldr	r2, [pc, #624]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80033ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80033f4:	4b9a      	ldr	r3, [pc, #616]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033fc:	60bb      	str	r3, [r7, #8]
 80033fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003400:	2301      	movs	r3, #1
 8003402:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003404:	4b97      	ldr	r3, [pc, #604]	@ (8003664 <HAL_RCC_OscConfig+0x764>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800340c:	2b00      	cmp	r3, #0
 800340e:	d11e      	bne.n	800344e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003410:	4b94      	ldr	r3, [pc, #592]	@ (8003664 <HAL_RCC_OscConfig+0x764>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a93      	ldr	r2, [pc, #588]	@ (8003664 <HAL_RCC_OscConfig+0x764>)
 8003416:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800341a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800341c:	f7fe fb64 	bl	8001ae8 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003422:	e00e      	b.n	8003442 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003424:	f7fe fb60 	bl	8001ae8 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b02      	cmp	r3, #2
 8003430:	d907      	bls.n	8003442 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003432:	4b8c      	ldr	r3, [pc, #560]	@ (8003664 <HAL_RCC_OscConfig+0x764>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e22a      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003442:	4b88      	ldr	r3, [pc, #544]	@ (8003664 <HAL_RCC_OscConfig+0x764>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344a:	2b00      	cmp	r3, #0
 800344c:	d0ea      	beq.n	8003424 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b00      	cmp	r3, #0
 8003458:	d01f      	beq.n	800349a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d010      	beq.n	8003488 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8003466:	4b7e      	ldr	r3, [pc, #504]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003468:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800346c:	4a7c      	ldr	r2, [pc, #496]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 800346e:	f043 0304 	orr.w	r3, r3, #4
 8003472:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003476:	4b7a      	ldr	r3, [pc, #488]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003478:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347c:	4a78      	ldr	r2, [pc, #480]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 800347e:	f043 0301 	orr.w	r3, r3, #1
 8003482:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003486:	e018      	b.n	80034ba <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003488:	4b75      	ldr	r3, [pc, #468]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348e:	4a74      	ldr	r2, [pc, #464]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003498:	e00f      	b.n	80034ba <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800349a:	4b71      	ldr	r3, [pc, #452]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034a0:	4a6f      	ldr	r2, [pc, #444]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80034a2:	f023 0301 	bic.w	r3, r3, #1
 80034a6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80034aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80034ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034b0:	4a6b      	ldr	r2, [pc, #428]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80034b2:	f023 0304 	bic.w	r3, r3, #4
 80034b6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d068      	beq.n	8003594 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c2:	f7fe fb11 	bl	8001ae8 <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034c8:	e011      	b.n	80034ee <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034ca:	f7fe fb0d 	bl	8001ae8 <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034d8:	4293      	cmp	r3, r2
 80034da:	d908      	bls.n	80034ee <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034dc:	4b60      	ldr	r3, [pc, #384]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80034de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1d4      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80034f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034f4:	f003 0302 	and.w	r3, r3, #2
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d0e6      	beq.n	80034ca <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003504:	2b00      	cmp	r3, #0
 8003506:	d022      	beq.n	800354e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8003508:	4b55      	ldr	r3, [pc, #340]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800350e:	4a54      	ldr	r2, [pc, #336]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8003518:	e011      	b.n	800353e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800351a:	f7fe fae5 	bl	8001ae8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003528:	4293      	cmp	r3, r2
 800352a:	d908      	bls.n	800353e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800352c:	4b4c      	ldr	r3, [pc, #304]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 800352e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003532:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e1ac      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 800353e:	4b48      	ldr	r3, [pc, #288]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003544:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0e6      	beq.n	800351a <HAL_RCC_OscConfig+0x61a>
 800354c:	e068      	b.n	8003620 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800354e:	4b44      	ldr	r3, [pc, #272]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003550:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003554:	4a42      	ldr	r2, [pc, #264]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003556:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800355a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800355e:	e011      	b.n	8003584 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003560:	f7fe fac2 	bl	8001ae8 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800356e:	4293      	cmp	r3, r2
 8003570:	d908      	bls.n	8003584 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003572:	4b3b      	ldr	r3, [pc, #236]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003578:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800357c:	2b00      	cmp	r3, #0
 800357e:	d001      	beq.n	8003584 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e189      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003584:	4b36      	ldr	r3, [pc, #216]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003586:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1e6      	bne.n	8003560 <HAL_RCC_OscConfig+0x660>
 8003592:	e045      	b.n	8003620 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003594:	f7fe faa8 	bl	8001ae8 <HAL_GetTick>
 8003598:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800359a:	e011      	b.n	80035c0 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800359c:	f7fe faa4 	bl	8001ae8 <HAL_GetTick>
 80035a0:	4602      	mov	r2, r0
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	1ad3      	subs	r3, r2, r3
 80035a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d908      	bls.n	80035c0 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035ae:	4b2c      	ldr	r3, [pc, #176]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80035b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e16b      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035c0:	4b27      	ldr	r3, [pc, #156]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1e6      	bne.n	800359c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 80035ce:	4b24      	ldr	r3, [pc, #144]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80035d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d021      	beq.n	8003620 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80035dc:	4b20      	ldr	r3, [pc, #128]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 80035e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80035ec:	e011      	b.n	8003612 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ee:	f7fe fa7b 	bl	8001ae8 <HAL_GetTick>
 80035f2:	4602      	mov	r2, r0
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d908      	bls.n	8003612 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003600:	4b17      	ldr	r3, [pc, #92]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003602:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003606:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e142      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8003612:	4b13      	ldr	r3, [pc, #76]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003614:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003618:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e6      	bne.n	80035ee <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003620:	7ffb      	ldrb	r3, [r7, #31]
 8003622:	2b01      	cmp	r3, #1
 8003624:	d105      	bne.n	8003632 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003626:	4b0e      	ldr	r3, [pc, #56]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003628:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362a:	4a0d      	ldr	r2, [pc, #52]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 800362c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003630:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0320 	and.w	r3, r3, #32
 800363a:	2b00      	cmp	r3, #0
 800363c:	d04f      	beq.n	80036de <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	2b00      	cmp	r3, #0
 8003644:	d028      	beq.n	8003698 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003646:	4b06      	ldr	r3, [pc, #24]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 8003648:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800364c:	4a04      	ldr	r2, [pc, #16]	@ (8003660 <HAL_RCC_OscConfig+0x760>)
 800364e:	f043 0301 	orr.w	r3, r3, #1
 8003652:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fe fa47 	bl	8001ae8 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800365c:	e014      	b.n	8003688 <HAL_RCC_OscConfig+0x788>
 800365e:	bf00      	nop
 8003660:	40021000 	.word	0x40021000
 8003664:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003668:	f7fe fa3e 	bl	8001ae8 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d908      	bls.n	8003688 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003676:	4b8a      	ldr	r3, [pc, #552]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003678:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e107      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003688:	4b85      	ldr	r3, [pc, #532]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 800368a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800368e:	f003 0302 	and.w	r3, r3, #2
 8003692:	2b00      	cmp	r3, #0
 8003694:	d0e8      	beq.n	8003668 <HAL_RCC_OscConfig+0x768>
 8003696:	e022      	b.n	80036de <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003698:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 800369a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800369e:	4a80      	ldr	r2, [pc, #512]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 80036a0:	f023 0301 	bic.w	r3, r3, #1
 80036a4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036a8:	f7fe fa1e 	bl	8001ae8 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036ae:	e00f      	b.n	80036d0 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b0:	f7fe fa1a 	bl	8001ae8 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d908      	bls.n	80036d0 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036be:	4b78      	ldr	r3, [pc, #480]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 80036c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 80036cc:	2303      	movs	r3, #3
 80036ce:	e0e3      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80036d0:	4b73      	ldr	r3, [pc, #460]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 80036d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1e8      	bne.n	80036b0 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80d7 	beq.w	8003896 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036e8:	4b6d      	ldr	r3, [pc, #436]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 030c 	and.w	r3, r3, #12
 80036f0:	2b0c      	cmp	r3, #12
 80036f2:	f000 8091 	beq.w	8003818 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d166      	bne.n	80037cc <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036fe:	4b68      	ldr	r3, [pc, #416]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a67      	ldr	r2, [pc, #412]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003704:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003708:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800370a:	f7fe f9ed 	bl	8001ae8 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003710:	e00e      	b.n	8003730 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe f9e9 	bl	8001ae8 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d907      	bls.n	8003730 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003720:	4b5f      	ldr	r3, [pc, #380]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d001      	beq.n	8003730 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e0b3      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003730:	4b5b      	ldr	r3, [pc, #364]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1ea      	bne.n	8003712 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800373c:	4b58      	ldr	r3, [pc, #352]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 800373e:	68da      	ldr	r2, [r3, #12]
 8003740:	4b58      	ldr	r3, [pc, #352]	@ (80038a4 <HAL_RCC_OscConfig+0x9a4>)
 8003742:	4013      	ands	r3, r2
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800374c:	3a01      	subs	r2, #1
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	4311      	orrs	r1, r2
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003756:	0212      	lsls	r2, r2, #8
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800375e:	0852      	lsrs	r2, r2, #1
 8003760:	3a01      	subs	r2, #1
 8003762:	0552      	lsls	r2, r2, #21
 8003764:	4311      	orrs	r1, r2
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800376a:	0852      	lsrs	r2, r2, #1
 800376c:	3a01      	subs	r2, #1
 800376e:	0652      	lsls	r2, r2, #25
 8003770:	4311      	orrs	r1, r2
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003776:	06d2      	lsls	r2, r2, #27
 8003778:	430a      	orrs	r2, r1
 800377a:	4949      	ldr	r1, [pc, #292]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 800377c:	4313      	orrs	r3, r2
 800377e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003780:	4b47      	ldr	r3, [pc, #284]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a46      	ldr	r2, [pc, #280]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003786:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800378a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800378c:	4b44      	ldr	r3, [pc, #272]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a43      	ldr	r2, [pc, #268]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003792:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003796:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe f9a6 	bl	8001ae8 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800379e:	e00e      	b.n	80037be <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a0:	f7fe f9a2 	bl	8001ae8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d907      	bls.n	80037be <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037ae:	4b3c      	ldr	r3, [pc, #240]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e06c      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037be:	4b38      	ldr	r3, [pc, #224]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d0ea      	beq.n	80037a0 <HAL_RCC_OscConfig+0x8a0>
 80037ca:	e064      	b.n	8003896 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b34      	ldr	r3, [pc, #208]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a33      	ldr	r2, [pc, #204]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 80037d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d8:	f7fe f986 	bl	8001ae8 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037de:	e00e      	b.n	80037fe <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fe f982 	bl	8001ae8 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d907      	bls.n	80037fe <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037ee:	4b2c      	ldr	r3, [pc, #176]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e04c      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037fe:	4b28      	ldr	r3, [pc, #160]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ea      	bne.n	80037e0 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800380a:	4b25      	ldr	r3, [pc, #148]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 800380c:	68da      	ldr	r2, [r3, #12]
 800380e:	4924      	ldr	r1, [pc, #144]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003810:	4b25      	ldr	r3, [pc, #148]	@ (80038a8 <HAL_RCC_OscConfig+0x9a8>)
 8003812:	4013      	ands	r3, r2
 8003814:	60cb      	str	r3, [r1, #12]
 8003816:	e03e      	b.n	8003896 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800381c:	2b01      	cmp	r3, #1
 800381e:	d101      	bne.n	8003824 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e039      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8003824:	4b1e      	ldr	r3, [pc, #120]	@ (80038a0 <HAL_RCC_OscConfig+0x9a0>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0203 	and.w	r2, r3, #3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003834:	429a      	cmp	r2, r3
 8003836:	d12c      	bne.n	8003892 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003842:	3b01      	subs	r3, #1
 8003844:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003846:	429a      	cmp	r2, r3
 8003848:	d123      	bne.n	8003892 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003854:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003856:	429a      	cmp	r2, r3
 8003858:	d11b      	bne.n	8003892 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003864:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003866:	429a      	cmp	r2, r3
 8003868:	d113      	bne.n	8003892 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003874:	085b      	lsrs	r3, r3, #1
 8003876:	3b01      	subs	r3, #1
 8003878:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800387a:	429a      	cmp	r2, r3
 800387c:	d109      	bne.n	8003892 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	3b01      	subs	r3, #1
 800388c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800388e:	429a      	cmp	r2, r3
 8003890:	d001      	beq.n	8003896 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40021000 	.word	0x40021000
 80038a4:	019f800c 	.word	0x019f800c
 80038a8:	feeefffc 	.word	0xfeeefffc

080038ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d101      	bne.n	80038c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e11c      	b.n	8003afe <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c4:	4b90      	ldr	r3, [pc, #576]	@ (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 030f 	and.w	r3, r3, #15
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d910      	bls.n	80038f4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f023 020f 	bic.w	r2, r3, #15
 80038da:	498b      	ldr	r1, [pc, #556]	@ (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	4313      	orrs	r3, r2
 80038e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038e2:	4b89      	ldr	r3, [pc, #548]	@ (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d001      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e104      	b.n	8003afe <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d010      	beq.n	8003922 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689a      	ldr	r2, [r3, #8]
 8003904:	4b81      	ldr	r3, [pc, #516]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800390c:	429a      	cmp	r2, r3
 800390e:	d908      	bls.n	8003922 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003910:	4b7e      	ldr	r3, [pc, #504]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	497b      	ldr	r1, [pc, #492]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 800391e:	4313      	orrs	r3, r2
 8003920:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 8085 	beq.w	8003a3a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b03      	cmp	r3, #3
 8003936:	d11f      	bne.n	8003978 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003938:	4b74      	ldr	r3, [pc, #464]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003940:	2b00      	cmp	r3, #0
 8003942:	d101      	bne.n	8003948 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0da      	b.n	8003afe <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003948:	f000 fa26 	bl	8003d98 <RCC_GetSysClockFreqFromPLLSource>
 800394c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	4a6f      	ldr	r2, [pc, #444]	@ (8003b10 <HAL_RCC_ClockConfig+0x264>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d947      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003956:	4b6d      	ldr	r3, [pc, #436]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d141      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003962:	4b6a      	ldr	r3, [pc, #424]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800396a:	4a68      	ldr	r2, [pc, #416]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 800396c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003970:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003972:	2380      	movs	r3, #128	@ 0x80
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e036      	b.n	80039e6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d107      	bne.n	8003990 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003980:	4b62      	ldr	r3, [pc, #392]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d115      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e0b6      	b.n	8003afe <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003998:	4b5c      	ldr	r3, [pc, #368]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d109      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e0aa      	b.n	8003afe <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039a8:	4b58      	ldr	r3, [pc, #352]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d101      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e0a2      	b.n	8003afe <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80039b8:	f000 f8b0 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4a53      	ldr	r2, [pc, #332]	@ (8003b10 <HAL_RCC_ClockConfig+0x264>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d90f      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039c6:	4b51      	ldr	r3, [pc, #324]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d109      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039d2:	4b4e      	ldr	r3, [pc, #312]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039da:	4a4c      	ldr	r2, [pc, #304]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 80039dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80039e2:	2380      	movs	r3, #128	@ 0x80
 80039e4:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80039e6:	4b49      	ldr	r3, [pc, #292]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f023 0203 	bic.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	4946      	ldr	r1, [pc, #280]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039f8:	f7fe f876 	bl	8001ae8 <HAL_GetTick>
 80039fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	e013      	b.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a00:	f7fe f872 	bl	8001ae8 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d90a      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a12:	4b3e      	ldr	r3, [pc, #248]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f003 020c 	and.w	r2, r3, #12
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e06a      	b.n	8003afe <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a28:	4b38      	ldr	r3, [pc, #224]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f003 020c 	and.w	r2, r3, #12
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d1e2      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2b80      	cmp	r3, #128	@ 0x80
 8003a3e:	d105      	bne.n	8003a4c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003a40:	4b32      	ldr	r3, [pc, #200]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a31      	ldr	r2, [pc, #196]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a46:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a4a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d010      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d208      	bcs.n	8003a7a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a68:	4b28      	ldr	r3, [pc, #160]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4925      	ldr	r1, [pc, #148]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a7a:	4b23      	ldr	r3, [pc, #140]	@ (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d210      	bcs.n	8003aaa <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a88:	4b1f      	ldr	r3, [pc, #124]	@ (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f023 020f 	bic.w	r2, r3, #15
 8003a90:	491d      	ldr	r1, [pc, #116]	@ (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a98:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <HAL_RCC_ClockConfig+0x25c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f003 030f 	and.w	r3, r3, #15
 8003aa0:	683a      	ldr	r2, [r7, #0]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d001      	beq.n	8003aaa <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e029      	b.n	8003afe <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d008      	beq.n	8003ac8 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ab6:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	4912      	ldr	r1, [pc, #72]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d009      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	490a      	ldr	r1, [pc, #40]	@ (8003b0c <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003ae8:	f000 f8b6 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003aec:	4603      	mov	r3, r0
 8003aee:	4a09      	ldr	r2, [pc, #36]	@ (8003b14 <HAL_RCC_ClockConfig+0x268>)
 8003af0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003af2:	4b09      	ldr	r3, [pc, #36]	@ (8003b18 <HAL_RCC_ClockConfig+0x26c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd ffa6 	bl	8001a48 <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
}
 8003afe:	4618      	mov	r0, r3
 8003b00:	3718      	adds	r7, #24
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	40022000 	.word	0x40022000
 8003b0c:	40021000 	.word	0x40021000
 8003b10:	04c4b400 	.word	0x04c4b400
 8003b14:	20000008 	.word	0x20000008
 8003b18:	2000000c 	.word	0x2000000c

08003b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b089      	sub	sp, #36	@ 0x24
 8003b20:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	61fb      	str	r3, [r7, #28]
 8003b26:	2300      	movs	r3, #0
 8003b28:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2a:	4b47      	ldr	r3, [pc, #284]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
 8003b32:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b34:	4b44      	ldr	r3, [pc, #272]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0303 	and.w	r3, r3, #3
 8003b3c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d005      	beq.n	8003b50 <HAL_RCC_GetSysClockFreq+0x34>
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	2b0c      	cmp	r3, #12
 8003b48:	d121      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d11e      	bne.n	8003b8e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003b50:	4b3d      	ldr	r3, [pc, #244]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0308 	and.w	r3, r3, #8
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b5c:	4b3a      	ldr	r3, [pc, #232]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b62:	0a1b      	lsrs	r3, r3, #8
 8003b64:	f003 030f 	and.w	r3, r3, #15
 8003b68:	61fb      	str	r3, [r7, #28]
 8003b6a:	e005      	b.n	8003b78 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b6c:	4b36      	ldr	r3, [pc, #216]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8003b78:	4a34      	ldr	r2, [pc, #208]	@ (8003c4c <HAL_RCC_GetSysClockFreq+0x130>)
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b80:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d10d      	bne.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8003b8c:	e00a      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d102      	bne.n	8003b9a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b94:	4b2e      	ldr	r3, [pc, #184]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x134>)
 8003b96:	61bb      	str	r3, [r7, #24]
 8003b98:	e004      	b.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d101      	bne.n	8003ba4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003ba0:	4b2c      	ldr	r3, [pc, #176]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x138>)
 8003ba2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b0c      	cmp	r3, #12
 8003ba8:	d146      	bne.n	8003c38 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003baa:	4b27      	ldr	r3, [pc, #156]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003bb4:	4b24      	ldr	r3, [pc, #144]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	091b      	lsrs	r3, r3, #4
 8003bba:	f003 030f 	and.w	r3, r3, #15
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d003      	beq.n	8003bd0 <HAL_RCC_GetSysClockFreq+0xb4>
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d00d      	beq.n	8003bea <HAL_RCC_GetSysClockFreq+0xce>
 8003bce:	e019      	b.n	8003c04 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bd0:	4a1f      	ldr	r2, [pc, #124]	@ (8003c50 <HAL_RCC_GetSysClockFreq+0x134>)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bd8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003bda:	68d2      	ldr	r2, [r2, #12]
 8003bdc:	0a12      	lsrs	r2, r2, #8
 8003bde:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003be2:	fb02 f303 	mul.w	r3, r2, r3
 8003be6:	617b      	str	r3, [r7, #20]
        break;
 8003be8:	e019      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003bea:	4a1a      	ldr	r2, [pc, #104]	@ (8003c54 <HAL_RCC_GetSysClockFreq+0x138>)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	4a15      	ldr	r2, [pc, #84]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003bf4:	68d2      	ldr	r2, [r2, #12]
 8003bf6:	0a12      	lsrs	r2, r2, #8
 8003bf8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003bfc:	fb02 f303 	mul.w	r3, r2, r3
 8003c00:	617b      	str	r3, [r7, #20]
        break;
 8003c02:	e00c      	b.n	8003c1e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c04:	69fa      	ldr	r2, [r7, #28]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c0e:	68d2      	ldr	r2, [r2, #12]
 8003c10:	0a12      	lsrs	r2, r2, #8
 8003c12:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003c16:	fb02 f303 	mul.w	r3, r2, r3
 8003c1a:	617b      	str	r3, [r7, #20]
        break;
 8003c1c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c48 <HAL_RCC_GetSysClockFreq+0x12c>)
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	0e5b      	lsrs	r3, r3, #25
 8003c24:	f003 0303 	and.w	r3, r3, #3
 8003c28:	3301      	adds	r3, #1
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003c38:	69bb      	ldr	r3, [r7, #24]
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3724      	adds	r7, #36	@ 0x24
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08009de0 	.word	0x08009de0
 8003c50:	00f42400 	.word	0x00f42400
 8003c54:	016e3600 	.word	0x016e3600

08003c58 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8003c5c:	f7ff ff5e 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <HAL_RCC_GetHCLKFreq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	f003 030f 	and.w	r3, r3, #15
 8003c6c:	4903      	ldr	r1, [pc, #12]	@ (8003c7c <HAL_RCC_GetHCLKFreq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40021000 	.word	0x40021000
 8003c7c:	08009dc8 	.word	0x08009dc8

08003c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c84:	f7ff ffe8 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ca0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	0a1b      	lsrs	r3, r3, #8
 8003c90:	f003 0307 	and.w	r3, r3, #7
 8003c94:	4903      	ldr	r1, [pc, #12]	@ (8003ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c96:	5ccb      	ldrb	r3, [r1, r3]
 8003c98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	08009dd8 	.word	0x08009dd8

08003ca8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cac:	f7ff ffd4 	bl	8003c58 <HAL_RCC_GetHCLKFreq>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	4b05      	ldr	r3, [pc, #20]	@ (8003cc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	0adb      	lsrs	r3, r3, #11
 8003cb8:	f003 0307 	and.w	r3, r3, #7
 8003cbc:	4903      	ldr	r1, [pc, #12]	@ (8003ccc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cbe:	5ccb      	ldrb	r3, [r1, r3]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08009dd8 	.word	0x08009dd8

08003cd0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003cd8:	2300      	movs	r3, #0
 8003cda:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003cdc:	4b2c      	ldr	r3, [pc, #176]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003cde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ce0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ce8:	f7ff f86c 	bl	8002dc4 <HAL_PWREx_GetVoltageRange>
 8003cec:	6138      	str	r0, [r7, #16]
 8003cee:	e014      	b.n	8003d1a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003cf0:	4b27      	ldr	r3, [pc, #156]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf4:	4a26      	ldr	r2, [pc, #152]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003cf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8003cfc:	4b24      	ldr	r3, [pc, #144]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d04:	60fb      	str	r3, [r7, #12]
 8003d06:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d08:	f7ff f85c 	bl	8002dc4 <HAL_PWREx_GetVoltageRange>
 8003d0c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d0e:	4b20      	ldr	r3, [pc, #128]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003d10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d12:	4a1f      	ldr	r2, [pc, #124]	@ (8003d90 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8003d14:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d18:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d003      	beq.n	8003d28 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d26:	d10b      	bne.n	8003d40 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b80      	cmp	r3, #128	@ 0x80
 8003d2c:	d919      	bls.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d32:	d902      	bls.n	8003d3a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d34:	2302      	movs	r3, #2
 8003d36:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003d38:	e013      	b.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8003d3e:	e010      	b.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b80      	cmp	r3, #128	@ 0x80
 8003d44:	d902      	bls.n	8003d4c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003d46:	2303      	movs	r3, #3
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	e00a      	b.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b80      	cmp	r3, #128	@ 0x80
 8003d50:	d102      	bne.n	8003d58 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003d52:	2302      	movs	r3, #2
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	e004      	b.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b70      	cmp	r3, #112	@ 0x70
 8003d5c:	d101      	bne.n	8003d62 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003d5e:	2301      	movs	r3, #1
 8003d60:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d62:	4b0c      	ldr	r3, [pc, #48]	@ (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 020f 	bic.w	r2, r3, #15
 8003d6a:	490a      	ldr	r1, [pc, #40]	@ (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8003d72:	4b08      	ldr	r3, [pc, #32]	@ (8003d94 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 030f 	and.w	r3, r3, #15
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d001      	beq.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e000      	b.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40021000 	.word	0x40021000
 8003d94:	40022000 	.word	0x40022000

08003d98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d9e:	4b31      	ldr	r3, [pc, #196]	@ (8003e64 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003da0:	68db      	ldr	r3, [r3, #12]
 8003da2:	f003 0303 	and.w	r3, r3, #3
 8003da6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003da8:	4b2e      	ldr	r3, [pc, #184]	@ (8003e64 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	3301      	adds	r3, #1
 8003db4:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d015      	beq.n	8003de8 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b03      	cmp	r3, #3
 8003dc0:	d839      	bhi.n	8003e36 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d01c      	beq.n	8003e02 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d133      	bne.n	8003e36 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dce:	4a26      	ldr	r2, [pc, #152]	@ (8003e68 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd6:	4a23      	ldr	r2, [pc, #140]	@ (8003e64 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003dd8:	68d2      	ldr	r2, [r2, #12]
 8003dda:	0a12      	lsrs	r2, r2, #8
 8003ddc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003de0:	fb02 f303 	mul.w	r3, r2, r3
 8003de4:	613b      	str	r3, [r7, #16]
      break;
 8003de6:	e029      	b.n	8003e3c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de8:	4a20      	ldr	r2, [pc, #128]	@ (8003e6c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df0:	4a1c      	ldr	r2, [pc, #112]	@ (8003e64 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003df2:	68d2      	ldr	r2, [r2, #12]
 8003df4:	0a12      	lsrs	r2, r2, #8
 8003df6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003dfa:	fb02 f303 	mul.w	r3, r2, r3
 8003dfe:	613b      	str	r3, [r7, #16]
      break;
 8003e00:	e01c      	b.n	8003e3c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e02:	4b18      	ldr	r3, [pc, #96]	@ (8003e64 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e0e:	4b15      	ldr	r3, [pc, #84]	@ (8003e64 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e14:	0a1b      	lsrs	r3, r3, #8
 8003e16:	f003 030f 	and.w	r3, r3, #15
 8003e1a:	617b      	str	r3, [r7, #20]
 8003e1c:	e005      	b.n	8003e2a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e1e:	4b11      	ldr	r3, [pc, #68]	@ (8003e64 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	f003 030f 	and.w	r3, r3, #15
 8003e28:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8003e2a:	4a11      	ldr	r2, [pc, #68]	@ (8003e70 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e32:	613b      	str	r3, [r7, #16]
        break;
 8003e34:	e002      	b.n	8003e3c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8003e36:	2300      	movs	r3, #0
 8003e38:	613b      	str	r3, [r7, #16]
      break;
 8003e3a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8003e3c:	4b09      	ldr	r3, [pc, #36]	@ (8003e64 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	0e5b      	lsrs	r3, r3, #25
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	3301      	adds	r3, #1
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e54:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003e56:	683b      	ldr	r3, [r7, #0]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	371c      	adds	r7, #28
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr
 8003e64:	40021000 	.word	0x40021000
 8003e68:	00f42400 	.word	0x00f42400
 8003e6c:	016e3600 	.word	0x016e3600
 8003e70:	08009de0 	.word	0x08009de0

08003e74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b088      	sub	sp, #32
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e80:	2300      	movs	r3, #0
 8003e82:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d040      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003e94:	2b80      	cmp	r3, #128	@ 0x80
 8003e96:	d02a      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e98:	2b80      	cmp	r3, #128	@ 0x80
 8003e9a:	d825      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003e9c:	2b60      	cmp	r3, #96	@ 0x60
 8003e9e:	d026      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ea0:	2b60      	cmp	r3, #96	@ 0x60
 8003ea2:	d821      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ea4:	2b40      	cmp	r3, #64	@ 0x40
 8003ea6:	d006      	beq.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d81d      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d009      	beq.n	8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003eb0:	2b20      	cmp	r3, #32
 8003eb2:	d010      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003eb4:	e018      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003eb6:	4b8f      	ldr	r3, [pc, #572]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	4a8e      	ldr	r2, [pc, #568]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ec2:	e015      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	3304      	adds	r3, #4
 8003ec8:	2100      	movs	r1, #0
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 fb56 	bl	800457c <RCCEx_PLLSAI1_Config>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ed4:	e00c      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3320      	adds	r3, #32
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 fc33 	bl	8004748 <RCCEx_PLLSAI2_Config>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8003ee6:	e003      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	77fb      	strb	r3, [r7, #31]
        break;
 8003eec:	e000      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8003eee:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ef0:	7ffb      	ldrb	r3, [r7, #31]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10b      	bne.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003ef8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003efc:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003f04:	497b      	ldr	r1, [pc, #492]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f06:	4313      	orrs	r3, r2
 8003f08:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003f0c:	e001      	b.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f0e:	7ffb      	ldrb	r3, [r7, #31]
 8003f10:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d047      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f26:	d030      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f2c:	d82a      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f32:	d02a      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f38:	d824      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f3a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f3e:	d008      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f44:	d81e      	bhi.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d00a      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f4e:	d010      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f50:	e018      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f52:	4b68      	ldr	r3, [pc, #416]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	4a67      	ldr	r2, [pc, #412]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003f5c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f5e:	e015      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fb08 	bl	800457c <RCCEx_PLLSAI1_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f70:	e00c      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3320      	adds	r3, #32
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f000 fbe5 	bl	8004748 <RCCEx_PLLSAI2_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8003f82:	e003      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	77fb      	strb	r3, [r7, #31]
        break;
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8003f8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f8c:	7ffb      	ldrb	r3, [r7, #31]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10b      	bne.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f92:	4b58      	ldr	r3, [pc, #352]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003f94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003f98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fa0:	4954      	ldr	r1, [pc, #336]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8003fa8:	e001      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003faa:	7ffb      	ldrb	r3, [r7, #31]
 8003fac:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80ab 	beq.w	8004112 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fc0:	4b4c      	ldr	r3, [pc, #304]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10d      	bne.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fcc:	4b49      	ldr	r3, [pc, #292]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fd0:	4a48      	ldr	r2, [pc, #288]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fd2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fd6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003fd8:	4b46      	ldr	r3, [pc, #280]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fe8:	4b43      	ldr	r3, [pc, #268]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a42      	ldr	r2, [pc, #264]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003fee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ff2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ff4:	f7fd fd78 	bl	8001ae8 <HAL_GetTick>
 8003ff8:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ffa:	e00f      	b.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ffc:	f7fd fd74 	bl	8001ae8 <HAL_GetTick>
 8004000:	4602      	mov	r2, r0
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1ad3      	subs	r3, r2, r3
 8004006:	2b02      	cmp	r3, #2
 8004008:	d908      	bls.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800400a:	4b3b      	ldr	r3, [pc, #236]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800401a:	e006      	b.n	800402a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800401c:	4b36      	ldr	r3, [pc, #216]	@ (80040f8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0e9      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x188>
 8004028:	e000      	b.n	800402c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800402a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800402c:	7ffb      	ldrb	r3, [r7, #31]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d164      	bne.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004032:	4b30      	ldr	r3, [pc, #192]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800403c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d01f      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	429a      	cmp	r2, r3
 800404e:	d019      	beq.n	8004084 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004050:	4b28      	ldr	r3, [pc, #160]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004052:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004056:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800405a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800405c:	4b25      	ldr	r3, [pc, #148]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800405e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004062:	4a24      	ldr	r2, [pc, #144]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004064:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004068:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800406c:	4b21      	ldr	r3, [pc, #132]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800406e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004072:	4a20      	ldr	r2, [pc, #128]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004074:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004078:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800407c:	4a1d      	ldr	r2, [pc, #116]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01f      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fd fd2b 	bl	8001ae8 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004094:	e012      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7fd fd27 	bl	8001ae8 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d909      	bls.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040a8:	4b12      	ldr	r3, [pc, #72]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10a      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80040ba:	e007      	b.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040bc:	4b0d      	ldr	r3, [pc, #52]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0e5      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80040ca:	e000      	b.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80040cc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80040ce:	7ffb      	ldrb	r3, [r7, #31]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d10c      	bne.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040d4:	4b07      	ldr	r3, [pc, #28]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040da:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e4:	4903      	ldr	r1, [pc, #12]	@ (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80040e6:	4313      	orrs	r3, r2
 80040e8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80040ec:	e008      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040ee:	7ffb      	ldrb	r3, [r7, #31]
 80040f0:	77bb      	strb	r3, [r7, #30]
 80040f2:	e005      	b.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80040f4:	40021000 	.word	0x40021000
 80040f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040fc:	7ffb      	ldrb	r3, [r7, #31]
 80040fe:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004100:	7dfb      	ldrb	r3, [r7, #23]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004106:	4b9c      	ldr	r3, [pc, #624]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410a:	4a9b      	ldr	r2, [pc, #620]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800410c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004110:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800411e:	4b96      	ldr	r3, [pc, #600]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004120:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004124:	f023 0203 	bic.w	r2, r3, #3
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800412c:	4992      	ldr	r1, [pc, #584]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800412e:	4313      	orrs	r3, r2
 8004130:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004140:	4b8d      	ldr	r3, [pc, #564]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004146:	f023 020c 	bic.w	r2, r3, #12
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800414e:	498a      	ldr	r1, [pc, #552]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004150:	4313      	orrs	r3, r2
 8004152:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f003 0304 	and.w	r3, r3, #4
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004162:	4b85      	ldr	r3, [pc, #532]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004164:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004168:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004170:	4981      	ldr	r1, [pc, #516]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004172:	4313      	orrs	r3, r2
 8004174:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004184:	4b7c      	ldr	r3, [pc, #496]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004186:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800418a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004192:	4979      	ldr	r1, [pc, #484]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004194:	4313      	orrs	r3, r2
 8004196:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0310 	and.w	r3, r3, #16
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041a6:	4b74      	ldr	r3, [pc, #464]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041b4:	4970      	ldr	r1, [pc, #448]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0320 	and.w	r3, r3, #32
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041c8:	4b6b      	ldr	r3, [pc, #428]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d6:	4968      	ldr	r1, [pc, #416]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80041ea:	4b63      	ldr	r3, [pc, #396]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041f8:	495f      	ldr	r1, [pc, #380]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80041fa:	4313      	orrs	r3, r2
 80041fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800420c:	4b5a      	ldr	r3, [pc, #360]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800420e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004212:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800421a:	4957      	ldr	r1, [pc, #348]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800421c:	4313      	orrs	r3, r2
 800421e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800422e:	4b52      	ldr	r3, [pc, #328]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004230:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004234:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800423c:	494e      	ldr	r1, [pc, #312]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800423e:	4313      	orrs	r3, r2
 8004240:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d031      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004254:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004258:	d00e      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800425a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800425e:	d814      	bhi.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d015      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004268:	d10f      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800426a:	4b43      	ldr	r3, [pc, #268]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	4a42      	ldr	r2, [pc, #264]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004270:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004274:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004276:	e00c      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	3304      	adds	r3, #4
 800427c:	2100      	movs	r1, #0
 800427e:	4618      	mov	r0, r3
 8004280:	f000 f97c 	bl	800457c <RCCEx_PLLSAI1_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8004288:	e003      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	77fb      	strb	r3, [r7, #31]
        break;
 800428e:	e000      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8004290:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004292:	7ffb      	ldrb	r3, [r7, #31]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d10b      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004298:	4b37      	ldr	r3, [pc, #220]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800429a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80042a6:	4934      	ldr	r1, [pc, #208]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042a8:	4313      	orrs	r3, r2
 80042aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80042ae:	e001      	b.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b0:	7ffb      	ldrb	r3, [r7, #31]
 80042b2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d00a      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80042c0:	4b2d      	ldr	r3, [pc, #180]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042ce:	492a      	ldr	r1, [pc, #168]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d00a      	beq.n	80042f8 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042e2:	4b25      	ldr	r3, [pc, #148]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e8:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042f0:	4921      	ldr	r1, [pc, #132]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004304:	4b1c      	ldr	r3, [pc, #112]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800430a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004312:	4919      	ldr	r1, [pc, #100]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004326:	4b14      	ldr	r3, [pc, #80]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800432c:	f023 0203 	bic.w	r2, r3, #3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004334:	4910      	ldr	r1, [pc, #64]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004336:	4313      	orrs	r3, r2
 8004338:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d02b      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004348:	4b0b      	ldr	r3, [pc, #44]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800434a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800434e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004356:	4908      	ldr	r1, [pc, #32]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8004358:	4313      	orrs	r3, r2
 800435a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004362:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004366:	d109      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004368:	4b03      	ldr	r3, [pc, #12]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4a02      	ldr	r2, [pc, #8]	@ (8004378 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800436e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004372:	60d3      	str	r3, [r2, #12]
 8004374:	e014      	b.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004380:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004384:	d10c      	bne.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3304      	adds	r3, #4
 800438a:	2101      	movs	r1, #1
 800438c:	4618      	mov	r0, r3
 800438e:	f000 f8f5 	bl	800457c <RCCEx_PLLSAI1_Config>
 8004392:	4603      	mov	r3, r0
 8004394:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8004396:	7ffb      	ldrb	r3, [r7, #31]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 800439c:	7ffb      	ldrb	r3, [r7, #31]
 800439e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d04a      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80043b4:	d108      	bne.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80043b6:	4b70      	ldr	r3, [pc, #448]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043bc:	4a6e      	ldr	r2, [pc, #440]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043c2:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 80043c6:	e012      	b.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80043c8:	4b6b      	ldr	r3, [pc, #428]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043d6:	4968      	ldr	r1, [pc, #416]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043de:	4b66      	ldr	r3, [pc, #408]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043e4:	4a64      	ldr	r2, [pc, #400]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80043e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043ea:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80043f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80043f6:	d10d      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3304      	adds	r3, #4
 80043fc:	2101      	movs	r1, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f8bc 	bl	800457c <RCCEx_PLLSAI1_Config>
 8004404:	4603      	mov	r3, r0
 8004406:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004408:	7ffb      	ldrb	r3, [r7, #31]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d019      	beq.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800440e:	7ffb      	ldrb	r3, [r7, #31]
 8004410:	77bb      	strb	r3, [r7, #30]
 8004412:	e016      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800441c:	d106      	bne.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800441e:	4b56      	ldr	r3, [pc, #344]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	4a55      	ldr	r2, [pc, #340]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004424:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004428:	60d3      	str	r3, [r2, #12]
 800442a:	e00a      	b.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004434:	d105      	bne.n	8004442 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004436:	4b50      	ldr	r3, [pc, #320]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	4a4f      	ldr	r2, [pc, #316]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800443c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004440:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d028      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800444e:	4b4a      	ldr	r3, [pc, #296]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004450:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004454:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800445c:	4946      	ldr	r1, [pc, #280]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800445e:	4313      	orrs	r3, r2
 8004460:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004468:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800446c:	d106      	bne.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800446e:	4b42      	ldr	r3, [pc, #264]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004470:	68db      	ldr	r3, [r3, #12]
 8004472:	4a41      	ldr	r2, [pc, #260]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004474:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004478:	60d3      	str	r3, [r2, #12]
 800447a:	e011      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004480:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004484:	d10c      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3304      	adds	r3, #4
 800448a:	2101      	movs	r1, #1
 800448c:	4618      	mov	r0, r3
 800448e:	f000 f875 	bl	800457c <RCCEx_PLLSAI1_Config>
 8004492:	4603      	mov	r3, r0
 8004494:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8004496:	7ffb      	ldrb	r3, [r7, #31]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 800449c:	7ffb      	ldrb	r3, [r7, #31]
 800449e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d01e      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044ac:	4b32      	ldr	r3, [pc, #200]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044bc:	492e      	ldr	r1, [pc, #184]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80044ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80044ce:	d10c      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	3304      	adds	r3, #4
 80044d4:	2102      	movs	r1, #2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 f850 	bl	800457c <RCCEx_PLLSAI1_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80044e0:	7ffb      	ldrb	r3, [r7, #31]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80044e6:	7ffb      	ldrb	r3, [r7, #31]
 80044e8:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00b      	beq.n	800450e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80044f6:	4b20      	ldr	r3, [pc, #128]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80044f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80044fc:	f023 0204 	bic.w	r2, r3, #4
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004506:	491c      	ldr	r1, [pc, #112]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004508:	4313      	orrs	r3, r2
 800450a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800451a:	4b17      	ldr	r3, [pc, #92]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800451c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004520:	f023 0218 	bic.w	r2, r3, #24
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452a:	4913      	ldr	r1, [pc, #76]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800452c:	4313      	orrs	r3, r2
 800452e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800453a:	2b00      	cmp	r3, #0
 800453c:	d017      	beq.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800453e:	4b0e      	ldr	r3, [pc, #56]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004540:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004544:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800454e:	490a      	ldr	r1, [pc, #40]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800455c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004560:	d105      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004562:	4b05      	ldr	r3, [pc, #20]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	4a04      	ldr	r2, [pc, #16]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8004568:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800456c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800456e:	7fbb      	ldrb	r3, [r7, #30]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	40021000 	.word	0x40021000

0800457c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b03      	cmp	r3, #3
 8004590:	d018      	beq.n	80045c4 <RCCEx_PLLSAI1_Config+0x48>
 8004592:	2b03      	cmp	r3, #3
 8004594:	d81f      	bhi.n	80045d6 <RCCEx_PLLSAI1_Config+0x5a>
 8004596:	2b01      	cmp	r3, #1
 8004598:	d002      	beq.n	80045a0 <RCCEx_PLLSAI1_Config+0x24>
 800459a:	2b02      	cmp	r3, #2
 800459c:	d009      	beq.n	80045b2 <RCCEx_PLLSAI1_Config+0x36>
 800459e:	e01a      	b.n	80045d6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80045a0:	4b65      	ldr	r3, [pc, #404]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f003 0302 	and.w	r3, r3, #2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d117      	bne.n	80045dc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045b0:	e014      	b.n	80045dc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80045b2:	4b61      	ldr	r3, [pc, #388]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d110      	bne.n	80045e0 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045c2:	e00d      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80045c4:	4b5c      	ldr	r3, [pc, #368]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d109      	bne.n	80045e4 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045d4:	e006      	b.n	80045e4 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	73fb      	strb	r3, [r7, #15]
      break;
 80045da:	e004      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80045dc:	bf00      	nop
 80045de:	e002      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80045e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80045e6:	7bfb      	ldrb	r3, [r7, #15]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 809f 	bne.w	800472c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045ee:	4b52      	ldr	r3, [pc, #328]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a51      	ldr	r2, [pc, #324]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80045f4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80045f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045fa:	f7fd fa75 	bl	8001ae8 <HAL_GetTick>
 80045fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004600:	e00f      	b.n	8004622 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004602:	f7fd fa71 	bl	8001ae8 <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d908      	bls.n	8004622 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004610:	4b49      	ldr	r3, [pc, #292]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004620:	e006      	b.n	8004630 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004622:	4b45      	ldr	r3, [pc, #276]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1e9      	bne.n	8004602 <RCCEx_PLLSAI1_Config+0x86>
 800462e:	e000      	b.n	8004632 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8004630:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8004632:	7bfb      	ldrb	r3, [r7, #15]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d179      	bne.n	800472c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d116      	bne.n	800466c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800463e:	4b3e      	ldr	r3, [pc, #248]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004640:	691a      	ldr	r2, [r3, #16]
 8004642:	4b3e      	ldr	r3, [pc, #248]	@ (800473c <RCCEx_PLLSAI1_Config+0x1c0>)
 8004644:	4013      	ands	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6892      	ldr	r2, [r2, #8]
 800464a:	0211      	lsls	r1, r2, #8
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	68d2      	ldr	r2, [r2, #12]
 8004650:	06d2      	lsls	r2, r2, #27
 8004652:	4311      	orrs	r1, r2
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	6852      	ldr	r2, [r2, #4]
 8004658:	3a01      	subs	r2, #1
 800465a:	0112      	lsls	r2, r2, #4
 800465c:	4311      	orrs	r1, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6812      	ldr	r2, [r2, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	4934      	ldr	r1, [pc, #208]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	610b      	str	r3, [r1, #16]
 800466a:	e033      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d118      	bne.n	80046a4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004672:	4b31      	ldr	r3, [pc, #196]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004674:	691a      	ldr	r2, [r3, #16]
 8004676:	4b32      	ldr	r3, [pc, #200]	@ (8004740 <RCCEx_PLLSAI1_Config+0x1c4>)
 8004678:	4013      	ands	r3, r2
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	6892      	ldr	r2, [r2, #8]
 800467e:	0211      	lsls	r1, r2, #8
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	6912      	ldr	r2, [r2, #16]
 8004684:	0852      	lsrs	r2, r2, #1
 8004686:	3a01      	subs	r2, #1
 8004688:	0552      	lsls	r2, r2, #21
 800468a:	4311      	orrs	r1, r2
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6852      	ldr	r2, [r2, #4]
 8004690:	3a01      	subs	r2, #1
 8004692:	0112      	lsls	r2, r2, #4
 8004694:	4311      	orrs	r1, r2
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6812      	ldr	r2, [r2, #0]
 800469a:	430a      	orrs	r2, r1
 800469c:	4926      	ldr	r1, [pc, #152]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	610b      	str	r3, [r1, #16]
 80046a2:	e017      	b.n	80046d4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80046a4:	4b24      	ldr	r3, [pc, #144]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	4b26      	ldr	r3, [pc, #152]	@ (8004744 <RCCEx_PLLSAI1_Config+0x1c8>)
 80046aa:	4013      	ands	r3, r2
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	6892      	ldr	r2, [r2, #8]
 80046b0:	0211      	lsls	r1, r2, #8
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6952      	ldr	r2, [r2, #20]
 80046b6:	0852      	lsrs	r2, r2, #1
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0652      	lsls	r2, r2, #25
 80046bc:	4311      	orrs	r1, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6852      	ldr	r2, [r2, #4]
 80046c2:	3a01      	subs	r2, #1
 80046c4:	0112      	lsls	r2, r2, #4
 80046c6:	4311      	orrs	r1, r2
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	430a      	orrs	r2, r1
 80046ce:	491a      	ldr	r1, [pc, #104]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046d4:	4b18      	ldr	r3, [pc, #96]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a17      	ldr	r2, [pc, #92]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80046de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e0:	f7fd fa02 	bl	8001ae8 <HAL_GetTick>
 80046e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046e6:	e00f      	b.n	8004708 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046e8:	f7fd f9fe 	bl	8001ae8 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d908      	bls.n	8004708 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046f6:	4b10      	ldr	r3, [pc, #64]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d109      	bne.n	8004716 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004706:	e006      	b.n	8004716 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004708:	4b0b      	ldr	r3, [pc, #44]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d0e9      	beq.n	80046e8 <RCCEx_PLLSAI1_Config+0x16c>
 8004714:	e000      	b.n	8004718 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8004716:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004718:	7bfb      	ldrb	r3, [r7, #15]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800471e:	4b06      	ldr	r3, [pc, #24]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004720:	691a      	ldr	r2, [r3, #16]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	4904      	ldr	r1, [pc, #16]	@ (8004738 <RCCEx_PLLSAI1_Config+0x1bc>)
 8004728:	4313      	orrs	r3, r2
 800472a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800472c:	7bfb      	ldrb	r3, [r7, #15]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3710      	adds	r7, #16
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40021000 	.word	0x40021000
 800473c:	07ff800c 	.word	0x07ff800c
 8004740:	ff9f800c 	.word	0xff9f800c
 8004744:	f9ff800c 	.word	0xf9ff800c

08004748 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004752:	2300      	movs	r3, #0
 8004754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b03      	cmp	r3, #3
 800475c:	d018      	beq.n	8004790 <RCCEx_PLLSAI2_Config+0x48>
 800475e:	2b03      	cmp	r3, #3
 8004760:	d81f      	bhi.n	80047a2 <RCCEx_PLLSAI2_Config+0x5a>
 8004762:	2b01      	cmp	r3, #1
 8004764:	d002      	beq.n	800476c <RCCEx_PLLSAI2_Config+0x24>
 8004766:	2b02      	cmp	r3, #2
 8004768:	d009      	beq.n	800477e <RCCEx_PLLSAI2_Config+0x36>
 800476a:	e01a      	b.n	80047a2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800476c:	4b4a      	ldr	r3, [pc, #296]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0302 	and.w	r3, r3, #2
 8004774:	2b00      	cmp	r3, #0
 8004776:	d117      	bne.n	80047a8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800477c:	e014      	b.n	80047a8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800477e:	4b46      	ldr	r3, [pc, #280]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004786:	2b00      	cmp	r3, #0
 8004788:	d110      	bne.n	80047ac <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800478e:	e00d      	b.n	80047ac <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8004790:	4b41      	ldr	r3, [pc, #260]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d109      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a0:	e006      	b.n	80047b0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	73fb      	strb	r3, [r7, #15]
      break;
 80047a6:	e004      	b.n	80047b2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80047a8:	bf00      	nop
 80047aa:	e002      	b.n	80047b2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80047ac:	bf00      	nop
 80047ae:	e000      	b.n	80047b2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80047b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d169      	bne.n	800488c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047b8:	4b37      	ldr	r3, [pc, #220]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a36      	ldr	r2, [pc, #216]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 80047be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047c4:	f7fd f990 	bl	8001ae8 <HAL_GetTick>
 80047c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047ca:	e00f      	b.n	80047ec <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047cc:	f7fd f98c 	bl	8001ae8 <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d908      	bls.n	80047ec <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047da:	4b2f      	ldr	r3, [pc, #188]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047ea:	e006      	b.n	80047fa <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047ec:	4b2a      	ldr	r3, [pc, #168]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1e9      	bne.n	80047cc <RCCEx_PLLSAI2_Config+0x84>
 80047f8:	e000      	b.n	80047fc <RCCEx_PLLSAI2_Config+0xb4>
        break;
 80047fa:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d144      	bne.n	800488c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d115      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004808:	4b23      	ldr	r3, [pc, #140]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	4b23      	ldr	r3, [pc, #140]	@ (800489c <RCCEx_PLLSAI2_Config+0x154>)
 800480e:	4013      	ands	r3, r2
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6892      	ldr	r2, [r2, #8]
 8004814:	0211      	lsls	r1, r2, #8
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	68d2      	ldr	r2, [r2, #12]
 800481a:	06d2      	lsls	r2, r2, #27
 800481c:	4311      	orrs	r1, r2
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6852      	ldr	r2, [r2, #4]
 8004822:	3a01      	subs	r2, #1
 8004824:	0112      	lsls	r2, r2, #4
 8004826:	4311      	orrs	r1, r2
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6812      	ldr	r2, [r2, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	491a      	ldr	r1, [pc, #104]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 8004830:	4313      	orrs	r3, r2
 8004832:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004834:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a17      	ldr	r2, [pc, #92]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 800483a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800483e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004840:	f7fd f952 	bl	8001ae8 <HAL_GetTick>
 8004844:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004846:	e00f      	b.n	8004868 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004848:	f7fd f94e 	bl	8001ae8 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d908      	bls.n	8004868 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004856:	4b10      	ldr	r3, [pc, #64]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8004866:	e006      	b.n	8004876 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004868:	4b0b      	ldr	r3, [pc, #44]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004870:	2b00      	cmp	r3, #0
 8004872:	d0e9      	beq.n	8004848 <RCCEx_PLLSAI2_Config+0x100>
 8004874:	e000      	b.n	8004878 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8004876:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8004878:	7bfb      	ldrb	r3, [r7, #15]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d106      	bne.n	800488c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800487e:	4b06      	ldr	r3, [pc, #24]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 8004880:	695a      	ldr	r2, [r3, #20]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	4904      	ldr	r1, [pc, #16]	@ (8004898 <RCCEx_PLLSAI2_Config+0x150>)
 8004888:	4313      	orrs	r3, r2
 800488a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800488c:	7bfb      	ldrb	r3, [r7, #15]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	07ff800c 	.word	0x07ff800c

080048a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e042      	b.n	8004938 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d106      	bne.n	80048ca <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c4:	6878      	ldr	r0, [r7, #4]
 80048c6:	f7fc fe53 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2224      	movs	r2, #36	@ 0x24
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 0201 	bic.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 fbb6 	bl	800505c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f8b3 	bl	8004a5c <UART_SetConfig>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d101      	bne.n	8004900 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80048fc:	2301      	movs	r3, #1
 80048fe:	e01b      	b.n	8004938 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	685a      	ldr	r2, [r3, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800490e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	689a      	ldr	r2, [r3, #8]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800491e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f042 0201 	orr.w	r2, r2, #1
 800492e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fc35 	bl	80051a0 <UART_CheckIdleState>
 8004936:	4603      	mov	r3, r0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b08a      	sub	sp, #40	@ 0x28
 8004944:	af02      	add	r7, sp, #8
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004956:	2b20      	cmp	r3, #32
 8004958:	d17b      	bne.n	8004a52 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d002      	beq.n	8004966 <HAL_UART_Transmit+0x26>
 8004960:	88fb      	ldrh	r3, [r7, #6]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d101      	bne.n	800496a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	e074      	b.n	8004a54 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2200      	movs	r2, #0
 800496e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2221      	movs	r2, #33	@ 0x21
 8004976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800497a:	f7fd f8b5 	bl	8001ae8 <HAL_GetTick>
 800497e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	88fa      	ldrh	r2, [r7, #6]
 8004984:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	88fa      	ldrh	r2, [r7, #6]
 800498c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004998:	d108      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	61bb      	str	r3, [r7, #24]
 80049aa:	e003      	b.n	80049b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049b0:	2300      	movs	r3, #0
 80049b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049b4:	e030      	b.n	8004a18 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2200      	movs	r2, #0
 80049be:	2180      	movs	r1, #128	@ 0x80
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 fc97 	bl	80052f4 <UART_WaitOnFlagUntilTimeout>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d005      	beq.n	80049d8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	2220      	movs	r2, #32
 80049d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80049d4:	2303      	movs	r3, #3
 80049d6:	e03d      	b.n	8004a54 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10b      	bne.n	80049f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	881b      	ldrh	r3, [r3, #0]
 80049e2:	461a      	mov	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ec:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	3302      	adds	r3, #2
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	e007      	b.n	8004a06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	3301      	adds	r3, #1
 8004a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d1c8      	bne.n	80049b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	9300      	str	r3, [sp, #0]
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	2140      	movs	r1, #64	@ 0x40
 8004a2e:	68f8      	ldr	r0, [r7, #12]
 8004a30:	f000 fc60 	bl	80052f4 <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2220      	movs	r2, #32
 8004a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e006      	b.n	8004a54 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2220      	movs	r2, #32
 8004a4a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	e000      	b.n	8004a54 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004a52:	2302      	movs	r3, #2
  }
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}

08004a5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a60:	b08c      	sub	sp, #48	@ 0x30
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	431a      	orrs	r2, r3
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	69db      	ldr	r3, [r3, #28]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	4baa      	ldr	r3, [pc, #680]	@ (8004d34 <UART_SetConfig+0x2d8>)
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	6812      	ldr	r2, [r2, #0]
 8004a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a94:	430b      	orrs	r3, r1
 8004a96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	68da      	ldr	r2, [r3, #12]
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a9f      	ldr	r2, [pc, #636]	@ (8004d38 <UART_SetConfig+0x2dc>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d004      	beq.n	8004ac8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ac8:	697b      	ldr	r3, [r7, #20]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004ad2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004ad6:	697a      	ldr	r2, [r7, #20]
 8004ad8:	6812      	ldr	r2, [r2, #0]
 8004ada:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004adc:	430b      	orrs	r3, r1
 8004ade:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae6:	f023 010f 	bic.w	r1, r3, #15
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a90      	ldr	r2, [pc, #576]	@ (8004d3c <UART_SetConfig+0x2e0>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d125      	bne.n	8004b4c <UART_SetConfig+0xf0>
 8004b00:	4b8f      	ldr	r3, [pc, #572]	@ (8004d40 <UART_SetConfig+0x2e4>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b06:	f003 0303 	and.w	r3, r3, #3
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d81a      	bhi.n	8004b44 <UART_SetConfig+0xe8>
 8004b0e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <UART_SetConfig+0xb8>)
 8004b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b35 	.word	0x08004b35
 8004b1c:	08004b2d 	.word	0x08004b2d
 8004b20:	08004b3d 	.word	0x08004b3d
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b2a:	e116      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b32:	e112      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b34:	2304      	movs	r3, #4
 8004b36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b3a:	e10e      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b3c:	2308      	movs	r3, #8
 8004b3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b42:	e10a      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b44:	2310      	movs	r3, #16
 8004b46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004b4a:	e106      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a7c      	ldr	r2, [pc, #496]	@ (8004d44 <UART_SetConfig+0x2e8>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d138      	bne.n	8004bc8 <UART_SetConfig+0x16c>
 8004b56:	4b7a      	ldr	r3, [pc, #488]	@ (8004d40 <UART_SetConfig+0x2e4>)
 8004b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5c:	f003 030c 	and.w	r3, r3, #12
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d82d      	bhi.n	8004bc0 <UART_SetConfig+0x164>
 8004b64:	a201      	add	r2, pc, #4	@ (adr r2, 8004b6c <UART_SetConfig+0x110>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004bc1 	.word	0x08004bc1
 8004b74:	08004bc1 	.word	0x08004bc1
 8004b78:	08004bc1 	.word	0x08004bc1
 8004b7c:	08004bb1 	.word	0x08004bb1
 8004b80:	08004bc1 	.word	0x08004bc1
 8004b84:	08004bc1 	.word	0x08004bc1
 8004b88:	08004bc1 	.word	0x08004bc1
 8004b8c:	08004ba9 	.word	0x08004ba9
 8004b90:	08004bc1 	.word	0x08004bc1
 8004b94:	08004bc1 	.word	0x08004bc1
 8004b98:	08004bc1 	.word	0x08004bc1
 8004b9c:	08004bb9 	.word	0x08004bb9
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ba6:	e0d8      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004ba8:	2302      	movs	r3, #2
 8004baa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bae:	e0d4      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bb6:	e0d0      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bbe:	e0cc      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bc6:	e0c8      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a5e      	ldr	r2, [pc, #376]	@ (8004d48 <UART_SetConfig+0x2ec>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d125      	bne.n	8004c1e <UART_SetConfig+0x1c2>
 8004bd2:	4b5b      	ldr	r3, [pc, #364]	@ (8004d40 <UART_SetConfig+0x2e4>)
 8004bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bd8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004bdc:	2b30      	cmp	r3, #48	@ 0x30
 8004bde:	d016      	beq.n	8004c0e <UART_SetConfig+0x1b2>
 8004be0:	2b30      	cmp	r3, #48	@ 0x30
 8004be2:	d818      	bhi.n	8004c16 <UART_SetConfig+0x1ba>
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d00a      	beq.n	8004bfe <UART_SetConfig+0x1a2>
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	d814      	bhi.n	8004c16 <UART_SetConfig+0x1ba>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d002      	beq.n	8004bf6 <UART_SetConfig+0x19a>
 8004bf0:	2b10      	cmp	r3, #16
 8004bf2:	d008      	beq.n	8004c06 <UART_SetConfig+0x1aa>
 8004bf4:	e00f      	b.n	8004c16 <UART_SetConfig+0x1ba>
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004bfc:	e0ad      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004bfe:	2302      	movs	r3, #2
 8004c00:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c04:	e0a9      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c06:	2304      	movs	r3, #4
 8004c08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c0c:	e0a5      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c0e:	2308      	movs	r3, #8
 8004c10:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c14:	e0a1      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c16:	2310      	movs	r3, #16
 8004c18:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c1c:	e09d      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a4a      	ldr	r2, [pc, #296]	@ (8004d4c <UART_SetConfig+0x2f0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d125      	bne.n	8004c74 <UART_SetConfig+0x218>
 8004c28:	4b45      	ldr	r3, [pc, #276]	@ (8004d40 <UART_SetConfig+0x2e4>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c2e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c34:	d016      	beq.n	8004c64 <UART_SetConfig+0x208>
 8004c36:	2bc0      	cmp	r3, #192	@ 0xc0
 8004c38:	d818      	bhi.n	8004c6c <UART_SetConfig+0x210>
 8004c3a:	2b80      	cmp	r3, #128	@ 0x80
 8004c3c:	d00a      	beq.n	8004c54 <UART_SetConfig+0x1f8>
 8004c3e:	2b80      	cmp	r3, #128	@ 0x80
 8004c40:	d814      	bhi.n	8004c6c <UART_SetConfig+0x210>
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d002      	beq.n	8004c4c <UART_SetConfig+0x1f0>
 8004c46:	2b40      	cmp	r3, #64	@ 0x40
 8004c48:	d008      	beq.n	8004c5c <UART_SetConfig+0x200>
 8004c4a:	e00f      	b.n	8004c6c <UART_SetConfig+0x210>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c52:	e082      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c54:	2302      	movs	r3, #2
 8004c56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c5a:	e07e      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c5c:	2304      	movs	r3, #4
 8004c5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c62:	e07a      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c64:	2308      	movs	r3, #8
 8004c66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c6a:	e076      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c6c:	2310      	movs	r3, #16
 8004c6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004c72:	e072      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a35      	ldr	r2, [pc, #212]	@ (8004d50 <UART_SetConfig+0x2f4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d12a      	bne.n	8004cd4 <UART_SetConfig+0x278>
 8004c7e:	4b30      	ldr	r3, [pc, #192]	@ (8004d40 <UART_SetConfig+0x2e4>)
 8004c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c8c:	d01a      	beq.n	8004cc4 <UART_SetConfig+0x268>
 8004c8e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c92:	d81b      	bhi.n	8004ccc <UART_SetConfig+0x270>
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c98:	d00c      	beq.n	8004cb4 <UART_SetConfig+0x258>
 8004c9a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004c9e:	d815      	bhi.n	8004ccc <UART_SetConfig+0x270>
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d003      	beq.n	8004cac <UART_SetConfig+0x250>
 8004ca4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ca8:	d008      	beq.n	8004cbc <UART_SetConfig+0x260>
 8004caa:	e00f      	b.n	8004ccc <UART_SetConfig+0x270>
 8004cac:	2300      	movs	r3, #0
 8004cae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cb2:	e052      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004cb4:	2302      	movs	r3, #2
 8004cb6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cba:	e04e      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004cbc:	2304      	movs	r3, #4
 8004cbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cc2:	e04a      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004cc4:	2308      	movs	r3, #8
 8004cc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cca:	e046      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004ccc:	2310      	movs	r3, #16
 8004cce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004cd2:	e042      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a17      	ldr	r2, [pc, #92]	@ (8004d38 <UART_SetConfig+0x2dc>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d13a      	bne.n	8004d54 <UART_SetConfig+0x2f8>
 8004cde:	4b18      	ldr	r3, [pc, #96]	@ (8004d40 <UART_SetConfig+0x2e4>)
 8004ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004ce8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cec:	d01a      	beq.n	8004d24 <UART_SetConfig+0x2c8>
 8004cee:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004cf2:	d81b      	bhi.n	8004d2c <UART_SetConfig+0x2d0>
 8004cf4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cf8:	d00c      	beq.n	8004d14 <UART_SetConfig+0x2b8>
 8004cfa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004cfe:	d815      	bhi.n	8004d2c <UART_SetConfig+0x2d0>
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d003      	beq.n	8004d0c <UART_SetConfig+0x2b0>
 8004d04:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d08:	d008      	beq.n	8004d1c <UART_SetConfig+0x2c0>
 8004d0a:	e00f      	b.n	8004d2c <UART_SetConfig+0x2d0>
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d12:	e022      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d14:	2302      	movs	r3, #2
 8004d16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d1a:	e01e      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d1c:	2304      	movs	r3, #4
 8004d1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d22:	e01a      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d24:	2308      	movs	r3, #8
 8004d26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d2a:	e016      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d2c:	2310      	movs	r3, #16
 8004d2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004d32:	e012      	b.n	8004d5a <UART_SetConfig+0x2fe>
 8004d34:	cfff69f3 	.word	0xcfff69f3
 8004d38:	40008000 	.word	0x40008000
 8004d3c:	40013800 	.word	0x40013800
 8004d40:	40021000 	.word	0x40021000
 8004d44:	40004400 	.word	0x40004400
 8004d48:	40004800 	.word	0x40004800
 8004d4c:	40004c00 	.word	0x40004c00
 8004d50:	40005000 	.word	0x40005000
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4ab0      	ldr	r2, [pc, #704]	@ (8005020 <UART_SetConfig+0x5c4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	f040 809b 	bne.w	8004e9c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d66:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004d6a:	2b08      	cmp	r3, #8
 8004d6c:	d827      	bhi.n	8004dbe <UART_SetConfig+0x362>
 8004d6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d74 <UART_SetConfig+0x318>)
 8004d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d74:	08004d99 	.word	0x08004d99
 8004d78:	08004da1 	.word	0x08004da1
 8004d7c:	08004da9 	.word	0x08004da9
 8004d80:	08004dbf 	.word	0x08004dbf
 8004d84:	08004daf 	.word	0x08004daf
 8004d88:	08004dbf 	.word	0x08004dbf
 8004d8c:	08004dbf 	.word	0x08004dbf
 8004d90:	08004dbf 	.word	0x08004dbf
 8004d94:	08004db7 	.word	0x08004db7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d98:	f7fe ff72 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8004d9c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004d9e:	e014      	b.n	8004dca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004da0:	f7fe ff82 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8004da4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004da6:	e010      	b.n	8004dca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004da8:	4b9e      	ldr	r3, [pc, #632]	@ (8005024 <UART_SetConfig+0x5c8>)
 8004daa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dac:	e00d      	b.n	8004dca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dae:	f7fe feb5 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8004db2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004db4:	e009      	b.n	8004dca <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004db6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004dbc:	e005      	b.n	8004dca <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004dc8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	f000 8130 	beq.w	8005032 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dd6:	4a94      	ldr	r2, [pc, #592]	@ (8005028 <UART_SetConfig+0x5cc>)
 8004dd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004de0:	fbb3 f3f2 	udiv	r3, r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	005b      	lsls	r3, r3, #1
 8004dee:	4413      	add	r3, r2
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d305      	bcc.n	8004e02 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d903      	bls.n	8004e0a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8004e02:	2301      	movs	r3, #1
 8004e04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e08:	e113      	b.n	8005032 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	60bb      	str	r3, [r7, #8]
 8004e10:	60fa      	str	r2, [r7, #12]
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e16:	4a84      	ldr	r2, [pc, #528]	@ (8005028 <UART_SetConfig+0x5cc>)
 8004e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2200      	movs	r2, #0
 8004e20:	603b      	str	r3, [r7, #0]
 8004e22:	607a      	str	r2, [r7, #4]
 8004e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e28:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e2c:	f7fb ff10 	bl	8000c50 <__aeabi_uldivmod>
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4610      	mov	r0, r2
 8004e36:	4619      	mov	r1, r3
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	020b      	lsls	r3, r1, #8
 8004e42:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e46:	0202      	lsls	r2, r0, #8
 8004e48:	6979      	ldr	r1, [r7, #20]
 8004e4a:	6849      	ldr	r1, [r1, #4]
 8004e4c:	0849      	lsrs	r1, r1, #1
 8004e4e:	2000      	movs	r0, #0
 8004e50:	460c      	mov	r4, r1
 8004e52:	4605      	mov	r5, r0
 8004e54:	eb12 0804 	adds.w	r8, r2, r4
 8004e58:	eb43 0905 	adc.w	r9, r3, r5
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	469a      	mov	sl, r3
 8004e64:	4693      	mov	fp, r2
 8004e66:	4652      	mov	r2, sl
 8004e68:	465b      	mov	r3, fp
 8004e6a:	4640      	mov	r0, r8
 8004e6c:	4649      	mov	r1, r9
 8004e6e:	f7fb feef 	bl	8000c50 <__aeabi_uldivmod>
 8004e72:	4602      	mov	r2, r0
 8004e74:	460b      	mov	r3, r1
 8004e76:	4613      	mov	r3, r2
 8004e78:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e80:	d308      	bcc.n	8004e94 <UART_SetConfig+0x438>
 8004e82:	6a3b      	ldr	r3, [r7, #32]
 8004e84:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e88:	d204      	bcs.n	8004e94 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a3a      	ldr	r2, [r7, #32]
 8004e90:	60da      	str	r2, [r3, #12]
 8004e92:	e0ce      	b.n	8005032 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004e9a:	e0ca      	b.n	8005032 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ea4:	d166      	bne.n	8004f74 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8004ea6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d827      	bhi.n	8004efe <UART_SetConfig+0x4a2>
 8004eae:	a201      	add	r2, pc, #4	@ (adr r2, 8004eb4 <UART_SetConfig+0x458>)
 8004eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004eb4:	08004ed9 	.word	0x08004ed9
 8004eb8:	08004ee1 	.word	0x08004ee1
 8004ebc:	08004ee9 	.word	0x08004ee9
 8004ec0:	08004eff 	.word	0x08004eff
 8004ec4:	08004eef 	.word	0x08004eef
 8004ec8:	08004eff 	.word	0x08004eff
 8004ecc:	08004eff 	.word	0x08004eff
 8004ed0:	08004eff 	.word	0x08004eff
 8004ed4:	08004ef7 	.word	0x08004ef7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ed8:	f7fe fed2 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ede:	e014      	b.n	8004f0a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ee0:	f7fe fee2 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8004ee4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ee6:	e010      	b.n	8004f0a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ee8:	4b4e      	ldr	r3, [pc, #312]	@ (8005024 <UART_SetConfig+0x5c8>)
 8004eea:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004eec:	e00d      	b.n	8004f0a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004eee:	f7fe fe15 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8004ef2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ef4:	e009      	b.n	8004f0a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ef6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004efa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004efc:	e005      	b.n	8004f0a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004f08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f000 8090 	beq.w	8005032 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f16:	4a44      	ldr	r2, [pc, #272]	@ (8005028 <UART_SetConfig+0x5cc>)
 8004f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f20:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f24:	005a      	lsls	r2, r3, #1
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	441a      	add	r2, r3
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f38:	6a3b      	ldr	r3, [r7, #32]
 8004f3a:	2b0f      	cmp	r3, #15
 8004f3c:	d916      	bls.n	8004f6c <UART_SetConfig+0x510>
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f44:	d212      	bcs.n	8004f6c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	f023 030f 	bic.w	r3, r3, #15
 8004f4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f50:	6a3b      	ldr	r3, [r7, #32]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	b29a      	uxth	r2, r3
 8004f5c:	8bfb      	ldrh	r3, [r7, #30]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	8bfa      	ldrh	r2, [r7, #30]
 8004f68:	60da      	str	r2, [r3, #12]
 8004f6a:	e062      	b.n	8005032 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004f72:	e05e      	b.n	8005032 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004f78:	2b08      	cmp	r3, #8
 8004f7a:	d828      	bhi.n	8004fce <UART_SetConfig+0x572>
 8004f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8004f84 <UART_SetConfig+0x528>)
 8004f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f82:	bf00      	nop
 8004f84:	08004fa9 	.word	0x08004fa9
 8004f88:	08004fb1 	.word	0x08004fb1
 8004f8c:	08004fb9 	.word	0x08004fb9
 8004f90:	08004fcf 	.word	0x08004fcf
 8004f94:	08004fbf 	.word	0x08004fbf
 8004f98:	08004fcf 	.word	0x08004fcf
 8004f9c:	08004fcf 	.word	0x08004fcf
 8004fa0:	08004fcf 	.word	0x08004fcf
 8004fa4:	08004fc7 	.word	0x08004fc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa8:	f7fe fe6a 	bl	8003c80 <HAL_RCC_GetPCLK1Freq>
 8004fac:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fae:	e014      	b.n	8004fda <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fb0:	f7fe fe7a 	bl	8003ca8 <HAL_RCC_GetPCLK2Freq>
 8004fb4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fb6:	e010      	b.n	8004fda <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8005024 <UART_SetConfig+0x5c8>)
 8004fba:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fbc:	e00d      	b.n	8004fda <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fbe:	f7fe fdad 	bl	8003b1c <HAL_RCC_GetSysClockFreq>
 8004fc2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004fc4:	e009      	b.n	8004fda <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004fcc:	e005      	b.n	8004fda <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004fd8:	bf00      	nop
    }

    if (pclk != 0U)
 8004fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d028      	beq.n	8005032 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe4:	4a10      	ldr	r2, [pc, #64]	@ (8005028 <UART_SetConfig+0x5cc>)
 8004fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fea:	461a      	mov	r2, r3
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	441a      	add	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	2b0f      	cmp	r3, #15
 8005008:	d910      	bls.n	800502c <UART_SetConfig+0x5d0>
 800500a:	6a3b      	ldr	r3, [r7, #32]
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005010:	d20c      	bcs.n	800502c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	b29a      	uxth	r2, r3
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	60da      	str	r2, [r3, #12]
 800501c:	e009      	b.n	8005032 <UART_SetConfig+0x5d6>
 800501e:	bf00      	nop
 8005020:	40008000 	.word	0x40008000
 8005024:	00f42400 	.word	0x00f42400
 8005028:	08009e30 	.word	0x08009e30
      }
      else
      {
        ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2201      	movs	r2, #1
 8005036:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2201      	movs	r2, #1
 800503e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	2200      	movs	r2, #0
 8005046:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	2200      	movs	r2, #0
 800504c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800504e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8005052:	4618      	mov	r0, r3
 8005054:	3730      	adds	r7, #48	@ 0x30
 8005056:	46bd      	mov	sp, r7
 8005058:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800505c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b00      	cmp	r3, #0
 800506e:	d00a      	beq.n	8005086 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b00      	cmp	r3, #0
 8005090:	d00a      	beq.n	80050a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00a      	beq.n	80050ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00a      	beq.n	80050ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	430a      	orrs	r2, r1
 80050ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050f0:	f003 0310 	and.w	r3, r3, #16
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00a      	beq.n	800510e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	430a      	orrs	r2, r1
 800510c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005112:	f003 0320 	and.w	r3, r3, #32
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00a      	beq.n	8005130 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	430a      	orrs	r2, r1
 800512e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005134:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	d01a      	beq.n	8005172 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005156:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800515a:	d10a      	bne.n	8005172 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005176:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800517a:	2b00      	cmp	r3, #0
 800517c:	d00a      	beq.n	8005194 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	430a      	orrs	r2, r1
 8005192:	605a      	str	r2, [r3, #4]
  }
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b098      	sub	sp, #96	@ 0x60
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051b0:	f7fc fc9a 	bl	8001ae8 <HAL_GetTick>
 80051b4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0308 	and.w	r3, r3, #8
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d12f      	bne.n	8005224 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051c4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051c8:	9300      	str	r3, [sp, #0]
 80051ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051cc:	2200      	movs	r2, #0
 80051ce:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 f88e 	bl	80052f4 <UART_WaitOnFlagUntilTimeout>
 80051d8:	4603      	mov	r3, r0
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d022      	beq.n	8005224 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051e6:	e853 3f00 	ldrex	r3, [r3]
 80051ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80051ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80051fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051fe:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005202:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005204:	e841 2300 	strex	r3, r2, [r1]
 8005208:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800520a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800520c:	2b00      	cmp	r3, #0
 800520e:	d1e6      	bne.n	80051de <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2220      	movs	r2, #32
 8005214:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e063      	b.n	80052ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b04      	cmp	r3, #4
 8005230:	d149      	bne.n	80052c6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005232:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800523a:	2200      	movs	r2, #0
 800523c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 f857 	bl	80052f4 <UART_WaitOnFlagUntilTimeout>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	d03c      	beq.n	80052c6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005254:	e853 3f00 	ldrex	r3, [r3]
 8005258:	623b      	str	r3, [r7, #32]
   return(result);
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005260:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	461a      	mov	r2, r3
 8005268:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800526a:	633b      	str	r3, [r7, #48]	@ 0x30
 800526c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005270:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005272:	e841 2300 	strex	r3, r2, [r1]
 8005276:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1e6      	bne.n	800524c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	3308      	adds	r3, #8
 8005284:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	60fb      	str	r3, [r7, #12]
   return(result);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f023 0301 	bic.w	r3, r3, #1
 8005294:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	3308      	adds	r3, #8
 800529c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800529e:	61fa      	str	r2, [r7, #28]
 80052a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a2:	69b9      	ldr	r1, [r7, #24]
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	e841 2300 	strex	r3, r2, [r1]
 80052aa:	617b      	str	r3, [r7, #20]
   return(result);
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1e5      	bne.n	800527e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2220      	movs	r2, #32
 80052b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e012      	b.n	80052ec <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2220      	movs	r2, #32
 80052ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2220      	movs	r2, #32
 80052d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3758      	adds	r7, #88	@ 0x58
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	4613      	mov	r3, r2
 8005302:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005304:	e04f      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800530c:	d04b      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800530e:	f7fc fbeb 	bl	8001ae8 <HAL_GetTick>
 8005312:	4602      	mov	r2, r0
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	1ad3      	subs	r3, r2, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	429a      	cmp	r2, r3
 800531c:	d302      	bcc.n	8005324 <UART_WaitOnFlagUntilTimeout+0x30>
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e04e      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d037      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	2b80      	cmp	r3, #128	@ 0x80
 800533a:	d034      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b40      	cmp	r3, #64	@ 0x40
 8005340:	d031      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69db      	ldr	r3, [r3, #28]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b08      	cmp	r3, #8
 800534e:	d110      	bne.n	8005372 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2208      	movs	r2, #8
 8005356:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005358:	68f8      	ldr	r0, [r7, #12]
 800535a:	f000 f838 	bl	80053ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2208      	movs	r2, #8
 8005362:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	2200      	movs	r2, #0
 800536a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e029      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800537c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005380:	d111      	bne.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800538a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800538c:	68f8      	ldr	r0, [r7, #12]
 800538e:	f000 f81e 	bl	80053ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2220      	movs	r2, #32
 8005396:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2200      	movs	r2, #0
 800539e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e00f      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69da      	ldr	r2, [r3, #28]
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4013      	ands	r3, r2
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	bf0c      	ite	eq
 80053b6:	2301      	moveq	r3, #1
 80053b8:	2300      	movne	r3, #0
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	461a      	mov	r2, r3
 80053be:	79fb      	ldrb	r3, [r7, #7]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d0a0      	beq.n	8005306 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3710      	adds	r7, #16
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b095      	sub	sp, #84	@ 0x54
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	461a      	mov	r2, r3
 80053f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80053f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e6      	bne.n	80053d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3308      	adds	r3, #8
 800540e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	61fb      	str	r3, [r7, #28]
   return(result);
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	3308      	adds	r3, #8
 800542a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800542c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800542e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005430:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005432:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005434:	e841 2300 	strex	r3, r2, [r1]
 8005438:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	2b00      	cmp	r3, #0
 800543e:	d1e3      	bne.n	8005408 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005444:	2b01      	cmp	r3, #1
 8005446:	d118      	bne.n	800547a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	e853 3f00 	ldrex	r3, [r3]
 8005454:	60bb      	str	r3, [r7, #8]
   return(result);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	f023 0310 	bic.w	r3, r3, #16
 800545c:	647b      	str	r3, [r7, #68]	@ 0x44
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	461a      	mov	r2, r3
 8005464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005466:	61bb      	str	r3, [r7, #24]
 8005468:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	613b      	str	r3, [r7, #16]
   return(result);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d1e6      	bne.n	8005448 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2220      	movs	r2, #32
 800547e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800548e:	bf00      	nop
 8005490:	3754      	adds	r7, #84	@ 0x54
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_UARTEx_DisableFifoMode+0x16>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e027      	b.n	8005500 <HAL_UARTEx_DisableFifoMode+0x66>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2224      	movs	r2, #36	@ 0x24
 80054bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	681a      	ldr	r2, [r3, #0]
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f022 0201 	bic.w	r2, r2, #1
 80054d6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80054de:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2220      	movs	r2, #32
 80054f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3714      	adds	r7, #20
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b084      	sub	sp, #16
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800551c:	2b01      	cmp	r3, #1
 800551e:	d101      	bne.n	8005524 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005520:	2302      	movs	r3, #2
 8005522:	e02d      	b.n	8005580 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2224      	movs	r2, #36	@ 0x24
 8005530:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f022 0201 	bic.w	r2, r2, #1
 800554a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	683a      	ldr	r2, [r7, #0]
 800555c:	430a      	orrs	r2, r1
 800555e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f84f 	bl	8005604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68fa      	ldr	r2, [r7, #12]
 800556c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2220      	movs	r2, #32
 8005572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3710      	adds	r7, #16
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005598:	2b01      	cmp	r3, #1
 800559a:	d101      	bne.n	80055a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800559c:	2302      	movs	r3, #2
 800559e:	e02d      	b.n	80055fc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2224      	movs	r2, #36	@ 0x24
 80055ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	430a      	orrs	r2, r1
 80055da:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 f811 	bl	8005604 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	68fa      	ldr	r2, [r7, #12]
 80055e8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2220      	movs	r2, #32
 80055ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055fa:	2300      	movs	r3, #0
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005604:	b480      	push	{r7}
 8005606:	b085      	sub	sp, #20
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005610:	2b00      	cmp	r3, #0
 8005612:	d108      	bne.n	8005626 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005624:	e031      	b.n	800568a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005626:	2308      	movs	r3, #8
 8005628:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800562a:	2308      	movs	r3, #8
 800562c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	0e5b      	lsrs	r3, r3, #25
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	0f5b      	lsrs	r3, r3, #29
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 0307 	and.w	r3, r3, #7
 800564c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800564e:	7bbb      	ldrb	r3, [r7, #14]
 8005650:	7b3a      	ldrb	r2, [r7, #12]
 8005652:	4911      	ldr	r1, [pc, #68]	@ (8005698 <UARTEx_SetNbDataToProcess+0x94>)
 8005654:	5c8a      	ldrb	r2, [r1, r2]
 8005656:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800565a:	7b3a      	ldrb	r2, [r7, #12]
 800565c:	490f      	ldr	r1, [pc, #60]	@ (800569c <UARTEx_SetNbDataToProcess+0x98>)
 800565e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005660:	fb93 f3f2 	sdiv	r3, r3, r2
 8005664:	b29a      	uxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800566c:	7bfb      	ldrb	r3, [r7, #15]
 800566e:	7b7a      	ldrb	r2, [r7, #13]
 8005670:	4909      	ldr	r1, [pc, #36]	@ (8005698 <UARTEx_SetNbDataToProcess+0x94>)
 8005672:	5c8a      	ldrb	r2, [r1, r2]
 8005674:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005678:	7b7a      	ldrb	r2, [r7, #13]
 800567a:	4908      	ldr	r1, [pc, #32]	@ (800569c <UARTEx_SetNbDataToProcess+0x98>)
 800567c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800567e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	08009e48 	.word	0x08009e48
 800569c:	08009e50 	.word	0x08009e50

080056a0 <__cvt>:
 80056a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056a4:	ec57 6b10 	vmov	r6, r7, d0
 80056a8:	2f00      	cmp	r7, #0
 80056aa:	460c      	mov	r4, r1
 80056ac:	4619      	mov	r1, r3
 80056ae:	463b      	mov	r3, r7
 80056b0:	bfb4      	ite	lt
 80056b2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80056b6:	2300      	movge	r3, #0
 80056b8:	4691      	mov	r9, r2
 80056ba:	bfbf      	itttt	lt
 80056bc:	4632      	movlt	r2, r6
 80056be:	461f      	movlt	r7, r3
 80056c0:	232d      	movlt	r3, #45	@ 0x2d
 80056c2:	4616      	movlt	r6, r2
 80056c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80056c8:	700b      	strb	r3, [r1, #0]
 80056ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80056cc:	f023 0820 	bic.w	r8, r3, #32
 80056d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056d4:	d005      	beq.n	80056e2 <__cvt+0x42>
 80056d6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80056da:	d100      	bne.n	80056de <__cvt+0x3e>
 80056dc:	3401      	adds	r4, #1
 80056de:	2102      	movs	r1, #2
 80056e0:	e000      	b.n	80056e4 <__cvt+0x44>
 80056e2:	2103      	movs	r1, #3
 80056e4:	ab03      	add	r3, sp, #12
 80056e6:	4622      	mov	r2, r4
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	ab02      	add	r3, sp, #8
 80056ec:	ec47 6b10 	vmov	d0, r6, r7
 80056f0:	9300      	str	r3, [sp, #0]
 80056f2:	4653      	mov	r3, sl
 80056f4:	f001 f888 	bl	8006808 <_dtoa_r>
 80056f8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80056fc:	4605      	mov	r5, r0
 80056fe:	d119      	bne.n	8005734 <__cvt+0x94>
 8005700:	f019 0f01 	tst.w	r9, #1
 8005704:	d00e      	beq.n	8005724 <__cvt+0x84>
 8005706:	eb00 0904 	add.w	r9, r0, r4
 800570a:	2200      	movs	r2, #0
 800570c:	2300      	movs	r3, #0
 800570e:	4630      	mov	r0, r6
 8005710:	4639      	mov	r1, r7
 8005712:	f7fb f9bd 	bl	8000a90 <__aeabi_dcmpeq>
 8005716:	b108      	cbz	r0, 800571c <__cvt+0x7c>
 8005718:	f8cd 900c 	str.w	r9, [sp, #12]
 800571c:	2230      	movs	r2, #48	@ 0x30
 800571e:	9b03      	ldr	r3, [sp, #12]
 8005720:	454b      	cmp	r3, r9
 8005722:	d31e      	bcc.n	8005762 <__cvt+0xc2>
 8005724:	9b03      	ldr	r3, [sp, #12]
 8005726:	4628      	mov	r0, r5
 8005728:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800572a:	1b5b      	subs	r3, r3, r5
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	b004      	add	sp, #16
 8005730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005734:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005738:	eb00 0904 	add.w	r9, r0, r4
 800573c:	d1e5      	bne.n	800570a <__cvt+0x6a>
 800573e:	7803      	ldrb	r3, [r0, #0]
 8005740:	2b30      	cmp	r3, #48	@ 0x30
 8005742:	d10a      	bne.n	800575a <__cvt+0xba>
 8005744:	2200      	movs	r2, #0
 8005746:	2300      	movs	r3, #0
 8005748:	4630      	mov	r0, r6
 800574a:	4639      	mov	r1, r7
 800574c:	f7fb f9a0 	bl	8000a90 <__aeabi_dcmpeq>
 8005750:	b918      	cbnz	r0, 800575a <__cvt+0xba>
 8005752:	f1c4 0401 	rsb	r4, r4, #1
 8005756:	f8ca 4000 	str.w	r4, [sl]
 800575a:	f8da 3000 	ldr.w	r3, [sl]
 800575e:	4499      	add	r9, r3
 8005760:	e7d3      	b.n	800570a <__cvt+0x6a>
 8005762:	1c59      	adds	r1, r3, #1
 8005764:	9103      	str	r1, [sp, #12]
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e7d9      	b.n	800571e <__cvt+0x7e>

0800576a <__exponent>:
 800576a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800576c:	2900      	cmp	r1, #0
 800576e:	7002      	strb	r2, [r0, #0]
 8005770:	bfba      	itte	lt
 8005772:	4249      	neglt	r1, r1
 8005774:	232d      	movlt	r3, #45	@ 0x2d
 8005776:	232b      	movge	r3, #43	@ 0x2b
 8005778:	2909      	cmp	r1, #9
 800577a:	7043      	strb	r3, [r0, #1]
 800577c:	dd28      	ble.n	80057d0 <__exponent+0x66>
 800577e:	f10d 0307 	add.w	r3, sp, #7
 8005782:	270a      	movs	r7, #10
 8005784:	461d      	mov	r5, r3
 8005786:	461a      	mov	r2, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	fbb1 f6f7 	udiv	r6, r1, r7
 800578e:	fb07 1416 	mls	r4, r7, r6, r1
 8005792:	3430      	adds	r4, #48	@ 0x30
 8005794:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005798:	460c      	mov	r4, r1
 800579a:	4631      	mov	r1, r6
 800579c:	2c63      	cmp	r4, #99	@ 0x63
 800579e:	dcf2      	bgt.n	8005786 <__exponent+0x1c>
 80057a0:	3130      	adds	r1, #48	@ 0x30
 80057a2:	1e94      	subs	r4, r2, #2
 80057a4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057a8:	1c41      	adds	r1, r0, #1
 80057aa:	4623      	mov	r3, r4
 80057ac:	42ab      	cmp	r3, r5
 80057ae:	d30a      	bcc.n	80057c6 <__exponent+0x5c>
 80057b0:	f10d 0309 	add.w	r3, sp, #9
 80057b4:	1a9b      	subs	r3, r3, r2
 80057b6:	42ac      	cmp	r4, r5
 80057b8:	bf88      	it	hi
 80057ba:	2300      	movhi	r3, #0
 80057bc:	3302      	adds	r3, #2
 80057be:	4403      	add	r3, r0
 80057c0:	1a18      	subs	r0, r3, r0
 80057c2:	b003      	add	sp, #12
 80057c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057c6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80057ca:	f801 6f01 	strb.w	r6, [r1, #1]!
 80057ce:	e7ed      	b.n	80057ac <__exponent+0x42>
 80057d0:	2330      	movs	r3, #48	@ 0x30
 80057d2:	3130      	adds	r1, #48	@ 0x30
 80057d4:	7083      	strb	r3, [r0, #2]
 80057d6:	1d03      	adds	r3, r0, #4
 80057d8:	70c1      	strb	r1, [r0, #3]
 80057da:	e7f1      	b.n	80057c0 <__exponent+0x56>

080057dc <_printf_float>:
 80057dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e0:	b08d      	sub	sp, #52	@ 0x34
 80057e2:	460c      	mov	r4, r1
 80057e4:	4616      	mov	r6, r2
 80057e6:	461f      	mov	r7, r3
 80057e8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80057ec:	4605      	mov	r5, r0
 80057ee:	f000 fef1 	bl	80065d4 <_localeconv_r>
 80057f2:	6803      	ldr	r3, [r0, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	9304      	str	r3, [sp, #16]
 80057f8:	f7fa fd1e 	bl	8000238 <strlen>
 80057fc:	2300      	movs	r3, #0
 80057fe:	9005      	str	r0, [sp, #20]
 8005800:	930a      	str	r3, [sp, #40]	@ 0x28
 8005802:	f8d8 3000 	ldr.w	r3, [r8]
 8005806:	f894 a018 	ldrb.w	sl, [r4, #24]
 800580a:	3307      	adds	r3, #7
 800580c:	f8d4 b000 	ldr.w	fp, [r4]
 8005810:	f023 0307 	bic.w	r3, r3, #7
 8005814:	f103 0208 	add.w	r2, r3, #8
 8005818:	f8c8 2000 	str.w	r2, [r8]
 800581c:	f04f 32ff 	mov.w	r2, #4294967295
 8005820:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005824:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005828:	f8cd 8018 	str.w	r8, [sp, #24]
 800582c:	9307      	str	r3, [sp, #28]
 800582e:	4b9d      	ldr	r3, [pc, #628]	@ (8005aa4 <_printf_float+0x2c8>)
 8005830:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005834:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005838:	f7fb f95c 	bl	8000af4 <__aeabi_dcmpun>
 800583c:	bb70      	cbnz	r0, 800589c <_printf_float+0xc0>
 800583e:	f04f 32ff 	mov.w	r2, #4294967295
 8005842:	4b98      	ldr	r3, [pc, #608]	@ (8005aa4 <_printf_float+0x2c8>)
 8005844:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005848:	f7fb f936 	bl	8000ab8 <__aeabi_dcmple>
 800584c:	bb30      	cbnz	r0, 800589c <_printf_float+0xc0>
 800584e:	2200      	movs	r2, #0
 8005850:	2300      	movs	r3, #0
 8005852:	4640      	mov	r0, r8
 8005854:	4649      	mov	r1, r9
 8005856:	f7fb f925 	bl	8000aa4 <__aeabi_dcmplt>
 800585a:	b110      	cbz	r0, 8005862 <_printf_float+0x86>
 800585c:	232d      	movs	r3, #45	@ 0x2d
 800585e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005862:	4a91      	ldr	r2, [pc, #580]	@ (8005aa8 <_printf_float+0x2cc>)
 8005864:	4b91      	ldr	r3, [pc, #580]	@ (8005aac <_printf_float+0x2d0>)
 8005866:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800586a:	bf94      	ite	ls
 800586c:	4690      	movls	r8, r2
 800586e:	4698      	movhi	r8, r3
 8005870:	2303      	movs	r3, #3
 8005872:	f04f 0900 	mov.w	r9, #0
 8005876:	6123      	str	r3, [r4, #16]
 8005878:	f02b 0304 	bic.w	r3, fp, #4
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	4633      	mov	r3, r6
 8005880:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005882:	4621      	mov	r1, r4
 8005884:	4628      	mov	r0, r5
 8005886:	9700      	str	r7, [sp, #0]
 8005888:	f000 f9d2 	bl	8005c30 <_printf_common>
 800588c:	3001      	adds	r0, #1
 800588e:	f040 808d 	bne.w	80059ac <_printf_float+0x1d0>
 8005892:	f04f 30ff 	mov.w	r0, #4294967295
 8005896:	b00d      	add	sp, #52	@ 0x34
 8005898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800589c:	4642      	mov	r2, r8
 800589e:	464b      	mov	r3, r9
 80058a0:	4640      	mov	r0, r8
 80058a2:	4649      	mov	r1, r9
 80058a4:	f7fb f926 	bl	8000af4 <__aeabi_dcmpun>
 80058a8:	b140      	cbz	r0, 80058bc <_printf_float+0xe0>
 80058aa:	464b      	mov	r3, r9
 80058ac:	4a80      	ldr	r2, [pc, #512]	@ (8005ab0 <_printf_float+0x2d4>)
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bfbc      	itt	lt
 80058b2:	232d      	movlt	r3, #45	@ 0x2d
 80058b4:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80058b8:	4b7e      	ldr	r3, [pc, #504]	@ (8005ab4 <_printf_float+0x2d8>)
 80058ba:	e7d4      	b.n	8005866 <_printf_float+0x8a>
 80058bc:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	9206      	str	r2, [sp, #24]
 80058c4:	1c5a      	adds	r2, r3, #1
 80058c6:	d13b      	bne.n	8005940 <_printf_float+0x164>
 80058c8:	2306      	movs	r3, #6
 80058ca:	6063      	str	r3, [r4, #4]
 80058cc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80058d0:	2300      	movs	r3, #0
 80058d2:	4628      	mov	r0, r5
 80058d4:	6022      	str	r2, [r4, #0]
 80058d6:	9303      	str	r3, [sp, #12]
 80058d8:	ab0a      	add	r3, sp, #40	@ 0x28
 80058da:	e9cd a301 	strd	sl, r3, [sp, #4]
 80058de:	ab09      	add	r3, sp, #36	@ 0x24
 80058e0:	ec49 8b10 	vmov	d0, r8, r9
 80058e4:	9300      	str	r3, [sp, #0]
 80058e6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80058ea:	6861      	ldr	r1, [r4, #4]
 80058ec:	f7ff fed8 	bl	80056a0 <__cvt>
 80058f0:	9b06      	ldr	r3, [sp, #24]
 80058f2:	4680      	mov	r8, r0
 80058f4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80058f6:	2b47      	cmp	r3, #71	@ 0x47
 80058f8:	d129      	bne.n	800594e <_printf_float+0x172>
 80058fa:	1cc8      	adds	r0, r1, #3
 80058fc:	db02      	blt.n	8005904 <_printf_float+0x128>
 80058fe:	6863      	ldr	r3, [r4, #4]
 8005900:	4299      	cmp	r1, r3
 8005902:	dd41      	ble.n	8005988 <_printf_float+0x1ac>
 8005904:	f1aa 0a02 	sub.w	sl, sl, #2
 8005908:	fa5f fa8a 	uxtb.w	sl, sl
 800590c:	3901      	subs	r1, #1
 800590e:	4652      	mov	r2, sl
 8005910:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005914:	9109      	str	r1, [sp, #36]	@ 0x24
 8005916:	f7ff ff28 	bl	800576a <__exponent>
 800591a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800591c:	4681      	mov	r9, r0
 800591e:	1813      	adds	r3, r2, r0
 8005920:	2a01      	cmp	r2, #1
 8005922:	6123      	str	r3, [r4, #16]
 8005924:	dc02      	bgt.n	800592c <_printf_float+0x150>
 8005926:	6822      	ldr	r2, [r4, #0]
 8005928:	07d2      	lsls	r2, r2, #31
 800592a:	d501      	bpl.n	8005930 <_printf_float+0x154>
 800592c:	3301      	adds	r3, #1
 800592e:	6123      	str	r3, [r4, #16]
 8005930:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0a2      	beq.n	800587e <_printf_float+0xa2>
 8005938:	232d      	movs	r3, #45	@ 0x2d
 800593a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800593e:	e79e      	b.n	800587e <_printf_float+0xa2>
 8005940:	9a06      	ldr	r2, [sp, #24]
 8005942:	2a47      	cmp	r2, #71	@ 0x47
 8005944:	d1c2      	bne.n	80058cc <_printf_float+0xf0>
 8005946:	2b00      	cmp	r3, #0
 8005948:	d1c0      	bne.n	80058cc <_printf_float+0xf0>
 800594a:	2301      	movs	r3, #1
 800594c:	e7bd      	b.n	80058ca <_printf_float+0xee>
 800594e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005952:	d9db      	bls.n	800590c <_printf_float+0x130>
 8005954:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005958:	d118      	bne.n	800598c <_printf_float+0x1b0>
 800595a:	2900      	cmp	r1, #0
 800595c:	6863      	ldr	r3, [r4, #4]
 800595e:	dd0b      	ble.n	8005978 <_printf_float+0x19c>
 8005960:	6121      	str	r1, [r4, #16]
 8005962:	b913      	cbnz	r3, 800596a <_printf_float+0x18e>
 8005964:	6822      	ldr	r2, [r4, #0]
 8005966:	07d0      	lsls	r0, r2, #31
 8005968:	d502      	bpl.n	8005970 <_printf_float+0x194>
 800596a:	3301      	adds	r3, #1
 800596c:	440b      	add	r3, r1
 800596e:	6123      	str	r3, [r4, #16]
 8005970:	f04f 0900 	mov.w	r9, #0
 8005974:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005976:	e7db      	b.n	8005930 <_printf_float+0x154>
 8005978:	b913      	cbnz	r3, 8005980 <_printf_float+0x1a4>
 800597a:	6822      	ldr	r2, [r4, #0]
 800597c:	07d2      	lsls	r2, r2, #31
 800597e:	d501      	bpl.n	8005984 <_printf_float+0x1a8>
 8005980:	3302      	adds	r3, #2
 8005982:	e7f4      	b.n	800596e <_printf_float+0x192>
 8005984:	2301      	movs	r3, #1
 8005986:	e7f2      	b.n	800596e <_printf_float+0x192>
 8005988:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800598c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800598e:	4299      	cmp	r1, r3
 8005990:	db05      	blt.n	800599e <_printf_float+0x1c2>
 8005992:	6823      	ldr	r3, [r4, #0]
 8005994:	6121      	str	r1, [r4, #16]
 8005996:	07d8      	lsls	r0, r3, #31
 8005998:	d5ea      	bpl.n	8005970 <_printf_float+0x194>
 800599a:	1c4b      	adds	r3, r1, #1
 800599c:	e7e7      	b.n	800596e <_printf_float+0x192>
 800599e:	2900      	cmp	r1, #0
 80059a0:	bfd4      	ite	le
 80059a2:	f1c1 0202 	rsble	r2, r1, #2
 80059a6:	2201      	movgt	r2, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	e7e0      	b.n	800596e <_printf_float+0x192>
 80059ac:	6823      	ldr	r3, [r4, #0]
 80059ae:	055a      	lsls	r2, r3, #21
 80059b0:	d407      	bmi.n	80059c2 <_printf_float+0x1e6>
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	4642      	mov	r2, r8
 80059b6:	4631      	mov	r1, r6
 80059b8:	4628      	mov	r0, r5
 80059ba:	47b8      	blx	r7
 80059bc:	3001      	adds	r0, #1
 80059be:	d12b      	bne.n	8005a18 <_printf_float+0x23c>
 80059c0:	e767      	b.n	8005892 <_printf_float+0xb6>
 80059c2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059c6:	f240 80dd 	bls.w	8005b84 <_printf_float+0x3a8>
 80059ca:	2200      	movs	r2, #0
 80059cc:	2300      	movs	r3, #0
 80059ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80059d2:	f7fb f85d 	bl	8000a90 <__aeabi_dcmpeq>
 80059d6:	2800      	cmp	r0, #0
 80059d8:	d033      	beq.n	8005a42 <_printf_float+0x266>
 80059da:	2301      	movs	r3, #1
 80059dc:	4a36      	ldr	r2, [pc, #216]	@ (8005ab8 <_printf_float+0x2dc>)
 80059de:	4631      	mov	r1, r6
 80059e0:	4628      	mov	r0, r5
 80059e2:	47b8      	blx	r7
 80059e4:	3001      	adds	r0, #1
 80059e6:	f43f af54 	beq.w	8005892 <_printf_float+0xb6>
 80059ea:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80059ee:	4543      	cmp	r3, r8
 80059f0:	db02      	blt.n	80059f8 <_printf_float+0x21c>
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	07d8      	lsls	r0, r3, #31
 80059f6:	d50f      	bpl.n	8005a18 <_printf_float+0x23c>
 80059f8:	4631      	mov	r1, r6
 80059fa:	4628      	mov	r0, r5
 80059fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a00:	47b8      	blx	r7
 8005a02:	3001      	adds	r0, #1
 8005a04:	f43f af45 	beq.w	8005892 <_printf_float+0xb6>
 8005a08:	f04f 0900 	mov.w	r9, #0
 8005a0c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005a10:	f104 0a1a 	add.w	sl, r4, #26
 8005a14:	45c8      	cmp	r8, r9
 8005a16:	dc09      	bgt.n	8005a2c <_printf_float+0x250>
 8005a18:	6823      	ldr	r3, [r4, #0]
 8005a1a:	079b      	lsls	r3, r3, #30
 8005a1c:	f100 8103 	bmi.w	8005c26 <_printf_float+0x44a>
 8005a20:	68e0      	ldr	r0, [r4, #12]
 8005a22:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a24:	4298      	cmp	r0, r3
 8005a26:	bfb8      	it	lt
 8005a28:	4618      	movlt	r0, r3
 8005a2a:	e734      	b.n	8005896 <_printf_float+0xba>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	4652      	mov	r2, sl
 8005a30:	4631      	mov	r1, r6
 8005a32:	4628      	mov	r0, r5
 8005a34:	47b8      	blx	r7
 8005a36:	3001      	adds	r0, #1
 8005a38:	f43f af2b 	beq.w	8005892 <_printf_float+0xb6>
 8005a3c:	f109 0901 	add.w	r9, r9, #1
 8005a40:	e7e8      	b.n	8005a14 <_printf_float+0x238>
 8005a42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	dc39      	bgt.n	8005abc <_printf_float+0x2e0>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8005ab8 <_printf_float+0x2dc>)
 8005a4c:	4631      	mov	r1, r6
 8005a4e:	4628      	mov	r0, r5
 8005a50:	47b8      	blx	r7
 8005a52:	3001      	adds	r0, #1
 8005a54:	f43f af1d 	beq.w	8005892 <_printf_float+0xb6>
 8005a58:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005a5c:	ea59 0303 	orrs.w	r3, r9, r3
 8005a60:	d102      	bne.n	8005a68 <_printf_float+0x28c>
 8005a62:	6823      	ldr	r3, [r4, #0]
 8005a64:	07d9      	lsls	r1, r3, #31
 8005a66:	d5d7      	bpl.n	8005a18 <_printf_float+0x23c>
 8005a68:	4631      	mov	r1, r6
 8005a6a:	4628      	mov	r0, r5
 8005a6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	f43f af0d 	beq.w	8005892 <_printf_float+0xb6>
 8005a78:	f04f 0a00 	mov.w	sl, #0
 8005a7c:	f104 0b1a 	add.w	fp, r4, #26
 8005a80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a82:	425b      	negs	r3, r3
 8005a84:	4553      	cmp	r3, sl
 8005a86:	dc01      	bgt.n	8005a8c <_printf_float+0x2b0>
 8005a88:	464b      	mov	r3, r9
 8005a8a:	e793      	b.n	80059b4 <_printf_float+0x1d8>
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	465a      	mov	r2, fp
 8005a90:	4631      	mov	r1, r6
 8005a92:	4628      	mov	r0, r5
 8005a94:	47b8      	blx	r7
 8005a96:	3001      	adds	r0, #1
 8005a98:	f43f aefb 	beq.w	8005892 <_printf_float+0xb6>
 8005a9c:	f10a 0a01 	add.w	sl, sl, #1
 8005aa0:	e7ee      	b.n	8005a80 <_printf_float+0x2a4>
 8005aa2:	bf00      	nop
 8005aa4:	7fefffff 	.word	0x7fefffff
 8005aa8:	08009e58 	.word	0x08009e58
 8005aac:	08009e5c 	.word	0x08009e5c
 8005ab0:	08009e60 	.word	0x08009e60
 8005ab4:	08009e64 	.word	0x08009e64
 8005ab8:	08009e68 	.word	0x08009e68
 8005abc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005abe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005ac2:	4553      	cmp	r3, sl
 8005ac4:	bfa8      	it	ge
 8005ac6:	4653      	movge	r3, sl
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	4699      	mov	r9, r3
 8005acc:	dc36      	bgt.n	8005b3c <_printf_float+0x360>
 8005ace:	f04f 0b00 	mov.w	fp, #0
 8005ad2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ad6:	f104 021a 	add.w	r2, r4, #26
 8005ada:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005adc:	9306      	str	r3, [sp, #24]
 8005ade:	eba3 0309 	sub.w	r3, r3, r9
 8005ae2:	455b      	cmp	r3, fp
 8005ae4:	dc31      	bgt.n	8005b4a <_printf_float+0x36e>
 8005ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ae8:	459a      	cmp	sl, r3
 8005aea:	dc3a      	bgt.n	8005b62 <_printf_float+0x386>
 8005aec:	6823      	ldr	r3, [r4, #0]
 8005aee:	07da      	lsls	r2, r3, #31
 8005af0:	d437      	bmi.n	8005b62 <_printf_float+0x386>
 8005af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af4:	ebaa 0903 	sub.w	r9, sl, r3
 8005af8:	9b06      	ldr	r3, [sp, #24]
 8005afa:	ebaa 0303 	sub.w	r3, sl, r3
 8005afe:	4599      	cmp	r9, r3
 8005b00:	bfa8      	it	ge
 8005b02:	4699      	movge	r9, r3
 8005b04:	f1b9 0f00 	cmp.w	r9, #0
 8005b08:	dc33      	bgt.n	8005b72 <_printf_float+0x396>
 8005b0a:	f04f 0800 	mov.w	r8, #0
 8005b0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b12:	f104 0b1a 	add.w	fp, r4, #26
 8005b16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b18:	ebaa 0303 	sub.w	r3, sl, r3
 8005b1c:	eba3 0309 	sub.w	r3, r3, r9
 8005b20:	4543      	cmp	r3, r8
 8005b22:	f77f af79 	ble.w	8005a18 <_printf_float+0x23c>
 8005b26:	2301      	movs	r3, #1
 8005b28:	465a      	mov	r2, fp
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	47b8      	blx	r7
 8005b30:	3001      	adds	r0, #1
 8005b32:	f43f aeae 	beq.w	8005892 <_printf_float+0xb6>
 8005b36:	f108 0801 	add.w	r8, r8, #1
 8005b3a:	e7ec      	b.n	8005b16 <_printf_float+0x33a>
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	4631      	mov	r1, r6
 8005b40:	4628      	mov	r0, r5
 8005b42:	47b8      	blx	r7
 8005b44:	3001      	adds	r0, #1
 8005b46:	d1c2      	bne.n	8005ace <_printf_float+0x2f2>
 8005b48:	e6a3      	b.n	8005892 <_printf_float+0xb6>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4631      	mov	r1, r6
 8005b4e:	4628      	mov	r0, r5
 8005b50:	9206      	str	r2, [sp, #24]
 8005b52:	47b8      	blx	r7
 8005b54:	3001      	adds	r0, #1
 8005b56:	f43f ae9c 	beq.w	8005892 <_printf_float+0xb6>
 8005b5a:	f10b 0b01 	add.w	fp, fp, #1
 8005b5e:	9a06      	ldr	r2, [sp, #24]
 8005b60:	e7bb      	b.n	8005ada <_printf_float+0x2fe>
 8005b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d1c0      	bne.n	8005af2 <_printf_float+0x316>
 8005b70:	e68f      	b.n	8005892 <_printf_float+0xb6>
 8005b72:	9a06      	ldr	r2, [sp, #24]
 8005b74:	464b      	mov	r3, r9
 8005b76:	4631      	mov	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	4442      	add	r2, r8
 8005b7c:	47b8      	blx	r7
 8005b7e:	3001      	adds	r0, #1
 8005b80:	d1c3      	bne.n	8005b0a <_printf_float+0x32e>
 8005b82:	e686      	b.n	8005892 <_printf_float+0xb6>
 8005b84:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b88:	f1ba 0f01 	cmp.w	sl, #1
 8005b8c:	dc01      	bgt.n	8005b92 <_printf_float+0x3b6>
 8005b8e:	07db      	lsls	r3, r3, #31
 8005b90:	d536      	bpl.n	8005c00 <_printf_float+0x424>
 8005b92:	2301      	movs	r3, #1
 8005b94:	4642      	mov	r2, r8
 8005b96:	4631      	mov	r1, r6
 8005b98:	4628      	mov	r0, r5
 8005b9a:	47b8      	blx	r7
 8005b9c:	3001      	adds	r0, #1
 8005b9e:	f43f ae78 	beq.w	8005892 <_printf_float+0xb6>
 8005ba2:	4631      	mov	r1, r6
 8005ba4:	4628      	mov	r0, r5
 8005ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005baa:	47b8      	blx	r7
 8005bac:	3001      	adds	r0, #1
 8005bae:	f43f ae70 	beq.w	8005892 <_printf_float+0xb6>
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005bba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005bbe:	f7fa ff67 	bl	8000a90 <__aeabi_dcmpeq>
 8005bc2:	b9c0      	cbnz	r0, 8005bf6 <_printf_float+0x41a>
 8005bc4:	4653      	mov	r3, sl
 8005bc6:	f108 0201 	add.w	r2, r8, #1
 8005bca:	4631      	mov	r1, r6
 8005bcc:	4628      	mov	r0, r5
 8005bce:	47b8      	blx	r7
 8005bd0:	3001      	adds	r0, #1
 8005bd2:	d10c      	bne.n	8005bee <_printf_float+0x412>
 8005bd4:	e65d      	b.n	8005892 <_printf_float+0xb6>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	465a      	mov	r2, fp
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	47b8      	blx	r7
 8005be0:	3001      	adds	r0, #1
 8005be2:	f43f ae56 	beq.w	8005892 <_printf_float+0xb6>
 8005be6:	f108 0801 	add.w	r8, r8, #1
 8005bea:	45d0      	cmp	r8, sl
 8005bec:	dbf3      	blt.n	8005bd6 <_printf_float+0x3fa>
 8005bee:	464b      	mov	r3, r9
 8005bf0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005bf4:	e6df      	b.n	80059b6 <_printf_float+0x1da>
 8005bf6:	f04f 0800 	mov.w	r8, #0
 8005bfa:	f104 0b1a 	add.w	fp, r4, #26
 8005bfe:	e7f4      	b.n	8005bea <_printf_float+0x40e>
 8005c00:	2301      	movs	r3, #1
 8005c02:	4642      	mov	r2, r8
 8005c04:	e7e1      	b.n	8005bca <_printf_float+0x3ee>
 8005c06:	2301      	movs	r3, #1
 8005c08:	464a      	mov	r2, r9
 8005c0a:	4631      	mov	r1, r6
 8005c0c:	4628      	mov	r0, r5
 8005c0e:	47b8      	blx	r7
 8005c10:	3001      	adds	r0, #1
 8005c12:	f43f ae3e 	beq.w	8005892 <_printf_float+0xb6>
 8005c16:	f108 0801 	add.w	r8, r8, #1
 8005c1a:	68e3      	ldr	r3, [r4, #12]
 8005c1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005c1e:	1a5b      	subs	r3, r3, r1
 8005c20:	4543      	cmp	r3, r8
 8005c22:	dcf0      	bgt.n	8005c06 <_printf_float+0x42a>
 8005c24:	e6fc      	b.n	8005a20 <_printf_float+0x244>
 8005c26:	f04f 0800 	mov.w	r8, #0
 8005c2a:	f104 0919 	add.w	r9, r4, #25
 8005c2e:	e7f4      	b.n	8005c1a <_printf_float+0x43e>

08005c30 <_printf_common>:
 8005c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c34:	4616      	mov	r6, r2
 8005c36:	4698      	mov	r8, r3
 8005c38:	688a      	ldr	r2, [r1, #8]
 8005c3a:	4607      	mov	r7, r0
 8005c3c:	690b      	ldr	r3, [r1, #16]
 8005c3e:	460c      	mov	r4, r1
 8005c40:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c44:	4293      	cmp	r3, r2
 8005c46:	bfb8      	it	lt
 8005c48:	4613      	movlt	r3, r2
 8005c4a:	6033      	str	r3, [r6, #0]
 8005c4c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005c50:	b10a      	cbz	r2, 8005c56 <_printf_common+0x26>
 8005c52:	3301      	adds	r3, #1
 8005c54:	6033      	str	r3, [r6, #0]
 8005c56:	6823      	ldr	r3, [r4, #0]
 8005c58:	0699      	lsls	r1, r3, #26
 8005c5a:	bf42      	ittt	mi
 8005c5c:	6833      	ldrmi	r3, [r6, #0]
 8005c5e:	3302      	addmi	r3, #2
 8005c60:	6033      	strmi	r3, [r6, #0]
 8005c62:	6825      	ldr	r5, [r4, #0]
 8005c64:	f015 0506 	ands.w	r5, r5, #6
 8005c68:	d106      	bne.n	8005c78 <_printf_common+0x48>
 8005c6a:	f104 0a19 	add.w	sl, r4, #25
 8005c6e:	68e3      	ldr	r3, [r4, #12]
 8005c70:	6832      	ldr	r2, [r6, #0]
 8005c72:	1a9b      	subs	r3, r3, r2
 8005c74:	42ab      	cmp	r3, r5
 8005c76:	dc2b      	bgt.n	8005cd0 <_printf_common+0xa0>
 8005c78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005c7c:	6822      	ldr	r2, [r4, #0]
 8005c7e:	3b00      	subs	r3, #0
 8005c80:	bf18      	it	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	0692      	lsls	r2, r2, #26
 8005c86:	d430      	bmi.n	8005cea <_printf_common+0xba>
 8005c88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c8c:	4641      	mov	r1, r8
 8005c8e:	4638      	mov	r0, r7
 8005c90:	47c8      	blx	r9
 8005c92:	3001      	adds	r0, #1
 8005c94:	d023      	beq.n	8005cde <_printf_common+0xae>
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	341a      	adds	r4, #26
 8005c9a:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8005c9e:	f003 0306 	and.w	r3, r3, #6
 8005ca2:	2b04      	cmp	r3, #4
 8005ca4:	bf0a      	itet	eq
 8005ca6:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
 8005caa:	2500      	movne	r5, #0
 8005cac:	6833      	ldreq	r3, [r6, #0]
 8005cae:	f04f 0600 	mov.w	r6, #0
 8005cb2:	bf08      	it	eq
 8005cb4:	1aed      	subeq	r5, r5, r3
 8005cb6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005cba:	bf08      	it	eq
 8005cbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	bfc4      	itt	gt
 8005cc4:	1a9b      	subgt	r3, r3, r2
 8005cc6:	18ed      	addgt	r5, r5, r3
 8005cc8:	42b5      	cmp	r5, r6
 8005cca:	d11a      	bne.n	8005d02 <_printf_common+0xd2>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e008      	b.n	8005ce2 <_printf_common+0xb2>
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	4652      	mov	r2, sl
 8005cd4:	4641      	mov	r1, r8
 8005cd6:	4638      	mov	r0, r7
 8005cd8:	47c8      	blx	r9
 8005cda:	3001      	adds	r0, #1
 8005cdc:	d103      	bne.n	8005ce6 <_printf_common+0xb6>
 8005cde:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ce6:	3501      	adds	r5, #1
 8005ce8:	e7c1      	b.n	8005c6e <_printf_common+0x3e>
 8005cea:	18e1      	adds	r1, r4, r3
 8005cec:	1c5a      	adds	r2, r3, #1
 8005cee:	2030      	movs	r0, #48	@ 0x30
 8005cf0:	3302      	adds	r3, #2
 8005cf2:	4422      	add	r2, r4
 8005cf4:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005cfc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d00:	e7c2      	b.n	8005c88 <_printf_common+0x58>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4622      	mov	r2, r4
 8005d06:	4641      	mov	r1, r8
 8005d08:	4638      	mov	r0, r7
 8005d0a:	47c8      	blx	r9
 8005d0c:	3001      	adds	r0, #1
 8005d0e:	d0e6      	beq.n	8005cde <_printf_common+0xae>
 8005d10:	3601      	adds	r6, #1
 8005d12:	e7d9      	b.n	8005cc8 <_printf_common+0x98>

08005d14 <_printf_i>:
 8005d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005d18:	7e0f      	ldrb	r7, [r1, #24]
 8005d1a:	4691      	mov	r9, r2
 8005d1c:	4680      	mov	r8, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	2f78      	cmp	r7, #120	@ 0x78
 8005d22:	469a      	mov	sl, r3
 8005d24:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005d26:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005d2a:	d807      	bhi.n	8005d3c <_printf_i+0x28>
 8005d2c:	2f62      	cmp	r7, #98	@ 0x62
 8005d2e:	d80a      	bhi.n	8005d46 <_printf_i+0x32>
 8005d30:	2f00      	cmp	r7, #0
 8005d32:	f000 80d2 	beq.w	8005eda <_printf_i+0x1c6>
 8005d36:	2f58      	cmp	r7, #88	@ 0x58
 8005d38:	f000 80b9 	beq.w	8005eae <_printf_i+0x19a>
 8005d3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d40:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005d44:	e03a      	b.n	8005dbc <_printf_i+0xa8>
 8005d46:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005d4a:	2b15      	cmp	r3, #21
 8005d4c:	d8f6      	bhi.n	8005d3c <_printf_i+0x28>
 8005d4e:	a101      	add	r1, pc, #4	@ (adr r1, 8005d54 <_printf_i+0x40>)
 8005d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005d54:	08005dad 	.word	0x08005dad
 8005d58:	08005dc1 	.word	0x08005dc1
 8005d5c:	08005d3d 	.word	0x08005d3d
 8005d60:	08005d3d 	.word	0x08005d3d
 8005d64:	08005d3d 	.word	0x08005d3d
 8005d68:	08005d3d 	.word	0x08005d3d
 8005d6c:	08005dc1 	.word	0x08005dc1
 8005d70:	08005d3d 	.word	0x08005d3d
 8005d74:	08005d3d 	.word	0x08005d3d
 8005d78:	08005d3d 	.word	0x08005d3d
 8005d7c:	08005d3d 	.word	0x08005d3d
 8005d80:	08005ec1 	.word	0x08005ec1
 8005d84:	08005deb 	.word	0x08005deb
 8005d88:	08005e7b 	.word	0x08005e7b
 8005d8c:	08005d3d 	.word	0x08005d3d
 8005d90:	08005d3d 	.word	0x08005d3d
 8005d94:	08005ee3 	.word	0x08005ee3
 8005d98:	08005d3d 	.word	0x08005d3d
 8005d9c:	08005deb 	.word	0x08005deb
 8005da0:	08005d3d 	.word	0x08005d3d
 8005da4:	08005d3d 	.word	0x08005d3d
 8005da8:	08005e83 	.word	0x08005e83
 8005dac:	6833      	ldr	r3, [r6, #0]
 8005dae:	1d1a      	adds	r2, r3, #4
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6032      	str	r2, [r6, #0]
 8005db4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005db8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e09d      	b.n	8005efc <_printf_i+0x1e8>
 8005dc0:	6833      	ldr	r3, [r6, #0]
 8005dc2:	6820      	ldr	r0, [r4, #0]
 8005dc4:	1d19      	adds	r1, r3, #4
 8005dc6:	6031      	str	r1, [r6, #0]
 8005dc8:	0606      	lsls	r6, r0, #24
 8005dca:	d501      	bpl.n	8005dd0 <_printf_i+0xbc>
 8005dcc:	681d      	ldr	r5, [r3, #0]
 8005dce:	e003      	b.n	8005dd8 <_printf_i+0xc4>
 8005dd0:	0645      	lsls	r5, r0, #25
 8005dd2:	d5fb      	bpl.n	8005dcc <_printf_i+0xb8>
 8005dd4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005dd8:	2d00      	cmp	r5, #0
 8005dda:	da03      	bge.n	8005de4 <_printf_i+0xd0>
 8005ddc:	232d      	movs	r3, #45	@ 0x2d
 8005dde:	426d      	negs	r5, r5
 8005de0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005de4:	4859      	ldr	r0, [pc, #356]	@ (8005f4c <_printf_i+0x238>)
 8005de6:	230a      	movs	r3, #10
 8005de8:	e011      	b.n	8005e0e <_printf_i+0xfa>
 8005dea:	6821      	ldr	r1, [r4, #0]
 8005dec:	6833      	ldr	r3, [r6, #0]
 8005dee:	0608      	lsls	r0, r1, #24
 8005df0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005df4:	d402      	bmi.n	8005dfc <_printf_i+0xe8>
 8005df6:	0649      	lsls	r1, r1, #25
 8005df8:	bf48      	it	mi
 8005dfa:	b2ad      	uxthmi	r5, r5
 8005dfc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005dfe:	6033      	str	r3, [r6, #0]
 8005e00:	4852      	ldr	r0, [pc, #328]	@ (8005f4c <_printf_i+0x238>)
 8005e02:	bf14      	ite	ne
 8005e04:	230a      	movne	r3, #10
 8005e06:	2308      	moveq	r3, #8
 8005e08:	2100      	movs	r1, #0
 8005e0a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005e0e:	6866      	ldr	r6, [r4, #4]
 8005e10:	2e00      	cmp	r6, #0
 8005e12:	60a6      	str	r6, [r4, #8]
 8005e14:	bfa2      	ittt	ge
 8005e16:	6821      	ldrge	r1, [r4, #0]
 8005e18:	f021 0104 	bicge.w	r1, r1, #4
 8005e1c:	6021      	strge	r1, [r4, #0]
 8005e1e:	b90d      	cbnz	r5, 8005e24 <_printf_i+0x110>
 8005e20:	2e00      	cmp	r6, #0
 8005e22:	d04b      	beq.n	8005ebc <_printf_i+0x1a8>
 8005e24:	4616      	mov	r6, r2
 8005e26:	fbb5 f1f3 	udiv	r1, r5, r3
 8005e2a:	fb03 5711 	mls	r7, r3, r1, r5
 8005e2e:	5dc7      	ldrb	r7, [r0, r7]
 8005e30:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005e34:	462f      	mov	r7, r5
 8005e36:	460d      	mov	r5, r1
 8005e38:	42bb      	cmp	r3, r7
 8005e3a:	d9f4      	bls.n	8005e26 <_printf_i+0x112>
 8005e3c:	2b08      	cmp	r3, #8
 8005e3e:	d10b      	bne.n	8005e58 <_printf_i+0x144>
 8005e40:	6823      	ldr	r3, [r4, #0]
 8005e42:	07df      	lsls	r7, r3, #31
 8005e44:	d508      	bpl.n	8005e58 <_printf_i+0x144>
 8005e46:	6923      	ldr	r3, [r4, #16]
 8005e48:	6861      	ldr	r1, [r4, #4]
 8005e4a:	4299      	cmp	r1, r3
 8005e4c:	bfde      	ittt	le
 8005e4e:	2330      	movle	r3, #48	@ 0x30
 8005e50:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005e54:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005e58:	1b92      	subs	r2, r2, r6
 8005e5a:	6122      	str	r2, [r4, #16]
 8005e5c:	464b      	mov	r3, r9
 8005e5e:	aa03      	add	r2, sp, #12
 8005e60:	4621      	mov	r1, r4
 8005e62:	4640      	mov	r0, r8
 8005e64:	f8cd a000 	str.w	sl, [sp]
 8005e68:	f7ff fee2 	bl	8005c30 <_printf_common>
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d14a      	bne.n	8005f06 <_printf_i+0x1f2>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295
 8005e74:	b004      	add	sp, #16
 8005e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	f043 0320 	orr.w	r3, r3, #32
 8005e80:	6023      	str	r3, [r4, #0]
 8005e82:	2778      	movs	r7, #120	@ 0x78
 8005e84:	4832      	ldr	r0, [pc, #200]	@ (8005f50 <_printf_i+0x23c>)
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005e8c:	061f      	lsls	r7, r3, #24
 8005e8e:	6831      	ldr	r1, [r6, #0]
 8005e90:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e94:	d402      	bmi.n	8005e9c <_printf_i+0x188>
 8005e96:	065f      	lsls	r7, r3, #25
 8005e98:	bf48      	it	mi
 8005e9a:	b2ad      	uxthmi	r5, r5
 8005e9c:	6031      	str	r1, [r6, #0]
 8005e9e:	07d9      	lsls	r1, r3, #31
 8005ea0:	bf44      	itt	mi
 8005ea2:	f043 0320 	orrmi.w	r3, r3, #32
 8005ea6:	6023      	strmi	r3, [r4, #0]
 8005ea8:	b11d      	cbz	r5, 8005eb2 <_printf_i+0x19e>
 8005eaa:	2310      	movs	r3, #16
 8005eac:	e7ac      	b.n	8005e08 <_printf_i+0xf4>
 8005eae:	4827      	ldr	r0, [pc, #156]	@ (8005f4c <_printf_i+0x238>)
 8005eb0:	e7e9      	b.n	8005e86 <_printf_i+0x172>
 8005eb2:	6823      	ldr	r3, [r4, #0]
 8005eb4:	f023 0320 	bic.w	r3, r3, #32
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	e7f6      	b.n	8005eaa <_printf_i+0x196>
 8005ebc:	4616      	mov	r6, r2
 8005ebe:	e7bd      	b.n	8005e3c <_printf_i+0x128>
 8005ec0:	6833      	ldr	r3, [r6, #0]
 8005ec2:	6825      	ldr	r5, [r4, #0]
 8005ec4:	1d18      	adds	r0, r3, #4
 8005ec6:	6961      	ldr	r1, [r4, #20]
 8005ec8:	6030      	str	r0, [r6, #0]
 8005eca:	062e      	lsls	r6, r5, #24
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	d501      	bpl.n	8005ed4 <_printf_i+0x1c0>
 8005ed0:	6019      	str	r1, [r3, #0]
 8005ed2:	e002      	b.n	8005eda <_printf_i+0x1c6>
 8005ed4:	0668      	lsls	r0, r5, #25
 8005ed6:	d5fb      	bpl.n	8005ed0 <_printf_i+0x1bc>
 8005ed8:	8019      	strh	r1, [r3, #0]
 8005eda:	2300      	movs	r3, #0
 8005edc:	4616      	mov	r6, r2
 8005ede:	6123      	str	r3, [r4, #16]
 8005ee0:	e7bc      	b.n	8005e5c <_printf_i+0x148>
 8005ee2:	6833      	ldr	r3, [r6, #0]
 8005ee4:	2100      	movs	r1, #0
 8005ee6:	1d1a      	adds	r2, r3, #4
 8005ee8:	6032      	str	r2, [r6, #0]
 8005eea:	681e      	ldr	r6, [r3, #0]
 8005eec:	6862      	ldr	r2, [r4, #4]
 8005eee:	4630      	mov	r0, r6
 8005ef0:	f000 fbe7 	bl	80066c2 <memchr>
 8005ef4:	b108      	cbz	r0, 8005efa <_printf_i+0x1e6>
 8005ef6:	1b80      	subs	r0, r0, r6
 8005ef8:	6060      	str	r0, [r4, #4]
 8005efa:	6863      	ldr	r3, [r4, #4]
 8005efc:	6123      	str	r3, [r4, #16]
 8005efe:	2300      	movs	r3, #0
 8005f00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f04:	e7aa      	b.n	8005e5c <_printf_i+0x148>
 8005f06:	6923      	ldr	r3, [r4, #16]
 8005f08:	4632      	mov	r2, r6
 8005f0a:	4649      	mov	r1, r9
 8005f0c:	4640      	mov	r0, r8
 8005f0e:	47d0      	blx	sl
 8005f10:	3001      	adds	r0, #1
 8005f12:	d0ad      	beq.n	8005e70 <_printf_i+0x15c>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	079b      	lsls	r3, r3, #30
 8005f18:	d413      	bmi.n	8005f42 <_printf_i+0x22e>
 8005f1a:	68e0      	ldr	r0, [r4, #12]
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	4298      	cmp	r0, r3
 8005f20:	bfb8      	it	lt
 8005f22:	4618      	movlt	r0, r3
 8005f24:	e7a6      	b.n	8005e74 <_printf_i+0x160>
 8005f26:	2301      	movs	r3, #1
 8005f28:	4632      	mov	r2, r6
 8005f2a:	4649      	mov	r1, r9
 8005f2c:	4640      	mov	r0, r8
 8005f2e:	47d0      	blx	sl
 8005f30:	3001      	adds	r0, #1
 8005f32:	d09d      	beq.n	8005e70 <_printf_i+0x15c>
 8005f34:	3501      	adds	r5, #1
 8005f36:	68e3      	ldr	r3, [r4, #12]
 8005f38:	9903      	ldr	r1, [sp, #12]
 8005f3a:	1a5b      	subs	r3, r3, r1
 8005f3c:	42ab      	cmp	r3, r5
 8005f3e:	dcf2      	bgt.n	8005f26 <_printf_i+0x212>
 8005f40:	e7eb      	b.n	8005f1a <_printf_i+0x206>
 8005f42:	2500      	movs	r5, #0
 8005f44:	f104 0619 	add.w	r6, r4, #25
 8005f48:	e7f5      	b.n	8005f36 <_printf_i+0x222>
 8005f4a:	bf00      	nop
 8005f4c:	08009e6a 	.word	0x08009e6a
 8005f50:	08009e7b 	.word	0x08009e7b

08005f54 <_scanf_float>:
 8005f54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f58:	b087      	sub	sp, #28
 8005f5a:	4617      	mov	r7, r2
 8005f5c:	4680      	mov	r8, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	9303      	str	r3, [sp, #12]
 8005f62:	688b      	ldr	r3, [r1, #8]
 8005f64:	1e5a      	subs	r2, r3, #1
 8005f66:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005f6a:	460a      	mov	r2, r1
 8005f6c:	bf89      	itett	hi
 8005f6e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8005f72:	f04f 0b00 	movls.w	fp, #0
 8005f76:	eb03 0b05 	addhi.w	fp, r3, r5
 8005f7a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005f7e:	f04f 0500 	mov.w	r5, #0
 8005f82:	bf88      	it	hi
 8005f84:	608b      	strhi	r3, [r1, #8]
 8005f86:	680b      	ldr	r3, [r1, #0]
 8005f88:	46aa      	mov	sl, r5
 8005f8a:	46a9      	mov	r9, r5
 8005f8c:	9502      	str	r5, [sp, #8]
 8005f8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005f92:	f842 3b1c 	str.w	r3, [r2], #28
 8005f96:	4616      	mov	r6, r2
 8005f98:	9201      	str	r2, [sp, #4]
 8005f9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005f9e:	68a2      	ldr	r2, [r4, #8]
 8005fa0:	b152      	cbz	r2, 8005fb8 <_scanf_float+0x64>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	2b4e      	cmp	r3, #78	@ 0x4e
 8005fa8:	d864      	bhi.n	8006074 <_scanf_float+0x120>
 8005faa:	2b40      	cmp	r3, #64	@ 0x40
 8005fac:	d83c      	bhi.n	8006028 <_scanf_float+0xd4>
 8005fae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005fb2:	b2c8      	uxtb	r0, r1
 8005fb4:	280e      	cmp	r0, #14
 8005fb6:	d93a      	bls.n	800602e <_scanf_float+0xda>
 8005fb8:	f1b9 0f00 	cmp.w	r9, #0
 8005fbc:	d003      	beq.n	8005fc6 <_scanf_float+0x72>
 8005fbe:	6823      	ldr	r3, [r4, #0]
 8005fc0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fca:	f1ba 0f01 	cmp.w	sl, #1
 8005fce:	f200 8117 	bhi.w	8006200 <_scanf_float+0x2ac>
 8005fd2:	9b01      	ldr	r3, [sp, #4]
 8005fd4:	429e      	cmp	r6, r3
 8005fd6:	f200 8108 	bhi.w	80061ea <_scanf_float+0x296>
 8005fda:	2001      	movs	r0, #1
 8005fdc:	b007      	add	sp, #28
 8005fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fe2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005fe6:	2a0d      	cmp	r2, #13
 8005fe8:	d8e6      	bhi.n	8005fb8 <_scanf_float+0x64>
 8005fea:	a101      	add	r1, pc, #4	@ (adr r1, 8005ff0 <_scanf_float+0x9c>)
 8005fec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ff0:	08006137 	.word	0x08006137
 8005ff4:	08005fb9 	.word	0x08005fb9
 8005ff8:	08005fb9 	.word	0x08005fb9
 8005ffc:	08005fb9 	.word	0x08005fb9
 8006000:	08006197 	.word	0x08006197
 8006004:	0800616f 	.word	0x0800616f
 8006008:	08005fb9 	.word	0x08005fb9
 800600c:	08005fb9 	.word	0x08005fb9
 8006010:	08006145 	.word	0x08006145
 8006014:	08005fb9 	.word	0x08005fb9
 8006018:	08005fb9 	.word	0x08005fb9
 800601c:	08005fb9 	.word	0x08005fb9
 8006020:	08005fb9 	.word	0x08005fb9
 8006024:	080060fd 	.word	0x080060fd
 8006028:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800602c:	e7db      	b.n	8005fe6 <_scanf_float+0x92>
 800602e:	290e      	cmp	r1, #14
 8006030:	d8c2      	bhi.n	8005fb8 <_scanf_float+0x64>
 8006032:	a001      	add	r0, pc, #4	@ (adr r0, 8006038 <_scanf_float+0xe4>)
 8006034:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006038:	080060ed 	.word	0x080060ed
 800603c:	08005fb9 	.word	0x08005fb9
 8006040:	080060ed 	.word	0x080060ed
 8006044:	08006183 	.word	0x08006183
 8006048:	08005fb9 	.word	0x08005fb9
 800604c:	08006095 	.word	0x08006095
 8006050:	080060d3 	.word	0x080060d3
 8006054:	080060d3 	.word	0x080060d3
 8006058:	080060d3 	.word	0x080060d3
 800605c:	080060d3 	.word	0x080060d3
 8006060:	080060d3 	.word	0x080060d3
 8006064:	080060d3 	.word	0x080060d3
 8006068:	080060d3 	.word	0x080060d3
 800606c:	080060d3 	.word	0x080060d3
 8006070:	080060d3 	.word	0x080060d3
 8006074:	2b6e      	cmp	r3, #110	@ 0x6e
 8006076:	d809      	bhi.n	800608c <_scanf_float+0x138>
 8006078:	2b60      	cmp	r3, #96	@ 0x60
 800607a:	d8b2      	bhi.n	8005fe2 <_scanf_float+0x8e>
 800607c:	2b54      	cmp	r3, #84	@ 0x54
 800607e:	d07b      	beq.n	8006178 <_scanf_float+0x224>
 8006080:	2b59      	cmp	r3, #89	@ 0x59
 8006082:	d199      	bne.n	8005fb8 <_scanf_float+0x64>
 8006084:	2d07      	cmp	r5, #7
 8006086:	d197      	bne.n	8005fb8 <_scanf_float+0x64>
 8006088:	2508      	movs	r5, #8
 800608a:	e02c      	b.n	80060e6 <_scanf_float+0x192>
 800608c:	2b74      	cmp	r3, #116	@ 0x74
 800608e:	d073      	beq.n	8006178 <_scanf_float+0x224>
 8006090:	2b79      	cmp	r3, #121	@ 0x79
 8006092:	e7f6      	b.n	8006082 <_scanf_float+0x12e>
 8006094:	6821      	ldr	r1, [r4, #0]
 8006096:	05c8      	lsls	r0, r1, #23
 8006098:	d51b      	bpl.n	80060d2 <_scanf_float+0x17e>
 800609a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800609e:	f109 0901 	add.w	r9, r9, #1
 80060a2:	6021      	str	r1, [r4, #0]
 80060a4:	f1bb 0f00 	cmp.w	fp, #0
 80060a8:	d003      	beq.n	80060b2 <_scanf_float+0x15e>
 80060aa:	3201      	adds	r2, #1
 80060ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80060b0:	60a2      	str	r2, [r4, #8]
 80060b2:	68a3      	ldr	r3, [r4, #8]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	60a3      	str	r3, [r4, #8]
 80060b8:	6923      	ldr	r3, [r4, #16]
 80060ba:	3301      	adds	r3, #1
 80060bc:	6123      	str	r3, [r4, #16]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	3b01      	subs	r3, #1
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	607b      	str	r3, [r7, #4]
 80060c6:	f340 8087 	ble.w	80061d8 <_scanf_float+0x284>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	3301      	adds	r3, #1
 80060ce:	603b      	str	r3, [r7, #0]
 80060d0:	e765      	b.n	8005f9e <_scanf_float+0x4a>
 80060d2:	eb1a 0105 	adds.w	r1, sl, r5
 80060d6:	f47f af6f 	bne.w	8005fb8 <_scanf_float+0x64>
 80060da:	6822      	ldr	r2, [r4, #0]
 80060dc:	460d      	mov	r5, r1
 80060de:	468a      	mov	sl, r1
 80060e0:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80060e4:	6022      	str	r2, [r4, #0]
 80060e6:	f806 3b01 	strb.w	r3, [r6], #1
 80060ea:	e7e2      	b.n	80060b2 <_scanf_float+0x15e>
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	0610      	lsls	r0, r2, #24
 80060f0:	f57f af62 	bpl.w	8005fb8 <_scanf_float+0x64>
 80060f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060f8:	6022      	str	r2, [r4, #0]
 80060fa:	e7f4      	b.n	80060e6 <_scanf_float+0x192>
 80060fc:	f1ba 0f00 	cmp.w	sl, #0
 8006100:	d10e      	bne.n	8006120 <_scanf_float+0x1cc>
 8006102:	f1b9 0f00 	cmp.w	r9, #0
 8006106:	d10e      	bne.n	8006126 <_scanf_float+0x1d2>
 8006108:	6822      	ldr	r2, [r4, #0]
 800610a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800610e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006112:	d108      	bne.n	8006126 <_scanf_float+0x1d2>
 8006114:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006118:	f04f 0a01 	mov.w	sl, #1
 800611c:	6022      	str	r2, [r4, #0]
 800611e:	e7e2      	b.n	80060e6 <_scanf_float+0x192>
 8006120:	f1ba 0f02 	cmp.w	sl, #2
 8006124:	d055      	beq.n	80061d2 <_scanf_float+0x27e>
 8006126:	2d01      	cmp	r5, #1
 8006128:	d002      	beq.n	8006130 <_scanf_float+0x1dc>
 800612a:	2d04      	cmp	r5, #4
 800612c:	f47f af44 	bne.w	8005fb8 <_scanf_float+0x64>
 8006130:	3501      	adds	r5, #1
 8006132:	b2ed      	uxtb	r5, r5
 8006134:	e7d7      	b.n	80060e6 <_scanf_float+0x192>
 8006136:	f1ba 0f01 	cmp.w	sl, #1
 800613a:	f47f af3d 	bne.w	8005fb8 <_scanf_float+0x64>
 800613e:	f04f 0a02 	mov.w	sl, #2
 8006142:	e7d0      	b.n	80060e6 <_scanf_float+0x192>
 8006144:	b97d      	cbnz	r5, 8006166 <_scanf_float+0x212>
 8006146:	f1b9 0f00 	cmp.w	r9, #0
 800614a:	f47f af38 	bne.w	8005fbe <_scanf_float+0x6a>
 800614e:	6822      	ldr	r2, [r4, #0]
 8006150:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006154:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006158:	f040 8107 	bne.w	800636a <_scanf_float+0x416>
 800615c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006160:	2501      	movs	r5, #1
 8006162:	6022      	str	r2, [r4, #0]
 8006164:	e7bf      	b.n	80060e6 <_scanf_float+0x192>
 8006166:	2d03      	cmp	r5, #3
 8006168:	d0e2      	beq.n	8006130 <_scanf_float+0x1dc>
 800616a:	2d05      	cmp	r5, #5
 800616c:	e7de      	b.n	800612c <_scanf_float+0x1d8>
 800616e:	2d02      	cmp	r5, #2
 8006170:	f47f af22 	bne.w	8005fb8 <_scanf_float+0x64>
 8006174:	2503      	movs	r5, #3
 8006176:	e7b6      	b.n	80060e6 <_scanf_float+0x192>
 8006178:	2d06      	cmp	r5, #6
 800617a:	f47f af1d 	bne.w	8005fb8 <_scanf_float+0x64>
 800617e:	2507      	movs	r5, #7
 8006180:	e7b1      	b.n	80060e6 <_scanf_float+0x192>
 8006182:	6822      	ldr	r2, [r4, #0]
 8006184:	0591      	lsls	r1, r2, #22
 8006186:	f57f af17 	bpl.w	8005fb8 <_scanf_float+0x64>
 800618a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800618e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006192:	6022      	str	r2, [r4, #0]
 8006194:	e7a7      	b.n	80060e6 <_scanf_float+0x192>
 8006196:	6822      	ldr	r2, [r4, #0]
 8006198:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800619c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80061a0:	d006      	beq.n	80061b0 <_scanf_float+0x25c>
 80061a2:	0550      	lsls	r0, r2, #21
 80061a4:	f57f af08 	bpl.w	8005fb8 <_scanf_float+0x64>
 80061a8:	f1b9 0f00 	cmp.w	r9, #0
 80061ac:	f000 80dd 	beq.w	800636a <_scanf_float+0x416>
 80061b0:	0591      	lsls	r1, r2, #22
 80061b2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061b6:	bf58      	it	pl
 80061b8:	9902      	ldrpl	r1, [sp, #8]
 80061ba:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80061be:	bf58      	it	pl
 80061c0:	eba9 0101 	subpl.w	r1, r9, r1
 80061c4:	6022      	str	r2, [r4, #0]
 80061c6:	f04f 0900 	mov.w	r9, #0
 80061ca:	bf58      	it	pl
 80061cc:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80061d0:	e789      	b.n	80060e6 <_scanf_float+0x192>
 80061d2:	f04f 0a03 	mov.w	sl, #3
 80061d6:	e786      	b.n	80060e6 <_scanf_float+0x192>
 80061d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80061dc:	4639      	mov	r1, r7
 80061de:	4640      	mov	r0, r8
 80061e0:	4798      	blx	r3
 80061e2:	2800      	cmp	r0, #0
 80061e4:	f43f aedb 	beq.w	8005f9e <_scanf_float+0x4a>
 80061e8:	e6e6      	b.n	8005fb8 <_scanf_float+0x64>
 80061ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80061ee:	463a      	mov	r2, r7
 80061f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80061f4:	4640      	mov	r0, r8
 80061f6:	4798      	blx	r3
 80061f8:	6923      	ldr	r3, [r4, #16]
 80061fa:	3b01      	subs	r3, #1
 80061fc:	6123      	str	r3, [r4, #16]
 80061fe:	e6e8      	b.n	8005fd2 <_scanf_float+0x7e>
 8006200:	1e6b      	subs	r3, r5, #1
 8006202:	2b06      	cmp	r3, #6
 8006204:	d824      	bhi.n	8006250 <_scanf_float+0x2fc>
 8006206:	2d02      	cmp	r5, #2
 8006208:	d836      	bhi.n	8006278 <_scanf_float+0x324>
 800620a:	9b01      	ldr	r3, [sp, #4]
 800620c:	429e      	cmp	r6, r3
 800620e:	f67f aee4 	bls.w	8005fda <_scanf_float+0x86>
 8006212:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006216:	463a      	mov	r2, r7
 8006218:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800621c:	4640      	mov	r0, r8
 800621e:	4798      	blx	r3
 8006220:	6923      	ldr	r3, [r4, #16]
 8006222:	3b01      	subs	r3, #1
 8006224:	6123      	str	r3, [r4, #16]
 8006226:	e7f0      	b.n	800620a <_scanf_float+0x2b6>
 8006228:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800622c:	463a      	mov	r2, r7
 800622e:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006232:	4640      	mov	r0, r8
 8006234:	4798      	blx	r3
 8006236:	6923      	ldr	r3, [r4, #16]
 8006238:	3b01      	subs	r3, #1
 800623a:	6123      	str	r3, [r4, #16]
 800623c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006240:	fa5f fa8a 	uxtb.w	sl, sl
 8006244:	f1ba 0f02 	cmp.w	sl, #2
 8006248:	d1ee      	bne.n	8006228 <_scanf_float+0x2d4>
 800624a:	3d03      	subs	r5, #3
 800624c:	b2ed      	uxtb	r5, r5
 800624e:	1b76      	subs	r6, r6, r5
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	05da      	lsls	r2, r3, #23
 8006254:	d52f      	bpl.n	80062b6 <_scanf_float+0x362>
 8006256:	055b      	lsls	r3, r3, #21
 8006258:	d511      	bpl.n	800627e <_scanf_float+0x32a>
 800625a:	9b01      	ldr	r3, [sp, #4]
 800625c:	429e      	cmp	r6, r3
 800625e:	f67f aebc 	bls.w	8005fda <_scanf_float+0x86>
 8006262:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006266:	463a      	mov	r2, r7
 8006268:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800626c:	4640      	mov	r0, r8
 800626e:	4798      	blx	r3
 8006270:	6923      	ldr	r3, [r4, #16]
 8006272:	3b01      	subs	r3, #1
 8006274:	6123      	str	r3, [r4, #16]
 8006276:	e7f0      	b.n	800625a <_scanf_float+0x306>
 8006278:	46aa      	mov	sl, r5
 800627a:	46b3      	mov	fp, r6
 800627c:	e7de      	b.n	800623c <_scanf_float+0x2e8>
 800627e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006282:	1e75      	subs	r5, r6, #1
 8006284:	6923      	ldr	r3, [r4, #16]
 8006286:	2965      	cmp	r1, #101	@ 0x65
 8006288:	f103 33ff 	add.w	r3, r3, #4294967295
 800628c:	6123      	str	r3, [r4, #16]
 800628e:	d00c      	beq.n	80062aa <_scanf_float+0x356>
 8006290:	2945      	cmp	r1, #69	@ 0x45
 8006292:	d00a      	beq.n	80062aa <_scanf_float+0x356>
 8006294:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006298:	463a      	mov	r2, r7
 800629a:	4640      	mov	r0, r8
 800629c:	1eb5      	subs	r5, r6, #2
 800629e:	4798      	blx	r3
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	6123      	str	r3, [r4, #16]
 80062aa:	462e      	mov	r6, r5
 80062ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062b0:	463a      	mov	r2, r7
 80062b2:	4640      	mov	r0, r8
 80062b4:	4798      	blx	r3
 80062b6:	6822      	ldr	r2, [r4, #0]
 80062b8:	f012 0210 	ands.w	r2, r2, #16
 80062bc:	d001      	beq.n	80062c2 <_scanf_float+0x36e>
 80062be:	2000      	movs	r0, #0
 80062c0:	e68c      	b.n	8005fdc <_scanf_float+0x88>
 80062c2:	7032      	strb	r2, [r6, #0]
 80062c4:	6823      	ldr	r3, [r4, #0]
 80062c6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80062ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ce:	d11c      	bne.n	800630a <_scanf_float+0x3b6>
 80062d0:	9b02      	ldr	r3, [sp, #8]
 80062d2:	454b      	cmp	r3, r9
 80062d4:	eba3 0209 	sub.w	r2, r3, r9
 80062d8:	d123      	bne.n	8006322 <_scanf_float+0x3ce>
 80062da:	2200      	movs	r2, #0
 80062dc:	9901      	ldr	r1, [sp, #4]
 80062de:	4640      	mov	r0, r8
 80062e0:	f002 fc16 	bl	8008b10 <_strtod_r>
 80062e4:	6821      	ldr	r1, [r4, #0]
 80062e6:	9b03      	ldr	r3, [sp, #12]
 80062e8:	f011 0f02 	tst.w	r1, #2
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	ec57 6b10 	vmov	r6, r7, d0
 80062f2:	f103 0204 	add.w	r2, r3, #4
 80062f6:	d01f      	beq.n	8006338 <_scanf_float+0x3e4>
 80062f8:	9903      	ldr	r1, [sp, #12]
 80062fa:	600a      	str	r2, [r1, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	e9c3 6700 	strd	r6, r7, [r3]
 8006302:	68e3      	ldr	r3, [r4, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	60e3      	str	r3, [r4, #12]
 8006308:	e7d9      	b.n	80062be <_scanf_float+0x36a>
 800630a:	9b04      	ldr	r3, [sp, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d0e4      	beq.n	80062da <_scanf_float+0x386>
 8006310:	9905      	ldr	r1, [sp, #20]
 8006312:	230a      	movs	r3, #10
 8006314:	4640      	mov	r0, r8
 8006316:	3101      	adds	r1, #1
 8006318:	f002 fc7a 	bl	8008c10 <_strtol_r>
 800631c:	9b04      	ldr	r3, [sp, #16]
 800631e:	9e05      	ldr	r6, [sp, #20]
 8006320:	1ac2      	subs	r2, r0, r3
 8006322:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006326:	4912      	ldr	r1, [pc, #72]	@ (8006370 <_scanf_float+0x41c>)
 8006328:	429e      	cmp	r6, r3
 800632a:	bf28      	it	cs
 800632c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006330:	4630      	mov	r0, r6
 8006332:	f000 f8e3 	bl	80064fc <siprintf>
 8006336:	e7d0      	b.n	80062da <_scanf_float+0x386>
 8006338:	f011 0f04 	tst.w	r1, #4
 800633c:	9903      	ldr	r1, [sp, #12]
 800633e:	600a      	str	r2, [r1, #0]
 8006340:	d1dc      	bne.n	80062fc <_scanf_float+0x3a8>
 8006342:	681d      	ldr	r5, [r3, #0]
 8006344:	4632      	mov	r2, r6
 8006346:	463b      	mov	r3, r7
 8006348:	4630      	mov	r0, r6
 800634a:	4639      	mov	r1, r7
 800634c:	f7fa fbd2 	bl	8000af4 <__aeabi_dcmpun>
 8006350:	b128      	cbz	r0, 800635e <_scanf_float+0x40a>
 8006352:	4808      	ldr	r0, [pc, #32]	@ (8006374 <_scanf_float+0x420>)
 8006354:	f000 f9c4 	bl	80066e0 <nanf>
 8006358:	ed85 0a00 	vstr	s0, [r5]
 800635c:	e7d1      	b.n	8006302 <_scanf_float+0x3ae>
 800635e:	4630      	mov	r0, r6
 8006360:	4639      	mov	r1, r7
 8006362:	f7fa fc25 	bl	8000bb0 <__aeabi_d2f>
 8006366:	6028      	str	r0, [r5, #0]
 8006368:	e7cb      	b.n	8006302 <_scanf_float+0x3ae>
 800636a:	f04f 0900 	mov.w	r9, #0
 800636e:	e62a      	b.n	8005fc6 <_scanf_float+0x72>
 8006370:	08009e8c 	.word	0x08009e8c
 8006374:	0800a225 	.word	0x0800a225

08006378 <std>:
 8006378:	2300      	movs	r3, #0
 800637a:	b510      	push	{r4, lr}
 800637c:	4604      	mov	r4, r0
 800637e:	6083      	str	r3, [r0, #8]
 8006380:	8181      	strh	r1, [r0, #12]
 8006382:	4619      	mov	r1, r3
 8006384:	6643      	str	r3, [r0, #100]	@ 0x64
 8006386:	81c2      	strh	r2, [r0, #14]
 8006388:	2208      	movs	r2, #8
 800638a:	6183      	str	r3, [r0, #24]
 800638c:	e9c0 3300 	strd	r3, r3, [r0]
 8006390:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006394:	305c      	adds	r0, #92	@ 0x5c
 8006396:	f000 f914 	bl	80065c2 <memset>
 800639a:	4b0d      	ldr	r3, [pc, #52]	@ (80063d0 <std+0x58>)
 800639c:	6224      	str	r4, [r4, #32]
 800639e:	6263      	str	r3, [r4, #36]	@ 0x24
 80063a0:	4b0c      	ldr	r3, [pc, #48]	@ (80063d4 <std+0x5c>)
 80063a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80063a4:	4b0c      	ldr	r3, [pc, #48]	@ (80063d8 <std+0x60>)
 80063a6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80063a8:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <std+0x64>)
 80063aa:	6323      	str	r3, [r4, #48]	@ 0x30
 80063ac:	4b0c      	ldr	r3, [pc, #48]	@ (80063e0 <std+0x68>)
 80063ae:	429c      	cmp	r4, r3
 80063b0:	d006      	beq.n	80063c0 <std+0x48>
 80063b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80063b6:	4294      	cmp	r4, r2
 80063b8:	d002      	beq.n	80063c0 <std+0x48>
 80063ba:	33d0      	adds	r3, #208	@ 0xd0
 80063bc:	429c      	cmp	r4, r3
 80063be:	d105      	bne.n	80063cc <std+0x54>
 80063c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80063c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063c8:	f000 b978 	b.w	80066bc <__retarget_lock_init_recursive>
 80063cc:	bd10      	pop	{r4, pc}
 80063ce:	bf00      	nop
 80063d0:	0800653d 	.word	0x0800653d
 80063d4:	0800655f 	.word	0x0800655f
 80063d8:	08006597 	.word	0x08006597
 80063dc:	080065bb 	.word	0x080065bb
 80063e0:	20000350 	.word	0x20000350

080063e4 <stdio_exit_handler>:
 80063e4:	4a02      	ldr	r2, [pc, #8]	@ (80063f0 <stdio_exit_handler+0xc>)
 80063e6:	4903      	ldr	r1, [pc, #12]	@ (80063f4 <stdio_exit_handler+0x10>)
 80063e8:	4803      	ldr	r0, [pc, #12]	@ (80063f8 <stdio_exit_handler+0x14>)
 80063ea:	f000 b869 	b.w	80064c0 <_fwalk_sglue>
 80063ee:	bf00      	nop
 80063f0:	20000014 	.word	0x20000014
 80063f4:	08008fcd 	.word	0x08008fcd
 80063f8:	20000024 	.word	0x20000024

080063fc <cleanup_stdio>:
 80063fc:	6841      	ldr	r1, [r0, #4]
 80063fe:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <cleanup_stdio+0x34>)
 8006400:	4299      	cmp	r1, r3
 8006402:	b510      	push	{r4, lr}
 8006404:	4604      	mov	r4, r0
 8006406:	d001      	beq.n	800640c <cleanup_stdio+0x10>
 8006408:	f002 fde0 	bl	8008fcc <_fflush_r>
 800640c:	68a1      	ldr	r1, [r4, #8]
 800640e:	4b09      	ldr	r3, [pc, #36]	@ (8006434 <cleanup_stdio+0x38>)
 8006410:	4299      	cmp	r1, r3
 8006412:	d002      	beq.n	800641a <cleanup_stdio+0x1e>
 8006414:	4620      	mov	r0, r4
 8006416:	f002 fdd9 	bl	8008fcc <_fflush_r>
 800641a:	68e1      	ldr	r1, [r4, #12]
 800641c:	4b06      	ldr	r3, [pc, #24]	@ (8006438 <cleanup_stdio+0x3c>)
 800641e:	4299      	cmp	r1, r3
 8006420:	d004      	beq.n	800642c <cleanup_stdio+0x30>
 8006422:	4620      	mov	r0, r4
 8006424:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006428:	f002 bdd0 	b.w	8008fcc <_fflush_r>
 800642c:	bd10      	pop	{r4, pc}
 800642e:	bf00      	nop
 8006430:	20000350 	.word	0x20000350
 8006434:	200003b8 	.word	0x200003b8
 8006438:	20000420 	.word	0x20000420

0800643c <global_stdio_init.part.0>:
 800643c:	b510      	push	{r4, lr}
 800643e:	4b0b      	ldr	r3, [pc, #44]	@ (800646c <global_stdio_init.part.0+0x30>)
 8006440:	2104      	movs	r1, #4
 8006442:	4c0b      	ldr	r4, [pc, #44]	@ (8006470 <global_stdio_init.part.0+0x34>)
 8006444:	4a0b      	ldr	r2, [pc, #44]	@ (8006474 <global_stdio_init.part.0+0x38>)
 8006446:	4620      	mov	r0, r4
 8006448:	601a      	str	r2, [r3, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	f7ff ff94 	bl	8006378 <std>
 8006450:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006454:	2201      	movs	r2, #1
 8006456:	2109      	movs	r1, #9
 8006458:	f7ff ff8e 	bl	8006378 <std>
 800645c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006460:	2202      	movs	r2, #2
 8006462:	2112      	movs	r1, #18
 8006464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006468:	f7ff bf86 	b.w	8006378 <std>
 800646c:	20000488 	.word	0x20000488
 8006470:	20000350 	.word	0x20000350
 8006474:	080063e5 	.word	0x080063e5

08006478 <__sfp_lock_acquire>:
 8006478:	4801      	ldr	r0, [pc, #4]	@ (8006480 <__sfp_lock_acquire+0x8>)
 800647a:	f000 b920 	b.w	80066be <__retarget_lock_acquire_recursive>
 800647e:	bf00      	nop
 8006480:	20000491 	.word	0x20000491

08006484 <__sfp_lock_release>:
 8006484:	4801      	ldr	r0, [pc, #4]	@ (800648c <__sfp_lock_release+0x8>)
 8006486:	f000 b91b 	b.w	80066c0 <__retarget_lock_release_recursive>
 800648a:	bf00      	nop
 800648c:	20000491 	.word	0x20000491

08006490 <__sinit>:
 8006490:	b510      	push	{r4, lr}
 8006492:	4604      	mov	r4, r0
 8006494:	f7ff fff0 	bl	8006478 <__sfp_lock_acquire>
 8006498:	6a23      	ldr	r3, [r4, #32]
 800649a:	b11b      	cbz	r3, 80064a4 <__sinit+0x14>
 800649c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064a0:	f7ff bff0 	b.w	8006484 <__sfp_lock_release>
 80064a4:	4b04      	ldr	r3, [pc, #16]	@ (80064b8 <__sinit+0x28>)
 80064a6:	6223      	str	r3, [r4, #32]
 80064a8:	4b04      	ldr	r3, [pc, #16]	@ (80064bc <__sinit+0x2c>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1f5      	bne.n	800649c <__sinit+0xc>
 80064b0:	f7ff ffc4 	bl	800643c <global_stdio_init.part.0>
 80064b4:	e7f2      	b.n	800649c <__sinit+0xc>
 80064b6:	bf00      	nop
 80064b8:	080063fd 	.word	0x080063fd
 80064bc:	20000488 	.word	0x20000488

080064c0 <_fwalk_sglue>:
 80064c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064c4:	4607      	mov	r7, r0
 80064c6:	4688      	mov	r8, r1
 80064c8:	4614      	mov	r4, r2
 80064ca:	2600      	movs	r6, #0
 80064cc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064d0:	f1b9 0901 	subs.w	r9, r9, #1
 80064d4:	d505      	bpl.n	80064e2 <_fwalk_sglue+0x22>
 80064d6:	6824      	ldr	r4, [r4, #0]
 80064d8:	2c00      	cmp	r4, #0
 80064da:	d1f7      	bne.n	80064cc <_fwalk_sglue+0xc>
 80064dc:	4630      	mov	r0, r6
 80064de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e2:	89ab      	ldrh	r3, [r5, #12]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d907      	bls.n	80064f8 <_fwalk_sglue+0x38>
 80064e8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064ec:	3301      	adds	r3, #1
 80064ee:	d003      	beq.n	80064f8 <_fwalk_sglue+0x38>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4638      	mov	r0, r7
 80064f4:	47c0      	blx	r8
 80064f6:	4306      	orrs	r6, r0
 80064f8:	3568      	adds	r5, #104	@ 0x68
 80064fa:	e7e9      	b.n	80064d0 <_fwalk_sglue+0x10>

080064fc <siprintf>:
 80064fc:	b40e      	push	{r1, r2, r3}
 80064fe:	b500      	push	{lr}
 8006500:	b09c      	sub	sp, #112	@ 0x70
 8006502:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006506:	ab1d      	add	r3, sp, #116	@ 0x74
 8006508:	9002      	str	r0, [sp, #8]
 800650a:	9006      	str	r0, [sp, #24]
 800650c:	9107      	str	r1, [sp, #28]
 800650e:	9104      	str	r1, [sp, #16]
 8006510:	4808      	ldr	r0, [pc, #32]	@ (8006534 <siprintf+0x38>)
 8006512:	4909      	ldr	r1, [pc, #36]	@ (8006538 <siprintf+0x3c>)
 8006514:	f853 2b04 	ldr.w	r2, [r3], #4
 8006518:	9105      	str	r1, [sp, #20]
 800651a:	a902      	add	r1, sp, #8
 800651c:	6800      	ldr	r0, [r0, #0]
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	f002 fbd4 	bl	8008ccc <_svfiprintf_r>
 8006524:	9b02      	ldr	r3, [sp, #8]
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
 800652a:	b01c      	add	sp, #112	@ 0x70
 800652c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006530:	b003      	add	sp, #12
 8006532:	4770      	bx	lr
 8006534:	20000020 	.word	0x20000020
 8006538:	ffff0208 	.word	0xffff0208

0800653c <__sread>:
 800653c:	b510      	push	{r4, lr}
 800653e:	460c      	mov	r4, r1
 8006540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006544:	f000 f86c 	bl	8006620 <_read_r>
 8006548:	2800      	cmp	r0, #0
 800654a:	bfab      	itete	ge
 800654c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800654e:	89a3      	ldrhlt	r3, [r4, #12]
 8006550:	181b      	addge	r3, r3, r0
 8006552:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006556:	bfac      	ite	ge
 8006558:	6563      	strge	r3, [r4, #84]	@ 0x54
 800655a:	81a3      	strhlt	r3, [r4, #12]
 800655c:	bd10      	pop	{r4, pc}

0800655e <__swrite>:
 800655e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006562:	461f      	mov	r7, r3
 8006564:	898b      	ldrh	r3, [r1, #12]
 8006566:	4605      	mov	r5, r0
 8006568:	460c      	mov	r4, r1
 800656a:	05db      	lsls	r3, r3, #23
 800656c:	4616      	mov	r6, r2
 800656e:	d505      	bpl.n	800657c <__swrite+0x1e>
 8006570:	2302      	movs	r3, #2
 8006572:	2200      	movs	r2, #0
 8006574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006578:	f000 f840 	bl	80065fc <_lseek_r>
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	4632      	mov	r2, r6
 8006580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006584:	4628      	mov	r0, r5
 8006586:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800658a:	81a3      	strh	r3, [r4, #12]
 800658c:	463b      	mov	r3, r7
 800658e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006592:	f000 b857 	b.w	8006644 <_write_r>

08006596 <__sseek>:
 8006596:	b510      	push	{r4, lr}
 8006598:	460c      	mov	r4, r1
 800659a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800659e:	f000 f82d 	bl	80065fc <_lseek_r>
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	89a3      	ldrh	r3, [r4, #12]
 80065a6:	bf15      	itete	ne
 80065a8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80065aa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80065ae:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80065b2:	81a3      	strheq	r3, [r4, #12]
 80065b4:	bf18      	it	ne
 80065b6:	81a3      	strhne	r3, [r4, #12]
 80065b8:	bd10      	pop	{r4, pc}

080065ba <__sclose>:
 80065ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065be:	f000 b80d 	b.w	80065dc <_close_r>

080065c2 <memset>:
 80065c2:	4402      	add	r2, r0
 80065c4:	4603      	mov	r3, r0
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d100      	bne.n	80065cc <memset+0xa>
 80065ca:	4770      	bx	lr
 80065cc:	f803 1b01 	strb.w	r1, [r3], #1
 80065d0:	e7f9      	b.n	80065c6 <memset+0x4>
	...

080065d4 <_localeconv_r>:
 80065d4:	4800      	ldr	r0, [pc, #0]	@ (80065d8 <_localeconv_r+0x4>)
 80065d6:	4770      	bx	lr
 80065d8:	20000160 	.word	0x20000160

080065dc <_close_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	2300      	movs	r3, #0
 80065e0:	4d05      	ldr	r5, [pc, #20]	@ (80065f8 <_close_r+0x1c>)
 80065e2:	4604      	mov	r4, r0
 80065e4:	4608      	mov	r0, r1
 80065e6:	602b      	str	r3, [r5, #0]
 80065e8:	f7fb f8c0 	bl	800176c <_close>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d102      	bne.n	80065f6 <_close_r+0x1a>
 80065f0:	682b      	ldr	r3, [r5, #0]
 80065f2:	b103      	cbz	r3, 80065f6 <_close_r+0x1a>
 80065f4:	6023      	str	r3, [r4, #0]
 80065f6:	bd38      	pop	{r3, r4, r5, pc}
 80065f8:	2000048c 	.word	0x2000048c

080065fc <_lseek_r>:
 80065fc:	b538      	push	{r3, r4, r5, lr}
 80065fe:	4604      	mov	r4, r0
 8006600:	4d06      	ldr	r5, [pc, #24]	@ (800661c <_lseek_r+0x20>)
 8006602:	4608      	mov	r0, r1
 8006604:	4611      	mov	r1, r2
 8006606:	2200      	movs	r2, #0
 8006608:	602a      	str	r2, [r5, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	f7fb f8d5 	bl	80017ba <_lseek>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_lseek_r+0x1e>
 8006614:	682b      	ldr	r3, [r5, #0]
 8006616:	b103      	cbz	r3, 800661a <_lseek_r+0x1e>
 8006618:	6023      	str	r3, [r4, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	2000048c 	.word	0x2000048c

08006620 <_read_r>:
 8006620:	b538      	push	{r3, r4, r5, lr}
 8006622:	4604      	mov	r4, r0
 8006624:	4d06      	ldr	r5, [pc, #24]	@ (8006640 <_read_r+0x20>)
 8006626:	4608      	mov	r0, r1
 8006628:	4611      	mov	r1, r2
 800662a:	2200      	movs	r2, #0
 800662c:	602a      	str	r2, [r5, #0]
 800662e:	461a      	mov	r2, r3
 8006630:	f7fb f863 	bl	80016fa <_read>
 8006634:	1c43      	adds	r3, r0, #1
 8006636:	d102      	bne.n	800663e <_read_r+0x1e>
 8006638:	682b      	ldr	r3, [r5, #0]
 800663a:	b103      	cbz	r3, 800663e <_read_r+0x1e>
 800663c:	6023      	str	r3, [r4, #0]
 800663e:	bd38      	pop	{r3, r4, r5, pc}
 8006640:	2000048c 	.word	0x2000048c

08006644 <_write_r>:
 8006644:	b538      	push	{r3, r4, r5, lr}
 8006646:	4604      	mov	r4, r0
 8006648:	4d06      	ldr	r5, [pc, #24]	@ (8006664 <_write_r+0x20>)
 800664a:	4608      	mov	r0, r1
 800664c:	4611      	mov	r1, r2
 800664e:	2200      	movs	r2, #0
 8006650:	602a      	str	r2, [r5, #0]
 8006652:	461a      	mov	r2, r3
 8006654:	f7fb f86e 	bl	8001734 <_write>
 8006658:	1c43      	adds	r3, r0, #1
 800665a:	d102      	bne.n	8006662 <_write_r+0x1e>
 800665c:	682b      	ldr	r3, [r5, #0]
 800665e:	b103      	cbz	r3, 8006662 <_write_r+0x1e>
 8006660:	6023      	str	r3, [r4, #0]
 8006662:	bd38      	pop	{r3, r4, r5, pc}
 8006664:	2000048c 	.word	0x2000048c

08006668 <__errno>:
 8006668:	4b01      	ldr	r3, [pc, #4]	@ (8006670 <__errno+0x8>)
 800666a:	6818      	ldr	r0, [r3, #0]
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	20000020 	.word	0x20000020

08006674 <__libc_init_array>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4d0d      	ldr	r5, [pc, #52]	@ (80066ac <__libc_init_array+0x38>)
 8006678:	2600      	movs	r6, #0
 800667a:	4c0d      	ldr	r4, [pc, #52]	@ (80066b0 <__libc_init_array+0x3c>)
 800667c:	1b64      	subs	r4, r4, r5
 800667e:	10a4      	asrs	r4, r4, #2
 8006680:	42a6      	cmp	r6, r4
 8006682:	d109      	bne.n	8006698 <__libc_init_array+0x24>
 8006684:	4d0b      	ldr	r5, [pc, #44]	@ (80066b4 <__libc_init_array+0x40>)
 8006686:	2600      	movs	r6, #0
 8006688:	4c0b      	ldr	r4, [pc, #44]	@ (80066b8 <__libc_init_array+0x44>)
 800668a:	f003 fb8b 	bl	8009da4 <_init>
 800668e:	1b64      	subs	r4, r4, r5
 8006690:	10a4      	asrs	r4, r4, #2
 8006692:	42a6      	cmp	r6, r4
 8006694:	d105      	bne.n	80066a2 <__libc_init_array+0x2e>
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	f855 3b04 	ldr.w	r3, [r5], #4
 800669c:	3601      	adds	r6, #1
 800669e:	4798      	blx	r3
 80066a0:	e7ee      	b.n	8006680 <__libc_init_array+0xc>
 80066a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a6:	3601      	adds	r6, #1
 80066a8:	4798      	blx	r3
 80066aa:	e7f2      	b.n	8006692 <__libc_init_array+0x1e>
 80066ac:	0800a290 	.word	0x0800a290
 80066b0:	0800a290 	.word	0x0800a290
 80066b4:	0800a290 	.word	0x0800a290
 80066b8:	0800a294 	.word	0x0800a294

080066bc <__retarget_lock_init_recursive>:
 80066bc:	4770      	bx	lr

080066be <__retarget_lock_acquire_recursive>:
 80066be:	4770      	bx	lr

080066c0 <__retarget_lock_release_recursive>:
 80066c0:	4770      	bx	lr

080066c2 <memchr>:
 80066c2:	b2c9      	uxtb	r1, r1
 80066c4:	4603      	mov	r3, r0
 80066c6:	4402      	add	r2, r0
 80066c8:	b510      	push	{r4, lr}
 80066ca:	4293      	cmp	r3, r2
 80066cc:	4618      	mov	r0, r3
 80066ce:	d101      	bne.n	80066d4 <memchr+0x12>
 80066d0:	2000      	movs	r0, #0
 80066d2:	e003      	b.n	80066dc <memchr+0x1a>
 80066d4:	7804      	ldrb	r4, [r0, #0]
 80066d6:	3301      	adds	r3, #1
 80066d8:	428c      	cmp	r4, r1
 80066da:	d1f6      	bne.n	80066ca <memchr+0x8>
 80066dc:	bd10      	pop	{r4, pc}
	...

080066e0 <nanf>:
 80066e0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80066e8 <nanf+0x8>
 80066e4:	4770      	bx	lr
 80066e6:	bf00      	nop
 80066e8:	7fc00000 	.word	0x7fc00000

080066ec <quorem>:
 80066ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f0:	6903      	ldr	r3, [r0, #16]
 80066f2:	4607      	mov	r7, r0
 80066f4:	690c      	ldr	r4, [r1, #16]
 80066f6:	42a3      	cmp	r3, r4
 80066f8:	f2c0 8083 	blt.w	8006802 <quorem+0x116>
 80066fc:	3c01      	subs	r4, #1
 80066fe:	f100 0514 	add.w	r5, r0, #20
 8006702:	f101 0814 	add.w	r8, r1, #20
 8006706:	00a3      	lsls	r3, r4, #2
 8006708:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800670c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006716:	9301      	str	r3, [sp, #4]
 8006718:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800671c:	3301      	adds	r3, #1
 800671e:	429a      	cmp	r2, r3
 8006720:	fbb2 f6f3 	udiv	r6, r2, r3
 8006724:	d331      	bcc.n	800678a <quorem+0x9e>
 8006726:	f04f 0a00 	mov.w	sl, #0
 800672a:	46c4      	mov	ip, r8
 800672c:	46ae      	mov	lr, r5
 800672e:	46d3      	mov	fp, sl
 8006730:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006734:	b298      	uxth	r0, r3
 8006736:	45e1      	cmp	r9, ip
 8006738:	ea4f 4313 	mov.w	r3, r3, lsr #16
 800673c:	fb06 a000 	mla	r0, r6, r0, sl
 8006740:	ea4f 4210 	mov.w	r2, r0, lsr #16
 8006744:	b280      	uxth	r0, r0
 8006746:	fb06 2303 	mla	r3, r6, r3, r2
 800674a:	f8de 2000 	ldr.w	r2, [lr]
 800674e:	b292      	uxth	r2, r2
 8006750:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006754:	eba2 0200 	sub.w	r2, r2, r0
 8006758:	b29b      	uxth	r3, r3
 800675a:	f8de 0000 	ldr.w	r0, [lr]
 800675e:	445a      	add	r2, fp
 8006760:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006764:	b292      	uxth	r2, r2
 8006766:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800676a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800676e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006772:	f84e 2b04 	str.w	r2, [lr], #4
 8006776:	d2db      	bcs.n	8006730 <quorem+0x44>
 8006778:	9b00      	ldr	r3, [sp, #0]
 800677a:	58eb      	ldr	r3, [r5, r3]
 800677c:	b92b      	cbnz	r3, 800678a <quorem+0x9e>
 800677e:	9b01      	ldr	r3, [sp, #4]
 8006780:	3b04      	subs	r3, #4
 8006782:	429d      	cmp	r5, r3
 8006784:	461a      	mov	r2, r3
 8006786:	d330      	bcc.n	80067ea <quorem+0xfe>
 8006788:	613c      	str	r4, [r7, #16]
 800678a:	4638      	mov	r0, r7
 800678c:	f001 f9c6 	bl	8007b1c <__mcmp>
 8006790:	2800      	cmp	r0, #0
 8006792:	db26      	blt.n	80067e2 <quorem+0xf6>
 8006794:	4629      	mov	r1, r5
 8006796:	2000      	movs	r0, #0
 8006798:	f858 2b04 	ldr.w	r2, [r8], #4
 800679c:	f8d1 c000 	ldr.w	ip, [r1]
 80067a0:	fa1f fe82 	uxth.w	lr, r2
 80067a4:	45c1      	cmp	r9, r8
 80067a6:	fa1f f38c 	uxth.w	r3, ip
 80067aa:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80067ae:	eba3 030e 	sub.w	r3, r3, lr
 80067b2:	4403      	add	r3, r0
 80067b4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80067be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80067c6:	f841 3b04 	str.w	r3, [r1], #4
 80067ca:	d2e5      	bcs.n	8006798 <quorem+0xac>
 80067cc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067d4:	b922      	cbnz	r2, 80067e0 <quorem+0xf4>
 80067d6:	3b04      	subs	r3, #4
 80067d8:	429d      	cmp	r5, r3
 80067da:	461a      	mov	r2, r3
 80067dc:	d30b      	bcc.n	80067f6 <quorem+0x10a>
 80067de:	613c      	str	r4, [r7, #16]
 80067e0:	3601      	adds	r6, #1
 80067e2:	4630      	mov	r0, r6
 80067e4:	b003      	add	sp, #12
 80067e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ea:	6812      	ldr	r2, [r2, #0]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	d1ca      	bne.n	8006788 <quorem+0x9c>
 80067f2:	3c01      	subs	r4, #1
 80067f4:	e7c5      	b.n	8006782 <quorem+0x96>
 80067f6:	6812      	ldr	r2, [r2, #0]
 80067f8:	3b04      	subs	r3, #4
 80067fa:	2a00      	cmp	r2, #0
 80067fc:	d1ef      	bne.n	80067de <quorem+0xf2>
 80067fe:	3c01      	subs	r4, #1
 8006800:	e7ea      	b.n	80067d8 <quorem+0xec>
 8006802:	2000      	movs	r0, #0
 8006804:	e7ee      	b.n	80067e4 <quorem+0xf8>
	...

08006808 <_dtoa_r>:
 8006808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800680c:	69c7      	ldr	r7, [r0, #28]
 800680e:	b099      	sub	sp, #100	@ 0x64
 8006810:	4683      	mov	fp, r0
 8006812:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006814:	9109      	str	r1, [sp, #36]	@ 0x24
 8006816:	920e      	str	r2, [sp, #56]	@ 0x38
 8006818:	9313      	str	r3, [sp, #76]	@ 0x4c
 800681a:	ec55 4b10 	vmov	r4, r5, d0
 800681e:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006822:	b97f      	cbnz	r7, 8006844 <_dtoa_r+0x3c>
 8006824:	2010      	movs	r0, #16
 8006826:	f000 fdfd 	bl	8007424 <malloc>
 800682a:	4602      	mov	r2, r0
 800682c:	f8cb 001c 	str.w	r0, [fp, #28]
 8006830:	b920      	cbnz	r0, 800683c <_dtoa_r+0x34>
 8006832:	4ba7      	ldr	r3, [pc, #668]	@ (8006ad0 <_dtoa_r+0x2c8>)
 8006834:	21ef      	movs	r1, #239	@ 0xef
 8006836:	48a7      	ldr	r0, [pc, #668]	@ (8006ad4 <_dtoa_r+0x2cc>)
 8006838:	f002 fc42 	bl	80090c0 <__assert_func>
 800683c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006840:	6007      	str	r7, [r0, #0]
 8006842:	60c7      	str	r7, [r0, #12]
 8006844:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006848:	6819      	ldr	r1, [r3, #0]
 800684a:	b159      	cbz	r1, 8006864 <_dtoa_r+0x5c>
 800684c:	685a      	ldr	r2, [r3, #4]
 800684e:	2301      	movs	r3, #1
 8006850:	4658      	mov	r0, fp
 8006852:	4093      	lsls	r3, r2
 8006854:	604a      	str	r2, [r1, #4]
 8006856:	608b      	str	r3, [r1, #8]
 8006858:	f000 feda 	bl	8007610 <_Bfree>
 800685c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006860:	2200      	movs	r2, #0
 8006862:	601a      	str	r2, [r3, #0]
 8006864:	1e2b      	subs	r3, r5, #0
 8006866:	bfb7      	itett	lt
 8006868:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800686c:	2300      	movge	r3, #0
 800686e:	2201      	movlt	r2, #1
 8006870:	9303      	strlt	r3, [sp, #12]
 8006872:	bfa8      	it	ge
 8006874:	6033      	strge	r3, [r6, #0]
 8006876:	9f03      	ldr	r7, [sp, #12]
 8006878:	4b97      	ldr	r3, [pc, #604]	@ (8006ad8 <_dtoa_r+0x2d0>)
 800687a:	bfb8      	it	lt
 800687c:	6032      	strlt	r2, [r6, #0]
 800687e:	43bb      	bics	r3, r7
 8006880:	d112      	bne.n	80068a8 <_dtoa_r+0xa0>
 8006882:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006886:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800688e:	4323      	orrs	r3, r4
 8006890:	f000 854c 	beq.w	800732c <_dtoa_r+0xb24>
 8006894:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006896:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006aec <_dtoa_r+0x2e4>
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 854e 	beq.w	800733c <_dtoa_r+0xb34>
 80068a0:	f10a 0303 	add.w	r3, sl, #3
 80068a4:	f000 bd48 	b.w	8007338 <_dtoa_r+0xb30>
 80068a8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80068ac:	2200      	movs	r2, #0
 80068ae:	2300      	movs	r3, #0
 80068b0:	ec51 0b17 	vmov	r0, r1, d7
 80068b4:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80068b8:	f7fa f8ea 	bl	8000a90 <__aeabi_dcmpeq>
 80068bc:	4680      	mov	r8, r0
 80068be:	b158      	cbz	r0, 80068d8 <_dtoa_r+0xd0>
 80068c0:	2301      	movs	r3, #1
 80068c2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80068c4:	6013      	str	r3, [r2, #0]
 80068c6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80068c8:	b113      	cbz	r3, 80068d0 <_dtoa_r+0xc8>
 80068ca:	4b84      	ldr	r3, [pc, #528]	@ (8006adc <_dtoa_r+0x2d4>)
 80068cc:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80068ce:	6013      	str	r3, [r2, #0]
 80068d0:	f8df a21c 	ldr.w	sl, [pc, #540]	@ 8006af0 <_dtoa_r+0x2e8>
 80068d4:	f000 bd32 	b.w	800733c <_dtoa_r+0xb34>
 80068d8:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80068dc:	aa16      	add	r2, sp, #88	@ 0x58
 80068de:	a917      	add	r1, sp, #92	@ 0x5c
 80068e0:	4658      	mov	r0, fp
 80068e2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80068e6:	f001 fa41 	bl	8007d6c <__d2b>
 80068ea:	4681      	mov	r9, r0
 80068ec:	2e00      	cmp	r6, #0
 80068ee:	d075      	beq.n	80069dc <_dtoa_r+0x1d4>
 80068f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068f2:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068f6:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80068fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068fe:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006902:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006906:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800690a:	4619      	mov	r1, r3
 800690c:	2200      	movs	r2, #0
 800690e:	4b74      	ldr	r3, [pc, #464]	@ (8006ae0 <_dtoa_r+0x2d8>)
 8006910:	f7f9 fc9e 	bl	8000250 <__aeabi_dsub>
 8006914:	a368      	add	r3, pc, #416	@ (adr r3, 8006ab8 <_dtoa_r+0x2b0>)
 8006916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800691a:	f7f9 fe51 	bl	80005c0 <__aeabi_dmul>
 800691e:	a368      	add	r3, pc, #416	@ (adr r3, 8006ac0 <_dtoa_r+0x2b8>)
 8006920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006924:	f7f9 fc96 	bl	8000254 <__adddf3>
 8006928:	4604      	mov	r4, r0
 800692a:	460d      	mov	r5, r1
 800692c:	4630      	mov	r0, r6
 800692e:	f7f9 fddd 	bl	80004ec <__aeabi_i2d>
 8006932:	a365      	add	r3, pc, #404	@ (adr r3, 8006ac8 <_dtoa_r+0x2c0>)
 8006934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006938:	f7f9 fe42 	bl	80005c0 <__aeabi_dmul>
 800693c:	4602      	mov	r2, r0
 800693e:	460b      	mov	r3, r1
 8006940:	4620      	mov	r0, r4
 8006942:	4629      	mov	r1, r5
 8006944:	f7f9 fc86 	bl	8000254 <__adddf3>
 8006948:	4604      	mov	r4, r0
 800694a:	460d      	mov	r5, r1
 800694c:	f7fa f8e8 	bl	8000b20 <__aeabi_d2iz>
 8006950:	2200      	movs	r2, #0
 8006952:	4607      	mov	r7, r0
 8006954:	2300      	movs	r3, #0
 8006956:	4620      	mov	r0, r4
 8006958:	4629      	mov	r1, r5
 800695a:	f7fa f8a3 	bl	8000aa4 <__aeabi_dcmplt>
 800695e:	b140      	cbz	r0, 8006972 <_dtoa_r+0x16a>
 8006960:	4638      	mov	r0, r7
 8006962:	f7f9 fdc3 	bl	80004ec <__aeabi_i2d>
 8006966:	4622      	mov	r2, r4
 8006968:	462b      	mov	r3, r5
 800696a:	f7fa f891 	bl	8000a90 <__aeabi_dcmpeq>
 800696e:	b900      	cbnz	r0, 8006972 <_dtoa_r+0x16a>
 8006970:	3f01      	subs	r7, #1
 8006972:	2f16      	cmp	r7, #22
 8006974:	d851      	bhi.n	8006a1a <_dtoa_r+0x212>
 8006976:	4b5b      	ldr	r3, [pc, #364]	@ (8006ae4 <_dtoa_r+0x2dc>)
 8006978:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800697c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006984:	f7fa f88e 	bl	8000aa4 <__aeabi_dcmplt>
 8006988:	2800      	cmp	r0, #0
 800698a:	d048      	beq.n	8006a1e <_dtoa_r+0x216>
 800698c:	3f01      	subs	r7, #1
 800698e:	2300      	movs	r3, #0
 8006990:	9312      	str	r3, [sp, #72]	@ 0x48
 8006992:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006994:	1b9b      	subs	r3, r3, r6
 8006996:	1e5a      	subs	r2, r3, #1
 8006998:	bf46      	itte	mi
 800699a:	f1c3 0801 	rsbmi	r8, r3, #1
 800699e:	2300      	movmi	r3, #0
 80069a0:	f04f 0800 	movpl.w	r8, #0
 80069a4:	9208      	str	r2, [sp, #32]
 80069a6:	bf48      	it	mi
 80069a8:	9308      	strmi	r3, [sp, #32]
 80069aa:	2f00      	cmp	r7, #0
 80069ac:	db39      	blt.n	8006a22 <_dtoa_r+0x21a>
 80069ae:	9b08      	ldr	r3, [sp, #32]
 80069b0:	970f      	str	r7, [sp, #60]	@ 0x3c
 80069b2:	443b      	add	r3, r7
 80069b4:	9308      	str	r3, [sp, #32]
 80069b6:	2300      	movs	r3, #0
 80069b8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069bc:	2b09      	cmp	r3, #9
 80069be:	d864      	bhi.n	8006a8a <_dtoa_r+0x282>
 80069c0:	2b05      	cmp	r3, #5
 80069c2:	bfc5      	ittet	gt
 80069c4:	3b04      	subgt	r3, #4
 80069c6:	2400      	movgt	r4, #0
 80069c8:	2401      	movle	r4, #1
 80069ca:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80069cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ce:	3b02      	subs	r3, #2
 80069d0:	2b03      	cmp	r3, #3
 80069d2:	d865      	bhi.n	8006aa0 <_dtoa_r+0x298>
 80069d4:	e8df f003 	tbb	[pc, r3]
 80069d8:	5737392c 	.word	0x5737392c
 80069dc:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80069e0:	441e      	add	r6, r3
 80069e2:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069e6:	2b20      	cmp	r3, #32
 80069e8:	bfc9      	itett	gt
 80069ea:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069ee:	f1c3 0320 	rsble	r3, r3, #32
 80069f2:	409f      	lslgt	r7, r3
 80069f4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069f8:	bfd8      	it	le
 80069fa:	fa04 f003 	lslle.w	r0, r4, r3
 80069fe:	f106 36ff 	add.w	r6, r6, #4294967295
 8006a02:	bfc4      	itt	gt
 8006a04:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006a08:	ea47 0003 	orrgt.w	r0, r7, r3
 8006a0c:	f7f9 fd5e 	bl	80004cc <__aeabi_ui2d>
 8006a10:	2201      	movs	r2, #1
 8006a12:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006a16:	9214      	str	r2, [sp, #80]	@ 0x50
 8006a18:	e777      	b.n	800690a <_dtoa_r+0x102>
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e7b8      	b.n	8006990 <_dtoa_r+0x188>
 8006a1e:	9012      	str	r0, [sp, #72]	@ 0x48
 8006a20:	e7b7      	b.n	8006992 <_dtoa_r+0x18a>
 8006a22:	427b      	negs	r3, r7
 8006a24:	eba8 0807 	sub.w	r8, r8, r7
 8006a28:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a2e:	e7c4      	b.n	80069ba <_dtoa_r+0x1b2>
 8006a30:	2300      	movs	r3, #0
 8006a32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	dc35      	bgt.n	8006aa6 <_dtoa_r+0x29e>
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	9300      	str	r3, [sp, #0]
 8006a40:	9307      	str	r3, [sp, #28]
 8006a42:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a44:	e00b      	b.n	8006a5e <_dtoa_r+0x256>
 8006a46:	2301      	movs	r3, #1
 8006a48:	e7f3      	b.n	8006a32 <_dtoa_r+0x22a>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a50:	18fb      	adds	r3, r7, r3
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	3301      	adds	r3, #1
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	9307      	str	r3, [sp, #28]
 8006a5a:	bfb8      	it	lt
 8006a5c:	2301      	movlt	r3, #1
 8006a5e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006a62:	2100      	movs	r1, #0
 8006a64:	2204      	movs	r2, #4
 8006a66:	f102 0514 	add.w	r5, r2, #20
 8006a6a:	429d      	cmp	r5, r3
 8006a6c:	d91f      	bls.n	8006aae <_dtoa_r+0x2a6>
 8006a6e:	6041      	str	r1, [r0, #4]
 8006a70:	4658      	mov	r0, fp
 8006a72:	f000 fd8d 	bl	8007590 <_Balloc>
 8006a76:	4682      	mov	sl, r0
 8006a78:	2800      	cmp	r0, #0
 8006a7a:	d13b      	bne.n	8006af4 <_dtoa_r+0x2ec>
 8006a7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006ae8 <_dtoa_r+0x2e0>)
 8006a7e:	4602      	mov	r2, r0
 8006a80:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a84:	e6d7      	b.n	8006836 <_dtoa_r+0x2e>
 8006a86:	2301      	movs	r3, #1
 8006a88:	e7e0      	b.n	8006a4c <_dtoa_r+0x244>
 8006a8a:	2401      	movs	r4, #1
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a90:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a92:	f04f 33ff 	mov.w	r3, #4294967295
 8006a96:	2200      	movs	r2, #0
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	9307      	str	r3, [sp, #28]
 8006a9c:	2312      	movs	r3, #18
 8006a9e:	e7d0      	b.n	8006a42 <_dtoa_r+0x23a>
 8006aa0:	2301      	movs	r3, #1
 8006aa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aa4:	e7f5      	b.n	8006a92 <_dtoa_r+0x28a>
 8006aa6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006aa8:	9300      	str	r3, [sp, #0]
 8006aaa:	9307      	str	r3, [sp, #28]
 8006aac:	e7d7      	b.n	8006a5e <_dtoa_r+0x256>
 8006aae:	3101      	adds	r1, #1
 8006ab0:	0052      	lsls	r2, r2, #1
 8006ab2:	e7d8      	b.n	8006a66 <_dtoa_r+0x25e>
 8006ab4:	f3af 8000 	nop.w
 8006ab8:	636f4361 	.word	0x636f4361
 8006abc:	3fd287a7 	.word	0x3fd287a7
 8006ac0:	8b60c8b3 	.word	0x8b60c8b3
 8006ac4:	3fc68a28 	.word	0x3fc68a28
 8006ac8:	509f79fb 	.word	0x509f79fb
 8006acc:	3fd34413 	.word	0x3fd34413
 8006ad0:	08009e9e 	.word	0x08009e9e
 8006ad4:	08009eb5 	.word	0x08009eb5
 8006ad8:	7ff00000 	.word	0x7ff00000
 8006adc:	08009e69 	.word	0x08009e69
 8006ae0:	3ff80000 	.word	0x3ff80000
 8006ae4:	08009fb0 	.word	0x08009fb0
 8006ae8:	08009f0d 	.word	0x08009f0d
 8006aec:	08009e9a 	.word	0x08009e9a
 8006af0:	08009e68 	.word	0x08009e68
 8006af4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006af8:	6018      	str	r0, [r3, #0]
 8006afa:	9b07      	ldr	r3, [sp, #28]
 8006afc:	2b0e      	cmp	r3, #14
 8006afe:	f200 80a4 	bhi.w	8006c4a <_dtoa_r+0x442>
 8006b02:	2c00      	cmp	r4, #0
 8006b04:	f000 80a1 	beq.w	8006c4a <_dtoa_r+0x442>
 8006b08:	2f00      	cmp	r7, #0
 8006b0a:	dd33      	ble.n	8006b74 <_dtoa_r+0x36c>
 8006b0c:	f007 020f 	and.w	r2, r7, #15
 8006b10:	4bac      	ldr	r3, [pc, #688]	@ (8006dc4 <_dtoa_r+0x5bc>)
 8006b12:	05f8      	lsls	r0, r7, #23
 8006b14:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006b18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b1c:	ed93 7b00 	vldr	d7, [r3]
 8006b20:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006b24:	d516      	bpl.n	8006b54 <_dtoa_r+0x34c>
 8006b26:	4ba8      	ldr	r3, [pc, #672]	@ (8006dc8 <_dtoa_r+0x5c0>)
 8006b28:	f004 040f 	and.w	r4, r4, #15
 8006b2c:	2603      	movs	r6, #3
 8006b2e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006b32:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b36:	f7f9 fe6d 	bl	8000814 <__aeabi_ddiv>
 8006b3a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b3e:	4da2      	ldr	r5, [pc, #648]	@ (8006dc8 <_dtoa_r+0x5c0>)
 8006b40:	b954      	cbnz	r4, 8006b58 <_dtoa_r+0x350>
 8006b42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b4a:	f7f9 fe63 	bl	8000814 <__aeabi_ddiv>
 8006b4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b52:	e028      	b.n	8006ba6 <_dtoa_r+0x39e>
 8006b54:	2602      	movs	r6, #2
 8006b56:	e7f2      	b.n	8006b3e <_dtoa_r+0x336>
 8006b58:	07e1      	lsls	r1, r4, #31
 8006b5a:	d508      	bpl.n	8006b6e <_dtoa_r+0x366>
 8006b5c:	3601      	adds	r6, #1
 8006b5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b66:	f7f9 fd2b 	bl	80005c0 <__aeabi_dmul>
 8006b6a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b6e:	1064      	asrs	r4, r4, #1
 8006b70:	3508      	adds	r5, #8
 8006b72:	e7e5      	b.n	8006b40 <_dtoa_r+0x338>
 8006b74:	f000 80d2 	beq.w	8006d1c <_dtoa_r+0x514>
 8006b78:	427c      	negs	r4, r7
 8006b7a:	4b92      	ldr	r3, [pc, #584]	@ (8006dc4 <_dtoa_r+0x5bc>)
 8006b7c:	4d92      	ldr	r5, [pc, #584]	@ (8006dc8 <_dtoa_r+0x5c0>)
 8006b7e:	2602      	movs	r6, #2
 8006b80:	f004 020f 	and.w	r2, r4, #15
 8006b84:	1124      	asrs	r4, r4, #4
 8006b86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b8a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b92:	f7f9 fd15 	bl	80005c0 <__aeabi_dmul>
 8006b96:	2300      	movs	r3, #0
 8006b98:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b9c:	2c00      	cmp	r4, #0
 8006b9e:	f040 80b2 	bne.w	8006d06 <_dtoa_r+0x4fe>
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1d3      	bne.n	8006b4e <_dtoa_r+0x346>
 8006ba6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ba8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f000 80b7 	beq.w	8006d20 <_dtoa_r+0x518>
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	4b85      	ldr	r3, [pc, #532]	@ (8006dcc <_dtoa_r+0x5c4>)
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	f7f9 ff73 	bl	8000aa4 <__aeabi_dcmplt>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	f000 80ae 	beq.w	8006d20 <_dtoa_r+0x518>
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f000 80aa 	beq.w	8006d20 <_dtoa_r+0x518>
 8006bcc:	9b00      	ldr	r3, [sp, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	dd37      	ble.n	8006c42 <_dtoa_r+0x43a>
 8006bd2:	1e7b      	subs	r3, r7, #1
 8006bd4:	4620      	mov	r0, r4
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	4629      	mov	r1, r5
 8006bda:	9304      	str	r3, [sp, #16]
 8006bdc:	3601      	adds	r6, #1
 8006bde:	4b7c      	ldr	r3, [pc, #496]	@ (8006dd0 <_dtoa_r+0x5c8>)
 8006be0:	f7f9 fcee 	bl	80005c0 <__aeabi_dmul>
 8006be4:	9c00      	ldr	r4, [sp, #0]
 8006be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7f9 fc7e 	bl	80004ec <__aeabi_i2d>
 8006bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bf4:	f7f9 fce4 	bl	80005c0 <__aeabi_dmul>
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	4b76      	ldr	r3, [pc, #472]	@ (8006dd4 <_dtoa_r+0x5cc>)
 8006bfc:	f7f9 fb2a 	bl	8000254 <__adddf3>
 8006c00:	4605      	mov	r5, r0
 8006c02:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006c06:	2c00      	cmp	r4, #0
 8006c08:	f040 808d 	bne.w	8006d26 <_dtoa_r+0x51e>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4b72      	ldr	r3, [pc, #456]	@ (8006dd8 <_dtoa_r+0x5d0>)
 8006c10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c14:	f7f9 fb1c 	bl	8000250 <__aeabi_dsub>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	460b      	mov	r3, r1
 8006c1c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c20:	462a      	mov	r2, r5
 8006c22:	4633      	mov	r3, r6
 8006c24:	f7f9 ff5c 	bl	8000ae0 <__aeabi_dcmpgt>
 8006c28:	2800      	cmp	r0, #0
 8006c2a:	f040 828b 	bne.w	8007144 <_dtoa_r+0x93c>
 8006c2e:	462a      	mov	r2, r5
 8006c30:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c38:	f7f9 ff34 	bl	8000aa4 <__aeabi_dcmplt>
 8006c3c:	2800      	cmp	r0, #0
 8006c3e:	f040 8128 	bne.w	8006e92 <_dtoa_r+0x68a>
 8006c42:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c46:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006c4a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	f2c0 815a 	blt.w	8006f06 <_dtoa_r+0x6fe>
 8006c52:	2f0e      	cmp	r7, #14
 8006c54:	f300 8157 	bgt.w	8006f06 <_dtoa_r+0x6fe>
 8006c58:	4b5a      	ldr	r3, [pc, #360]	@ (8006dc4 <_dtoa_r+0x5bc>)
 8006c5a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c5e:	ed93 7b00 	vldr	d7, [r3]
 8006c62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	ed8d 7b00 	vstr	d7, [sp]
 8006c6a:	da03      	bge.n	8006c74 <_dtoa_r+0x46c>
 8006c6c:	9b07      	ldr	r3, [sp, #28]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	f340 8101 	ble.w	8006e76 <_dtoa_r+0x66e>
 8006c74:	4656      	mov	r6, sl
 8006c76:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c7e:	4620      	mov	r0, r4
 8006c80:	4629      	mov	r1, r5
 8006c82:	f7f9 fdc7 	bl	8000814 <__aeabi_ddiv>
 8006c86:	f7f9 ff4b 	bl	8000b20 <__aeabi_d2iz>
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	f7f9 fc2e 	bl	80004ec <__aeabi_i2d>
 8006c90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c94:	f7f9 fc94 	bl	80005c0 <__aeabi_dmul>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	f7f9 fad4 	bl	8000250 <__aeabi_dsub>
 8006ca8:	9d07      	ldr	r5, [sp, #28]
 8006caa:	f806 4b01 	strb.w	r4, [r6], #1
 8006cae:	eba6 040a 	sub.w	r4, r6, sl
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	42a5      	cmp	r5, r4
 8006cb8:	f040 8117 	bne.w	8006eea <_dtoa_r+0x6e2>
 8006cbc:	f7f9 faca 	bl	8000254 <__adddf3>
 8006cc0:	4604      	mov	r4, r0
 8006cc2:	460d      	mov	r5, r1
 8006cc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cc8:	f7f9 ff0a 	bl	8000ae0 <__aeabi_dcmpgt>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	f040 80f9 	bne.w	8006ec4 <_dtoa_r+0x6bc>
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	4629      	mov	r1, r5
 8006cd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cda:	f7f9 fed9 	bl	8000a90 <__aeabi_dcmpeq>
 8006cde:	b118      	cbz	r0, 8006ce8 <_dtoa_r+0x4e0>
 8006ce0:	f018 0f01 	tst.w	r8, #1
 8006ce4:	f040 80ee 	bne.w	8006ec4 <_dtoa_r+0x6bc>
 8006ce8:	4649      	mov	r1, r9
 8006cea:	4658      	mov	r0, fp
 8006cec:	f000 fc90 	bl	8007610 <_Bfree>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	3701      	adds	r7, #1
 8006cf4:	7033      	strb	r3, [r6, #0]
 8006cf6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006cf8:	601f      	str	r7, [r3, #0]
 8006cfa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f000 831d 	beq.w	800733c <_dtoa_r+0xb34>
 8006d02:	601e      	str	r6, [r3, #0]
 8006d04:	e31a      	b.n	800733c <_dtoa_r+0xb34>
 8006d06:	07e2      	lsls	r2, r4, #31
 8006d08:	d505      	bpl.n	8006d16 <_dtoa_r+0x50e>
 8006d0a:	3601      	adds	r6, #1
 8006d0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006d10:	f7f9 fc56 	bl	80005c0 <__aeabi_dmul>
 8006d14:	2301      	movs	r3, #1
 8006d16:	1064      	asrs	r4, r4, #1
 8006d18:	3508      	adds	r5, #8
 8006d1a:	e73f      	b.n	8006b9c <_dtoa_r+0x394>
 8006d1c:	2602      	movs	r6, #2
 8006d1e:	e742      	b.n	8006ba6 <_dtoa_r+0x39e>
 8006d20:	9c07      	ldr	r4, [sp, #28]
 8006d22:	9704      	str	r7, [sp, #16]
 8006d24:	e761      	b.n	8006bea <_dtoa_r+0x3e2>
 8006d26:	4b27      	ldr	r3, [pc, #156]	@ (8006dc4 <_dtoa_r+0x5bc>)
 8006d28:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006d2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006d2e:	4454      	add	r4, sl
 8006d30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006d34:	2900      	cmp	r1, #0
 8006d36:	d053      	beq.n	8006de0 <_dtoa_r+0x5d8>
 8006d38:	2000      	movs	r0, #0
 8006d3a:	4928      	ldr	r1, [pc, #160]	@ (8006ddc <_dtoa_r+0x5d4>)
 8006d3c:	f7f9 fd6a 	bl	8000814 <__aeabi_ddiv>
 8006d40:	4633      	mov	r3, r6
 8006d42:	4656      	mov	r6, sl
 8006d44:	462a      	mov	r2, r5
 8006d46:	f7f9 fa83 	bl	8000250 <__aeabi_dsub>
 8006d4a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d52:	f7f9 fee5 	bl	8000b20 <__aeabi_d2iz>
 8006d56:	4605      	mov	r5, r0
 8006d58:	f7f9 fbc8 	bl	80004ec <__aeabi_i2d>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	3530      	adds	r5, #48	@ 0x30
 8006d62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d66:	f7f9 fa73 	bl	8000250 <__aeabi_dsub>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	f806 5b01 	strb.w	r5, [r6], #1
 8006d72:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d7a:	f7f9 fe93 	bl	8000aa4 <__aeabi_dcmplt>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	d171      	bne.n	8006e66 <_dtoa_r+0x65e>
 8006d82:	2000      	movs	r0, #0
 8006d84:	4911      	ldr	r1, [pc, #68]	@ (8006dcc <_dtoa_r+0x5c4>)
 8006d86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d8a:	f7f9 fa61 	bl	8000250 <__aeabi_dsub>
 8006d8e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d92:	f7f9 fe87 	bl	8000aa4 <__aeabi_dcmplt>
 8006d96:	2800      	cmp	r0, #0
 8006d98:	f040 8095 	bne.w	8006ec6 <_dtoa_r+0x6be>
 8006d9c:	42a6      	cmp	r6, r4
 8006d9e:	f43f af50 	beq.w	8006c42 <_dtoa_r+0x43a>
 8006da2:	2200      	movs	r2, #0
 8006da4:	4b0a      	ldr	r3, [pc, #40]	@ (8006dd0 <_dtoa_r+0x5c8>)
 8006da6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006daa:	f7f9 fc09 	bl	80005c0 <__aeabi_dmul>
 8006dae:	2200      	movs	r2, #0
 8006db0:	4b07      	ldr	r3, [pc, #28]	@ (8006dd0 <_dtoa_r+0x5c8>)
 8006db2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006db6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dba:	f7f9 fc01 	bl	80005c0 <__aeabi_dmul>
 8006dbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006dc2:	e7c4      	b.n	8006d4e <_dtoa_r+0x546>
 8006dc4:	08009fb0 	.word	0x08009fb0
 8006dc8:	08009f88 	.word	0x08009f88
 8006dcc:	3ff00000 	.word	0x3ff00000
 8006dd0:	40240000 	.word	0x40240000
 8006dd4:	401c0000 	.word	0x401c0000
 8006dd8:	40140000 	.word	0x40140000
 8006ddc:	3fe00000 	.word	0x3fe00000
 8006de0:	4631      	mov	r1, r6
 8006de2:	4656      	mov	r6, sl
 8006de4:	4628      	mov	r0, r5
 8006de6:	f7f9 fbeb 	bl	80005c0 <__aeabi_dmul>
 8006dea:	9415      	str	r4, [sp, #84]	@ 0x54
 8006dec:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006df0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006df4:	f7f9 fe94 	bl	8000b20 <__aeabi_d2iz>
 8006df8:	4605      	mov	r5, r0
 8006dfa:	f7f9 fb77 	bl	80004ec <__aeabi_i2d>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	3530      	adds	r5, #48	@ 0x30
 8006e02:	460b      	mov	r3, r1
 8006e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e08:	f7f9 fa22 	bl	8000250 <__aeabi_dsub>
 8006e0c:	f806 5b01 	strb.w	r5, [r6], #1
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	42a6      	cmp	r6, r4
 8006e16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e1a:	f04f 0200 	mov.w	r2, #0
 8006e1e:	d124      	bne.n	8006e6a <_dtoa_r+0x662>
 8006e20:	4bac      	ldr	r3, [pc, #688]	@ (80070d4 <_dtoa_r+0x8cc>)
 8006e22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e26:	f7f9 fa15 	bl	8000254 <__adddf3>
 8006e2a:	4602      	mov	r2, r0
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e32:	f7f9 fe55 	bl	8000ae0 <__aeabi_dcmpgt>
 8006e36:	2800      	cmp	r0, #0
 8006e38:	d145      	bne.n	8006ec6 <_dtoa_r+0x6be>
 8006e3a:	2000      	movs	r0, #0
 8006e3c:	49a5      	ldr	r1, [pc, #660]	@ (80070d4 <_dtoa_r+0x8cc>)
 8006e3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e42:	f7f9 fa05 	bl	8000250 <__aeabi_dsub>
 8006e46:	4602      	mov	r2, r0
 8006e48:	460b      	mov	r3, r1
 8006e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e4e:	f7f9 fe29 	bl	8000aa4 <__aeabi_dcmplt>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	f43f aef5 	beq.w	8006c42 <_dtoa_r+0x43a>
 8006e58:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006e5a:	1e73      	subs	r3, r6, #1
 8006e5c:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e5e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e62:	2b30      	cmp	r3, #48	@ 0x30
 8006e64:	d0f8      	beq.n	8006e58 <_dtoa_r+0x650>
 8006e66:	9f04      	ldr	r7, [sp, #16]
 8006e68:	e73e      	b.n	8006ce8 <_dtoa_r+0x4e0>
 8006e6a:	4b9b      	ldr	r3, [pc, #620]	@ (80070d8 <_dtoa_r+0x8d0>)
 8006e6c:	f7f9 fba8 	bl	80005c0 <__aeabi_dmul>
 8006e70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e74:	e7bc      	b.n	8006df0 <_dtoa_r+0x5e8>
 8006e76:	d10c      	bne.n	8006e92 <_dtoa_r+0x68a>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	4b98      	ldr	r3, [pc, #608]	@ (80070dc <_dtoa_r+0x8d4>)
 8006e7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e80:	f7f9 fb9e 	bl	80005c0 <__aeabi_dmul>
 8006e84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e88:	f7f9 fe20 	bl	8000acc <__aeabi_dcmpge>
 8006e8c:	2800      	cmp	r0, #0
 8006e8e:	f000 8157 	beq.w	8007140 <_dtoa_r+0x938>
 8006e92:	2400      	movs	r4, #0
 8006e94:	4625      	mov	r5, r4
 8006e96:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e98:	4656      	mov	r6, sl
 8006e9a:	43db      	mvns	r3, r3
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	2700      	movs	r7, #0
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	4658      	mov	r0, fp
 8006ea4:	f000 fbb4 	bl	8007610 <_Bfree>
 8006ea8:	2d00      	cmp	r5, #0
 8006eaa:	d0dc      	beq.n	8006e66 <_dtoa_r+0x65e>
 8006eac:	b12f      	cbz	r7, 8006eba <_dtoa_r+0x6b2>
 8006eae:	42af      	cmp	r7, r5
 8006eb0:	d003      	beq.n	8006eba <_dtoa_r+0x6b2>
 8006eb2:	4639      	mov	r1, r7
 8006eb4:	4658      	mov	r0, fp
 8006eb6:	f000 fbab 	bl	8007610 <_Bfree>
 8006eba:	4629      	mov	r1, r5
 8006ebc:	4658      	mov	r0, fp
 8006ebe:	f000 fba7 	bl	8007610 <_Bfree>
 8006ec2:	e7d0      	b.n	8006e66 <_dtoa_r+0x65e>
 8006ec4:	9704      	str	r7, [sp, #16]
 8006ec6:	4633      	mov	r3, r6
 8006ec8:	461e      	mov	r6, r3
 8006eca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ece:	2a39      	cmp	r2, #57	@ 0x39
 8006ed0:	d107      	bne.n	8006ee2 <_dtoa_r+0x6da>
 8006ed2:	459a      	cmp	sl, r3
 8006ed4:	d1f8      	bne.n	8006ec8 <_dtoa_r+0x6c0>
 8006ed6:	9a04      	ldr	r2, [sp, #16]
 8006ed8:	3201      	adds	r2, #1
 8006eda:	9204      	str	r2, [sp, #16]
 8006edc:	2230      	movs	r2, #48	@ 0x30
 8006ede:	f88a 2000 	strb.w	r2, [sl]
 8006ee2:	781a      	ldrb	r2, [r3, #0]
 8006ee4:	3201      	adds	r2, #1
 8006ee6:	701a      	strb	r2, [r3, #0]
 8006ee8:	e7bd      	b.n	8006e66 <_dtoa_r+0x65e>
 8006eea:	2200      	movs	r2, #0
 8006eec:	4b7a      	ldr	r3, [pc, #488]	@ (80070d8 <_dtoa_r+0x8d0>)
 8006eee:	f7f9 fb67 	bl	80005c0 <__aeabi_dmul>
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	460d      	mov	r5, r1
 8006efa:	f7f9 fdc9 	bl	8000a90 <__aeabi_dcmpeq>
 8006efe:	2800      	cmp	r0, #0
 8006f00:	f43f aebb 	beq.w	8006c7a <_dtoa_r+0x472>
 8006f04:	e6f0      	b.n	8006ce8 <_dtoa_r+0x4e0>
 8006f06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006f08:	2a00      	cmp	r2, #0
 8006f0a:	f000 80db 	beq.w	80070c4 <_dtoa_r+0x8bc>
 8006f0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006f10:	2a01      	cmp	r2, #1
 8006f12:	f300 80bf 	bgt.w	8007094 <_dtoa_r+0x88c>
 8006f16:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006f18:	2a00      	cmp	r2, #0
 8006f1a:	f000 80b7 	beq.w	800708c <_dtoa_r+0x884>
 8006f1e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006f22:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006f24:	4646      	mov	r6, r8
 8006f26:	9a08      	ldr	r2, [sp, #32]
 8006f28:	2101      	movs	r1, #1
 8006f2a:	4658      	mov	r0, fp
 8006f2c:	4498      	add	r8, r3
 8006f2e:	441a      	add	r2, r3
 8006f30:	9208      	str	r2, [sp, #32]
 8006f32:	f000 fc6d 	bl	8007810 <__i2b>
 8006f36:	4605      	mov	r5, r0
 8006f38:	b15e      	cbz	r6, 8006f52 <_dtoa_r+0x74a>
 8006f3a:	9b08      	ldr	r3, [sp, #32]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	dd08      	ble.n	8006f52 <_dtoa_r+0x74a>
 8006f40:	42b3      	cmp	r3, r6
 8006f42:	9a08      	ldr	r2, [sp, #32]
 8006f44:	bfa8      	it	ge
 8006f46:	4633      	movge	r3, r6
 8006f48:	eba8 0803 	sub.w	r8, r8, r3
 8006f4c:	1af6      	subs	r6, r6, r3
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	9308      	str	r3, [sp, #32]
 8006f52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f54:	b1f3      	cbz	r3, 8006f94 <_dtoa_r+0x78c>
 8006f56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 80b7 	beq.w	80070cc <_dtoa_r+0x8c4>
 8006f5e:	b18c      	cbz	r4, 8006f84 <_dtoa_r+0x77c>
 8006f60:	4629      	mov	r1, r5
 8006f62:	4622      	mov	r2, r4
 8006f64:	4658      	mov	r0, fp
 8006f66:	f000 fd13 	bl	8007990 <__pow5mult>
 8006f6a:	464a      	mov	r2, r9
 8006f6c:	4601      	mov	r1, r0
 8006f6e:	4605      	mov	r5, r0
 8006f70:	4658      	mov	r0, fp
 8006f72:	f000 fc63 	bl	800783c <__multiply>
 8006f76:	4649      	mov	r1, r9
 8006f78:	9004      	str	r0, [sp, #16]
 8006f7a:	4658      	mov	r0, fp
 8006f7c:	f000 fb48 	bl	8007610 <_Bfree>
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	4699      	mov	r9, r3
 8006f84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f86:	1b1a      	subs	r2, r3, r4
 8006f88:	d004      	beq.n	8006f94 <_dtoa_r+0x78c>
 8006f8a:	4649      	mov	r1, r9
 8006f8c:	4658      	mov	r0, fp
 8006f8e:	f000 fcff 	bl	8007990 <__pow5mult>
 8006f92:	4681      	mov	r9, r0
 8006f94:	2101      	movs	r1, #1
 8006f96:	4658      	mov	r0, fp
 8006f98:	f000 fc3a 	bl	8007810 <__i2b>
 8006f9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 81cf 	beq.w	8007344 <_dtoa_r+0xb3c>
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	4601      	mov	r1, r0
 8006faa:	4658      	mov	r0, fp
 8006fac:	f000 fcf0 	bl	8007990 <__pow5mult>
 8006fb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	f300 8095 	bgt.w	80070e4 <_dtoa_r+0x8dc>
 8006fba:	9b02      	ldr	r3, [sp, #8]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	f040 8087 	bne.w	80070d0 <_dtoa_r+0x8c8>
 8006fc2:	9b03      	ldr	r3, [sp, #12]
 8006fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	f040 8089 	bne.w	80070e0 <_dtoa_r+0x8d8>
 8006fce:	9b03      	ldr	r3, [sp, #12]
 8006fd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006fd4:	0d1b      	lsrs	r3, r3, #20
 8006fd6:	051b      	lsls	r3, r3, #20
 8006fd8:	b12b      	cbz	r3, 8006fe6 <_dtoa_r+0x7de>
 8006fda:	9b08      	ldr	r3, [sp, #32]
 8006fdc:	f108 0801 	add.w	r8, r8, #1
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	9308      	str	r3, [sp, #32]
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fe8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 81b0 	beq.w	8007350 <_dtoa_r+0xb48>
 8006ff0:	6923      	ldr	r3, [r4, #16]
 8006ff2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006ff6:	6918      	ldr	r0, [r3, #16]
 8006ff8:	f000 fbbe 	bl	8007778 <__hi0bits>
 8006ffc:	f1c0 0020 	rsb	r0, r0, #32
 8007000:	9b08      	ldr	r3, [sp, #32]
 8007002:	4418      	add	r0, r3
 8007004:	f010 001f 	ands.w	r0, r0, #31
 8007008:	d077      	beq.n	80070fa <_dtoa_r+0x8f2>
 800700a:	f1c0 0320 	rsb	r3, r0, #32
 800700e:	2b04      	cmp	r3, #4
 8007010:	dd6b      	ble.n	80070ea <_dtoa_r+0x8e2>
 8007012:	f1c0 001c 	rsb	r0, r0, #28
 8007016:	9b08      	ldr	r3, [sp, #32]
 8007018:	4480      	add	r8, r0
 800701a:	4403      	add	r3, r0
 800701c:	4406      	add	r6, r0
 800701e:	9308      	str	r3, [sp, #32]
 8007020:	f1b8 0f00 	cmp.w	r8, #0
 8007024:	dd05      	ble.n	8007032 <_dtoa_r+0x82a>
 8007026:	4649      	mov	r1, r9
 8007028:	4642      	mov	r2, r8
 800702a:	4658      	mov	r0, fp
 800702c:	f000 fd0a 	bl	8007a44 <__lshift>
 8007030:	4681      	mov	r9, r0
 8007032:	9b08      	ldr	r3, [sp, #32]
 8007034:	2b00      	cmp	r3, #0
 8007036:	dd05      	ble.n	8007044 <_dtoa_r+0x83c>
 8007038:	4621      	mov	r1, r4
 800703a:	461a      	mov	r2, r3
 800703c:	4658      	mov	r0, fp
 800703e:	f000 fd01 	bl	8007a44 <__lshift>
 8007042:	4604      	mov	r4, r0
 8007044:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007046:	2b00      	cmp	r3, #0
 8007048:	d059      	beq.n	80070fe <_dtoa_r+0x8f6>
 800704a:	4621      	mov	r1, r4
 800704c:	4648      	mov	r0, r9
 800704e:	f000 fd65 	bl	8007b1c <__mcmp>
 8007052:	2800      	cmp	r0, #0
 8007054:	da53      	bge.n	80070fe <_dtoa_r+0x8f6>
 8007056:	1e7b      	subs	r3, r7, #1
 8007058:	4649      	mov	r1, r9
 800705a:	220a      	movs	r2, #10
 800705c:	4658      	mov	r0, fp
 800705e:	9304      	str	r3, [sp, #16]
 8007060:	2300      	movs	r3, #0
 8007062:	f000 faf7 	bl	8007654 <__multadd>
 8007066:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007068:	4681      	mov	r9, r0
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 8172 	beq.w	8007354 <_dtoa_r+0xb4c>
 8007070:	2300      	movs	r3, #0
 8007072:	4629      	mov	r1, r5
 8007074:	220a      	movs	r2, #10
 8007076:	4658      	mov	r0, fp
 8007078:	f000 faec 	bl	8007654 <__multadd>
 800707c:	9b00      	ldr	r3, [sp, #0]
 800707e:	4605      	mov	r5, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	dc67      	bgt.n	8007154 <_dtoa_r+0x94c>
 8007084:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007086:	2b02      	cmp	r3, #2
 8007088:	dc41      	bgt.n	800710e <_dtoa_r+0x906>
 800708a:	e063      	b.n	8007154 <_dtoa_r+0x94c>
 800708c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800708e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007092:	e746      	b.n	8006f22 <_dtoa_r+0x71a>
 8007094:	9b07      	ldr	r3, [sp, #28]
 8007096:	1e5c      	subs	r4, r3, #1
 8007098:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800709a:	42a3      	cmp	r3, r4
 800709c:	bfb7      	itett	lt
 800709e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80070a0:	1b1c      	subge	r4, r3, r4
 80070a2:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80070a4:	1ae3      	sublt	r3, r4, r3
 80070a6:	bfbe      	ittt	lt
 80070a8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80070aa:	2400      	movlt	r4, #0
 80070ac:	18d2      	addlt	r2, r2, r3
 80070ae:	9b07      	ldr	r3, [sp, #28]
 80070b0:	bfb8      	it	lt
 80070b2:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfb5      	itete	lt
 80070b8:	eba8 0603 	sublt.w	r6, r8, r3
 80070bc:	4646      	movge	r6, r8
 80070be:	2300      	movlt	r3, #0
 80070c0:	9b07      	ldrge	r3, [sp, #28]
 80070c2:	e730      	b.n	8006f26 <_dtoa_r+0x71e>
 80070c4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80070c6:	4646      	mov	r6, r8
 80070c8:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80070ca:	e735      	b.n	8006f38 <_dtoa_r+0x730>
 80070cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80070ce:	e75c      	b.n	8006f8a <_dtoa_r+0x782>
 80070d0:	2300      	movs	r3, #0
 80070d2:	e788      	b.n	8006fe6 <_dtoa_r+0x7de>
 80070d4:	3fe00000 	.word	0x3fe00000
 80070d8:	40240000 	.word	0x40240000
 80070dc:	40140000 	.word	0x40140000
 80070e0:	9b02      	ldr	r3, [sp, #8]
 80070e2:	e780      	b.n	8006fe6 <_dtoa_r+0x7de>
 80070e4:	2300      	movs	r3, #0
 80070e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80070e8:	e782      	b.n	8006ff0 <_dtoa_r+0x7e8>
 80070ea:	d099      	beq.n	8007020 <_dtoa_r+0x818>
 80070ec:	331c      	adds	r3, #28
 80070ee:	9a08      	ldr	r2, [sp, #32]
 80070f0:	441a      	add	r2, r3
 80070f2:	4498      	add	r8, r3
 80070f4:	441e      	add	r6, r3
 80070f6:	9208      	str	r2, [sp, #32]
 80070f8:	e792      	b.n	8007020 <_dtoa_r+0x818>
 80070fa:	4603      	mov	r3, r0
 80070fc:	e7f6      	b.n	80070ec <_dtoa_r+0x8e4>
 80070fe:	9b07      	ldr	r3, [sp, #28]
 8007100:	9704      	str	r7, [sp, #16]
 8007102:	2b00      	cmp	r3, #0
 8007104:	dc20      	bgt.n	8007148 <_dtoa_r+0x940>
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800710a:	2b02      	cmp	r3, #2
 800710c:	dd1e      	ble.n	800714c <_dtoa_r+0x944>
 800710e:	9b00      	ldr	r3, [sp, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	f47f aec0 	bne.w	8006e96 <_dtoa_r+0x68e>
 8007116:	4621      	mov	r1, r4
 8007118:	2205      	movs	r2, #5
 800711a:	4658      	mov	r0, fp
 800711c:	f000 fa9a 	bl	8007654 <__multadd>
 8007120:	4601      	mov	r1, r0
 8007122:	4604      	mov	r4, r0
 8007124:	4648      	mov	r0, r9
 8007126:	f000 fcf9 	bl	8007b1c <__mcmp>
 800712a:	2800      	cmp	r0, #0
 800712c:	f77f aeb3 	ble.w	8006e96 <_dtoa_r+0x68e>
 8007130:	2331      	movs	r3, #49	@ 0x31
 8007132:	4656      	mov	r6, sl
 8007134:	f806 3b01 	strb.w	r3, [r6], #1
 8007138:	9b04      	ldr	r3, [sp, #16]
 800713a:	3301      	adds	r3, #1
 800713c:	9304      	str	r3, [sp, #16]
 800713e:	e6ae      	b.n	8006e9e <_dtoa_r+0x696>
 8007140:	9c07      	ldr	r4, [sp, #28]
 8007142:	9704      	str	r7, [sp, #16]
 8007144:	4625      	mov	r5, r4
 8007146:	e7f3      	b.n	8007130 <_dtoa_r+0x928>
 8007148:	9b07      	ldr	r3, [sp, #28]
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800714e:	2b00      	cmp	r3, #0
 8007150:	f000 8104 	beq.w	800735c <_dtoa_r+0xb54>
 8007154:	2e00      	cmp	r6, #0
 8007156:	dd05      	ble.n	8007164 <_dtoa_r+0x95c>
 8007158:	4629      	mov	r1, r5
 800715a:	4632      	mov	r2, r6
 800715c:	4658      	mov	r0, fp
 800715e:	f000 fc71 	bl	8007a44 <__lshift>
 8007162:	4605      	mov	r5, r0
 8007164:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007166:	2b00      	cmp	r3, #0
 8007168:	d05a      	beq.n	8007220 <_dtoa_r+0xa18>
 800716a:	6869      	ldr	r1, [r5, #4]
 800716c:	4658      	mov	r0, fp
 800716e:	f000 fa0f 	bl	8007590 <_Balloc>
 8007172:	4606      	mov	r6, r0
 8007174:	b928      	cbnz	r0, 8007182 <_dtoa_r+0x97a>
 8007176:	4b84      	ldr	r3, [pc, #528]	@ (8007388 <_dtoa_r+0xb80>)
 8007178:	4602      	mov	r2, r0
 800717a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800717e:	f7ff bb5a 	b.w	8006836 <_dtoa_r+0x2e>
 8007182:	692a      	ldr	r2, [r5, #16]
 8007184:	f105 010c 	add.w	r1, r5, #12
 8007188:	300c      	adds	r0, #12
 800718a:	3202      	adds	r2, #2
 800718c:	0092      	lsls	r2, r2, #2
 800718e:	f001 ff81 	bl	8009094 <memcpy>
 8007192:	2201      	movs	r2, #1
 8007194:	4631      	mov	r1, r6
 8007196:	4658      	mov	r0, fp
 8007198:	f000 fc54 	bl	8007a44 <__lshift>
 800719c:	f10a 0301 	add.w	r3, sl, #1
 80071a0:	462f      	mov	r7, r5
 80071a2:	4605      	mov	r5, r0
 80071a4:	9307      	str	r3, [sp, #28]
 80071a6:	9b00      	ldr	r3, [sp, #0]
 80071a8:	4453      	add	r3, sl
 80071aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ac:	9b02      	ldr	r3, [sp, #8]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80071b4:	9b07      	ldr	r3, [sp, #28]
 80071b6:	4621      	mov	r1, r4
 80071b8:	4648      	mov	r0, r9
 80071ba:	3b01      	subs	r3, #1
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	f7ff fa95 	bl	80066ec <quorem>
 80071c2:	4639      	mov	r1, r7
 80071c4:	9002      	str	r0, [sp, #8]
 80071c6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80071ca:	4648      	mov	r0, r9
 80071cc:	f000 fca6 	bl	8007b1c <__mcmp>
 80071d0:	462a      	mov	r2, r5
 80071d2:	9008      	str	r0, [sp, #32]
 80071d4:	4621      	mov	r1, r4
 80071d6:	4658      	mov	r0, fp
 80071d8:	f000 fcbc 	bl	8007b54 <__mdiff>
 80071dc:	68c2      	ldr	r2, [r0, #12]
 80071de:	4606      	mov	r6, r0
 80071e0:	bb02      	cbnz	r2, 8007224 <_dtoa_r+0xa1c>
 80071e2:	4601      	mov	r1, r0
 80071e4:	4648      	mov	r0, r9
 80071e6:	f000 fc99 	bl	8007b1c <__mcmp>
 80071ea:	4602      	mov	r2, r0
 80071ec:	4631      	mov	r1, r6
 80071ee:	4658      	mov	r0, fp
 80071f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80071f2:	f000 fa0d 	bl	8007610 <_Bfree>
 80071f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071f8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071fa:	9e07      	ldr	r6, [sp, #28]
 80071fc:	ea43 0102 	orr.w	r1, r3, r2
 8007200:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007202:	4319      	orrs	r1, r3
 8007204:	d110      	bne.n	8007228 <_dtoa_r+0xa20>
 8007206:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800720a:	d029      	beq.n	8007260 <_dtoa_r+0xa58>
 800720c:	9b08      	ldr	r3, [sp, #32]
 800720e:	2b00      	cmp	r3, #0
 8007210:	dd02      	ble.n	8007218 <_dtoa_r+0xa10>
 8007212:	9b02      	ldr	r3, [sp, #8]
 8007214:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007218:	9b00      	ldr	r3, [sp, #0]
 800721a:	f883 8000 	strb.w	r8, [r3]
 800721e:	e63f      	b.n	8006ea0 <_dtoa_r+0x698>
 8007220:	4628      	mov	r0, r5
 8007222:	e7bb      	b.n	800719c <_dtoa_r+0x994>
 8007224:	2201      	movs	r2, #1
 8007226:	e7e1      	b.n	80071ec <_dtoa_r+0x9e4>
 8007228:	9b08      	ldr	r3, [sp, #32]
 800722a:	2b00      	cmp	r3, #0
 800722c:	db04      	blt.n	8007238 <_dtoa_r+0xa30>
 800722e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007230:	430b      	orrs	r3, r1
 8007232:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007234:	430b      	orrs	r3, r1
 8007236:	d120      	bne.n	800727a <_dtoa_r+0xa72>
 8007238:	2a00      	cmp	r2, #0
 800723a:	dded      	ble.n	8007218 <_dtoa_r+0xa10>
 800723c:	4649      	mov	r1, r9
 800723e:	2201      	movs	r2, #1
 8007240:	4658      	mov	r0, fp
 8007242:	f000 fbff 	bl	8007a44 <__lshift>
 8007246:	4621      	mov	r1, r4
 8007248:	4681      	mov	r9, r0
 800724a:	f000 fc67 	bl	8007b1c <__mcmp>
 800724e:	2800      	cmp	r0, #0
 8007250:	dc03      	bgt.n	800725a <_dtoa_r+0xa52>
 8007252:	d1e1      	bne.n	8007218 <_dtoa_r+0xa10>
 8007254:	f018 0f01 	tst.w	r8, #1
 8007258:	d0de      	beq.n	8007218 <_dtoa_r+0xa10>
 800725a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800725e:	d1d8      	bne.n	8007212 <_dtoa_r+0xa0a>
 8007260:	2339      	movs	r3, #57	@ 0x39
 8007262:	9a00      	ldr	r2, [sp, #0]
 8007264:	7013      	strb	r3, [r2, #0]
 8007266:	4633      	mov	r3, r6
 8007268:	461e      	mov	r6, r3
 800726a:	3b01      	subs	r3, #1
 800726c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007270:	2a39      	cmp	r2, #57	@ 0x39
 8007272:	d052      	beq.n	800731a <_dtoa_r+0xb12>
 8007274:	3201      	adds	r2, #1
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	e612      	b.n	8006ea0 <_dtoa_r+0x698>
 800727a:	2a00      	cmp	r2, #0
 800727c:	dd07      	ble.n	800728e <_dtoa_r+0xa86>
 800727e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007282:	d0ed      	beq.n	8007260 <_dtoa_r+0xa58>
 8007284:	f108 0301 	add.w	r3, r8, #1
 8007288:	9a00      	ldr	r2, [sp, #0]
 800728a:	7013      	strb	r3, [r2, #0]
 800728c:	e608      	b.n	8006ea0 <_dtoa_r+0x698>
 800728e:	9b07      	ldr	r3, [sp, #28]
 8007290:	9a07      	ldr	r2, [sp, #28]
 8007292:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007296:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007298:	4293      	cmp	r3, r2
 800729a:	d028      	beq.n	80072ee <_dtoa_r+0xae6>
 800729c:	4649      	mov	r1, r9
 800729e:	2300      	movs	r3, #0
 80072a0:	220a      	movs	r2, #10
 80072a2:	4658      	mov	r0, fp
 80072a4:	f000 f9d6 	bl	8007654 <__multadd>
 80072a8:	42af      	cmp	r7, r5
 80072aa:	4681      	mov	r9, r0
 80072ac:	f04f 0300 	mov.w	r3, #0
 80072b0:	f04f 020a 	mov.w	r2, #10
 80072b4:	4639      	mov	r1, r7
 80072b6:	4658      	mov	r0, fp
 80072b8:	d107      	bne.n	80072ca <_dtoa_r+0xac2>
 80072ba:	f000 f9cb 	bl	8007654 <__multadd>
 80072be:	4607      	mov	r7, r0
 80072c0:	4605      	mov	r5, r0
 80072c2:	9b07      	ldr	r3, [sp, #28]
 80072c4:	3301      	adds	r3, #1
 80072c6:	9307      	str	r3, [sp, #28]
 80072c8:	e774      	b.n	80071b4 <_dtoa_r+0x9ac>
 80072ca:	f000 f9c3 	bl	8007654 <__multadd>
 80072ce:	4629      	mov	r1, r5
 80072d0:	4607      	mov	r7, r0
 80072d2:	2300      	movs	r3, #0
 80072d4:	220a      	movs	r2, #10
 80072d6:	4658      	mov	r0, fp
 80072d8:	f000 f9bc 	bl	8007654 <__multadd>
 80072dc:	4605      	mov	r5, r0
 80072de:	e7f0      	b.n	80072c2 <_dtoa_r+0xaba>
 80072e0:	9b00      	ldr	r3, [sp, #0]
 80072e2:	2700      	movs	r7, #0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	bfcc      	ite	gt
 80072e8:	461e      	movgt	r6, r3
 80072ea:	2601      	movle	r6, #1
 80072ec:	4456      	add	r6, sl
 80072ee:	4649      	mov	r1, r9
 80072f0:	2201      	movs	r2, #1
 80072f2:	4658      	mov	r0, fp
 80072f4:	f000 fba6 	bl	8007a44 <__lshift>
 80072f8:	4621      	mov	r1, r4
 80072fa:	4681      	mov	r9, r0
 80072fc:	f000 fc0e 	bl	8007b1c <__mcmp>
 8007300:	2800      	cmp	r0, #0
 8007302:	dcb0      	bgt.n	8007266 <_dtoa_r+0xa5e>
 8007304:	d102      	bne.n	800730c <_dtoa_r+0xb04>
 8007306:	f018 0f01 	tst.w	r8, #1
 800730a:	d1ac      	bne.n	8007266 <_dtoa_r+0xa5e>
 800730c:	4633      	mov	r3, r6
 800730e:	461e      	mov	r6, r3
 8007310:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007314:	2a30      	cmp	r2, #48	@ 0x30
 8007316:	d0fa      	beq.n	800730e <_dtoa_r+0xb06>
 8007318:	e5c2      	b.n	8006ea0 <_dtoa_r+0x698>
 800731a:	459a      	cmp	sl, r3
 800731c:	d1a4      	bne.n	8007268 <_dtoa_r+0xa60>
 800731e:	9b04      	ldr	r3, [sp, #16]
 8007320:	3301      	adds	r3, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	2331      	movs	r3, #49	@ 0x31
 8007326:	f88a 3000 	strb.w	r3, [sl]
 800732a:	e5b9      	b.n	8006ea0 <_dtoa_r+0x698>
 800732c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800732e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800738c <_dtoa_r+0xb84>
 8007332:	b11b      	cbz	r3, 800733c <_dtoa_r+0xb34>
 8007334:	f10a 0308 	add.w	r3, sl, #8
 8007338:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800733a:	6013      	str	r3, [r2, #0]
 800733c:	4650      	mov	r0, sl
 800733e:	b019      	add	sp, #100	@ 0x64
 8007340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007344:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007346:	2b01      	cmp	r3, #1
 8007348:	f77f ae37 	ble.w	8006fba <_dtoa_r+0x7b2>
 800734c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800734e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007350:	2001      	movs	r0, #1
 8007352:	e655      	b.n	8007000 <_dtoa_r+0x7f8>
 8007354:	9b00      	ldr	r3, [sp, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f77f aed6 	ble.w	8007108 <_dtoa_r+0x900>
 800735c:	4656      	mov	r6, sl
 800735e:	4621      	mov	r1, r4
 8007360:	4648      	mov	r0, r9
 8007362:	f7ff f9c3 	bl	80066ec <quorem>
 8007366:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800736a:	9b00      	ldr	r3, [sp, #0]
 800736c:	f806 8b01 	strb.w	r8, [r6], #1
 8007370:	eba6 020a 	sub.w	r2, r6, sl
 8007374:	4293      	cmp	r3, r2
 8007376:	ddb3      	ble.n	80072e0 <_dtoa_r+0xad8>
 8007378:	4649      	mov	r1, r9
 800737a:	2300      	movs	r3, #0
 800737c:	220a      	movs	r2, #10
 800737e:	4658      	mov	r0, fp
 8007380:	f000 f968 	bl	8007654 <__multadd>
 8007384:	4681      	mov	r9, r0
 8007386:	e7ea      	b.n	800735e <_dtoa_r+0xb56>
 8007388:	08009f0d 	.word	0x08009f0d
 800738c:	08009e91 	.word	0x08009e91

08007390 <_free_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4605      	mov	r5, r0
 8007394:	2900      	cmp	r1, #0
 8007396:	d041      	beq.n	800741c <_free_r+0x8c>
 8007398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800739c:	1f0c      	subs	r4, r1, #4
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfb8      	it	lt
 80073a2:	18e4      	addlt	r4, r4, r3
 80073a4:	f000 f8e8 	bl	8007578 <__malloc_lock>
 80073a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007420 <_free_r+0x90>)
 80073aa:	6813      	ldr	r3, [r2, #0]
 80073ac:	b933      	cbnz	r3, 80073bc <_free_r+0x2c>
 80073ae:	6063      	str	r3, [r4, #4]
 80073b0:	6014      	str	r4, [r2, #0]
 80073b2:	4628      	mov	r0, r5
 80073b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073b8:	f000 b8e4 	b.w	8007584 <__malloc_unlock>
 80073bc:	42a3      	cmp	r3, r4
 80073be:	d908      	bls.n	80073d2 <_free_r+0x42>
 80073c0:	6820      	ldr	r0, [r4, #0]
 80073c2:	1821      	adds	r1, r4, r0
 80073c4:	428b      	cmp	r3, r1
 80073c6:	bf01      	itttt	eq
 80073c8:	6819      	ldreq	r1, [r3, #0]
 80073ca:	685b      	ldreq	r3, [r3, #4]
 80073cc:	1809      	addeq	r1, r1, r0
 80073ce:	6021      	streq	r1, [r4, #0]
 80073d0:	e7ed      	b.n	80073ae <_free_r+0x1e>
 80073d2:	461a      	mov	r2, r3
 80073d4:	685b      	ldr	r3, [r3, #4]
 80073d6:	b10b      	cbz	r3, 80073dc <_free_r+0x4c>
 80073d8:	42a3      	cmp	r3, r4
 80073da:	d9fa      	bls.n	80073d2 <_free_r+0x42>
 80073dc:	6811      	ldr	r1, [r2, #0]
 80073de:	1850      	adds	r0, r2, r1
 80073e0:	42a0      	cmp	r0, r4
 80073e2:	d10b      	bne.n	80073fc <_free_r+0x6c>
 80073e4:	6820      	ldr	r0, [r4, #0]
 80073e6:	4401      	add	r1, r0
 80073e8:	1850      	adds	r0, r2, r1
 80073ea:	6011      	str	r1, [r2, #0]
 80073ec:	4283      	cmp	r3, r0
 80073ee:	d1e0      	bne.n	80073b2 <_free_r+0x22>
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	685b      	ldr	r3, [r3, #4]
 80073f4:	4408      	add	r0, r1
 80073f6:	6053      	str	r3, [r2, #4]
 80073f8:	6010      	str	r0, [r2, #0]
 80073fa:	e7da      	b.n	80073b2 <_free_r+0x22>
 80073fc:	d902      	bls.n	8007404 <_free_r+0x74>
 80073fe:	230c      	movs	r3, #12
 8007400:	602b      	str	r3, [r5, #0]
 8007402:	e7d6      	b.n	80073b2 <_free_r+0x22>
 8007404:	6820      	ldr	r0, [r4, #0]
 8007406:	1821      	adds	r1, r4, r0
 8007408:	428b      	cmp	r3, r1
 800740a:	bf02      	ittt	eq
 800740c:	6819      	ldreq	r1, [r3, #0]
 800740e:	685b      	ldreq	r3, [r3, #4]
 8007410:	1809      	addeq	r1, r1, r0
 8007412:	6063      	str	r3, [r4, #4]
 8007414:	bf08      	it	eq
 8007416:	6021      	streq	r1, [r4, #0]
 8007418:	6054      	str	r4, [r2, #4]
 800741a:	e7ca      	b.n	80073b2 <_free_r+0x22>
 800741c:	bd38      	pop	{r3, r4, r5, pc}
 800741e:	bf00      	nop
 8007420:	20000498 	.word	0x20000498

08007424 <malloc>:
 8007424:	4b02      	ldr	r3, [pc, #8]	@ (8007430 <malloc+0xc>)
 8007426:	4601      	mov	r1, r0
 8007428:	6818      	ldr	r0, [r3, #0]
 800742a:	f000 b825 	b.w	8007478 <_malloc_r>
 800742e:	bf00      	nop
 8007430:	20000020 	.word	0x20000020

08007434 <sbrk_aligned>:
 8007434:	b570      	push	{r4, r5, r6, lr}
 8007436:	4e0f      	ldr	r6, [pc, #60]	@ (8007474 <sbrk_aligned+0x40>)
 8007438:	460c      	mov	r4, r1
 800743a:	4605      	mov	r5, r0
 800743c:	6831      	ldr	r1, [r6, #0]
 800743e:	b911      	cbnz	r1, 8007446 <sbrk_aligned+0x12>
 8007440:	f001 fe18 	bl	8009074 <_sbrk_r>
 8007444:	6030      	str	r0, [r6, #0]
 8007446:	4621      	mov	r1, r4
 8007448:	4628      	mov	r0, r5
 800744a:	f001 fe13 	bl	8009074 <_sbrk_r>
 800744e:	1c43      	adds	r3, r0, #1
 8007450:	d103      	bne.n	800745a <sbrk_aligned+0x26>
 8007452:	f04f 34ff 	mov.w	r4, #4294967295
 8007456:	4620      	mov	r0, r4
 8007458:	bd70      	pop	{r4, r5, r6, pc}
 800745a:	1cc4      	adds	r4, r0, #3
 800745c:	f024 0403 	bic.w	r4, r4, #3
 8007460:	42a0      	cmp	r0, r4
 8007462:	d0f8      	beq.n	8007456 <sbrk_aligned+0x22>
 8007464:	1a21      	subs	r1, r4, r0
 8007466:	4628      	mov	r0, r5
 8007468:	f001 fe04 	bl	8009074 <_sbrk_r>
 800746c:	3001      	adds	r0, #1
 800746e:	d1f2      	bne.n	8007456 <sbrk_aligned+0x22>
 8007470:	e7ef      	b.n	8007452 <sbrk_aligned+0x1e>
 8007472:	bf00      	nop
 8007474:	20000494 	.word	0x20000494

08007478 <_malloc_r>:
 8007478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800747c:	1ccd      	adds	r5, r1, #3
 800747e:	4606      	mov	r6, r0
 8007480:	f025 0503 	bic.w	r5, r5, #3
 8007484:	3508      	adds	r5, #8
 8007486:	2d0c      	cmp	r5, #12
 8007488:	bf38      	it	cc
 800748a:	250c      	movcc	r5, #12
 800748c:	2d00      	cmp	r5, #0
 800748e:	db01      	blt.n	8007494 <_malloc_r+0x1c>
 8007490:	42a9      	cmp	r1, r5
 8007492:	d904      	bls.n	800749e <_malloc_r+0x26>
 8007494:	230c      	movs	r3, #12
 8007496:	6033      	str	r3, [r6, #0]
 8007498:	2000      	movs	r0, #0
 800749a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800749e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007574 <_malloc_r+0xfc>
 80074a2:	f000 f869 	bl	8007578 <__malloc_lock>
 80074a6:	f8d8 3000 	ldr.w	r3, [r8]
 80074aa:	461c      	mov	r4, r3
 80074ac:	bb44      	cbnz	r4, 8007500 <_malloc_r+0x88>
 80074ae:	4629      	mov	r1, r5
 80074b0:	4630      	mov	r0, r6
 80074b2:	f7ff ffbf 	bl	8007434 <sbrk_aligned>
 80074b6:	1c43      	adds	r3, r0, #1
 80074b8:	4604      	mov	r4, r0
 80074ba:	d158      	bne.n	800756e <_malloc_r+0xf6>
 80074bc:	f8d8 4000 	ldr.w	r4, [r8]
 80074c0:	4627      	mov	r7, r4
 80074c2:	2f00      	cmp	r7, #0
 80074c4:	d143      	bne.n	800754e <_malloc_r+0xd6>
 80074c6:	2c00      	cmp	r4, #0
 80074c8:	d04b      	beq.n	8007562 <_malloc_r+0xea>
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	4639      	mov	r1, r7
 80074ce:	4630      	mov	r0, r6
 80074d0:	eb04 0903 	add.w	r9, r4, r3
 80074d4:	f001 fdce 	bl	8009074 <_sbrk_r>
 80074d8:	4581      	cmp	r9, r0
 80074da:	d142      	bne.n	8007562 <_malloc_r+0xea>
 80074dc:	6821      	ldr	r1, [r4, #0]
 80074de:	4630      	mov	r0, r6
 80074e0:	1a6d      	subs	r5, r5, r1
 80074e2:	4629      	mov	r1, r5
 80074e4:	f7ff ffa6 	bl	8007434 <sbrk_aligned>
 80074e8:	3001      	adds	r0, #1
 80074ea:	d03a      	beq.n	8007562 <_malloc_r+0xea>
 80074ec:	6823      	ldr	r3, [r4, #0]
 80074ee:	442b      	add	r3, r5
 80074f0:	6023      	str	r3, [r4, #0]
 80074f2:	f8d8 3000 	ldr.w	r3, [r8]
 80074f6:	685a      	ldr	r2, [r3, #4]
 80074f8:	bb62      	cbnz	r2, 8007554 <_malloc_r+0xdc>
 80074fa:	f8c8 7000 	str.w	r7, [r8]
 80074fe:	e00f      	b.n	8007520 <_malloc_r+0xa8>
 8007500:	6822      	ldr	r2, [r4, #0]
 8007502:	1b52      	subs	r2, r2, r5
 8007504:	d420      	bmi.n	8007548 <_malloc_r+0xd0>
 8007506:	2a0b      	cmp	r2, #11
 8007508:	d917      	bls.n	800753a <_malloc_r+0xc2>
 800750a:	1961      	adds	r1, r4, r5
 800750c:	42a3      	cmp	r3, r4
 800750e:	6025      	str	r5, [r4, #0]
 8007510:	bf18      	it	ne
 8007512:	6059      	strne	r1, [r3, #4]
 8007514:	6863      	ldr	r3, [r4, #4]
 8007516:	bf08      	it	eq
 8007518:	f8c8 1000 	streq.w	r1, [r8]
 800751c:	5162      	str	r2, [r4, r5]
 800751e:	604b      	str	r3, [r1, #4]
 8007520:	4630      	mov	r0, r6
 8007522:	f000 f82f 	bl	8007584 <__malloc_unlock>
 8007526:	f104 000b 	add.w	r0, r4, #11
 800752a:	1d23      	adds	r3, r4, #4
 800752c:	f020 0007 	bic.w	r0, r0, #7
 8007530:	1ac2      	subs	r2, r0, r3
 8007532:	bf1c      	itt	ne
 8007534:	1a1b      	subne	r3, r3, r0
 8007536:	50a3      	strne	r3, [r4, r2]
 8007538:	e7af      	b.n	800749a <_malloc_r+0x22>
 800753a:	6862      	ldr	r2, [r4, #4]
 800753c:	42a3      	cmp	r3, r4
 800753e:	bf0c      	ite	eq
 8007540:	f8c8 2000 	streq.w	r2, [r8]
 8007544:	605a      	strne	r2, [r3, #4]
 8007546:	e7eb      	b.n	8007520 <_malloc_r+0xa8>
 8007548:	4623      	mov	r3, r4
 800754a:	6864      	ldr	r4, [r4, #4]
 800754c:	e7ae      	b.n	80074ac <_malloc_r+0x34>
 800754e:	463c      	mov	r4, r7
 8007550:	687f      	ldr	r7, [r7, #4]
 8007552:	e7b6      	b.n	80074c2 <_malloc_r+0x4a>
 8007554:	461a      	mov	r2, r3
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	42a3      	cmp	r3, r4
 800755a:	d1fb      	bne.n	8007554 <_malloc_r+0xdc>
 800755c:	2300      	movs	r3, #0
 800755e:	6053      	str	r3, [r2, #4]
 8007560:	e7de      	b.n	8007520 <_malloc_r+0xa8>
 8007562:	230c      	movs	r3, #12
 8007564:	4630      	mov	r0, r6
 8007566:	6033      	str	r3, [r6, #0]
 8007568:	f000 f80c 	bl	8007584 <__malloc_unlock>
 800756c:	e794      	b.n	8007498 <_malloc_r+0x20>
 800756e:	6005      	str	r5, [r0, #0]
 8007570:	e7d6      	b.n	8007520 <_malloc_r+0xa8>
 8007572:	bf00      	nop
 8007574:	20000498 	.word	0x20000498

08007578 <__malloc_lock>:
 8007578:	4801      	ldr	r0, [pc, #4]	@ (8007580 <__malloc_lock+0x8>)
 800757a:	f7ff b8a0 	b.w	80066be <__retarget_lock_acquire_recursive>
 800757e:	bf00      	nop
 8007580:	20000490 	.word	0x20000490

08007584 <__malloc_unlock>:
 8007584:	4801      	ldr	r0, [pc, #4]	@ (800758c <__malloc_unlock+0x8>)
 8007586:	f7ff b89b 	b.w	80066c0 <__retarget_lock_release_recursive>
 800758a:	bf00      	nop
 800758c:	20000490 	.word	0x20000490

08007590 <_Balloc>:
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	69c6      	ldr	r6, [r0, #28]
 8007594:	4604      	mov	r4, r0
 8007596:	460d      	mov	r5, r1
 8007598:	b976      	cbnz	r6, 80075b8 <_Balloc+0x28>
 800759a:	2010      	movs	r0, #16
 800759c:	f7ff ff42 	bl	8007424 <malloc>
 80075a0:	4602      	mov	r2, r0
 80075a2:	61e0      	str	r0, [r4, #28]
 80075a4:	b920      	cbnz	r0, 80075b0 <_Balloc+0x20>
 80075a6:	4b18      	ldr	r3, [pc, #96]	@ (8007608 <_Balloc+0x78>)
 80075a8:	216b      	movs	r1, #107	@ 0x6b
 80075aa:	4818      	ldr	r0, [pc, #96]	@ (800760c <_Balloc+0x7c>)
 80075ac:	f001 fd88 	bl	80090c0 <__assert_func>
 80075b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075b4:	6006      	str	r6, [r0, #0]
 80075b6:	60c6      	str	r6, [r0, #12]
 80075b8:	69e6      	ldr	r6, [r4, #28]
 80075ba:	68f3      	ldr	r3, [r6, #12]
 80075bc:	b183      	cbz	r3, 80075e0 <_Balloc+0x50>
 80075be:	69e3      	ldr	r3, [r4, #28]
 80075c0:	68db      	ldr	r3, [r3, #12]
 80075c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80075c6:	b9b8      	cbnz	r0, 80075f8 <_Balloc+0x68>
 80075c8:	2101      	movs	r1, #1
 80075ca:	4620      	mov	r0, r4
 80075cc:	fa01 f605 	lsl.w	r6, r1, r5
 80075d0:	1d72      	adds	r2, r6, #5
 80075d2:	0092      	lsls	r2, r2, #2
 80075d4:	f001 fd92 	bl	80090fc <_calloc_r>
 80075d8:	b160      	cbz	r0, 80075f4 <_Balloc+0x64>
 80075da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075de:	e00e      	b.n	80075fe <_Balloc+0x6e>
 80075e0:	2221      	movs	r2, #33	@ 0x21
 80075e2:	2104      	movs	r1, #4
 80075e4:	4620      	mov	r0, r4
 80075e6:	f001 fd89 	bl	80090fc <_calloc_r>
 80075ea:	69e3      	ldr	r3, [r4, #28]
 80075ec:	60f0      	str	r0, [r6, #12]
 80075ee:	68db      	ldr	r3, [r3, #12]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e4      	bne.n	80075be <_Balloc+0x2e>
 80075f4:	2000      	movs	r0, #0
 80075f6:	bd70      	pop	{r4, r5, r6, pc}
 80075f8:	6802      	ldr	r2, [r0, #0]
 80075fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075fe:	2300      	movs	r3, #0
 8007600:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007604:	e7f7      	b.n	80075f6 <_Balloc+0x66>
 8007606:	bf00      	nop
 8007608:	08009e9e 	.word	0x08009e9e
 800760c:	08009f1e 	.word	0x08009f1e

08007610 <_Bfree>:
 8007610:	b570      	push	{r4, r5, r6, lr}
 8007612:	69c6      	ldr	r6, [r0, #28]
 8007614:	4605      	mov	r5, r0
 8007616:	460c      	mov	r4, r1
 8007618:	b976      	cbnz	r6, 8007638 <_Bfree+0x28>
 800761a:	2010      	movs	r0, #16
 800761c:	f7ff ff02 	bl	8007424 <malloc>
 8007620:	4602      	mov	r2, r0
 8007622:	61e8      	str	r0, [r5, #28]
 8007624:	b920      	cbnz	r0, 8007630 <_Bfree+0x20>
 8007626:	4b09      	ldr	r3, [pc, #36]	@ (800764c <_Bfree+0x3c>)
 8007628:	218f      	movs	r1, #143	@ 0x8f
 800762a:	4809      	ldr	r0, [pc, #36]	@ (8007650 <_Bfree+0x40>)
 800762c:	f001 fd48 	bl	80090c0 <__assert_func>
 8007630:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007634:	6006      	str	r6, [r0, #0]
 8007636:	60c6      	str	r6, [r0, #12]
 8007638:	b13c      	cbz	r4, 800764a <_Bfree+0x3a>
 800763a:	69eb      	ldr	r3, [r5, #28]
 800763c:	6862      	ldr	r2, [r4, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007644:	6021      	str	r1, [r4, #0]
 8007646:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800764a:	bd70      	pop	{r4, r5, r6, pc}
 800764c:	08009e9e 	.word	0x08009e9e
 8007650:	08009f1e 	.word	0x08009f1e

08007654 <__multadd>:
 8007654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007658:	f101 0c14 	add.w	ip, r1, #20
 800765c:	4607      	mov	r7, r0
 800765e:	460c      	mov	r4, r1
 8007660:	461e      	mov	r6, r3
 8007662:	690d      	ldr	r5, [r1, #16]
 8007664:	2000      	movs	r0, #0
 8007666:	f8dc 3000 	ldr.w	r3, [ip]
 800766a:	3001      	adds	r0, #1
 800766c:	b299      	uxth	r1, r3
 800766e:	4285      	cmp	r5, r0
 8007670:	fb02 6101 	mla	r1, r2, r1, r6
 8007674:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007678:	ea4f 4311 	mov.w	r3, r1, lsr #16
 800767c:	b289      	uxth	r1, r1
 800767e:	fb02 3306 	mla	r3, r2, r6, r3
 8007682:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007686:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800768a:	f84c 1b04 	str.w	r1, [ip], #4
 800768e:	dcea      	bgt.n	8007666 <__multadd+0x12>
 8007690:	b30e      	cbz	r6, 80076d6 <__multadd+0x82>
 8007692:	68a3      	ldr	r3, [r4, #8]
 8007694:	42ab      	cmp	r3, r5
 8007696:	dc19      	bgt.n	80076cc <__multadd+0x78>
 8007698:	6861      	ldr	r1, [r4, #4]
 800769a:	4638      	mov	r0, r7
 800769c:	3101      	adds	r1, #1
 800769e:	f7ff ff77 	bl	8007590 <_Balloc>
 80076a2:	4680      	mov	r8, r0
 80076a4:	b928      	cbnz	r0, 80076b2 <__multadd+0x5e>
 80076a6:	4602      	mov	r2, r0
 80076a8:	4b0c      	ldr	r3, [pc, #48]	@ (80076dc <__multadd+0x88>)
 80076aa:	21ba      	movs	r1, #186	@ 0xba
 80076ac:	480c      	ldr	r0, [pc, #48]	@ (80076e0 <__multadd+0x8c>)
 80076ae:	f001 fd07 	bl	80090c0 <__assert_func>
 80076b2:	6922      	ldr	r2, [r4, #16]
 80076b4:	f104 010c 	add.w	r1, r4, #12
 80076b8:	300c      	adds	r0, #12
 80076ba:	3202      	adds	r2, #2
 80076bc:	0092      	lsls	r2, r2, #2
 80076be:	f001 fce9 	bl	8009094 <memcpy>
 80076c2:	4621      	mov	r1, r4
 80076c4:	4644      	mov	r4, r8
 80076c6:	4638      	mov	r0, r7
 80076c8:	f7ff ffa2 	bl	8007610 <_Bfree>
 80076cc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80076d0:	3501      	adds	r5, #1
 80076d2:	615e      	str	r6, [r3, #20]
 80076d4:	6125      	str	r5, [r4, #16]
 80076d6:	4620      	mov	r0, r4
 80076d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076dc:	08009f0d 	.word	0x08009f0d
 80076e0:	08009f1e 	.word	0x08009f1e

080076e4 <__s2b>:
 80076e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e8:	4615      	mov	r5, r2
 80076ea:	461f      	mov	r7, r3
 80076ec:	2209      	movs	r2, #9
 80076ee:	3308      	adds	r3, #8
 80076f0:	460c      	mov	r4, r1
 80076f2:	4606      	mov	r6, r0
 80076f4:	2100      	movs	r1, #0
 80076f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80076fa:	2201      	movs	r2, #1
 80076fc:	429a      	cmp	r2, r3
 80076fe:	db09      	blt.n	8007714 <__s2b+0x30>
 8007700:	4630      	mov	r0, r6
 8007702:	f7ff ff45 	bl	8007590 <_Balloc>
 8007706:	b940      	cbnz	r0, 800771a <__s2b+0x36>
 8007708:	4602      	mov	r2, r0
 800770a:	4b19      	ldr	r3, [pc, #100]	@ (8007770 <__s2b+0x8c>)
 800770c:	21d3      	movs	r1, #211	@ 0xd3
 800770e:	4819      	ldr	r0, [pc, #100]	@ (8007774 <__s2b+0x90>)
 8007710:	f001 fcd6 	bl	80090c0 <__assert_func>
 8007714:	0052      	lsls	r2, r2, #1
 8007716:	3101      	adds	r1, #1
 8007718:	e7f0      	b.n	80076fc <__s2b+0x18>
 800771a:	9b08      	ldr	r3, [sp, #32]
 800771c:	2d09      	cmp	r5, #9
 800771e:	6143      	str	r3, [r0, #20]
 8007720:	f04f 0301 	mov.w	r3, #1
 8007724:	6103      	str	r3, [r0, #16]
 8007726:	dd16      	ble.n	8007756 <__s2b+0x72>
 8007728:	f104 0909 	add.w	r9, r4, #9
 800772c:	442c      	add	r4, r5
 800772e:	46c8      	mov	r8, r9
 8007730:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007734:	4601      	mov	r1, r0
 8007736:	220a      	movs	r2, #10
 8007738:	4630      	mov	r0, r6
 800773a:	3b30      	subs	r3, #48	@ 0x30
 800773c:	f7ff ff8a 	bl	8007654 <__multadd>
 8007740:	45a0      	cmp	r8, r4
 8007742:	d1f5      	bne.n	8007730 <__s2b+0x4c>
 8007744:	f1a5 0408 	sub.w	r4, r5, #8
 8007748:	444c      	add	r4, r9
 800774a:	1b2d      	subs	r5, r5, r4
 800774c:	1963      	adds	r3, r4, r5
 800774e:	42bb      	cmp	r3, r7
 8007750:	db04      	blt.n	800775c <__s2b+0x78>
 8007752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007756:	340a      	adds	r4, #10
 8007758:	2509      	movs	r5, #9
 800775a:	e7f6      	b.n	800774a <__s2b+0x66>
 800775c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007760:	4601      	mov	r1, r0
 8007762:	220a      	movs	r2, #10
 8007764:	4630      	mov	r0, r6
 8007766:	3b30      	subs	r3, #48	@ 0x30
 8007768:	f7ff ff74 	bl	8007654 <__multadd>
 800776c:	e7ee      	b.n	800774c <__s2b+0x68>
 800776e:	bf00      	nop
 8007770:	08009f0d 	.word	0x08009f0d
 8007774:	08009f1e 	.word	0x08009f1e

08007778 <__hi0bits>:
 8007778:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800777c:	4603      	mov	r3, r0
 800777e:	bf36      	itet	cc
 8007780:	0403      	lslcc	r3, r0, #16
 8007782:	2000      	movcs	r0, #0
 8007784:	2010      	movcc	r0, #16
 8007786:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800778a:	bf3c      	itt	cc
 800778c:	021b      	lslcc	r3, r3, #8
 800778e:	3008      	addcc	r0, #8
 8007790:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007794:	bf3c      	itt	cc
 8007796:	011b      	lslcc	r3, r3, #4
 8007798:	3004      	addcc	r0, #4
 800779a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800779e:	bf3c      	itt	cc
 80077a0:	009b      	lslcc	r3, r3, #2
 80077a2:	3002      	addcc	r0, #2
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	db05      	blt.n	80077b4 <__hi0bits+0x3c>
 80077a8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80077ac:	f100 0001 	add.w	r0, r0, #1
 80077b0:	bf08      	it	eq
 80077b2:	2020      	moveq	r0, #32
 80077b4:	4770      	bx	lr

080077b6 <__lo0bits>:
 80077b6:	6803      	ldr	r3, [r0, #0]
 80077b8:	4602      	mov	r2, r0
 80077ba:	f013 0007 	ands.w	r0, r3, #7
 80077be:	d00b      	beq.n	80077d8 <__lo0bits+0x22>
 80077c0:	07d9      	lsls	r1, r3, #31
 80077c2:	d421      	bmi.n	8007808 <__lo0bits+0x52>
 80077c4:	0798      	lsls	r0, r3, #30
 80077c6:	bf47      	ittee	mi
 80077c8:	085b      	lsrmi	r3, r3, #1
 80077ca:	2001      	movmi	r0, #1
 80077cc:	089b      	lsrpl	r3, r3, #2
 80077ce:	2002      	movpl	r0, #2
 80077d0:	bf4c      	ite	mi
 80077d2:	6013      	strmi	r3, [r2, #0]
 80077d4:	6013      	strpl	r3, [r2, #0]
 80077d6:	4770      	bx	lr
 80077d8:	b299      	uxth	r1, r3
 80077da:	b909      	cbnz	r1, 80077e0 <__lo0bits+0x2a>
 80077dc:	0c1b      	lsrs	r3, r3, #16
 80077de:	2010      	movs	r0, #16
 80077e0:	b2d9      	uxtb	r1, r3
 80077e2:	b909      	cbnz	r1, 80077e8 <__lo0bits+0x32>
 80077e4:	3008      	adds	r0, #8
 80077e6:	0a1b      	lsrs	r3, r3, #8
 80077e8:	0719      	lsls	r1, r3, #28
 80077ea:	bf04      	itt	eq
 80077ec:	091b      	lsreq	r3, r3, #4
 80077ee:	3004      	addeq	r0, #4
 80077f0:	0799      	lsls	r1, r3, #30
 80077f2:	bf04      	itt	eq
 80077f4:	089b      	lsreq	r3, r3, #2
 80077f6:	3002      	addeq	r0, #2
 80077f8:	07d9      	lsls	r1, r3, #31
 80077fa:	d403      	bmi.n	8007804 <__lo0bits+0x4e>
 80077fc:	085b      	lsrs	r3, r3, #1
 80077fe:	f100 0001 	add.w	r0, r0, #1
 8007802:	d003      	beq.n	800780c <__lo0bits+0x56>
 8007804:	6013      	str	r3, [r2, #0]
 8007806:	4770      	bx	lr
 8007808:	2000      	movs	r0, #0
 800780a:	4770      	bx	lr
 800780c:	2020      	movs	r0, #32
 800780e:	4770      	bx	lr

08007810 <__i2b>:
 8007810:	b510      	push	{r4, lr}
 8007812:	460c      	mov	r4, r1
 8007814:	2101      	movs	r1, #1
 8007816:	f7ff febb 	bl	8007590 <_Balloc>
 800781a:	4602      	mov	r2, r0
 800781c:	b928      	cbnz	r0, 800782a <__i2b+0x1a>
 800781e:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <__i2b+0x24>)
 8007820:	f240 1145 	movw	r1, #325	@ 0x145
 8007824:	4804      	ldr	r0, [pc, #16]	@ (8007838 <__i2b+0x28>)
 8007826:	f001 fc4b 	bl	80090c0 <__assert_func>
 800782a:	2301      	movs	r3, #1
 800782c:	6144      	str	r4, [r0, #20]
 800782e:	6103      	str	r3, [r0, #16]
 8007830:	bd10      	pop	{r4, pc}
 8007832:	bf00      	nop
 8007834:	08009f0d 	.word	0x08009f0d
 8007838:	08009f1e 	.word	0x08009f1e

0800783c <__multiply>:
 800783c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007840:	4614      	mov	r4, r2
 8007842:	690a      	ldr	r2, [r1, #16]
 8007844:	460f      	mov	r7, r1
 8007846:	b085      	sub	sp, #20
 8007848:	6923      	ldr	r3, [r4, #16]
 800784a:	429a      	cmp	r2, r3
 800784c:	bfa2      	ittt	ge
 800784e:	4623      	movge	r3, r4
 8007850:	460c      	movge	r4, r1
 8007852:	461f      	movge	r7, r3
 8007854:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007858:	68a3      	ldr	r3, [r4, #8]
 800785a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800785e:	6861      	ldr	r1, [r4, #4]
 8007860:	eb0a 0609 	add.w	r6, sl, r9
 8007864:	42b3      	cmp	r3, r6
 8007866:	bfb8      	it	lt
 8007868:	3101      	addlt	r1, #1
 800786a:	f7ff fe91 	bl	8007590 <_Balloc>
 800786e:	b930      	cbnz	r0, 800787e <__multiply+0x42>
 8007870:	4602      	mov	r2, r0
 8007872:	4b45      	ldr	r3, [pc, #276]	@ (8007988 <__multiply+0x14c>)
 8007874:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007878:	4844      	ldr	r0, [pc, #272]	@ (800798c <__multiply+0x150>)
 800787a:	f001 fc21 	bl	80090c0 <__assert_func>
 800787e:	f100 0514 	add.w	r5, r0, #20
 8007882:	2200      	movs	r2, #0
 8007884:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007888:	462b      	mov	r3, r5
 800788a:	4543      	cmp	r3, r8
 800788c:	d321      	bcc.n	80078d2 <__multiply+0x96>
 800788e:	f107 0114 	add.w	r1, r7, #20
 8007892:	f104 0214 	add.w	r2, r4, #20
 8007896:	f104 0715 	add.w	r7, r4, #21
 800789a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800789e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80078a2:	9302      	str	r3, [sp, #8]
 80078a4:	1b13      	subs	r3, r2, r4
 80078a6:	3b15      	subs	r3, #21
 80078a8:	f023 0303 	bic.w	r3, r3, #3
 80078ac:	3304      	adds	r3, #4
 80078ae:	42ba      	cmp	r2, r7
 80078b0:	bf38      	it	cc
 80078b2:	2304      	movcc	r3, #4
 80078b4:	9301      	str	r3, [sp, #4]
 80078b6:	9b02      	ldr	r3, [sp, #8]
 80078b8:	9103      	str	r1, [sp, #12]
 80078ba:	428b      	cmp	r3, r1
 80078bc:	d80c      	bhi.n	80078d8 <__multiply+0x9c>
 80078be:	2e00      	cmp	r6, #0
 80078c0:	dd03      	ble.n	80078ca <__multiply+0x8e>
 80078c2:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d05b      	beq.n	8007982 <__multiply+0x146>
 80078ca:	6106      	str	r6, [r0, #16]
 80078cc:	b005      	add	sp, #20
 80078ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078d2:	f843 2b04 	str.w	r2, [r3], #4
 80078d6:	e7d8      	b.n	800788a <__multiply+0x4e>
 80078d8:	f8b1 a000 	ldrh.w	sl, [r1]
 80078dc:	f1ba 0f00 	cmp.w	sl, #0
 80078e0:	d024      	beq.n	800792c <__multiply+0xf0>
 80078e2:	f104 0e14 	add.w	lr, r4, #20
 80078e6:	46a9      	mov	r9, r5
 80078e8:	f04f 0c00 	mov.w	ip, #0
 80078ec:	f85e 7b04 	ldr.w	r7, [lr], #4
 80078f0:	f8d9 3000 	ldr.w	r3, [r9]
 80078f4:	fa1f fb87 	uxth.w	fp, r7
 80078f8:	4572      	cmp	r2, lr
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	fb0a 330b 	mla	r3, sl, fp, r3
 8007900:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007904:	f8d9 7000 	ldr.w	r7, [r9]
 8007908:	4463      	add	r3, ip
 800790a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800790e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007912:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007916:	b29b      	uxth	r3, r3
 8007918:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800791c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007920:	f849 3b04 	str.w	r3, [r9], #4
 8007924:	d8e2      	bhi.n	80078ec <__multiply+0xb0>
 8007926:	9b01      	ldr	r3, [sp, #4]
 8007928:	f845 c003 	str.w	ip, [r5, r3]
 800792c:	9b03      	ldr	r3, [sp, #12]
 800792e:	3104      	adds	r1, #4
 8007930:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007934:	f1b9 0f00 	cmp.w	r9, #0
 8007938:	d021      	beq.n	800797e <__multiply+0x142>
 800793a:	682b      	ldr	r3, [r5, #0]
 800793c:	f104 0c14 	add.w	ip, r4, #20
 8007940:	46ae      	mov	lr, r5
 8007942:	f04f 0a00 	mov.w	sl, #0
 8007946:	f8bc b000 	ldrh.w	fp, [ip]
 800794a:	b29b      	uxth	r3, r3
 800794c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007950:	fb09 770b 	mla	r7, r9, fp, r7
 8007954:	4457      	add	r7, sl
 8007956:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800795a:	f84e 3b04 	str.w	r3, [lr], #4
 800795e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007962:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007966:	f8be 3000 	ldrh.w	r3, [lr]
 800796a:	4562      	cmp	r2, ip
 800796c:	fb09 330a 	mla	r3, r9, sl, r3
 8007970:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007978:	d8e5      	bhi.n	8007946 <__multiply+0x10a>
 800797a:	9f01      	ldr	r7, [sp, #4]
 800797c:	51eb      	str	r3, [r5, r7]
 800797e:	3504      	adds	r5, #4
 8007980:	e799      	b.n	80078b6 <__multiply+0x7a>
 8007982:	3e01      	subs	r6, #1
 8007984:	e79b      	b.n	80078be <__multiply+0x82>
 8007986:	bf00      	nop
 8007988:	08009f0d 	.word	0x08009f0d
 800798c:	08009f1e 	.word	0x08009f1e

08007990 <__pow5mult>:
 8007990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007994:	4615      	mov	r5, r2
 8007996:	f012 0203 	ands.w	r2, r2, #3
 800799a:	4607      	mov	r7, r0
 800799c:	460e      	mov	r6, r1
 800799e:	d007      	beq.n	80079b0 <__pow5mult+0x20>
 80079a0:	3a01      	subs	r2, #1
 80079a2:	4c25      	ldr	r4, [pc, #148]	@ (8007a38 <__pow5mult+0xa8>)
 80079a4:	2300      	movs	r3, #0
 80079a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80079aa:	f7ff fe53 	bl	8007654 <__multadd>
 80079ae:	4606      	mov	r6, r0
 80079b0:	10ad      	asrs	r5, r5, #2
 80079b2:	d03d      	beq.n	8007a30 <__pow5mult+0xa0>
 80079b4:	69fc      	ldr	r4, [r7, #28]
 80079b6:	b97c      	cbnz	r4, 80079d8 <__pow5mult+0x48>
 80079b8:	2010      	movs	r0, #16
 80079ba:	f7ff fd33 	bl	8007424 <malloc>
 80079be:	4602      	mov	r2, r0
 80079c0:	61f8      	str	r0, [r7, #28]
 80079c2:	b928      	cbnz	r0, 80079d0 <__pow5mult+0x40>
 80079c4:	4b1d      	ldr	r3, [pc, #116]	@ (8007a3c <__pow5mult+0xac>)
 80079c6:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80079ca:	481d      	ldr	r0, [pc, #116]	@ (8007a40 <__pow5mult+0xb0>)
 80079cc:	f001 fb78 	bl	80090c0 <__assert_func>
 80079d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80079d4:	6004      	str	r4, [r0, #0]
 80079d6:	60c4      	str	r4, [r0, #12]
 80079d8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80079dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80079e0:	b94c      	cbnz	r4, 80079f6 <__pow5mult+0x66>
 80079e2:	f240 2171 	movw	r1, #625	@ 0x271
 80079e6:	4638      	mov	r0, r7
 80079e8:	f7ff ff12 	bl	8007810 <__i2b>
 80079ec:	2300      	movs	r3, #0
 80079ee:	4604      	mov	r4, r0
 80079f0:	f8c8 0008 	str.w	r0, [r8, #8]
 80079f4:	6003      	str	r3, [r0, #0]
 80079f6:	f04f 0900 	mov.w	r9, #0
 80079fa:	07eb      	lsls	r3, r5, #31
 80079fc:	d50a      	bpl.n	8007a14 <__pow5mult+0x84>
 80079fe:	4631      	mov	r1, r6
 8007a00:	4622      	mov	r2, r4
 8007a02:	4638      	mov	r0, r7
 8007a04:	f7ff ff1a 	bl	800783c <__multiply>
 8007a08:	4680      	mov	r8, r0
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4638      	mov	r0, r7
 8007a0e:	4646      	mov	r6, r8
 8007a10:	f7ff fdfe 	bl	8007610 <_Bfree>
 8007a14:	106d      	asrs	r5, r5, #1
 8007a16:	d00b      	beq.n	8007a30 <__pow5mult+0xa0>
 8007a18:	6820      	ldr	r0, [r4, #0]
 8007a1a:	b938      	cbnz	r0, 8007a2c <__pow5mult+0x9c>
 8007a1c:	4622      	mov	r2, r4
 8007a1e:	4621      	mov	r1, r4
 8007a20:	4638      	mov	r0, r7
 8007a22:	f7ff ff0b 	bl	800783c <__multiply>
 8007a26:	6020      	str	r0, [r4, #0]
 8007a28:	f8c0 9000 	str.w	r9, [r0]
 8007a2c:	4604      	mov	r4, r0
 8007a2e:	e7e4      	b.n	80079fa <__pow5mult+0x6a>
 8007a30:	4630      	mov	r0, r6
 8007a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a36:	bf00      	nop
 8007a38:	08009f78 	.word	0x08009f78
 8007a3c:	08009e9e 	.word	0x08009e9e
 8007a40:	08009f1e 	.word	0x08009f1e

08007a44 <__lshift>:
 8007a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a48:	460c      	mov	r4, r1
 8007a4a:	4607      	mov	r7, r0
 8007a4c:	4691      	mov	r9, r2
 8007a4e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007a52:	6923      	ldr	r3, [r4, #16]
 8007a54:	6849      	ldr	r1, [r1, #4]
 8007a56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007a5a:	68a3      	ldr	r3, [r4, #8]
 8007a5c:	f108 0601 	add.w	r6, r8, #1
 8007a60:	42b3      	cmp	r3, r6
 8007a62:	db0b      	blt.n	8007a7c <__lshift+0x38>
 8007a64:	4638      	mov	r0, r7
 8007a66:	f7ff fd93 	bl	8007590 <_Balloc>
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	b948      	cbnz	r0, 8007a82 <__lshift+0x3e>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	4b28      	ldr	r3, [pc, #160]	@ (8007b14 <__lshift+0xd0>)
 8007a72:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007a76:	4828      	ldr	r0, [pc, #160]	@ (8007b18 <__lshift+0xd4>)
 8007a78:	f001 fb22 	bl	80090c0 <__assert_func>
 8007a7c:	3101      	adds	r1, #1
 8007a7e:	005b      	lsls	r3, r3, #1
 8007a80:	e7ee      	b.n	8007a60 <__lshift+0x1c>
 8007a82:	2300      	movs	r3, #0
 8007a84:	f100 0114 	add.w	r1, r0, #20
 8007a88:	f100 0210 	add.w	r2, r0, #16
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	4553      	cmp	r3, sl
 8007a90:	db33      	blt.n	8007afa <__lshift+0xb6>
 8007a92:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007a96:	f104 0314 	add.w	r3, r4, #20
 8007a9a:	6920      	ldr	r0, [r4, #16]
 8007a9c:	f019 091f 	ands.w	r9, r9, #31
 8007aa0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007aa4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007aa8:	d02b      	beq.n	8007b02 <__lshift+0xbe>
 8007aaa:	f1c9 0e20 	rsb	lr, r9, #32
 8007aae:	468a      	mov	sl, r1
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	6818      	ldr	r0, [r3, #0]
 8007ab4:	fa00 f009 	lsl.w	r0, r0, r9
 8007ab8:	4310      	orrs	r0, r2
 8007aba:	f84a 0b04 	str.w	r0, [sl], #4
 8007abe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ac2:	459c      	cmp	ip, r3
 8007ac4:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ac8:	d8f3      	bhi.n	8007ab2 <__lshift+0x6e>
 8007aca:	ebac 0304 	sub.w	r3, ip, r4
 8007ace:	f104 0015 	add.w	r0, r4, #21
 8007ad2:	3b15      	subs	r3, #21
 8007ad4:	f023 0303 	bic.w	r3, r3, #3
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4584      	cmp	ip, r0
 8007adc:	bf38      	it	cc
 8007ade:	2304      	movcc	r3, #4
 8007ae0:	50ca      	str	r2, [r1, r3]
 8007ae2:	b10a      	cbz	r2, 8007ae8 <__lshift+0xa4>
 8007ae4:	f108 0602 	add.w	r6, r8, #2
 8007ae8:	3e01      	subs	r6, #1
 8007aea:	4638      	mov	r0, r7
 8007aec:	4621      	mov	r1, r4
 8007aee:	612e      	str	r6, [r5, #16]
 8007af0:	f7ff fd8e 	bl	8007610 <_Bfree>
 8007af4:	4628      	mov	r0, r5
 8007af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007afa:	3301      	adds	r3, #1
 8007afc:	f842 0f04 	str.w	r0, [r2, #4]!
 8007b00:	e7c5      	b.n	8007a8e <__lshift+0x4a>
 8007b02:	3904      	subs	r1, #4
 8007b04:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b08:	459c      	cmp	ip, r3
 8007b0a:	f841 2f04 	str.w	r2, [r1, #4]!
 8007b0e:	d8f9      	bhi.n	8007b04 <__lshift+0xc0>
 8007b10:	e7ea      	b.n	8007ae8 <__lshift+0xa4>
 8007b12:	bf00      	nop
 8007b14:	08009f0d 	.word	0x08009f0d
 8007b18:	08009f1e 	.word	0x08009f1e

08007b1c <__mcmp>:
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	690a      	ldr	r2, [r1, #16]
 8007b20:	6900      	ldr	r0, [r0, #16]
 8007b22:	1a80      	subs	r0, r0, r2
 8007b24:	b530      	push	{r4, r5, lr}
 8007b26:	d10e      	bne.n	8007b46 <__mcmp+0x2a>
 8007b28:	3314      	adds	r3, #20
 8007b2a:	3114      	adds	r1, #20
 8007b2c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007b30:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007b34:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007b38:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007b3c:	4295      	cmp	r5, r2
 8007b3e:	d003      	beq.n	8007b48 <__mcmp+0x2c>
 8007b40:	d205      	bcs.n	8007b4e <__mcmp+0x32>
 8007b42:	f04f 30ff 	mov.w	r0, #4294967295
 8007b46:	bd30      	pop	{r4, r5, pc}
 8007b48:	42a3      	cmp	r3, r4
 8007b4a:	d3f3      	bcc.n	8007b34 <__mcmp+0x18>
 8007b4c:	e7fb      	b.n	8007b46 <__mcmp+0x2a>
 8007b4e:	2001      	movs	r0, #1
 8007b50:	e7f9      	b.n	8007b46 <__mcmp+0x2a>
	...

08007b54 <__mdiff>:
 8007b54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b58:	4689      	mov	r9, r1
 8007b5a:	4606      	mov	r6, r0
 8007b5c:	4611      	mov	r1, r2
 8007b5e:	4614      	mov	r4, r2
 8007b60:	4648      	mov	r0, r9
 8007b62:	f7ff ffdb 	bl	8007b1c <__mcmp>
 8007b66:	1e05      	subs	r5, r0, #0
 8007b68:	d112      	bne.n	8007b90 <__mdiff+0x3c>
 8007b6a:	4629      	mov	r1, r5
 8007b6c:	4630      	mov	r0, r6
 8007b6e:	f7ff fd0f 	bl	8007590 <_Balloc>
 8007b72:	4602      	mov	r2, r0
 8007b74:	b928      	cbnz	r0, 8007b82 <__mdiff+0x2e>
 8007b76:	4b41      	ldr	r3, [pc, #260]	@ (8007c7c <__mdiff+0x128>)
 8007b78:	f240 2137 	movw	r1, #567	@ 0x237
 8007b7c:	4840      	ldr	r0, [pc, #256]	@ (8007c80 <__mdiff+0x12c>)
 8007b7e:	f001 fa9f 	bl	80090c0 <__assert_func>
 8007b82:	2301      	movs	r3, #1
 8007b84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007b88:	4610      	mov	r0, r2
 8007b8a:	b003      	add	sp, #12
 8007b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b90:	bfbc      	itt	lt
 8007b92:	464b      	movlt	r3, r9
 8007b94:	46a1      	movlt	r9, r4
 8007b96:	4630      	mov	r0, r6
 8007b98:	bfb8      	it	lt
 8007b9a:	2501      	movlt	r5, #1
 8007b9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007ba0:	bfb4      	ite	lt
 8007ba2:	461c      	movlt	r4, r3
 8007ba4:	2500      	movge	r5, #0
 8007ba6:	f7ff fcf3 	bl	8007590 <_Balloc>
 8007baa:	4602      	mov	r2, r0
 8007bac:	b918      	cbnz	r0, 8007bb6 <__mdiff+0x62>
 8007bae:	4b33      	ldr	r3, [pc, #204]	@ (8007c7c <__mdiff+0x128>)
 8007bb0:	f240 2145 	movw	r1, #581	@ 0x245
 8007bb4:	e7e2      	b.n	8007b7c <__mdiff+0x28>
 8007bb6:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007bba:	f104 0e14 	add.w	lr, r4, #20
 8007bbe:	6926      	ldr	r6, [r4, #16]
 8007bc0:	f100 0b14 	add.w	fp, r0, #20
 8007bc4:	60c5      	str	r5, [r0, #12]
 8007bc6:	f109 0514 	add.w	r5, r9, #20
 8007bca:	f109 0310 	add.w	r3, r9, #16
 8007bce:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007bd2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007bd6:	46d9      	mov	r9, fp
 8007bd8:	f04f 0c00 	mov.w	ip, #0
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	9b01      	ldr	r3, [sp, #4]
 8007be0:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007be4:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007be8:	4576      	cmp	r6, lr
 8007bea:	9301      	str	r3, [sp, #4]
 8007bec:	fa1f f38a 	uxth.w	r3, sl
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	b283      	uxth	r3, r0
 8007bf4:	ea4f 4010 	mov.w	r0, r0, lsr #16
 8007bf8:	eba1 0303 	sub.w	r3, r1, r3
 8007bfc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007c00:	4463      	add	r3, ip
 8007c02:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c0c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007c10:	f849 3b04 	str.w	r3, [r9], #4
 8007c14:	d8e3      	bhi.n	8007bde <__mdiff+0x8a>
 8007c16:	1b33      	subs	r3, r6, r4
 8007c18:	3415      	adds	r4, #21
 8007c1a:	3b15      	subs	r3, #21
 8007c1c:	f023 0303 	bic.w	r3, r3, #3
 8007c20:	3304      	adds	r3, #4
 8007c22:	42a6      	cmp	r6, r4
 8007c24:	bf38      	it	cc
 8007c26:	2304      	movcc	r3, #4
 8007c28:	441d      	add	r5, r3
 8007c2a:	445b      	add	r3, fp
 8007c2c:	462c      	mov	r4, r5
 8007c2e:	461e      	mov	r6, r3
 8007c30:	4544      	cmp	r4, r8
 8007c32:	d30e      	bcc.n	8007c52 <__mdiff+0xfe>
 8007c34:	f108 0103 	add.w	r1, r8, #3
 8007c38:	1b49      	subs	r1, r1, r5
 8007c3a:	3d03      	subs	r5, #3
 8007c3c:	f021 0103 	bic.w	r1, r1, #3
 8007c40:	45a8      	cmp	r8, r5
 8007c42:	bf38      	it	cc
 8007c44:	2100      	movcc	r1, #0
 8007c46:	440b      	add	r3, r1
 8007c48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007c4c:	b199      	cbz	r1, 8007c76 <__mdiff+0x122>
 8007c4e:	6117      	str	r7, [r2, #16]
 8007c50:	e79a      	b.n	8007b88 <__mdiff+0x34>
 8007c52:	f854 1b04 	ldr.w	r1, [r4], #4
 8007c56:	46e6      	mov	lr, ip
 8007c58:	fa1f fc81 	uxth.w	ip, r1
 8007c5c:	0c08      	lsrs	r0, r1, #16
 8007c5e:	4471      	add	r1, lr
 8007c60:	44f4      	add	ip, lr
 8007c62:	b289      	uxth	r1, r1
 8007c64:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007c68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007c6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007c70:	f846 1b04 	str.w	r1, [r6], #4
 8007c74:	e7dc      	b.n	8007c30 <__mdiff+0xdc>
 8007c76:	3f01      	subs	r7, #1
 8007c78:	e7e6      	b.n	8007c48 <__mdiff+0xf4>
 8007c7a:	bf00      	nop
 8007c7c:	08009f0d 	.word	0x08009f0d
 8007c80:	08009f1e 	.word	0x08009f1e

08007c84 <__ulp>:
 8007c84:	b082      	sub	sp, #8
 8007c86:	4b11      	ldr	r3, [pc, #68]	@ (8007ccc <__ulp+0x48>)
 8007c88:	ed8d 0b00 	vstr	d0, [sp]
 8007c8c:	9a01      	ldr	r2, [sp, #4]
 8007c8e:	4013      	ands	r3, r2
 8007c90:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	dc08      	bgt.n	8007caa <__ulp+0x26>
 8007c98:	425b      	negs	r3, r3
 8007c9a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007c9e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007ca2:	da04      	bge.n	8007cae <__ulp+0x2a>
 8007ca4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007ca8:	4113      	asrs	r3, r2
 8007caa:	2200      	movs	r2, #0
 8007cac:	e008      	b.n	8007cc0 <__ulp+0x3c>
 8007cae:	f1a2 0314 	sub.w	r3, r2, #20
 8007cb2:	2b1e      	cmp	r3, #30
 8007cb4:	bfd6      	itet	le
 8007cb6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007cba:	2201      	movgt	r2, #1
 8007cbc:	40da      	lsrle	r2, r3
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	4610      	mov	r0, r2
 8007cc4:	ec41 0b10 	vmov	d0, r0, r1
 8007cc8:	b002      	add	sp, #8
 8007cca:	4770      	bx	lr
 8007ccc:	7ff00000 	.word	0x7ff00000

08007cd0 <__b2d>:
 8007cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cd4:	6906      	ldr	r6, [r0, #16]
 8007cd6:	f100 0814 	add.w	r8, r0, #20
 8007cda:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007cde:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007ce2:	1f37      	subs	r7, r6, #4
 8007ce4:	4610      	mov	r0, r2
 8007ce6:	f7ff fd47 	bl	8007778 <__hi0bits>
 8007cea:	f1c0 0320 	rsb	r3, r0, #32
 8007cee:	280a      	cmp	r0, #10
 8007cf0:	600b      	str	r3, [r1, #0]
 8007cf2:	491d      	ldr	r1, [pc, #116]	@ (8007d68 <__b2d+0x98>)
 8007cf4:	dc16      	bgt.n	8007d24 <__b2d+0x54>
 8007cf6:	f1c0 0c0b 	rsb	ip, r0, #11
 8007cfa:	45b8      	cmp	r8, r7
 8007cfc:	f100 0015 	add.w	r0, r0, #21
 8007d00:	fa22 f30c 	lsr.w	r3, r2, ip
 8007d04:	fa02 f000 	lsl.w	r0, r2, r0
 8007d08:	ea43 0501 	orr.w	r5, r3, r1
 8007d0c:	bf34      	ite	cc
 8007d0e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d12:	2300      	movcs	r3, #0
 8007d14:	fa23 f30c 	lsr.w	r3, r3, ip
 8007d18:	4303      	orrs	r3, r0
 8007d1a:	461c      	mov	r4, r3
 8007d1c:	ec45 4b10 	vmov	d0, r4, r5
 8007d20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d24:	45b8      	cmp	r8, r7
 8007d26:	bf3a      	itte	cc
 8007d28:	f1a6 0708 	subcc.w	r7, r6, #8
 8007d2c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007d30:	2300      	movcs	r3, #0
 8007d32:	380b      	subs	r0, #11
 8007d34:	d014      	beq.n	8007d60 <__b2d+0x90>
 8007d36:	f1c0 0120 	rsb	r1, r0, #32
 8007d3a:	4082      	lsls	r2, r0
 8007d3c:	4547      	cmp	r7, r8
 8007d3e:	fa23 f401 	lsr.w	r4, r3, r1
 8007d42:	fa03 f300 	lsl.w	r3, r3, r0
 8007d46:	ea42 0204 	orr.w	r2, r2, r4
 8007d4a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007d4e:	bf8c      	ite	hi
 8007d50:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007d54:	2200      	movls	r2, #0
 8007d56:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007d5a:	40ca      	lsrs	r2, r1
 8007d5c:	4313      	orrs	r3, r2
 8007d5e:	e7dc      	b.n	8007d1a <__b2d+0x4a>
 8007d60:	ea42 0501 	orr.w	r5, r2, r1
 8007d64:	e7d9      	b.n	8007d1a <__b2d+0x4a>
 8007d66:	bf00      	nop
 8007d68:	3ff00000 	.word	0x3ff00000

08007d6c <__d2b>:
 8007d6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007d70:	460f      	mov	r7, r1
 8007d72:	2101      	movs	r1, #1
 8007d74:	4616      	mov	r6, r2
 8007d76:	ec59 8b10 	vmov	r8, r9, d0
 8007d7a:	f7ff fc09 	bl	8007590 <_Balloc>
 8007d7e:	4604      	mov	r4, r0
 8007d80:	b930      	cbnz	r0, 8007d90 <__d2b+0x24>
 8007d82:	4602      	mov	r2, r0
 8007d84:	4b23      	ldr	r3, [pc, #140]	@ (8007e14 <__d2b+0xa8>)
 8007d86:	f240 310f 	movw	r1, #783	@ 0x30f
 8007d8a:	4823      	ldr	r0, [pc, #140]	@ (8007e18 <__d2b+0xac>)
 8007d8c:	f001 f998 	bl	80090c0 <__assert_func>
 8007d90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007d94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007d98:	b10d      	cbz	r5, 8007d9e <__d2b+0x32>
 8007d9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007d9e:	9301      	str	r3, [sp, #4]
 8007da0:	f1b8 0300 	subs.w	r3, r8, #0
 8007da4:	d023      	beq.n	8007dee <__d2b+0x82>
 8007da6:	4668      	mov	r0, sp
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	f7ff fd04 	bl	80077b6 <__lo0bits>
 8007dae:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007db2:	b1d0      	cbz	r0, 8007dea <__d2b+0x7e>
 8007db4:	f1c0 0320 	rsb	r3, r0, #32
 8007db8:	fa02 f303 	lsl.w	r3, r2, r3
 8007dbc:	40c2      	lsrs	r2, r0
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	9201      	str	r2, [sp, #4]
 8007dc2:	6163      	str	r3, [r4, #20]
 8007dc4:	9b01      	ldr	r3, [sp, #4]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	61a3      	str	r3, [r4, #24]
 8007dca:	bf0c      	ite	eq
 8007dcc:	2201      	moveq	r2, #1
 8007dce:	2202      	movne	r2, #2
 8007dd0:	6122      	str	r2, [r4, #16]
 8007dd2:	b1a5      	cbz	r5, 8007dfe <__d2b+0x92>
 8007dd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007dd8:	4405      	add	r5, r0
 8007dda:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007dde:	603d      	str	r5, [r7, #0]
 8007de0:	6030      	str	r0, [r6, #0]
 8007de2:	4620      	mov	r0, r4
 8007de4:	b003      	add	sp, #12
 8007de6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007dea:	6161      	str	r1, [r4, #20]
 8007dec:	e7ea      	b.n	8007dc4 <__d2b+0x58>
 8007dee:	a801      	add	r0, sp, #4
 8007df0:	f7ff fce1 	bl	80077b6 <__lo0bits>
 8007df4:	9b01      	ldr	r3, [sp, #4]
 8007df6:	3020      	adds	r0, #32
 8007df8:	2201      	movs	r2, #1
 8007dfa:	6163      	str	r3, [r4, #20]
 8007dfc:	e7e8      	b.n	8007dd0 <__d2b+0x64>
 8007dfe:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007e02:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007e06:	6038      	str	r0, [r7, #0]
 8007e08:	6918      	ldr	r0, [r3, #16]
 8007e0a:	f7ff fcb5 	bl	8007778 <__hi0bits>
 8007e0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007e12:	e7e5      	b.n	8007de0 <__d2b+0x74>
 8007e14:	08009f0d 	.word	0x08009f0d
 8007e18:	08009f1e 	.word	0x08009f1e

08007e1c <__ratio>:
 8007e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e20:	b085      	sub	sp, #20
 8007e22:	e9cd 1000 	strd	r1, r0, [sp]
 8007e26:	a902      	add	r1, sp, #8
 8007e28:	f7ff ff52 	bl	8007cd0 <__b2d>
 8007e2c:	a903      	add	r1, sp, #12
 8007e2e:	9800      	ldr	r0, [sp, #0]
 8007e30:	ec55 4b10 	vmov	r4, r5, d0
 8007e34:	f7ff ff4c 	bl	8007cd0 <__b2d>
 8007e38:	9b01      	ldr	r3, [sp, #4]
 8007e3a:	462f      	mov	r7, r5
 8007e3c:	4620      	mov	r0, r4
 8007e3e:	6919      	ldr	r1, [r3, #16]
 8007e40:	9b00      	ldr	r3, [sp, #0]
 8007e42:	691b      	ldr	r3, [r3, #16]
 8007e44:	1ac9      	subs	r1, r1, r3
 8007e46:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007e4a:	ec5b ab10 	vmov	sl, fp, d0
 8007e4e:	1a9b      	subs	r3, r3, r2
 8007e50:	46d9      	mov	r9, fp
 8007e52:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	bfcd      	iteet	gt
 8007e5a:	462a      	movgt	r2, r5
 8007e5c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007e60:	465a      	movle	r2, fp
 8007e62:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007e66:	bfd8      	it	le
 8007e68:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007e6c:	4652      	mov	r2, sl
 8007e6e:	4639      	mov	r1, r7
 8007e70:	464b      	mov	r3, r9
 8007e72:	f7f8 fccf 	bl	8000814 <__aeabi_ddiv>
 8007e76:	ec41 0b10 	vmov	d0, r0, r1
 8007e7a:	b005      	add	sp, #20
 8007e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007e80 <__copybits>:
 8007e80:	3901      	subs	r1, #1
 8007e82:	f102 0314 	add.w	r3, r2, #20
 8007e86:	1149      	asrs	r1, r1, #5
 8007e88:	b570      	push	{r4, r5, r6, lr}
 8007e8a:	3101      	adds	r1, #1
 8007e8c:	6914      	ldr	r4, [r2, #16]
 8007e8e:	1f05      	subs	r5, r0, #4
 8007e90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007e94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007e98:	42a3      	cmp	r3, r4
 8007e9a:	d30c      	bcc.n	8007eb6 <__copybits+0x36>
 8007e9c:	1aa3      	subs	r3, r4, r2
 8007e9e:	3211      	adds	r2, #17
 8007ea0:	3b11      	subs	r3, #17
 8007ea2:	f023 0303 	bic.w	r3, r3, #3
 8007ea6:	42a2      	cmp	r2, r4
 8007ea8:	bf88      	it	hi
 8007eaa:	2300      	movhi	r3, #0
 8007eac:	4418      	add	r0, r3
 8007eae:	2300      	movs	r3, #0
 8007eb0:	4288      	cmp	r0, r1
 8007eb2:	d305      	bcc.n	8007ec0 <__copybits+0x40>
 8007eb4:	bd70      	pop	{r4, r5, r6, pc}
 8007eb6:	f853 6b04 	ldr.w	r6, [r3], #4
 8007eba:	f845 6f04 	str.w	r6, [r5, #4]!
 8007ebe:	e7eb      	b.n	8007e98 <__copybits+0x18>
 8007ec0:	f840 3b04 	str.w	r3, [r0], #4
 8007ec4:	e7f4      	b.n	8007eb0 <__copybits+0x30>

08007ec6 <__any_on>:
 8007ec6:	f100 0214 	add.w	r2, r0, #20
 8007eca:	114b      	asrs	r3, r1, #5
 8007ecc:	6900      	ldr	r0, [r0, #16]
 8007ece:	4298      	cmp	r0, r3
 8007ed0:	b510      	push	{r4, lr}
 8007ed2:	db11      	blt.n	8007ef8 <__any_on+0x32>
 8007ed4:	dd0a      	ble.n	8007eec <__any_on+0x26>
 8007ed6:	f011 011f 	ands.w	r1, r1, #31
 8007eda:	d007      	beq.n	8007eec <__any_on+0x26>
 8007edc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007ee0:	fa24 f001 	lsr.w	r0, r4, r1
 8007ee4:	fa00 f101 	lsl.w	r1, r0, r1
 8007ee8:	428c      	cmp	r4, r1
 8007eea:	d10b      	bne.n	8007f04 <__any_on+0x3e>
 8007eec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d803      	bhi.n	8007efc <__any_on+0x36>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	bd10      	pop	{r4, pc}
 8007ef8:	4603      	mov	r3, r0
 8007efa:	e7f7      	b.n	8007eec <__any_on+0x26>
 8007efc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f00:	2900      	cmp	r1, #0
 8007f02:	d0f5      	beq.n	8007ef0 <__any_on+0x2a>
 8007f04:	2001      	movs	r0, #1
 8007f06:	e7f6      	b.n	8007ef6 <__any_on+0x30>

08007f08 <sulp>:
 8007f08:	b570      	push	{r4, r5, r6, lr}
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	460d      	mov	r5, r1
 8007f0e:	4616      	mov	r6, r2
 8007f10:	ec45 4b10 	vmov	d0, r4, r5
 8007f14:	f7ff feb6 	bl	8007c84 <__ulp>
 8007f18:	ec51 0b10 	vmov	r0, r1, d0
 8007f1c:	b17e      	cbz	r6, 8007f3e <sulp+0x36>
 8007f1e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f22:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	dd09      	ble.n	8007f3e <sulp+0x36>
 8007f2a:	051b      	lsls	r3, r3, #20
 8007f2c:	2400      	movs	r4, #0
 8007f2e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8007f32:	4622      	mov	r2, r4
 8007f34:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007f38:	462b      	mov	r3, r5
 8007f3a:	f7f8 fb41 	bl	80005c0 <__aeabi_dmul>
 8007f3e:	ec41 0b10 	vmov	d0, r0, r1
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	0000      	movs	r0, r0
	...

08007f48 <_strtod_l>:
 8007f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f4c:	b09f      	sub	sp, #124	@ 0x7c
 8007f4e:	460c      	mov	r4, r1
 8007f50:	f04f 0a00 	mov.w	sl, #0
 8007f54:	f04f 0b00 	mov.w	fp, #0
 8007f58:	9217      	str	r2, [sp, #92]	@ 0x5c
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	9005      	str	r0, [sp, #20]
 8007f5e:	921a      	str	r2, [sp, #104]	@ 0x68
 8007f60:	460a      	mov	r2, r1
 8007f62:	9219      	str	r2, [sp, #100]	@ 0x64
 8007f64:	7811      	ldrb	r1, [r2, #0]
 8007f66:	292b      	cmp	r1, #43	@ 0x2b
 8007f68:	d04a      	beq.n	8008000 <_strtod_l+0xb8>
 8007f6a:	d838      	bhi.n	8007fde <_strtod_l+0x96>
 8007f6c:	290d      	cmp	r1, #13
 8007f6e:	d832      	bhi.n	8007fd6 <_strtod_l+0x8e>
 8007f70:	2908      	cmp	r1, #8
 8007f72:	d832      	bhi.n	8007fda <_strtod_l+0x92>
 8007f74:	2900      	cmp	r1, #0
 8007f76:	d03b      	beq.n	8007ff0 <_strtod_l+0xa8>
 8007f78:	2200      	movs	r2, #0
 8007f7a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007f7c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007f7e:	782a      	ldrb	r2, [r5, #0]
 8007f80:	2a30      	cmp	r2, #48	@ 0x30
 8007f82:	f040 80b3 	bne.w	80080ec <_strtod_l+0x1a4>
 8007f86:	786a      	ldrb	r2, [r5, #1]
 8007f88:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007f8c:	2a58      	cmp	r2, #88	@ 0x58
 8007f8e:	d16e      	bne.n	800806e <_strtod_l+0x126>
 8007f90:	9302      	str	r3, [sp, #8]
 8007f92:	a919      	add	r1, sp, #100	@ 0x64
 8007f94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f96:	4a90      	ldr	r2, [pc, #576]	@ (80081d8 <_strtod_l+0x290>)
 8007f98:	9301      	str	r3, [sp, #4]
 8007f9a:	ab1a      	add	r3, sp, #104	@ 0x68
 8007f9c:	9805      	ldr	r0, [sp, #20]
 8007f9e:	9300      	str	r3, [sp, #0]
 8007fa0:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007fa2:	f001 f925 	bl	80091f0 <__gethex>
 8007fa6:	f010 060f 	ands.w	r6, r0, #15
 8007faa:	4604      	mov	r4, r0
 8007fac:	d005      	beq.n	8007fba <_strtod_l+0x72>
 8007fae:	2e06      	cmp	r6, #6
 8007fb0:	d128      	bne.n	8008004 <_strtod_l+0xbc>
 8007fb2:	3501      	adds	r5, #1
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9519      	str	r5, [sp, #100]	@ 0x64
 8007fb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007fba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f040 858e 	bne.w	8008ade <_strtod_l+0xb96>
 8007fc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007fc4:	b1cb      	cbz	r3, 8007ffa <_strtod_l+0xb2>
 8007fc6:	4652      	mov	r2, sl
 8007fc8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007fcc:	ec43 2b10 	vmov	d0, r2, r3
 8007fd0:	b01f      	add	sp, #124	@ 0x7c
 8007fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fd6:	2920      	cmp	r1, #32
 8007fd8:	d1ce      	bne.n	8007f78 <_strtod_l+0x30>
 8007fda:	3201      	adds	r2, #1
 8007fdc:	e7c1      	b.n	8007f62 <_strtod_l+0x1a>
 8007fde:	292d      	cmp	r1, #45	@ 0x2d
 8007fe0:	d1ca      	bne.n	8007f78 <_strtod_l+0x30>
 8007fe2:	2101      	movs	r1, #1
 8007fe4:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007fe6:	1c51      	adds	r1, r2, #1
 8007fe8:	9119      	str	r1, [sp, #100]	@ 0x64
 8007fea:	7852      	ldrb	r2, [r2, #1]
 8007fec:	2a00      	cmp	r2, #0
 8007fee:	d1c5      	bne.n	8007f7c <_strtod_l+0x34>
 8007ff0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007ff2:	9419      	str	r4, [sp, #100]	@ 0x64
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	f040 8570 	bne.w	8008ada <_strtod_l+0xb92>
 8007ffa:	4652      	mov	r2, sl
 8007ffc:	465b      	mov	r3, fp
 8007ffe:	e7e5      	b.n	8007fcc <_strtod_l+0x84>
 8008000:	2100      	movs	r1, #0
 8008002:	e7ef      	b.n	8007fe4 <_strtod_l+0x9c>
 8008004:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008006:	b13a      	cbz	r2, 8008018 <_strtod_l+0xd0>
 8008008:	2135      	movs	r1, #53	@ 0x35
 800800a:	a81c      	add	r0, sp, #112	@ 0x70
 800800c:	f7ff ff38 	bl	8007e80 <__copybits>
 8008010:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008012:	9805      	ldr	r0, [sp, #20]
 8008014:	f7ff fafc 	bl	8007610 <_Bfree>
 8008018:	3e01      	subs	r6, #1
 800801a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800801c:	2e04      	cmp	r6, #4
 800801e:	d806      	bhi.n	800802e <_strtod_l+0xe6>
 8008020:	e8df f006 	tbb	[pc, r6]
 8008024:	201d0314 	.word	0x201d0314
 8008028:	14          	.byte	0x14
 8008029:	00          	.byte	0x00
 800802a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800802e:	05e1      	lsls	r1, r4, #23
 8008030:	bf48      	it	mi
 8008032:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008036:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800803a:	0d1b      	lsrs	r3, r3, #20
 800803c:	051b      	lsls	r3, r3, #20
 800803e:	2b00      	cmp	r3, #0
 8008040:	d1bb      	bne.n	8007fba <_strtod_l+0x72>
 8008042:	f7fe fb11 	bl	8006668 <__errno>
 8008046:	2322      	movs	r3, #34	@ 0x22
 8008048:	6003      	str	r3, [r0, #0]
 800804a:	e7b6      	b.n	8007fba <_strtod_l+0x72>
 800804c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008050:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008054:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008058:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800805c:	e7e7      	b.n	800802e <_strtod_l+0xe6>
 800805e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80081e0 <_strtod_l+0x298>
 8008062:	e7e4      	b.n	800802e <_strtod_l+0xe6>
 8008064:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008068:	f04f 3aff 	mov.w	sl, #4294967295
 800806c:	e7df      	b.n	800802e <_strtod_l+0xe6>
 800806e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	9219      	str	r2, [sp, #100]	@ 0x64
 8008074:	785b      	ldrb	r3, [r3, #1]
 8008076:	2b30      	cmp	r3, #48	@ 0x30
 8008078:	d0f9      	beq.n	800806e <_strtod_l+0x126>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d09d      	beq.n	8007fba <_strtod_l+0x72>
 800807e:	2301      	movs	r3, #1
 8008080:	9309      	str	r3, [sp, #36]	@ 0x24
 8008082:	220a      	movs	r2, #10
 8008084:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008086:	930c      	str	r3, [sp, #48]	@ 0x30
 8008088:	2300      	movs	r3, #0
 800808a:	461f      	mov	r7, r3
 800808c:	9308      	str	r3, [sp, #32]
 800808e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008090:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008092:	7805      	ldrb	r5, [r0, #0]
 8008094:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008098:	b2d9      	uxtb	r1, r3
 800809a:	2909      	cmp	r1, #9
 800809c:	d928      	bls.n	80080f0 <_strtod_l+0x1a8>
 800809e:	2201      	movs	r2, #1
 80080a0:	494e      	ldr	r1, [pc, #312]	@ (80081dc <_strtod_l+0x294>)
 80080a2:	f000 ffd5 	bl	8009050 <strncmp>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d033      	beq.n	8008112 <_strtod_l+0x1ca>
 80080aa:	2000      	movs	r0, #0
 80080ac:	462a      	mov	r2, r5
 80080ae:	463d      	mov	r5, r7
 80080b0:	4681      	mov	r9, r0
 80080b2:	4603      	mov	r3, r0
 80080b4:	2a65      	cmp	r2, #101	@ 0x65
 80080b6:	d001      	beq.n	80080bc <_strtod_l+0x174>
 80080b8:	2a45      	cmp	r2, #69	@ 0x45
 80080ba:	d114      	bne.n	80080e6 <_strtod_l+0x19e>
 80080bc:	b91d      	cbnz	r5, 80080c6 <_strtod_l+0x17e>
 80080be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080c0:	4302      	orrs	r2, r0
 80080c2:	d095      	beq.n	8007ff0 <_strtod_l+0xa8>
 80080c4:	2500      	movs	r5, #0
 80080c6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80080c8:	1c62      	adds	r2, r4, #1
 80080ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80080cc:	7862      	ldrb	r2, [r4, #1]
 80080ce:	2a2b      	cmp	r2, #43	@ 0x2b
 80080d0:	d078      	beq.n	80081c4 <_strtod_l+0x27c>
 80080d2:	2a2d      	cmp	r2, #45	@ 0x2d
 80080d4:	d07c      	beq.n	80081d0 <_strtod_l+0x288>
 80080d6:	f04f 0c00 	mov.w	ip, #0
 80080da:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80080de:	2909      	cmp	r1, #9
 80080e0:	f240 8084 	bls.w	80081ec <_strtod_l+0x2a4>
 80080e4:	9419      	str	r4, [sp, #100]	@ 0x64
 80080e6:	f04f 0800 	mov.w	r8, #0
 80080ea:	e0a4      	b.n	8008236 <_strtod_l+0x2ee>
 80080ec:	2300      	movs	r3, #0
 80080ee:	e7c7      	b.n	8008080 <_strtod_l+0x138>
 80080f0:	2f08      	cmp	r7, #8
 80080f2:	f100 0001 	add.w	r0, r0, #1
 80080f6:	f107 0701 	add.w	r7, r7, #1
 80080fa:	bfd5      	itete	le
 80080fc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80080fe:	9908      	ldrgt	r1, [sp, #32]
 8008100:	fb02 3301 	mlale	r3, r2, r1, r3
 8008104:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008108:	bfd4      	ite	le
 800810a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800810c:	9308      	strgt	r3, [sp, #32]
 800810e:	9019      	str	r0, [sp, #100]	@ 0x64
 8008110:	e7be      	b.n	8008090 <_strtod_l+0x148>
 8008112:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008114:	1c5a      	adds	r2, r3, #1
 8008116:	9219      	str	r2, [sp, #100]	@ 0x64
 8008118:	785a      	ldrb	r2, [r3, #1]
 800811a:	b37f      	cbz	r7, 800817c <_strtod_l+0x234>
 800811c:	4681      	mov	r9, r0
 800811e:	463d      	mov	r5, r7
 8008120:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008124:	2b09      	cmp	r3, #9
 8008126:	d912      	bls.n	800814e <_strtod_l+0x206>
 8008128:	2301      	movs	r3, #1
 800812a:	e7c3      	b.n	80080b4 <_strtod_l+0x16c>
 800812c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800812e:	3001      	adds	r0, #1
 8008130:	1c5a      	adds	r2, r3, #1
 8008132:	9219      	str	r2, [sp, #100]	@ 0x64
 8008134:	785a      	ldrb	r2, [r3, #1]
 8008136:	2a30      	cmp	r2, #48	@ 0x30
 8008138:	d0f8      	beq.n	800812c <_strtod_l+0x1e4>
 800813a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800813e:	2b08      	cmp	r3, #8
 8008140:	f200 84d2 	bhi.w	8008ae8 <_strtod_l+0xba0>
 8008144:	4681      	mov	r9, r0
 8008146:	2000      	movs	r0, #0
 8008148:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800814a:	4605      	mov	r5, r0
 800814c:	930c      	str	r3, [sp, #48]	@ 0x30
 800814e:	3a30      	subs	r2, #48	@ 0x30
 8008150:	f100 0301 	add.w	r3, r0, #1
 8008154:	d02a      	beq.n	80081ac <_strtod_l+0x264>
 8008156:	4499      	add	r9, r3
 8008158:	eb00 0c05 	add.w	ip, r0, r5
 800815c:	462b      	mov	r3, r5
 800815e:	210a      	movs	r1, #10
 8008160:	4563      	cmp	r3, ip
 8008162:	d10d      	bne.n	8008180 <_strtod_l+0x238>
 8008164:	1c69      	adds	r1, r5, #1
 8008166:	4401      	add	r1, r0
 8008168:	4428      	add	r0, r5
 800816a:	2808      	cmp	r0, #8
 800816c:	dc16      	bgt.n	800819c <_strtod_l+0x254>
 800816e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008170:	230a      	movs	r3, #10
 8008172:	fb03 2300 	mla	r3, r3, r0, r2
 8008176:	930a      	str	r3, [sp, #40]	@ 0x28
 8008178:	2300      	movs	r3, #0
 800817a:	e018      	b.n	80081ae <_strtod_l+0x266>
 800817c:	4638      	mov	r0, r7
 800817e:	e7da      	b.n	8008136 <_strtod_l+0x1ee>
 8008180:	2b08      	cmp	r3, #8
 8008182:	f103 0301 	add.w	r3, r3, #1
 8008186:	dc03      	bgt.n	8008190 <_strtod_l+0x248>
 8008188:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800818a:	434e      	muls	r6, r1
 800818c:	960a      	str	r6, [sp, #40]	@ 0x28
 800818e:	e7e7      	b.n	8008160 <_strtod_l+0x218>
 8008190:	2b10      	cmp	r3, #16
 8008192:	bfde      	ittt	le
 8008194:	9e08      	ldrle	r6, [sp, #32]
 8008196:	434e      	mulle	r6, r1
 8008198:	9608      	strle	r6, [sp, #32]
 800819a:	e7e1      	b.n	8008160 <_strtod_l+0x218>
 800819c:	280f      	cmp	r0, #15
 800819e:	dceb      	bgt.n	8008178 <_strtod_l+0x230>
 80081a0:	9808      	ldr	r0, [sp, #32]
 80081a2:	230a      	movs	r3, #10
 80081a4:	fb03 2300 	mla	r3, r3, r0, r2
 80081a8:	9308      	str	r3, [sp, #32]
 80081aa:	e7e5      	b.n	8008178 <_strtod_l+0x230>
 80081ac:	4629      	mov	r1, r5
 80081ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081b0:	460d      	mov	r5, r1
 80081b2:	1c50      	adds	r0, r2, #1
 80081b4:	9019      	str	r0, [sp, #100]	@ 0x64
 80081b6:	4618      	mov	r0, r3
 80081b8:	7852      	ldrb	r2, [r2, #1]
 80081ba:	e7b1      	b.n	8008120 <_strtod_l+0x1d8>
 80081bc:	f04f 0900 	mov.w	r9, #0
 80081c0:	2301      	movs	r3, #1
 80081c2:	e77c      	b.n	80080be <_strtod_l+0x176>
 80081c4:	f04f 0c00 	mov.w	ip, #0
 80081c8:	1ca2      	adds	r2, r4, #2
 80081ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80081cc:	78a2      	ldrb	r2, [r4, #2]
 80081ce:	e784      	b.n	80080da <_strtod_l+0x192>
 80081d0:	f04f 0c01 	mov.w	ip, #1
 80081d4:	e7f8      	b.n	80081c8 <_strtod_l+0x280>
 80081d6:	bf00      	nop
 80081d8:	0800a090 	.word	0x0800a090
 80081dc:	0800a078 	.word	0x0800a078
 80081e0:	7ff00000 	.word	0x7ff00000
 80081e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80081e6:	1c51      	adds	r1, r2, #1
 80081e8:	9119      	str	r1, [sp, #100]	@ 0x64
 80081ea:	7852      	ldrb	r2, [r2, #1]
 80081ec:	2a30      	cmp	r2, #48	@ 0x30
 80081ee:	d0f9      	beq.n	80081e4 <_strtod_l+0x29c>
 80081f0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80081f4:	2908      	cmp	r1, #8
 80081f6:	f63f af76 	bhi.w	80080e6 <_strtod_l+0x19e>
 80081fa:	3a30      	subs	r2, #48	@ 0x30
 80081fc:	f04f 080a 	mov.w	r8, #10
 8008200:	920e      	str	r2, [sp, #56]	@ 0x38
 8008202:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008204:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008206:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008208:	1c56      	adds	r6, r2, #1
 800820a:	9619      	str	r6, [sp, #100]	@ 0x64
 800820c:	7852      	ldrb	r2, [r2, #1]
 800820e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008212:	f1be 0f09 	cmp.w	lr, #9
 8008216:	d939      	bls.n	800828c <_strtod_l+0x344>
 8008218:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800821a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800821e:	1a76      	subs	r6, r6, r1
 8008220:	2e08      	cmp	r6, #8
 8008222:	dc03      	bgt.n	800822c <_strtod_l+0x2e4>
 8008224:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008226:	4588      	cmp	r8, r1
 8008228:	bfa8      	it	ge
 800822a:	4688      	movge	r8, r1
 800822c:	f1bc 0f00 	cmp.w	ip, #0
 8008230:	d001      	beq.n	8008236 <_strtod_l+0x2ee>
 8008232:	f1c8 0800 	rsb	r8, r8, #0
 8008236:	2d00      	cmp	r5, #0
 8008238:	d14e      	bne.n	80082d8 <_strtod_l+0x390>
 800823a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800823c:	4308      	orrs	r0, r1
 800823e:	f47f aebc 	bne.w	8007fba <_strtod_l+0x72>
 8008242:	2b00      	cmp	r3, #0
 8008244:	f47f aed4 	bne.w	8007ff0 <_strtod_l+0xa8>
 8008248:	2a69      	cmp	r2, #105	@ 0x69
 800824a:	d028      	beq.n	800829e <_strtod_l+0x356>
 800824c:	dc25      	bgt.n	800829a <_strtod_l+0x352>
 800824e:	2a49      	cmp	r2, #73	@ 0x49
 8008250:	d025      	beq.n	800829e <_strtod_l+0x356>
 8008252:	2a4e      	cmp	r2, #78	@ 0x4e
 8008254:	f47f aecc 	bne.w	8007ff0 <_strtod_l+0xa8>
 8008258:	499b      	ldr	r1, [pc, #620]	@ (80084c8 <_strtod_l+0x580>)
 800825a:	a819      	add	r0, sp, #100	@ 0x64
 800825c:	f001 f9e8 	bl	8009630 <__match>
 8008260:	2800      	cmp	r0, #0
 8008262:	f43f aec5 	beq.w	8007ff0 <_strtod_l+0xa8>
 8008266:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008268:	781b      	ldrb	r3, [r3, #0]
 800826a:	2b28      	cmp	r3, #40	@ 0x28
 800826c:	d12e      	bne.n	80082cc <_strtod_l+0x384>
 800826e:	aa1c      	add	r2, sp, #112	@ 0x70
 8008270:	4996      	ldr	r1, [pc, #600]	@ (80084cc <_strtod_l+0x584>)
 8008272:	a819      	add	r0, sp, #100	@ 0x64
 8008274:	f001 f9f0 	bl	8009658 <__hexnan>
 8008278:	2805      	cmp	r0, #5
 800827a:	d127      	bne.n	80082cc <_strtod_l+0x384>
 800827c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800827e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008282:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008286:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800828a:	e696      	b.n	8007fba <_strtod_l+0x72>
 800828c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800828e:	fb08 2101 	mla	r1, r8, r1, r2
 8008292:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008296:	920e      	str	r2, [sp, #56]	@ 0x38
 8008298:	e7b5      	b.n	8008206 <_strtod_l+0x2be>
 800829a:	2a6e      	cmp	r2, #110	@ 0x6e
 800829c:	e7da      	b.n	8008254 <_strtod_l+0x30c>
 800829e:	498c      	ldr	r1, [pc, #560]	@ (80084d0 <_strtod_l+0x588>)
 80082a0:	a819      	add	r0, sp, #100	@ 0x64
 80082a2:	f001 f9c5 	bl	8009630 <__match>
 80082a6:	2800      	cmp	r0, #0
 80082a8:	f43f aea2 	beq.w	8007ff0 <_strtod_l+0xa8>
 80082ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082ae:	a819      	add	r0, sp, #100	@ 0x64
 80082b0:	4988      	ldr	r1, [pc, #544]	@ (80084d4 <_strtod_l+0x58c>)
 80082b2:	3b01      	subs	r3, #1
 80082b4:	9319      	str	r3, [sp, #100]	@ 0x64
 80082b6:	f001 f9bb 	bl	8009630 <__match>
 80082ba:	b910      	cbnz	r0, 80082c2 <_strtod_l+0x37a>
 80082bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80082be:	3301      	adds	r3, #1
 80082c0:	9319      	str	r3, [sp, #100]	@ 0x64
 80082c2:	f8df b220 	ldr.w	fp, [pc, #544]	@ 80084e4 <_strtod_l+0x59c>
 80082c6:	f04f 0a00 	mov.w	sl, #0
 80082ca:	e676      	b.n	8007fba <_strtod_l+0x72>
 80082cc:	4882      	ldr	r0, [pc, #520]	@ (80084d8 <_strtod_l+0x590>)
 80082ce:	f000 feef 	bl	80090b0 <nan>
 80082d2:	ec5b ab10 	vmov	sl, fp, d0
 80082d6:	e670      	b.n	8007fba <_strtod_l+0x72>
 80082d8:	eba8 0309 	sub.w	r3, r8, r9
 80082dc:	2f00      	cmp	r7, #0
 80082de:	bf08      	it	eq
 80082e0:	462f      	moveq	r7, r5
 80082e2:	2d10      	cmp	r5, #16
 80082e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80082e6:	462c      	mov	r4, r5
 80082e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80082ea:	bfa8      	it	ge
 80082ec:	2410      	movge	r4, #16
 80082ee:	f7f8 f8ed 	bl	80004cc <__aeabi_ui2d>
 80082f2:	2d09      	cmp	r5, #9
 80082f4:	4682      	mov	sl, r0
 80082f6:	468b      	mov	fp, r1
 80082f8:	dc13      	bgt.n	8008322 <_strtod_l+0x3da>
 80082fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f43f ae5c 	beq.w	8007fba <_strtod_l+0x72>
 8008302:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008304:	dd78      	ble.n	80083f8 <_strtod_l+0x4b0>
 8008306:	2b16      	cmp	r3, #22
 8008308:	dc5f      	bgt.n	80083ca <_strtod_l+0x482>
 800830a:	4974      	ldr	r1, [pc, #464]	@ (80084dc <_strtod_l+0x594>)
 800830c:	4652      	mov	r2, sl
 800830e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008312:	465b      	mov	r3, fp
 8008314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008318:	f7f8 f952 	bl	80005c0 <__aeabi_dmul>
 800831c:	4682      	mov	sl, r0
 800831e:	468b      	mov	fp, r1
 8008320:	e64b      	b.n	8007fba <_strtod_l+0x72>
 8008322:	4b6e      	ldr	r3, [pc, #440]	@ (80084dc <_strtod_l+0x594>)
 8008324:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008328:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800832c:	f7f8 f948 	bl	80005c0 <__aeabi_dmul>
 8008330:	4682      	mov	sl, r0
 8008332:	468b      	mov	fp, r1
 8008334:	9808      	ldr	r0, [sp, #32]
 8008336:	f7f8 f8c9 	bl	80004cc <__aeabi_ui2d>
 800833a:	4602      	mov	r2, r0
 800833c:	460b      	mov	r3, r1
 800833e:	4650      	mov	r0, sl
 8008340:	4659      	mov	r1, fp
 8008342:	f7f7 ff87 	bl	8000254 <__adddf3>
 8008346:	2d0f      	cmp	r5, #15
 8008348:	4682      	mov	sl, r0
 800834a:	468b      	mov	fp, r1
 800834c:	ddd5      	ble.n	80082fa <_strtod_l+0x3b2>
 800834e:	1b2c      	subs	r4, r5, r4
 8008350:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008352:	441c      	add	r4, r3
 8008354:	2c00      	cmp	r4, #0
 8008356:	f340 8096 	ble.w	8008486 <_strtod_l+0x53e>
 800835a:	f014 030f 	ands.w	r3, r4, #15
 800835e:	d00a      	beq.n	8008376 <_strtod_l+0x42e>
 8008360:	495e      	ldr	r1, [pc, #376]	@ (80084dc <_strtod_l+0x594>)
 8008362:	4652      	mov	r2, sl
 8008364:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008368:	465b      	mov	r3, fp
 800836a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800836e:	f7f8 f927 	bl	80005c0 <__aeabi_dmul>
 8008372:	4682      	mov	sl, r0
 8008374:	468b      	mov	fp, r1
 8008376:	f034 040f 	bics.w	r4, r4, #15
 800837a:	d073      	beq.n	8008464 <_strtod_l+0x51c>
 800837c:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008380:	dd48      	ble.n	8008414 <_strtod_l+0x4cc>
 8008382:	2400      	movs	r4, #0
 8008384:	46a0      	mov	r8, r4
 8008386:	46a1      	mov	r9, r4
 8008388:	940a      	str	r4, [sp, #40]	@ 0x28
 800838a:	2322      	movs	r3, #34	@ 0x22
 800838c:	9a05      	ldr	r2, [sp, #20]
 800838e:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80084e4 <_strtod_l+0x59c>
 8008392:	f04f 0a00 	mov.w	sl, #0
 8008396:	6013      	str	r3, [r2, #0]
 8008398:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800839a:	2b00      	cmp	r3, #0
 800839c:	f43f ae0d 	beq.w	8007fba <_strtod_l+0x72>
 80083a0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80083a2:	9805      	ldr	r0, [sp, #20]
 80083a4:	f7ff f934 	bl	8007610 <_Bfree>
 80083a8:	4649      	mov	r1, r9
 80083aa:	9805      	ldr	r0, [sp, #20]
 80083ac:	f7ff f930 	bl	8007610 <_Bfree>
 80083b0:	4641      	mov	r1, r8
 80083b2:	9805      	ldr	r0, [sp, #20]
 80083b4:	f7ff f92c 	bl	8007610 <_Bfree>
 80083b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80083ba:	9805      	ldr	r0, [sp, #20]
 80083bc:	f7ff f928 	bl	8007610 <_Bfree>
 80083c0:	4621      	mov	r1, r4
 80083c2:	9805      	ldr	r0, [sp, #20]
 80083c4:	f7ff f924 	bl	8007610 <_Bfree>
 80083c8:	e5f7      	b.n	8007fba <_strtod_l+0x72>
 80083ca:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80083ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083d0:	4293      	cmp	r3, r2
 80083d2:	dbbc      	blt.n	800834e <_strtod_l+0x406>
 80083d4:	f1c5 050f 	rsb	r5, r5, #15
 80083d8:	4c40      	ldr	r4, [pc, #256]	@ (80084dc <_strtod_l+0x594>)
 80083da:	4652      	mov	r2, sl
 80083dc:	465b      	mov	r3, fp
 80083de:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80083e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083e6:	f7f8 f8eb 	bl	80005c0 <__aeabi_dmul>
 80083ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ec:	1b5d      	subs	r5, r3, r5
 80083ee:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 80083f6:	e78f      	b.n	8008318 <_strtod_l+0x3d0>
 80083f8:	3316      	adds	r3, #22
 80083fa:	dba8      	blt.n	800834e <_strtod_l+0x406>
 80083fc:	eba9 0808 	sub.w	r8, r9, r8
 8008400:	4b36      	ldr	r3, [pc, #216]	@ (80084dc <_strtod_l+0x594>)
 8008402:	4650      	mov	r0, sl
 8008404:	4659      	mov	r1, fp
 8008406:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800840a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800840e:	f7f8 fa01 	bl	8000814 <__aeabi_ddiv>
 8008412:	e783      	b.n	800831c <_strtod_l+0x3d4>
 8008414:	4b32      	ldr	r3, [pc, #200]	@ (80084e0 <_strtod_l+0x598>)
 8008416:	1124      	asrs	r4, r4, #4
 8008418:	4650      	mov	r0, sl
 800841a:	4659      	mov	r1, fp
 800841c:	9308      	str	r3, [sp, #32]
 800841e:	2300      	movs	r3, #0
 8008420:	461e      	mov	r6, r3
 8008422:	2c01      	cmp	r4, #1
 8008424:	dc21      	bgt.n	800846a <_strtod_l+0x522>
 8008426:	b10b      	cbz	r3, 800842c <_strtod_l+0x4e4>
 8008428:	4682      	mov	sl, r0
 800842a:	468b      	mov	fp, r1
 800842c:	492c      	ldr	r1, [pc, #176]	@ (80084e0 <_strtod_l+0x598>)
 800842e:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008432:	4652      	mov	r2, sl
 8008434:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008438:	465b      	mov	r3, fp
 800843a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800843e:	f7f8 f8bf 	bl	80005c0 <__aeabi_dmul>
 8008442:	4b28      	ldr	r3, [pc, #160]	@ (80084e4 <_strtod_l+0x59c>)
 8008444:	460a      	mov	r2, r1
 8008446:	4682      	mov	sl, r0
 8008448:	400b      	ands	r3, r1
 800844a:	4927      	ldr	r1, [pc, #156]	@ (80084e8 <_strtod_l+0x5a0>)
 800844c:	428b      	cmp	r3, r1
 800844e:	d898      	bhi.n	8008382 <_strtod_l+0x43a>
 8008450:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008454:	428b      	cmp	r3, r1
 8008456:	bf86      	itte	hi
 8008458:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 80084ec <_strtod_l+0x5a4>
 800845c:	f04f 3aff 	movhi.w	sl, #4294967295
 8008460:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008464:	2300      	movs	r3, #0
 8008466:	9308      	str	r3, [sp, #32]
 8008468:	e07a      	b.n	8008560 <_strtod_l+0x618>
 800846a:	07e2      	lsls	r2, r4, #31
 800846c:	d505      	bpl.n	800847a <_strtod_l+0x532>
 800846e:	9b08      	ldr	r3, [sp, #32]
 8008470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008474:	f7f8 f8a4 	bl	80005c0 <__aeabi_dmul>
 8008478:	2301      	movs	r3, #1
 800847a:	9a08      	ldr	r2, [sp, #32]
 800847c:	3601      	adds	r6, #1
 800847e:	1064      	asrs	r4, r4, #1
 8008480:	3208      	adds	r2, #8
 8008482:	9208      	str	r2, [sp, #32]
 8008484:	e7cd      	b.n	8008422 <_strtod_l+0x4da>
 8008486:	d0ed      	beq.n	8008464 <_strtod_l+0x51c>
 8008488:	4264      	negs	r4, r4
 800848a:	f014 020f 	ands.w	r2, r4, #15
 800848e:	d00a      	beq.n	80084a6 <_strtod_l+0x55e>
 8008490:	4b12      	ldr	r3, [pc, #72]	@ (80084dc <_strtod_l+0x594>)
 8008492:	4650      	mov	r0, sl
 8008494:	4659      	mov	r1, fp
 8008496:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800849a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800849e:	f7f8 f9b9 	bl	8000814 <__aeabi_ddiv>
 80084a2:	4682      	mov	sl, r0
 80084a4:	468b      	mov	fp, r1
 80084a6:	1124      	asrs	r4, r4, #4
 80084a8:	d0dc      	beq.n	8008464 <_strtod_l+0x51c>
 80084aa:	2c1f      	cmp	r4, #31
 80084ac:	dd20      	ble.n	80084f0 <_strtod_l+0x5a8>
 80084ae:	2400      	movs	r4, #0
 80084b0:	46a0      	mov	r8, r4
 80084b2:	46a1      	mov	r9, r4
 80084b4:	940a      	str	r4, [sp, #40]	@ 0x28
 80084b6:	2322      	movs	r3, #34	@ 0x22
 80084b8:	9a05      	ldr	r2, [sp, #20]
 80084ba:	f04f 0a00 	mov.w	sl, #0
 80084be:	f04f 0b00 	mov.w	fp, #0
 80084c2:	6013      	str	r3, [r2, #0]
 80084c4:	e768      	b.n	8008398 <_strtod_l+0x450>
 80084c6:	bf00      	nop
 80084c8:	08009e65 	.word	0x08009e65
 80084cc:	0800a07c 	.word	0x0800a07c
 80084d0:	08009e5d 	.word	0x08009e5d
 80084d4:	08009e94 	.word	0x08009e94
 80084d8:	0800a225 	.word	0x0800a225
 80084dc:	08009fb0 	.word	0x08009fb0
 80084e0:	08009f88 	.word	0x08009f88
 80084e4:	7ff00000 	.word	0x7ff00000
 80084e8:	7ca00000 	.word	0x7ca00000
 80084ec:	7fefffff 	.word	0x7fefffff
 80084f0:	f014 0310 	ands.w	r3, r4, #16
 80084f4:	4650      	mov	r0, sl
 80084f6:	4659      	mov	r1, fp
 80084f8:	4ea9      	ldr	r6, [pc, #676]	@ (80087a0 <_strtod_l+0x858>)
 80084fa:	bf18      	it	ne
 80084fc:	236a      	movne	r3, #106	@ 0x6a
 80084fe:	9308      	str	r3, [sp, #32]
 8008500:	2300      	movs	r3, #0
 8008502:	07e2      	lsls	r2, r4, #31
 8008504:	d504      	bpl.n	8008510 <_strtod_l+0x5c8>
 8008506:	e9d6 2300 	ldrd	r2, r3, [r6]
 800850a:	f7f8 f859 	bl	80005c0 <__aeabi_dmul>
 800850e:	2301      	movs	r3, #1
 8008510:	1064      	asrs	r4, r4, #1
 8008512:	f106 0608 	add.w	r6, r6, #8
 8008516:	d1f4      	bne.n	8008502 <_strtod_l+0x5ba>
 8008518:	b10b      	cbz	r3, 800851e <_strtod_l+0x5d6>
 800851a:	4682      	mov	sl, r0
 800851c:	468b      	mov	fp, r1
 800851e:	9b08      	ldr	r3, [sp, #32]
 8008520:	b1b3      	cbz	r3, 8008550 <_strtod_l+0x608>
 8008522:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008526:	4659      	mov	r1, fp
 8008528:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800852c:	2b00      	cmp	r3, #0
 800852e:	dd0f      	ble.n	8008550 <_strtod_l+0x608>
 8008530:	2b1f      	cmp	r3, #31
 8008532:	dd55      	ble.n	80085e0 <_strtod_l+0x698>
 8008534:	2b34      	cmp	r3, #52	@ 0x34
 8008536:	f04f 0a00 	mov.w	sl, #0
 800853a:	bfdb      	ittet	le
 800853c:	f04f 33ff 	movle.w	r3, #4294967295
 8008540:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008544:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008548:	4093      	lslle	r3, r2
 800854a:	bfd8      	it	le
 800854c:	ea03 0b01 	andle.w	fp, r3, r1
 8008550:	2200      	movs	r2, #0
 8008552:	2300      	movs	r3, #0
 8008554:	4650      	mov	r0, sl
 8008556:	4659      	mov	r1, fp
 8008558:	f7f8 fa9a 	bl	8000a90 <__aeabi_dcmpeq>
 800855c:	2800      	cmp	r0, #0
 800855e:	d1a6      	bne.n	80084ae <_strtod_l+0x566>
 8008560:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008562:	463a      	mov	r2, r7
 8008564:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8008566:	9300      	str	r3, [sp, #0]
 8008568:	462b      	mov	r3, r5
 800856a:	9805      	ldr	r0, [sp, #20]
 800856c:	f7ff f8ba 	bl	80076e4 <__s2b>
 8008570:	900a      	str	r0, [sp, #40]	@ 0x28
 8008572:	2800      	cmp	r0, #0
 8008574:	f43f af05 	beq.w	8008382 <_strtod_l+0x43a>
 8008578:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800857a:	eba9 0308 	sub.w	r3, r9, r8
 800857e:	2400      	movs	r4, #0
 8008580:	2a00      	cmp	r2, #0
 8008582:	46a0      	mov	r8, r4
 8008584:	bfa8      	it	ge
 8008586:	2300      	movge	r3, #0
 8008588:	9312      	str	r3, [sp, #72]	@ 0x48
 800858a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800858e:	9316      	str	r3, [sp, #88]	@ 0x58
 8008590:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008592:	9805      	ldr	r0, [sp, #20]
 8008594:	6859      	ldr	r1, [r3, #4]
 8008596:	f7fe fffb 	bl	8007590 <_Balloc>
 800859a:	4681      	mov	r9, r0
 800859c:	2800      	cmp	r0, #0
 800859e:	f43f aef4 	beq.w	800838a <_strtod_l+0x442>
 80085a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80085a4:	300c      	adds	r0, #12
 80085a6:	691a      	ldr	r2, [r3, #16]
 80085a8:	f103 010c 	add.w	r1, r3, #12
 80085ac:	3202      	adds	r2, #2
 80085ae:	0092      	lsls	r2, r2, #2
 80085b0:	f000 fd70 	bl	8009094 <memcpy>
 80085b4:	aa1c      	add	r2, sp, #112	@ 0x70
 80085b6:	a91b      	add	r1, sp, #108	@ 0x6c
 80085b8:	9805      	ldr	r0, [sp, #20]
 80085ba:	ec4b ab10 	vmov	d0, sl, fp
 80085be:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80085c2:	f7ff fbd3 	bl	8007d6c <__d2b>
 80085c6:	901a      	str	r0, [sp, #104]	@ 0x68
 80085c8:	2800      	cmp	r0, #0
 80085ca:	f43f aede 	beq.w	800838a <_strtod_l+0x442>
 80085ce:	2101      	movs	r1, #1
 80085d0:	9805      	ldr	r0, [sp, #20]
 80085d2:	f7ff f91d 	bl	8007810 <__i2b>
 80085d6:	4680      	mov	r8, r0
 80085d8:	b948      	cbnz	r0, 80085ee <_strtod_l+0x6a6>
 80085da:	f04f 0800 	mov.w	r8, #0
 80085de:	e6d4      	b.n	800838a <_strtod_l+0x442>
 80085e0:	f04f 32ff 	mov.w	r2, #4294967295
 80085e4:	fa02 f303 	lsl.w	r3, r2, r3
 80085e8:	ea03 0a0a 	and.w	sl, r3, sl
 80085ec:	e7b0      	b.n	8008550 <_strtod_l+0x608>
 80085ee:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80085f0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80085f2:	2d00      	cmp	r5, #0
 80085f4:	bfa9      	itett	ge
 80085f6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80085f8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80085fa:	18ef      	addge	r7, r5, r3
 80085fc:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80085fe:	bfb8      	it	lt
 8008600:	1b5e      	sublt	r6, r3, r5
 8008602:	9b08      	ldr	r3, [sp, #32]
 8008604:	bfb8      	it	lt
 8008606:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8008608:	1aed      	subs	r5, r5, r3
 800860a:	4b66      	ldr	r3, [pc, #408]	@ (80087a4 <_strtod_l+0x85c>)
 800860c:	4415      	add	r5, r2
 800860e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008612:	3d01      	subs	r5, #1
 8008614:	429d      	cmp	r5, r3
 8008616:	da4f      	bge.n	80086b8 <_strtod_l+0x770>
 8008618:	1b5b      	subs	r3, r3, r5
 800861a:	2101      	movs	r1, #1
 800861c:	2b1f      	cmp	r3, #31
 800861e:	eba2 0203 	sub.w	r2, r2, r3
 8008622:	dc3d      	bgt.n	80086a0 <_strtod_l+0x758>
 8008624:	fa01 f303 	lsl.w	r3, r1, r3
 8008628:	9313      	str	r3, [sp, #76]	@ 0x4c
 800862a:	2300      	movs	r3, #0
 800862c:	9310      	str	r3, [sp, #64]	@ 0x40
 800862e:	18bd      	adds	r5, r7, r2
 8008630:	9b08      	ldr	r3, [sp, #32]
 8008632:	4416      	add	r6, r2
 8008634:	42af      	cmp	r7, r5
 8008636:	441e      	add	r6, r3
 8008638:	463b      	mov	r3, r7
 800863a:	bfa8      	it	ge
 800863c:	462b      	movge	r3, r5
 800863e:	42b3      	cmp	r3, r6
 8008640:	bfa8      	it	ge
 8008642:	4633      	movge	r3, r6
 8008644:	2b00      	cmp	r3, #0
 8008646:	bfc2      	ittt	gt
 8008648:	1aed      	subgt	r5, r5, r3
 800864a:	1af6      	subgt	r6, r6, r3
 800864c:	1aff      	subgt	r7, r7, r3
 800864e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008650:	2b00      	cmp	r3, #0
 8008652:	dd16      	ble.n	8008682 <_strtod_l+0x73a>
 8008654:	4641      	mov	r1, r8
 8008656:	461a      	mov	r2, r3
 8008658:	9805      	ldr	r0, [sp, #20]
 800865a:	f7ff f999 	bl	8007990 <__pow5mult>
 800865e:	4680      	mov	r8, r0
 8008660:	2800      	cmp	r0, #0
 8008662:	d0ba      	beq.n	80085da <_strtod_l+0x692>
 8008664:	4601      	mov	r1, r0
 8008666:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008668:	9805      	ldr	r0, [sp, #20]
 800866a:	f7ff f8e7 	bl	800783c <__multiply>
 800866e:	900e      	str	r0, [sp, #56]	@ 0x38
 8008670:	2800      	cmp	r0, #0
 8008672:	f43f ae8a 	beq.w	800838a <_strtod_l+0x442>
 8008676:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008678:	9805      	ldr	r0, [sp, #20]
 800867a:	f7fe ffc9 	bl	8007610 <_Bfree>
 800867e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008680:	931a      	str	r3, [sp, #104]	@ 0x68
 8008682:	2d00      	cmp	r5, #0
 8008684:	dc1d      	bgt.n	80086c2 <_strtod_l+0x77a>
 8008686:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	dd23      	ble.n	80086d4 <_strtod_l+0x78c>
 800868c:	4649      	mov	r1, r9
 800868e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8008690:	9805      	ldr	r0, [sp, #20]
 8008692:	f7ff f97d 	bl	8007990 <__pow5mult>
 8008696:	4681      	mov	r9, r0
 8008698:	b9e0      	cbnz	r0, 80086d4 <_strtod_l+0x78c>
 800869a:	f04f 0900 	mov.w	r9, #0
 800869e:	e674      	b.n	800838a <_strtod_l+0x442>
 80086a0:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80086a4:	9113      	str	r1, [sp, #76]	@ 0x4c
 80086a6:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80086aa:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80086ae:	35e2      	adds	r5, #226	@ 0xe2
 80086b0:	fa01 f305 	lsl.w	r3, r1, r5
 80086b4:	9310      	str	r3, [sp, #64]	@ 0x40
 80086b6:	e7ba      	b.n	800862e <_strtod_l+0x6e6>
 80086b8:	2300      	movs	r3, #0
 80086ba:	9310      	str	r3, [sp, #64]	@ 0x40
 80086bc:	2301      	movs	r3, #1
 80086be:	9313      	str	r3, [sp, #76]	@ 0x4c
 80086c0:	e7b5      	b.n	800862e <_strtod_l+0x6e6>
 80086c2:	462a      	mov	r2, r5
 80086c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80086c6:	9805      	ldr	r0, [sp, #20]
 80086c8:	f7ff f9bc 	bl	8007a44 <__lshift>
 80086cc:	901a      	str	r0, [sp, #104]	@ 0x68
 80086ce:	2800      	cmp	r0, #0
 80086d0:	d1d9      	bne.n	8008686 <_strtod_l+0x73e>
 80086d2:	e65a      	b.n	800838a <_strtod_l+0x442>
 80086d4:	2e00      	cmp	r6, #0
 80086d6:	dd07      	ble.n	80086e8 <_strtod_l+0x7a0>
 80086d8:	4649      	mov	r1, r9
 80086da:	4632      	mov	r2, r6
 80086dc:	9805      	ldr	r0, [sp, #20]
 80086de:	f7ff f9b1 	bl	8007a44 <__lshift>
 80086e2:	4681      	mov	r9, r0
 80086e4:	2800      	cmp	r0, #0
 80086e6:	d0d8      	beq.n	800869a <_strtod_l+0x752>
 80086e8:	2f00      	cmp	r7, #0
 80086ea:	dd08      	ble.n	80086fe <_strtod_l+0x7b6>
 80086ec:	4641      	mov	r1, r8
 80086ee:	463a      	mov	r2, r7
 80086f0:	9805      	ldr	r0, [sp, #20]
 80086f2:	f7ff f9a7 	bl	8007a44 <__lshift>
 80086f6:	4680      	mov	r8, r0
 80086f8:	2800      	cmp	r0, #0
 80086fa:	f43f ae46 	beq.w	800838a <_strtod_l+0x442>
 80086fe:	464a      	mov	r2, r9
 8008700:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008702:	9805      	ldr	r0, [sp, #20]
 8008704:	f7ff fa26 	bl	8007b54 <__mdiff>
 8008708:	4604      	mov	r4, r0
 800870a:	2800      	cmp	r0, #0
 800870c:	f43f ae3d 	beq.w	800838a <_strtod_l+0x442>
 8008710:	68c3      	ldr	r3, [r0, #12]
 8008712:	4641      	mov	r1, r8
 8008714:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008716:	2300      	movs	r3, #0
 8008718:	60c3      	str	r3, [r0, #12]
 800871a:	f7ff f9ff 	bl	8007b1c <__mcmp>
 800871e:	2800      	cmp	r0, #0
 8008720:	da46      	bge.n	80087b0 <_strtod_l+0x868>
 8008722:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008724:	ea53 030a 	orrs.w	r3, r3, sl
 8008728:	d16c      	bne.n	8008804 <_strtod_l+0x8bc>
 800872a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800872e:	2b00      	cmp	r3, #0
 8008730:	d168      	bne.n	8008804 <_strtod_l+0x8bc>
 8008732:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008736:	0d1b      	lsrs	r3, r3, #20
 8008738:	051b      	lsls	r3, r3, #20
 800873a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800873e:	d961      	bls.n	8008804 <_strtod_l+0x8bc>
 8008740:	6963      	ldr	r3, [r4, #20]
 8008742:	b913      	cbnz	r3, 800874a <_strtod_l+0x802>
 8008744:	6923      	ldr	r3, [r4, #16]
 8008746:	2b01      	cmp	r3, #1
 8008748:	dd5c      	ble.n	8008804 <_strtod_l+0x8bc>
 800874a:	4621      	mov	r1, r4
 800874c:	2201      	movs	r2, #1
 800874e:	9805      	ldr	r0, [sp, #20]
 8008750:	f7ff f978 	bl	8007a44 <__lshift>
 8008754:	4641      	mov	r1, r8
 8008756:	4604      	mov	r4, r0
 8008758:	f7ff f9e0 	bl	8007b1c <__mcmp>
 800875c:	2800      	cmp	r0, #0
 800875e:	dd51      	ble.n	8008804 <_strtod_l+0x8bc>
 8008760:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008764:	9a08      	ldr	r2, [sp, #32]
 8008766:	0d1b      	lsrs	r3, r3, #20
 8008768:	051b      	lsls	r3, r3, #20
 800876a:	2a00      	cmp	r2, #0
 800876c:	d06b      	beq.n	8008846 <_strtod_l+0x8fe>
 800876e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8008772:	d868      	bhi.n	8008846 <_strtod_l+0x8fe>
 8008774:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8008778:	f67f ae9d 	bls.w	80084b6 <_strtod_l+0x56e>
 800877c:	4b0a      	ldr	r3, [pc, #40]	@ (80087a8 <_strtod_l+0x860>)
 800877e:	4650      	mov	r0, sl
 8008780:	4659      	mov	r1, fp
 8008782:	2200      	movs	r2, #0
 8008784:	f7f7 ff1c 	bl	80005c0 <__aeabi_dmul>
 8008788:	4b08      	ldr	r3, [pc, #32]	@ (80087ac <_strtod_l+0x864>)
 800878a:	4682      	mov	sl, r0
 800878c:	468b      	mov	fp, r1
 800878e:	400b      	ands	r3, r1
 8008790:	2b00      	cmp	r3, #0
 8008792:	f47f ae05 	bne.w	80083a0 <_strtod_l+0x458>
 8008796:	2322      	movs	r3, #34	@ 0x22
 8008798:	9a05      	ldr	r2, [sp, #20]
 800879a:	6013      	str	r3, [r2, #0]
 800879c:	e600      	b.n	80083a0 <_strtod_l+0x458>
 800879e:	bf00      	nop
 80087a0:	0800a0a8 	.word	0x0800a0a8
 80087a4:	fffffc02 	.word	0xfffffc02
 80087a8:	39500000 	.word	0x39500000
 80087ac:	7ff00000 	.word	0x7ff00000
 80087b0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80087b4:	d165      	bne.n	8008882 <_strtod_l+0x93a>
 80087b6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80087b8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087bc:	b35a      	cbz	r2, 8008816 <_strtod_l+0x8ce>
 80087be:	4a9e      	ldr	r2, [pc, #632]	@ (8008a38 <_strtod_l+0xaf0>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d12b      	bne.n	800881c <_strtod_l+0x8d4>
 80087c4:	9b08      	ldr	r3, [sp, #32]
 80087c6:	4651      	mov	r1, sl
 80087c8:	b303      	cbz	r3, 800880c <_strtod_l+0x8c4>
 80087ca:	465a      	mov	r2, fp
 80087cc:	4b9b      	ldr	r3, [pc, #620]	@ (8008a3c <_strtod_l+0xaf4>)
 80087ce:	4013      	ands	r3, r2
 80087d0:	f04f 32ff 	mov.w	r2, #4294967295
 80087d4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80087d8:	d81b      	bhi.n	8008812 <_strtod_l+0x8ca>
 80087da:	0d1b      	lsrs	r3, r3, #20
 80087dc:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80087e0:	fa02 f303 	lsl.w	r3, r2, r3
 80087e4:	4299      	cmp	r1, r3
 80087e6:	d119      	bne.n	800881c <_strtod_l+0x8d4>
 80087e8:	4b95      	ldr	r3, [pc, #596]	@ (8008a40 <_strtod_l+0xaf8>)
 80087ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d102      	bne.n	80087f6 <_strtod_l+0x8ae>
 80087f0:	3101      	adds	r1, #1
 80087f2:	f43f adca 	beq.w	800838a <_strtod_l+0x442>
 80087f6:	4b91      	ldr	r3, [pc, #580]	@ (8008a3c <_strtod_l+0xaf4>)
 80087f8:	f04f 0a00 	mov.w	sl, #0
 80087fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087fe:	401a      	ands	r2, r3
 8008800:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8008804:	9b08      	ldr	r3, [sp, #32]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d1b8      	bne.n	800877c <_strtod_l+0x834>
 800880a:	e5c9      	b.n	80083a0 <_strtod_l+0x458>
 800880c:	f04f 33ff 	mov.w	r3, #4294967295
 8008810:	e7e8      	b.n	80087e4 <_strtod_l+0x89c>
 8008812:	4613      	mov	r3, r2
 8008814:	e7e6      	b.n	80087e4 <_strtod_l+0x89c>
 8008816:	ea53 030a 	orrs.w	r3, r3, sl
 800881a:	d0a1      	beq.n	8008760 <_strtod_l+0x818>
 800881c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800881e:	b1db      	cbz	r3, 8008858 <_strtod_l+0x910>
 8008820:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008822:	4213      	tst	r3, r2
 8008824:	d0ee      	beq.n	8008804 <_strtod_l+0x8bc>
 8008826:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008828:	4650      	mov	r0, sl
 800882a:	9a08      	ldr	r2, [sp, #32]
 800882c:	4659      	mov	r1, fp
 800882e:	b1bb      	cbz	r3, 8008860 <_strtod_l+0x918>
 8008830:	f7ff fb6a 	bl	8007f08 <sulp>
 8008834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008838:	ec53 2b10 	vmov	r2, r3, d0
 800883c:	f7f7 fd0a 	bl	8000254 <__adddf3>
 8008840:	4682      	mov	sl, r0
 8008842:	468b      	mov	fp, r1
 8008844:	e7de      	b.n	8008804 <_strtod_l+0x8bc>
 8008846:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800884a:	f04f 3aff 	mov.w	sl, #4294967295
 800884e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008852:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008856:	e7d5      	b.n	8008804 <_strtod_l+0x8bc>
 8008858:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800885a:	ea13 0f0a 	tst.w	r3, sl
 800885e:	e7e1      	b.n	8008824 <_strtod_l+0x8dc>
 8008860:	f7ff fb52 	bl	8007f08 <sulp>
 8008864:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008868:	ec53 2b10 	vmov	r2, r3, d0
 800886c:	f7f7 fcf0 	bl	8000250 <__aeabi_dsub>
 8008870:	2200      	movs	r2, #0
 8008872:	2300      	movs	r3, #0
 8008874:	4682      	mov	sl, r0
 8008876:	468b      	mov	fp, r1
 8008878:	f7f8 f90a 	bl	8000a90 <__aeabi_dcmpeq>
 800887c:	2800      	cmp	r0, #0
 800887e:	d0c1      	beq.n	8008804 <_strtod_l+0x8bc>
 8008880:	e619      	b.n	80084b6 <_strtod_l+0x56e>
 8008882:	4641      	mov	r1, r8
 8008884:	4620      	mov	r0, r4
 8008886:	f7ff fac9 	bl	8007e1c <__ratio>
 800888a:	2200      	movs	r2, #0
 800888c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008890:	ec57 6b10 	vmov	r6, r7, d0
 8008894:	4630      	mov	r0, r6
 8008896:	4639      	mov	r1, r7
 8008898:	f7f8 f90e 	bl	8000ab8 <__aeabi_dcmple>
 800889c:	2800      	cmp	r0, #0
 800889e:	d06f      	beq.n	8008980 <_strtod_l+0xa38>
 80088a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d17a      	bne.n	800899c <_strtod_l+0xa54>
 80088a6:	f1ba 0f00 	cmp.w	sl, #0
 80088aa:	d158      	bne.n	800895e <_strtod_l+0xa16>
 80088ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d15a      	bne.n	800896c <_strtod_l+0xa24>
 80088b6:	2200      	movs	r2, #0
 80088b8:	4b62      	ldr	r3, [pc, #392]	@ (8008a44 <_strtod_l+0xafc>)
 80088ba:	4630      	mov	r0, r6
 80088bc:	4639      	mov	r1, r7
 80088be:	f7f8 f8f1 	bl	8000aa4 <__aeabi_dcmplt>
 80088c2:	2800      	cmp	r0, #0
 80088c4:	d159      	bne.n	800897a <_strtod_l+0xa32>
 80088c6:	4630      	mov	r0, r6
 80088c8:	4639      	mov	r1, r7
 80088ca:	2200      	movs	r2, #0
 80088cc:	4b5e      	ldr	r3, [pc, #376]	@ (8008a48 <_strtod_l+0xb00>)
 80088ce:	f7f7 fe77 	bl	80005c0 <__aeabi_dmul>
 80088d2:	4606      	mov	r6, r0
 80088d4:	460f      	mov	r7, r1
 80088d6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80088da:	9606      	str	r6, [sp, #24]
 80088dc:	9307      	str	r3, [sp, #28]
 80088de:	4d57      	ldr	r5, [pc, #348]	@ (8008a3c <_strtod_l+0xaf4>)
 80088e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80088e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ea:	401d      	ands	r5, r3
 80088ec:	4b57      	ldr	r3, [pc, #348]	@ (8008a4c <_strtod_l+0xb04>)
 80088ee:	429d      	cmp	r5, r3
 80088f0:	f040 80b0 	bne.w	8008a54 <_strtod_l+0xb0c>
 80088f4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088f6:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80088fa:	ec4b ab10 	vmov	d0, sl, fp
 80088fe:	f7ff f9c1 	bl	8007c84 <__ulp>
 8008902:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008906:	ec51 0b10 	vmov	r0, r1, d0
 800890a:	f7f7 fe59 	bl	80005c0 <__aeabi_dmul>
 800890e:	4652      	mov	r2, sl
 8008910:	465b      	mov	r3, fp
 8008912:	f7f7 fc9f 	bl	8000254 <__adddf3>
 8008916:	460b      	mov	r3, r1
 8008918:	4948      	ldr	r1, [pc, #288]	@ (8008a3c <_strtod_l+0xaf4>)
 800891a:	4682      	mov	sl, r0
 800891c:	4a4c      	ldr	r2, [pc, #304]	@ (8008a50 <_strtod_l+0xb08>)
 800891e:	4019      	ands	r1, r3
 8008920:	4291      	cmp	r1, r2
 8008922:	d942      	bls.n	80089aa <_strtod_l+0xa62>
 8008924:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008926:	4b46      	ldr	r3, [pc, #280]	@ (8008a40 <_strtod_l+0xaf8>)
 8008928:	429a      	cmp	r2, r3
 800892a:	d103      	bne.n	8008934 <_strtod_l+0x9ec>
 800892c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800892e:	3301      	adds	r3, #1
 8008930:	f43f ad2b 	beq.w	800838a <_strtod_l+0x442>
 8008934:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8008a40 <_strtod_l+0xaf8>
 8008938:	f04f 3aff 	mov.w	sl, #4294967295
 800893c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800893e:	9805      	ldr	r0, [sp, #20]
 8008940:	f7fe fe66 	bl	8007610 <_Bfree>
 8008944:	4649      	mov	r1, r9
 8008946:	9805      	ldr	r0, [sp, #20]
 8008948:	f7fe fe62 	bl	8007610 <_Bfree>
 800894c:	4641      	mov	r1, r8
 800894e:	9805      	ldr	r0, [sp, #20]
 8008950:	f7fe fe5e 	bl	8007610 <_Bfree>
 8008954:	4621      	mov	r1, r4
 8008956:	9805      	ldr	r0, [sp, #20]
 8008958:	f7fe fe5a 	bl	8007610 <_Bfree>
 800895c:	e618      	b.n	8008590 <_strtod_l+0x648>
 800895e:	f1ba 0f01 	cmp.w	sl, #1
 8008962:	d103      	bne.n	800896c <_strtod_l+0xa24>
 8008964:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008966:	2b00      	cmp	r3, #0
 8008968:	f43f ada5 	beq.w	80084b6 <_strtod_l+0x56e>
 800896c:	2600      	movs	r6, #0
 800896e:	4f35      	ldr	r7, [pc, #212]	@ (8008a44 <_strtod_l+0xafc>)
 8008970:	ed9f 7b29 	vldr	d7, [pc, #164]	@ 8008a18 <_strtod_l+0xad0>
 8008974:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008978:	e7b1      	b.n	80088de <_strtod_l+0x996>
 800897a:	2600      	movs	r6, #0
 800897c:	4f32      	ldr	r7, [pc, #200]	@ (8008a48 <_strtod_l+0xb00>)
 800897e:	e7aa      	b.n	80088d6 <_strtod_l+0x98e>
 8008980:	4b31      	ldr	r3, [pc, #196]	@ (8008a48 <_strtod_l+0xb00>)
 8008982:	4630      	mov	r0, r6
 8008984:	4639      	mov	r1, r7
 8008986:	2200      	movs	r2, #0
 8008988:	f7f7 fe1a 	bl	80005c0 <__aeabi_dmul>
 800898c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800898e:	4606      	mov	r6, r0
 8008990:	460f      	mov	r7, r1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d09f      	beq.n	80088d6 <_strtod_l+0x98e>
 8008996:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800899a:	e7a0      	b.n	80088de <_strtod_l+0x996>
 800899c:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 8008a20 <_strtod_l+0xad8>
 80089a0:	ec57 6b17 	vmov	r6, r7, d7
 80089a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80089a8:	e799      	b.n	80088de <_strtod_l+0x996>
 80089aa:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80089ae:	9b08      	ldr	r3, [sp, #32]
 80089b0:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1c1      	bne.n	800893c <_strtod_l+0x9f4>
 80089b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80089bc:	0d1b      	lsrs	r3, r3, #20
 80089be:	051b      	lsls	r3, r3, #20
 80089c0:	429d      	cmp	r5, r3
 80089c2:	d1bb      	bne.n	800893c <_strtod_l+0x9f4>
 80089c4:	4630      	mov	r0, r6
 80089c6:	4639      	mov	r1, r7
 80089c8:	f7f8 f95a 	bl	8000c80 <__aeabi_d2lz>
 80089cc:	f7f7 fdca 	bl	8000564 <__aeabi_l2d>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4630      	mov	r0, r6
 80089d6:	4639      	mov	r1, r7
 80089d8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80089dc:	f7f7 fc38 	bl	8000250 <__aeabi_dsub>
 80089e0:	460b      	mov	r3, r1
 80089e2:	4602      	mov	r2, r0
 80089e4:	ea46 060a 	orr.w	r6, r6, sl
 80089e8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80089ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ee:	431e      	orrs	r6, r3
 80089f0:	d06d      	beq.n	8008ace <_strtod_l+0xb86>
 80089f2:	a30d      	add	r3, pc, #52	@ (adr r3, 8008a28 <_strtod_l+0xae0>)
 80089f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089f8:	f7f8 f854 	bl	8000aa4 <__aeabi_dcmplt>
 80089fc:	2800      	cmp	r0, #0
 80089fe:	f47f accf 	bne.w	80083a0 <_strtod_l+0x458>
 8008a02:	a30b      	add	r3, pc, #44	@ (adr r3, 8008a30 <_strtod_l+0xae8>)
 8008a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008a0c:	f7f8 f868 	bl	8000ae0 <__aeabi_dcmpgt>
 8008a10:	2800      	cmp	r0, #0
 8008a12:	d093      	beq.n	800893c <_strtod_l+0x9f4>
 8008a14:	e4c4      	b.n	80083a0 <_strtod_l+0x458>
 8008a16:	bf00      	nop
 8008a18:	00000000 	.word	0x00000000
 8008a1c:	bff00000 	.word	0xbff00000
 8008a20:	00000000 	.word	0x00000000
 8008a24:	3ff00000 	.word	0x3ff00000
 8008a28:	94a03595 	.word	0x94a03595
 8008a2c:	3fdfffff 	.word	0x3fdfffff
 8008a30:	35afe535 	.word	0x35afe535
 8008a34:	3fe00000 	.word	0x3fe00000
 8008a38:	000fffff 	.word	0x000fffff
 8008a3c:	7ff00000 	.word	0x7ff00000
 8008a40:	7fefffff 	.word	0x7fefffff
 8008a44:	3ff00000 	.word	0x3ff00000
 8008a48:	3fe00000 	.word	0x3fe00000
 8008a4c:	7fe00000 	.word	0x7fe00000
 8008a50:	7c9fffff 	.word	0x7c9fffff
 8008a54:	9b08      	ldr	r3, [sp, #32]
 8008a56:	b323      	cbz	r3, 8008aa2 <_strtod_l+0xb5a>
 8008a58:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008a5c:	d821      	bhi.n	8008aa2 <_strtod_l+0xb5a>
 8008a5e:	4630      	mov	r0, r6
 8008a60:	4639      	mov	r1, r7
 8008a62:	a327      	add	r3, pc, #156	@ (adr r3, 8008b00 <_strtod_l+0xbb8>)
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f8 f826 	bl	8000ab8 <__aeabi_dcmple>
 8008a6c:	b1a0      	cbz	r0, 8008a98 <_strtod_l+0xb50>
 8008a6e:	4639      	mov	r1, r7
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7f8 f87d 	bl	8000b70 <__aeabi_d2uiz>
 8008a76:	2801      	cmp	r0, #1
 8008a78:	bf38      	it	cc
 8008a7a:	2001      	movcc	r0, #1
 8008a7c:	f7f7 fd26 	bl	80004cc <__aeabi_ui2d>
 8008a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a82:	4606      	mov	r6, r0
 8008a84:	460f      	mov	r7, r1
 8008a86:	b9fb      	cbnz	r3, 8008ac8 <_strtod_l+0xb80>
 8008a88:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008a8c:	9014      	str	r0, [sp, #80]	@ 0x50
 8008a8e:	9315      	str	r3, [sp, #84]	@ 0x54
 8008a90:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008a94:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a98:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008a9a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008a9e:	1b5b      	subs	r3, r3, r5
 8008aa0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008aa2:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008aa6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008aaa:	f7ff f8eb 	bl	8007c84 <__ulp>
 8008aae:	4650      	mov	r0, sl
 8008ab0:	4659      	mov	r1, fp
 8008ab2:	ec53 2b10 	vmov	r2, r3, d0
 8008ab6:	f7f7 fd83 	bl	80005c0 <__aeabi_dmul>
 8008aba:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008abe:	f7f7 fbc9 	bl	8000254 <__adddf3>
 8008ac2:	4682      	mov	sl, r0
 8008ac4:	468b      	mov	fp, r1
 8008ac6:	e772      	b.n	80089ae <_strtod_l+0xa66>
 8008ac8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008acc:	e7e0      	b.n	8008a90 <_strtod_l+0xb48>
 8008ace:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b08 <_strtod_l+0xbc0>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	f7f7 ffe6 	bl	8000aa4 <__aeabi_dcmplt>
 8008ad8:	e79a      	b.n	8008a10 <_strtod_l+0xac8>
 8008ada:	2300      	movs	r3, #0
 8008adc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ade:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008ae0:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008ae2:	6013      	str	r3, [r2, #0]
 8008ae4:	f7ff ba6d 	b.w	8007fc2 <_strtod_l+0x7a>
 8008ae8:	2a65      	cmp	r2, #101	@ 0x65
 8008aea:	f43f ab67 	beq.w	80081bc <_strtod_l+0x274>
 8008aee:	2a45      	cmp	r2, #69	@ 0x45
 8008af0:	f43f ab64 	beq.w	80081bc <_strtod_l+0x274>
 8008af4:	2301      	movs	r3, #1
 8008af6:	f7ff bba0 	b.w	800823a <_strtod_l+0x2f2>
 8008afa:	bf00      	nop
 8008afc:	f3af 8000 	nop.w
 8008b00:	ffc00000 	.word	0xffc00000
 8008b04:	41dfffff 	.word	0x41dfffff
 8008b08:	94a03595 	.word	0x94a03595
 8008b0c:	3fcfffff 	.word	0x3fcfffff

08008b10 <_strtod_r>:
 8008b10:	4b01      	ldr	r3, [pc, #4]	@ (8008b18 <_strtod_r+0x8>)
 8008b12:	f7ff ba19 	b.w	8007f48 <_strtod_l>
 8008b16:	bf00      	nop
 8008b18:	20000070 	.word	0x20000070

08008b1c <_strtol_l.constprop.0>:
 8008b1c:	2b24      	cmp	r3, #36	@ 0x24
 8008b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b22:	4686      	mov	lr, r0
 8008b24:	4690      	mov	r8, r2
 8008b26:	d801      	bhi.n	8008b2c <_strtol_l.constprop.0+0x10>
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d106      	bne.n	8008b3a <_strtol_l.constprop.0+0x1e>
 8008b2c:	f7fd fd9c 	bl	8006668 <__errno>
 8008b30:	2316      	movs	r3, #22
 8008b32:	6003      	str	r3, [r0, #0]
 8008b34:	2000      	movs	r0, #0
 8008b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3a:	460d      	mov	r5, r1
 8008b3c:	4833      	ldr	r0, [pc, #204]	@ (8008c0c <_strtol_l.constprop.0+0xf0>)
 8008b3e:	462a      	mov	r2, r5
 8008b40:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b44:	5d06      	ldrb	r6, [r0, r4]
 8008b46:	f016 0608 	ands.w	r6, r6, #8
 8008b4a:	d1f8      	bne.n	8008b3e <_strtol_l.constprop.0+0x22>
 8008b4c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008b4e:	d12d      	bne.n	8008bac <_strtol_l.constprop.0+0x90>
 8008b50:	782c      	ldrb	r4, [r5, #0]
 8008b52:	2601      	movs	r6, #1
 8008b54:	1c95      	adds	r5, r2, #2
 8008b56:	f033 0210 	bics.w	r2, r3, #16
 8008b5a:	d109      	bne.n	8008b70 <_strtol_l.constprop.0+0x54>
 8008b5c:	2c30      	cmp	r4, #48	@ 0x30
 8008b5e:	d12a      	bne.n	8008bb6 <_strtol_l.constprop.0+0x9a>
 8008b60:	782a      	ldrb	r2, [r5, #0]
 8008b62:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008b66:	2a58      	cmp	r2, #88	@ 0x58
 8008b68:	d125      	bne.n	8008bb6 <_strtol_l.constprop.0+0x9a>
 8008b6a:	786c      	ldrb	r4, [r5, #1]
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	3502      	adds	r5, #2
 8008b70:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008b74:	2200      	movs	r2, #0
 8008b76:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008b7a:	4610      	mov	r0, r2
 8008b7c:	fbbc f9f3 	udiv	r9, ip, r3
 8008b80:	fb03 ca19 	mls	sl, r3, r9, ip
 8008b84:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008b88:	2f09      	cmp	r7, #9
 8008b8a:	d81b      	bhi.n	8008bc4 <_strtol_l.constprop.0+0xa8>
 8008b8c:	463c      	mov	r4, r7
 8008b8e:	42a3      	cmp	r3, r4
 8008b90:	dd27      	ble.n	8008be2 <_strtol_l.constprop.0+0xc6>
 8008b92:	1c57      	adds	r7, r2, #1
 8008b94:	d007      	beq.n	8008ba6 <_strtol_l.constprop.0+0x8a>
 8008b96:	4581      	cmp	r9, r0
 8008b98:	d320      	bcc.n	8008bdc <_strtol_l.constprop.0+0xc0>
 8008b9a:	d101      	bne.n	8008ba0 <_strtol_l.constprop.0+0x84>
 8008b9c:	45a2      	cmp	sl, r4
 8008b9e:	db1d      	blt.n	8008bdc <_strtol_l.constprop.0+0xc0>
 8008ba0:	fb00 4003 	mla	r0, r0, r3, r4
 8008ba4:	2201      	movs	r2, #1
 8008ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008baa:	e7eb      	b.n	8008b84 <_strtol_l.constprop.0+0x68>
 8008bac:	2c2b      	cmp	r4, #43	@ 0x2b
 8008bae:	bf04      	itt	eq
 8008bb0:	782c      	ldrbeq	r4, [r5, #0]
 8008bb2:	1c95      	addeq	r5, r2, #2
 8008bb4:	e7cf      	b.n	8008b56 <_strtol_l.constprop.0+0x3a>
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d1da      	bne.n	8008b70 <_strtol_l.constprop.0+0x54>
 8008bba:	2c30      	cmp	r4, #48	@ 0x30
 8008bbc:	bf0c      	ite	eq
 8008bbe:	2308      	moveq	r3, #8
 8008bc0:	230a      	movne	r3, #10
 8008bc2:	e7d5      	b.n	8008b70 <_strtol_l.constprop.0+0x54>
 8008bc4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008bc8:	2f19      	cmp	r7, #25
 8008bca:	d801      	bhi.n	8008bd0 <_strtol_l.constprop.0+0xb4>
 8008bcc:	3c37      	subs	r4, #55	@ 0x37
 8008bce:	e7de      	b.n	8008b8e <_strtol_l.constprop.0+0x72>
 8008bd0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008bd4:	2f19      	cmp	r7, #25
 8008bd6:	d804      	bhi.n	8008be2 <_strtol_l.constprop.0+0xc6>
 8008bd8:	3c57      	subs	r4, #87	@ 0x57
 8008bda:	e7d8      	b.n	8008b8e <_strtol_l.constprop.0+0x72>
 8008bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8008be0:	e7e1      	b.n	8008ba6 <_strtol_l.constprop.0+0x8a>
 8008be2:	1c53      	adds	r3, r2, #1
 8008be4:	d108      	bne.n	8008bf8 <_strtol_l.constprop.0+0xdc>
 8008be6:	2322      	movs	r3, #34	@ 0x22
 8008be8:	4660      	mov	r0, ip
 8008bea:	f8ce 3000 	str.w	r3, [lr]
 8008bee:	f1b8 0f00 	cmp.w	r8, #0
 8008bf2:	d0a0      	beq.n	8008b36 <_strtol_l.constprop.0+0x1a>
 8008bf4:	1e69      	subs	r1, r5, #1
 8008bf6:	e006      	b.n	8008c06 <_strtol_l.constprop.0+0xea>
 8008bf8:	b106      	cbz	r6, 8008bfc <_strtol_l.constprop.0+0xe0>
 8008bfa:	4240      	negs	r0, r0
 8008bfc:	f1b8 0f00 	cmp.w	r8, #0
 8008c00:	d099      	beq.n	8008b36 <_strtol_l.constprop.0+0x1a>
 8008c02:	2a00      	cmp	r2, #0
 8008c04:	d1f6      	bne.n	8008bf4 <_strtol_l.constprop.0+0xd8>
 8008c06:	f8c8 1000 	str.w	r1, [r8]
 8008c0a:	e794      	b.n	8008b36 <_strtol_l.constprop.0+0x1a>
 8008c0c:	0800a0d1 	.word	0x0800a0d1

08008c10 <_strtol_r>:
 8008c10:	f7ff bf84 	b.w	8008b1c <_strtol_l.constprop.0>

08008c14 <__ssputs_r>:
 8008c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c18:	461f      	mov	r7, r3
 8008c1a:	688e      	ldr	r6, [r1, #8]
 8008c1c:	4682      	mov	sl, r0
 8008c1e:	460c      	mov	r4, r1
 8008c20:	42be      	cmp	r6, r7
 8008c22:	4690      	mov	r8, r2
 8008c24:	680b      	ldr	r3, [r1, #0]
 8008c26:	d82d      	bhi.n	8008c84 <__ssputs_r+0x70>
 8008c28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008c2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008c30:	d026      	beq.n	8008c80 <__ssputs_r+0x6c>
 8008c32:	6965      	ldr	r5, [r4, #20]
 8008c34:	6909      	ldr	r1, [r1, #16]
 8008c36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c3a:	eba3 0901 	sub.w	r9, r3, r1
 8008c3e:	1c7b      	adds	r3, r7, #1
 8008c40:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c44:	444b      	add	r3, r9
 8008c46:	106d      	asrs	r5, r5, #1
 8008c48:	429d      	cmp	r5, r3
 8008c4a:	bf38      	it	cc
 8008c4c:	461d      	movcc	r5, r3
 8008c4e:	0553      	lsls	r3, r2, #21
 8008c50:	d527      	bpl.n	8008ca2 <__ssputs_r+0x8e>
 8008c52:	4629      	mov	r1, r5
 8008c54:	f7fe fc10 	bl	8007478 <_malloc_r>
 8008c58:	4606      	mov	r6, r0
 8008c5a:	b360      	cbz	r0, 8008cb6 <__ssputs_r+0xa2>
 8008c5c:	464a      	mov	r2, r9
 8008c5e:	6921      	ldr	r1, [r4, #16]
 8008c60:	f000 fa18 	bl	8009094 <memcpy>
 8008c64:	89a3      	ldrh	r3, [r4, #12]
 8008c66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008c6e:	81a3      	strh	r3, [r4, #12]
 8008c70:	6126      	str	r6, [r4, #16]
 8008c72:	444e      	add	r6, r9
 8008c74:	6165      	str	r5, [r4, #20]
 8008c76:	eba5 0509 	sub.w	r5, r5, r9
 8008c7a:	6026      	str	r6, [r4, #0]
 8008c7c:	463e      	mov	r6, r7
 8008c7e:	60a5      	str	r5, [r4, #8]
 8008c80:	42be      	cmp	r6, r7
 8008c82:	d900      	bls.n	8008c86 <__ssputs_r+0x72>
 8008c84:	463e      	mov	r6, r7
 8008c86:	4632      	mov	r2, r6
 8008c88:	4641      	mov	r1, r8
 8008c8a:	6820      	ldr	r0, [r4, #0]
 8008c8c:	f000 f9c6 	bl	800901c <memmove>
 8008c90:	68a3      	ldr	r3, [r4, #8]
 8008c92:	2000      	movs	r0, #0
 8008c94:	1b9b      	subs	r3, r3, r6
 8008c96:	60a3      	str	r3, [r4, #8]
 8008c98:	6823      	ldr	r3, [r4, #0]
 8008c9a:	4433      	add	r3, r6
 8008c9c:	6023      	str	r3, [r4, #0]
 8008c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	f000 fd85 	bl	80097b2 <_realloc_r>
 8008ca8:	4606      	mov	r6, r0
 8008caa:	2800      	cmp	r0, #0
 8008cac:	d1e0      	bne.n	8008c70 <__ssputs_r+0x5c>
 8008cae:	6921      	ldr	r1, [r4, #16]
 8008cb0:	4650      	mov	r0, sl
 8008cb2:	f7fe fb6d 	bl	8007390 <_free_r>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8008cbc:	f8ca 3000 	str.w	r3, [sl]
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008cc6:	81a3      	strh	r3, [r4, #12]
 8008cc8:	e7e9      	b.n	8008c9e <__ssputs_r+0x8a>
	...

08008ccc <_svfiprintf_r>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	4698      	mov	r8, r3
 8008cd2:	898b      	ldrh	r3, [r1, #12]
 8008cd4:	b09d      	sub	sp, #116	@ 0x74
 8008cd6:	4607      	mov	r7, r0
 8008cd8:	061b      	lsls	r3, r3, #24
 8008cda:	460d      	mov	r5, r1
 8008cdc:	4614      	mov	r4, r2
 8008cde:	d510      	bpl.n	8008d02 <_svfiprintf_r+0x36>
 8008ce0:	690b      	ldr	r3, [r1, #16]
 8008ce2:	b973      	cbnz	r3, 8008d02 <_svfiprintf_r+0x36>
 8008ce4:	2140      	movs	r1, #64	@ 0x40
 8008ce6:	f7fe fbc7 	bl	8007478 <_malloc_r>
 8008cea:	6028      	str	r0, [r5, #0]
 8008cec:	6128      	str	r0, [r5, #16]
 8008cee:	b930      	cbnz	r0, 8008cfe <_svfiprintf_r+0x32>
 8008cf0:	230c      	movs	r3, #12
 8008cf2:	603b      	str	r3, [r7, #0]
 8008cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf8:	b01d      	add	sp, #116	@ 0x74
 8008cfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cfe:	2340      	movs	r3, #64	@ 0x40
 8008d00:	616b      	str	r3, [r5, #20]
 8008d02:	2300      	movs	r3, #0
 8008d04:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d08:	f04f 0901 	mov.w	r9, #1
 8008d0c:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 8008eb0 <_svfiprintf_r+0x1e4>
 8008d10:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d12:	2320      	movs	r3, #32
 8008d14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008d18:	2330      	movs	r3, #48	@ 0x30
 8008d1a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008d1e:	4623      	mov	r3, r4
 8008d20:	469a      	mov	sl, r3
 8008d22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d26:	b10a      	cbz	r2, 8008d2c <_svfiprintf_r+0x60>
 8008d28:	2a25      	cmp	r2, #37	@ 0x25
 8008d2a:	d1f9      	bne.n	8008d20 <_svfiprintf_r+0x54>
 8008d2c:	ebba 0b04 	subs.w	fp, sl, r4
 8008d30:	d00b      	beq.n	8008d4a <_svfiprintf_r+0x7e>
 8008d32:	465b      	mov	r3, fp
 8008d34:	4622      	mov	r2, r4
 8008d36:	4629      	mov	r1, r5
 8008d38:	4638      	mov	r0, r7
 8008d3a:	f7ff ff6b 	bl	8008c14 <__ssputs_r>
 8008d3e:	3001      	adds	r0, #1
 8008d40:	f000 80a7 	beq.w	8008e92 <_svfiprintf_r+0x1c6>
 8008d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d46:	445a      	add	r2, fp
 8008d48:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d4a:	f89a 3000 	ldrb.w	r3, [sl]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f000 809f 	beq.w	8008e92 <_svfiprintf_r+0x1c6>
 8008d54:	2300      	movs	r3, #0
 8008d56:	f04f 32ff 	mov.w	r2, #4294967295
 8008d5a:	f10a 0a01 	add.w	sl, sl, #1
 8008d5e:	9304      	str	r3, [sp, #16]
 8008d60:	9307      	str	r3, [sp, #28]
 8008d62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d66:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d68:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d6c:	4654      	mov	r4, sl
 8008d6e:	2205      	movs	r2, #5
 8008d70:	484f      	ldr	r0, [pc, #316]	@ (8008eb0 <_svfiprintf_r+0x1e4>)
 8008d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d76:	f7fd fca4 	bl	80066c2 <memchr>
 8008d7a:	9a04      	ldr	r2, [sp, #16]
 8008d7c:	b9d8      	cbnz	r0, 8008db6 <_svfiprintf_r+0xea>
 8008d7e:	06d0      	lsls	r0, r2, #27
 8008d80:	bf44      	itt	mi
 8008d82:	2320      	movmi	r3, #32
 8008d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d88:	0711      	lsls	r1, r2, #28
 8008d8a:	bf44      	itt	mi
 8008d8c:	232b      	movmi	r3, #43	@ 0x2b
 8008d8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d92:	f89a 3000 	ldrb.w	r3, [sl]
 8008d96:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d98:	d015      	beq.n	8008dc6 <_svfiprintf_r+0xfa>
 8008d9a:	9a07      	ldr	r2, [sp, #28]
 8008d9c:	4654      	mov	r4, sl
 8008d9e:	2000      	movs	r0, #0
 8008da0:	f04f 0c0a 	mov.w	ip, #10
 8008da4:	4621      	mov	r1, r4
 8008da6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008daa:	3b30      	subs	r3, #48	@ 0x30
 8008dac:	2b09      	cmp	r3, #9
 8008dae:	d94b      	bls.n	8008e48 <_svfiprintf_r+0x17c>
 8008db0:	b1b0      	cbz	r0, 8008de0 <_svfiprintf_r+0x114>
 8008db2:	9207      	str	r2, [sp, #28]
 8008db4:	e014      	b.n	8008de0 <_svfiprintf_r+0x114>
 8008db6:	eba0 0308 	sub.w	r3, r0, r8
 8008dba:	46a2      	mov	sl, r4
 8008dbc:	fa09 f303 	lsl.w	r3, r9, r3
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	9304      	str	r3, [sp, #16]
 8008dc4:	e7d2      	b.n	8008d6c <_svfiprintf_r+0xa0>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	1d19      	adds	r1, r3, #4
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	9103      	str	r1, [sp, #12]
 8008dd0:	bfbb      	ittet	lt
 8008dd2:	425b      	neglt	r3, r3
 8008dd4:	f042 0202 	orrlt.w	r2, r2, #2
 8008dd8:	9307      	strge	r3, [sp, #28]
 8008dda:	9307      	strlt	r3, [sp, #28]
 8008ddc:	bfb8      	it	lt
 8008dde:	9204      	strlt	r2, [sp, #16]
 8008de0:	7823      	ldrb	r3, [r4, #0]
 8008de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8008de4:	d10a      	bne.n	8008dfc <_svfiprintf_r+0x130>
 8008de6:	7863      	ldrb	r3, [r4, #1]
 8008de8:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dea:	d132      	bne.n	8008e52 <_svfiprintf_r+0x186>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	3402      	adds	r4, #2
 8008df0:	1d1a      	adds	r2, r3, #4
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008df8:	9203      	str	r2, [sp, #12]
 8008dfa:	9305      	str	r3, [sp, #20]
 8008dfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008ec0 <_svfiprintf_r+0x1f4>
 8008e00:	2203      	movs	r2, #3
 8008e02:	7821      	ldrb	r1, [r4, #0]
 8008e04:	4650      	mov	r0, sl
 8008e06:	f7fd fc5c 	bl	80066c2 <memchr>
 8008e0a:	b138      	cbz	r0, 8008e1c <_svfiprintf_r+0x150>
 8008e0c:	eba0 000a 	sub.w	r0, r0, sl
 8008e10:	2240      	movs	r2, #64	@ 0x40
 8008e12:	9b04      	ldr	r3, [sp, #16]
 8008e14:	3401      	adds	r4, #1
 8008e16:	4082      	lsls	r2, r0
 8008e18:	4313      	orrs	r3, r2
 8008e1a:	9304      	str	r3, [sp, #16]
 8008e1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e20:	2206      	movs	r2, #6
 8008e22:	4824      	ldr	r0, [pc, #144]	@ (8008eb4 <_svfiprintf_r+0x1e8>)
 8008e24:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008e28:	f7fd fc4b 	bl	80066c2 <memchr>
 8008e2c:	2800      	cmp	r0, #0
 8008e2e:	d036      	beq.n	8008e9e <_svfiprintf_r+0x1d2>
 8008e30:	4b21      	ldr	r3, [pc, #132]	@ (8008eb8 <_svfiprintf_r+0x1ec>)
 8008e32:	bb1b      	cbnz	r3, 8008e7c <_svfiprintf_r+0x1b0>
 8008e34:	9b03      	ldr	r3, [sp, #12]
 8008e36:	3307      	adds	r3, #7
 8008e38:	f023 0307 	bic.w	r3, r3, #7
 8008e3c:	3308      	adds	r3, #8
 8008e3e:	9303      	str	r3, [sp, #12]
 8008e40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e42:	4433      	add	r3, r6
 8008e44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e46:	e76a      	b.n	8008d1e <_svfiprintf_r+0x52>
 8008e48:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	2001      	movs	r0, #1
 8008e50:	e7a8      	b.n	8008da4 <_svfiprintf_r+0xd8>
 8008e52:	2300      	movs	r3, #0
 8008e54:	3401      	adds	r4, #1
 8008e56:	f04f 0c0a 	mov.w	ip, #10
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	9305      	str	r3, [sp, #20]
 8008e5e:	4620      	mov	r0, r4
 8008e60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e64:	3a30      	subs	r2, #48	@ 0x30
 8008e66:	2a09      	cmp	r2, #9
 8008e68:	d903      	bls.n	8008e72 <_svfiprintf_r+0x1a6>
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d0c6      	beq.n	8008dfc <_svfiprintf_r+0x130>
 8008e6e:	9105      	str	r1, [sp, #20]
 8008e70:	e7c4      	b.n	8008dfc <_svfiprintf_r+0x130>
 8008e72:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e76:	4604      	mov	r4, r0
 8008e78:	2301      	movs	r3, #1
 8008e7a:	e7f0      	b.n	8008e5e <_svfiprintf_r+0x192>
 8008e7c:	ab03      	add	r3, sp, #12
 8008e7e:	462a      	mov	r2, r5
 8008e80:	a904      	add	r1, sp, #16
 8008e82:	4638      	mov	r0, r7
 8008e84:	9300      	str	r3, [sp, #0]
 8008e86:	4b0d      	ldr	r3, [pc, #52]	@ (8008ebc <_svfiprintf_r+0x1f0>)
 8008e88:	f7fc fca8 	bl	80057dc <_printf_float>
 8008e8c:	1c42      	adds	r2, r0, #1
 8008e8e:	4606      	mov	r6, r0
 8008e90:	d1d6      	bne.n	8008e40 <_svfiprintf_r+0x174>
 8008e92:	89ab      	ldrh	r3, [r5, #12]
 8008e94:	065b      	lsls	r3, r3, #25
 8008e96:	f53f af2d 	bmi.w	8008cf4 <_svfiprintf_r+0x28>
 8008e9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e9c:	e72c      	b.n	8008cf8 <_svfiprintf_r+0x2c>
 8008e9e:	ab03      	add	r3, sp, #12
 8008ea0:	462a      	mov	r2, r5
 8008ea2:	a904      	add	r1, sp, #16
 8008ea4:	4638      	mov	r0, r7
 8008ea6:	9300      	str	r3, [sp, #0]
 8008ea8:	4b04      	ldr	r3, [pc, #16]	@ (8008ebc <_svfiprintf_r+0x1f0>)
 8008eaa:	f7fc ff33 	bl	8005d14 <_printf_i>
 8008eae:	e7ed      	b.n	8008e8c <_svfiprintf_r+0x1c0>
 8008eb0:	0800a1d1 	.word	0x0800a1d1
 8008eb4:	0800a1db 	.word	0x0800a1db
 8008eb8:	080057dd 	.word	0x080057dd
 8008ebc:	08008c15 	.word	0x08008c15
 8008ec0:	0800a1d7 	.word	0x0800a1d7

08008ec4 <__sflush_r>:
 8008ec4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	0716      	lsls	r6, r2, #28
 8008ece:	4605      	mov	r5, r0
 8008ed0:	460c      	mov	r4, r1
 8008ed2:	d454      	bmi.n	8008f7e <__sflush_r+0xba>
 8008ed4:	684b      	ldr	r3, [r1, #4]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	dc02      	bgt.n	8008ee0 <__sflush_r+0x1c>
 8008eda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	dd48      	ble.n	8008f72 <__sflush_r+0xae>
 8008ee0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	d045      	beq.n	8008f72 <__sflush_r+0xae>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008eec:	682f      	ldr	r7, [r5, #0]
 8008eee:	6a21      	ldr	r1, [r4, #32]
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	d030      	beq.n	8008f56 <__sflush_r+0x92>
 8008ef4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008ef6:	89a3      	ldrh	r3, [r4, #12]
 8008ef8:	0759      	lsls	r1, r3, #29
 8008efa:	d505      	bpl.n	8008f08 <__sflush_r+0x44>
 8008efc:	6863      	ldr	r3, [r4, #4]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f02:	b10b      	cbz	r3, 8008f08 <__sflush_r+0x44>
 8008f04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f06:	1ad2      	subs	r2, r2, r3
 8008f08:	2300      	movs	r3, #0
 8008f0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f0c:	6a21      	ldr	r1, [r4, #32]
 8008f0e:	4628      	mov	r0, r5
 8008f10:	47b0      	blx	r6
 8008f12:	1c43      	adds	r3, r0, #1
 8008f14:	89a3      	ldrh	r3, [r4, #12]
 8008f16:	d106      	bne.n	8008f26 <__sflush_r+0x62>
 8008f18:	6829      	ldr	r1, [r5, #0]
 8008f1a:	291d      	cmp	r1, #29
 8008f1c:	d82b      	bhi.n	8008f76 <__sflush_r+0xb2>
 8008f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8008fc8 <__sflush_r+0x104>)
 8008f20:	410a      	asrs	r2, r1
 8008f22:	07d6      	lsls	r6, r2, #31
 8008f24:	d427      	bmi.n	8008f76 <__sflush_r+0xb2>
 8008f26:	2200      	movs	r2, #0
 8008f28:	04d9      	lsls	r1, r3, #19
 8008f2a:	6062      	str	r2, [r4, #4]
 8008f2c:	6922      	ldr	r2, [r4, #16]
 8008f2e:	6022      	str	r2, [r4, #0]
 8008f30:	d504      	bpl.n	8008f3c <__sflush_r+0x78>
 8008f32:	1c42      	adds	r2, r0, #1
 8008f34:	d101      	bne.n	8008f3a <__sflush_r+0x76>
 8008f36:	682b      	ldr	r3, [r5, #0]
 8008f38:	b903      	cbnz	r3, 8008f3c <__sflush_r+0x78>
 8008f3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8008f3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008f3e:	602f      	str	r7, [r5, #0]
 8008f40:	b1b9      	cbz	r1, 8008f72 <__sflush_r+0xae>
 8008f42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008f46:	4299      	cmp	r1, r3
 8008f48:	d002      	beq.n	8008f50 <__sflush_r+0x8c>
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	f7fe fa20 	bl	8007390 <_free_r>
 8008f50:	2300      	movs	r3, #0
 8008f52:	6363      	str	r3, [r4, #52]	@ 0x34
 8008f54:	e00d      	b.n	8008f72 <__sflush_r+0xae>
 8008f56:	2301      	movs	r3, #1
 8008f58:	4628      	mov	r0, r5
 8008f5a:	47b0      	blx	r6
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	1c50      	adds	r0, r2, #1
 8008f60:	d1c9      	bne.n	8008ef6 <__sflush_r+0x32>
 8008f62:	682b      	ldr	r3, [r5, #0]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d0c6      	beq.n	8008ef6 <__sflush_r+0x32>
 8008f68:	2b1d      	cmp	r3, #29
 8008f6a:	d001      	beq.n	8008f70 <__sflush_r+0xac>
 8008f6c:	2b16      	cmp	r3, #22
 8008f6e:	d11d      	bne.n	8008fac <__sflush_r+0xe8>
 8008f70:	602f      	str	r7, [r5, #0]
 8008f72:	2000      	movs	r0, #0
 8008f74:	e021      	b.n	8008fba <__sflush_r+0xf6>
 8008f76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f7a:	b21b      	sxth	r3, r3
 8008f7c:	e01a      	b.n	8008fb4 <__sflush_r+0xf0>
 8008f7e:	690f      	ldr	r7, [r1, #16]
 8008f80:	2f00      	cmp	r7, #0
 8008f82:	d0f6      	beq.n	8008f72 <__sflush_r+0xae>
 8008f84:	0793      	lsls	r3, r2, #30
 8008f86:	680e      	ldr	r6, [r1, #0]
 8008f88:	600f      	str	r7, [r1, #0]
 8008f8a:	bf0c      	ite	eq
 8008f8c:	694b      	ldreq	r3, [r1, #20]
 8008f8e:	2300      	movne	r3, #0
 8008f90:	eba6 0807 	sub.w	r8, r6, r7
 8008f94:	608b      	str	r3, [r1, #8]
 8008f96:	f1b8 0f00 	cmp.w	r8, #0
 8008f9a:	ddea      	ble.n	8008f72 <__sflush_r+0xae>
 8008f9c:	4643      	mov	r3, r8
 8008f9e:	463a      	mov	r2, r7
 8008fa0:	6a21      	ldr	r1, [r4, #32]
 8008fa2:	4628      	mov	r0, r5
 8008fa4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008fa6:	47b0      	blx	r6
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	dc08      	bgt.n	8008fbe <__sflush_r+0xfa>
 8008fac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb8:	81a3      	strh	r3, [r4, #12]
 8008fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008fbe:	4407      	add	r7, r0
 8008fc0:	eba8 0800 	sub.w	r8, r8, r0
 8008fc4:	e7e7      	b.n	8008f96 <__sflush_r+0xd2>
 8008fc6:	bf00      	nop
 8008fc8:	dfbffffe 	.word	0xdfbffffe

08008fcc <_fflush_r>:
 8008fcc:	b538      	push	{r3, r4, r5, lr}
 8008fce:	690b      	ldr	r3, [r1, #16]
 8008fd0:	4605      	mov	r5, r0
 8008fd2:	460c      	mov	r4, r1
 8008fd4:	b913      	cbnz	r3, 8008fdc <_fflush_r+0x10>
 8008fd6:	2500      	movs	r5, #0
 8008fd8:	4628      	mov	r0, r5
 8008fda:	bd38      	pop	{r3, r4, r5, pc}
 8008fdc:	b118      	cbz	r0, 8008fe6 <_fflush_r+0x1a>
 8008fde:	6a03      	ldr	r3, [r0, #32]
 8008fe0:	b90b      	cbnz	r3, 8008fe6 <_fflush_r+0x1a>
 8008fe2:	f7fd fa55 	bl	8006490 <__sinit>
 8008fe6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d0f3      	beq.n	8008fd6 <_fflush_r+0xa>
 8008fee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ff0:	07d0      	lsls	r0, r2, #31
 8008ff2:	d404      	bmi.n	8008ffe <_fflush_r+0x32>
 8008ff4:	0599      	lsls	r1, r3, #22
 8008ff6:	d402      	bmi.n	8008ffe <_fflush_r+0x32>
 8008ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ffa:	f7fd fb60 	bl	80066be <__retarget_lock_acquire_recursive>
 8008ffe:	4628      	mov	r0, r5
 8009000:	4621      	mov	r1, r4
 8009002:	f7ff ff5f 	bl	8008ec4 <__sflush_r>
 8009006:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009008:	4605      	mov	r5, r0
 800900a:	07da      	lsls	r2, r3, #31
 800900c:	d4e4      	bmi.n	8008fd8 <_fflush_r+0xc>
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	059b      	lsls	r3, r3, #22
 8009012:	d4e1      	bmi.n	8008fd8 <_fflush_r+0xc>
 8009014:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009016:	f7fd fb53 	bl	80066c0 <__retarget_lock_release_recursive>
 800901a:	e7dd      	b.n	8008fd8 <_fflush_r+0xc>

0800901c <memmove>:
 800901c:	4288      	cmp	r0, r1
 800901e:	b510      	push	{r4, lr}
 8009020:	eb01 0402 	add.w	r4, r1, r2
 8009024:	d902      	bls.n	800902c <memmove+0x10>
 8009026:	4284      	cmp	r4, r0
 8009028:	4623      	mov	r3, r4
 800902a:	d807      	bhi.n	800903c <memmove+0x20>
 800902c:	1e43      	subs	r3, r0, #1
 800902e:	42a1      	cmp	r1, r4
 8009030:	d008      	beq.n	8009044 <memmove+0x28>
 8009032:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009036:	f803 2f01 	strb.w	r2, [r3, #1]!
 800903a:	e7f8      	b.n	800902e <memmove+0x12>
 800903c:	4402      	add	r2, r0
 800903e:	4601      	mov	r1, r0
 8009040:	428a      	cmp	r2, r1
 8009042:	d100      	bne.n	8009046 <memmove+0x2a>
 8009044:	bd10      	pop	{r4, pc}
 8009046:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800904a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800904e:	e7f7      	b.n	8009040 <memmove+0x24>

08009050 <strncmp>:
 8009050:	b510      	push	{r4, lr}
 8009052:	b16a      	cbz	r2, 8009070 <strncmp+0x20>
 8009054:	3901      	subs	r1, #1
 8009056:	1884      	adds	r4, r0, r2
 8009058:	f810 2b01 	ldrb.w	r2, [r0], #1
 800905c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009060:	429a      	cmp	r2, r3
 8009062:	d103      	bne.n	800906c <strncmp+0x1c>
 8009064:	42a0      	cmp	r0, r4
 8009066:	d001      	beq.n	800906c <strncmp+0x1c>
 8009068:	2a00      	cmp	r2, #0
 800906a:	d1f5      	bne.n	8009058 <strncmp+0x8>
 800906c:	1ad0      	subs	r0, r2, r3
 800906e:	bd10      	pop	{r4, pc}
 8009070:	4610      	mov	r0, r2
 8009072:	e7fc      	b.n	800906e <strncmp+0x1e>

08009074 <_sbrk_r>:
 8009074:	b538      	push	{r3, r4, r5, lr}
 8009076:	2300      	movs	r3, #0
 8009078:	4d05      	ldr	r5, [pc, #20]	@ (8009090 <_sbrk_r+0x1c>)
 800907a:	4604      	mov	r4, r0
 800907c:	4608      	mov	r0, r1
 800907e:	602b      	str	r3, [r5, #0]
 8009080:	f7f8 fba8 	bl	80017d4 <_sbrk>
 8009084:	1c43      	adds	r3, r0, #1
 8009086:	d102      	bne.n	800908e <_sbrk_r+0x1a>
 8009088:	682b      	ldr	r3, [r5, #0]
 800908a:	b103      	cbz	r3, 800908e <_sbrk_r+0x1a>
 800908c:	6023      	str	r3, [r4, #0]
 800908e:	bd38      	pop	{r3, r4, r5, pc}
 8009090:	2000048c 	.word	0x2000048c

08009094 <memcpy>:
 8009094:	440a      	add	r2, r1
 8009096:	1e43      	subs	r3, r0, #1
 8009098:	4291      	cmp	r1, r2
 800909a:	d100      	bne.n	800909e <memcpy+0xa>
 800909c:	4770      	bx	lr
 800909e:	b510      	push	{r4, lr}
 80090a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090a4:	4291      	cmp	r1, r2
 80090a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090aa:	d1f9      	bne.n	80090a0 <memcpy+0xc>
 80090ac:	bd10      	pop	{r4, pc}
	...

080090b0 <nan>:
 80090b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80090b8 <nan+0x8>
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	00000000 	.word	0x00000000
 80090bc:	7ff80000 	.word	0x7ff80000

080090c0 <__assert_func>:
 80090c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80090c2:	4614      	mov	r4, r2
 80090c4:	461a      	mov	r2, r3
 80090c6:	4b09      	ldr	r3, [pc, #36]	@ (80090ec <__assert_func+0x2c>)
 80090c8:	4605      	mov	r5, r0
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	68d8      	ldr	r0, [r3, #12]
 80090ce:	b954      	cbnz	r4, 80090e6 <__assert_func+0x26>
 80090d0:	4b07      	ldr	r3, [pc, #28]	@ (80090f0 <__assert_func+0x30>)
 80090d2:	461c      	mov	r4, r3
 80090d4:	9100      	str	r1, [sp, #0]
 80090d6:	4907      	ldr	r1, [pc, #28]	@ (80090f4 <__assert_func+0x34>)
 80090d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80090dc:	462b      	mov	r3, r5
 80090de:	f000 fba3 	bl	8009828 <fiprintf>
 80090e2:	f000 fbb3 	bl	800984c <abort>
 80090e6:	4b04      	ldr	r3, [pc, #16]	@ (80090f8 <__assert_func+0x38>)
 80090e8:	e7f4      	b.n	80090d4 <__assert_func+0x14>
 80090ea:	bf00      	nop
 80090ec:	20000020 	.word	0x20000020
 80090f0:	0800a225 	.word	0x0800a225
 80090f4:	0800a1f7 	.word	0x0800a1f7
 80090f8:	0800a1ea 	.word	0x0800a1ea

080090fc <_calloc_r>:
 80090fc:	b570      	push	{r4, r5, r6, lr}
 80090fe:	fba1 5402 	umull	r5, r4, r1, r2
 8009102:	b93c      	cbnz	r4, 8009114 <_calloc_r+0x18>
 8009104:	4629      	mov	r1, r5
 8009106:	f7fe f9b7 	bl	8007478 <_malloc_r>
 800910a:	4606      	mov	r6, r0
 800910c:	b928      	cbnz	r0, 800911a <_calloc_r+0x1e>
 800910e:	2600      	movs	r6, #0
 8009110:	4630      	mov	r0, r6
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	220c      	movs	r2, #12
 8009116:	6002      	str	r2, [r0, #0]
 8009118:	e7f9      	b.n	800910e <_calloc_r+0x12>
 800911a:	462a      	mov	r2, r5
 800911c:	4621      	mov	r1, r4
 800911e:	f7fd fa50 	bl	80065c2 <memset>
 8009122:	e7f5      	b.n	8009110 <_calloc_r+0x14>

08009124 <rshift>:
 8009124:	6903      	ldr	r3, [r0, #16]
 8009126:	114a      	asrs	r2, r1, #5
 8009128:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800912c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009130:	f100 0414 	add.w	r4, r0, #20
 8009134:	dd45      	ble.n	80091c2 <rshift+0x9e>
 8009136:	f011 011f 	ands.w	r1, r1, #31
 800913a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800913e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009142:	d10c      	bne.n	800915e <rshift+0x3a>
 8009144:	f100 0710 	add.w	r7, r0, #16
 8009148:	4629      	mov	r1, r5
 800914a:	42b1      	cmp	r1, r6
 800914c:	d334      	bcc.n	80091b8 <rshift+0x94>
 800914e:	1a9b      	subs	r3, r3, r2
 8009150:	1eea      	subs	r2, r5, #3
 8009152:	009b      	lsls	r3, r3, #2
 8009154:	4296      	cmp	r6, r2
 8009156:	bf38      	it	cc
 8009158:	2300      	movcc	r3, #0
 800915a:	4423      	add	r3, r4
 800915c:	e015      	b.n	800918a <rshift+0x66>
 800915e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009162:	f1c1 0820 	rsb	r8, r1, #32
 8009166:	f105 0e04 	add.w	lr, r5, #4
 800916a:	46a1      	mov	r9, r4
 800916c:	40cf      	lsrs	r7, r1
 800916e:	4576      	cmp	r6, lr
 8009170:	46f4      	mov	ip, lr
 8009172:	d815      	bhi.n	80091a0 <rshift+0x7c>
 8009174:	1a9a      	subs	r2, r3, r2
 8009176:	3501      	adds	r5, #1
 8009178:	0092      	lsls	r2, r2, #2
 800917a:	3a04      	subs	r2, #4
 800917c:	42ae      	cmp	r6, r5
 800917e:	bf38      	it	cc
 8009180:	2200      	movcc	r2, #0
 8009182:	18a3      	adds	r3, r4, r2
 8009184:	50a7      	str	r7, [r4, r2]
 8009186:	b107      	cbz	r7, 800918a <rshift+0x66>
 8009188:	3304      	adds	r3, #4
 800918a:	1b1a      	subs	r2, r3, r4
 800918c:	42a3      	cmp	r3, r4
 800918e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009192:	bf08      	it	eq
 8009194:	2300      	moveq	r3, #0
 8009196:	6102      	str	r2, [r0, #16]
 8009198:	bf08      	it	eq
 800919a:	6143      	streq	r3, [r0, #20]
 800919c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80091a0:	f8dc c000 	ldr.w	ip, [ip]
 80091a4:	fa0c fc08 	lsl.w	ip, ip, r8
 80091a8:	ea4c 0707 	orr.w	r7, ip, r7
 80091ac:	f849 7b04 	str.w	r7, [r9], #4
 80091b0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80091b4:	40cf      	lsrs	r7, r1
 80091b6:	e7da      	b.n	800916e <rshift+0x4a>
 80091b8:	f851 cb04 	ldr.w	ip, [r1], #4
 80091bc:	f847 cf04 	str.w	ip, [r7, #4]!
 80091c0:	e7c3      	b.n	800914a <rshift+0x26>
 80091c2:	4623      	mov	r3, r4
 80091c4:	e7e1      	b.n	800918a <rshift+0x66>

080091c6 <__hexdig_fun>:
 80091c6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80091ca:	2b09      	cmp	r3, #9
 80091cc:	d802      	bhi.n	80091d4 <__hexdig_fun+0xe>
 80091ce:	3820      	subs	r0, #32
 80091d0:	b2c0      	uxtb	r0, r0
 80091d2:	4770      	bx	lr
 80091d4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80091d8:	2b05      	cmp	r3, #5
 80091da:	d801      	bhi.n	80091e0 <__hexdig_fun+0x1a>
 80091dc:	3847      	subs	r0, #71	@ 0x47
 80091de:	e7f7      	b.n	80091d0 <__hexdig_fun+0xa>
 80091e0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80091e4:	2b05      	cmp	r3, #5
 80091e6:	d801      	bhi.n	80091ec <__hexdig_fun+0x26>
 80091e8:	3827      	subs	r0, #39	@ 0x27
 80091ea:	e7f1      	b.n	80091d0 <__hexdig_fun+0xa>
 80091ec:	2000      	movs	r0, #0
 80091ee:	4770      	bx	lr

080091f0 <__gethex>:
 80091f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091f4:	b085      	sub	sp, #20
 80091f6:	468a      	mov	sl, r1
 80091f8:	4690      	mov	r8, r2
 80091fa:	9302      	str	r3, [sp, #8]
 80091fc:	680b      	ldr	r3, [r1, #0]
 80091fe:	9001      	str	r0, [sp, #4]
 8009200:	1c9c      	adds	r4, r3, #2
 8009202:	46a1      	mov	r9, r4
 8009204:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009208:	2830      	cmp	r0, #48	@ 0x30
 800920a:	d0fa      	beq.n	8009202 <__gethex+0x12>
 800920c:	eba9 0303 	sub.w	r3, r9, r3
 8009210:	f1a3 0b02 	sub.w	fp, r3, #2
 8009214:	f7ff ffd7 	bl	80091c6 <__hexdig_fun>
 8009218:	4605      	mov	r5, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	d166      	bne.n	80092ec <__gethex+0xfc>
 800921e:	2201      	movs	r2, #1
 8009220:	499e      	ldr	r1, [pc, #632]	@ (800949c <__gethex+0x2ac>)
 8009222:	4648      	mov	r0, r9
 8009224:	f7ff ff14 	bl	8009050 <strncmp>
 8009228:	4607      	mov	r7, r0
 800922a:	2800      	cmp	r0, #0
 800922c:	d165      	bne.n	80092fa <__gethex+0x10a>
 800922e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009232:	4626      	mov	r6, r4
 8009234:	f7ff ffc7 	bl	80091c6 <__hexdig_fun>
 8009238:	2800      	cmp	r0, #0
 800923a:	d060      	beq.n	80092fe <__gethex+0x10e>
 800923c:	4623      	mov	r3, r4
 800923e:	7818      	ldrb	r0, [r3, #0]
 8009240:	4699      	mov	r9, r3
 8009242:	3301      	adds	r3, #1
 8009244:	2830      	cmp	r0, #48	@ 0x30
 8009246:	d0fa      	beq.n	800923e <__gethex+0x4e>
 8009248:	f7ff ffbd 	bl	80091c6 <__hexdig_fun>
 800924c:	fab0 f580 	clz	r5, r0
 8009250:	f04f 0b01 	mov.w	fp, #1
 8009254:	096d      	lsrs	r5, r5, #5
 8009256:	464a      	mov	r2, r9
 8009258:	4616      	mov	r6, r2
 800925a:	3201      	adds	r2, #1
 800925c:	7830      	ldrb	r0, [r6, #0]
 800925e:	f7ff ffb2 	bl	80091c6 <__hexdig_fun>
 8009262:	2800      	cmp	r0, #0
 8009264:	d1f8      	bne.n	8009258 <__gethex+0x68>
 8009266:	2201      	movs	r2, #1
 8009268:	498c      	ldr	r1, [pc, #560]	@ (800949c <__gethex+0x2ac>)
 800926a:	4630      	mov	r0, r6
 800926c:	f7ff fef0 	bl	8009050 <strncmp>
 8009270:	2800      	cmp	r0, #0
 8009272:	d13e      	bne.n	80092f2 <__gethex+0x102>
 8009274:	b944      	cbnz	r4, 8009288 <__gethex+0x98>
 8009276:	1c74      	adds	r4, r6, #1
 8009278:	4622      	mov	r2, r4
 800927a:	4616      	mov	r6, r2
 800927c:	3201      	adds	r2, #1
 800927e:	7830      	ldrb	r0, [r6, #0]
 8009280:	f7ff ffa1 	bl	80091c6 <__hexdig_fun>
 8009284:	2800      	cmp	r0, #0
 8009286:	d1f8      	bne.n	800927a <__gethex+0x8a>
 8009288:	1ba4      	subs	r4, r4, r6
 800928a:	00a7      	lsls	r7, r4, #2
 800928c:	7833      	ldrb	r3, [r6, #0]
 800928e:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009292:	2b50      	cmp	r3, #80	@ 0x50
 8009294:	d13d      	bne.n	8009312 <__gethex+0x122>
 8009296:	7873      	ldrb	r3, [r6, #1]
 8009298:	2b2b      	cmp	r3, #43	@ 0x2b
 800929a:	d032      	beq.n	8009302 <__gethex+0x112>
 800929c:	2b2d      	cmp	r3, #45	@ 0x2d
 800929e:	d033      	beq.n	8009308 <__gethex+0x118>
 80092a0:	1c71      	adds	r1, r6, #1
 80092a2:	2400      	movs	r4, #0
 80092a4:	7808      	ldrb	r0, [r1, #0]
 80092a6:	f7ff ff8e 	bl	80091c6 <__hexdig_fun>
 80092aa:	1e43      	subs	r3, r0, #1
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b18      	cmp	r3, #24
 80092b0:	d82f      	bhi.n	8009312 <__gethex+0x122>
 80092b2:	f1a0 0210 	sub.w	r2, r0, #16
 80092b6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80092ba:	f7ff ff84 	bl	80091c6 <__hexdig_fun>
 80092be:	f100 3cff 	add.w	ip, r0, #4294967295
 80092c2:	230a      	movs	r3, #10
 80092c4:	fa5f fc8c 	uxtb.w	ip, ip
 80092c8:	f1bc 0f18 	cmp.w	ip, #24
 80092cc:	d91e      	bls.n	800930c <__gethex+0x11c>
 80092ce:	b104      	cbz	r4, 80092d2 <__gethex+0xe2>
 80092d0:	4252      	negs	r2, r2
 80092d2:	4417      	add	r7, r2
 80092d4:	f8ca 1000 	str.w	r1, [sl]
 80092d8:	b1ed      	cbz	r5, 8009316 <__gethex+0x126>
 80092da:	f1bb 0f00 	cmp.w	fp, #0
 80092de:	bf0c      	ite	eq
 80092e0:	2506      	moveq	r5, #6
 80092e2:	2500      	movne	r5, #0
 80092e4:	4628      	mov	r0, r5
 80092e6:	b005      	add	sp, #20
 80092e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092ec:	2500      	movs	r5, #0
 80092ee:	462c      	mov	r4, r5
 80092f0:	e7b1      	b.n	8009256 <__gethex+0x66>
 80092f2:	2c00      	cmp	r4, #0
 80092f4:	d1c8      	bne.n	8009288 <__gethex+0x98>
 80092f6:	4627      	mov	r7, r4
 80092f8:	e7c8      	b.n	800928c <__gethex+0x9c>
 80092fa:	464e      	mov	r6, r9
 80092fc:	462f      	mov	r7, r5
 80092fe:	2501      	movs	r5, #1
 8009300:	e7c4      	b.n	800928c <__gethex+0x9c>
 8009302:	2400      	movs	r4, #0
 8009304:	1cb1      	adds	r1, r6, #2
 8009306:	e7cd      	b.n	80092a4 <__gethex+0xb4>
 8009308:	2401      	movs	r4, #1
 800930a:	e7fb      	b.n	8009304 <__gethex+0x114>
 800930c:	fb03 0002 	mla	r0, r3, r2, r0
 8009310:	e7cf      	b.n	80092b2 <__gethex+0xc2>
 8009312:	4631      	mov	r1, r6
 8009314:	e7de      	b.n	80092d4 <__gethex+0xe4>
 8009316:	eba6 0309 	sub.w	r3, r6, r9
 800931a:	4629      	mov	r1, r5
 800931c:	3b01      	subs	r3, #1
 800931e:	2b07      	cmp	r3, #7
 8009320:	dc0a      	bgt.n	8009338 <__gethex+0x148>
 8009322:	9801      	ldr	r0, [sp, #4]
 8009324:	f7fe f934 	bl	8007590 <_Balloc>
 8009328:	4604      	mov	r4, r0
 800932a:	b940      	cbnz	r0, 800933e <__gethex+0x14e>
 800932c:	4b5c      	ldr	r3, [pc, #368]	@ (80094a0 <__gethex+0x2b0>)
 800932e:	4602      	mov	r2, r0
 8009330:	21e4      	movs	r1, #228	@ 0xe4
 8009332:	485c      	ldr	r0, [pc, #368]	@ (80094a4 <__gethex+0x2b4>)
 8009334:	f7ff fec4 	bl	80090c0 <__assert_func>
 8009338:	3101      	adds	r1, #1
 800933a:	105b      	asrs	r3, r3, #1
 800933c:	e7ef      	b.n	800931e <__gethex+0x12e>
 800933e:	f100 0a14 	add.w	sl, r0, #20
 8009342:	2300      	movs	r3, #0
 8009344:	4655      	mov	r5, sl
 8009346:	469b      	mov	fp, r3
 8009348:	45b1      	cmp	r9, r6
 800934a:	d337      	bcc.n	80093bc <__gethex+0x1cc>
 800934c:	f845 bb04 	str.w	fp, [r5], #4
 8009350:	eba5 050a 	sub.w	r5, r5, sl
 8009354:	4658      	mov	r0, fp
 8009356:	10ad      	asrs	r5, r5, #2
 8009358:	6125      	str	r5, [r4, #16]
 800935a:	016d      	lsls	r5, r5, #5
 800935c:	f7fe fa0c 	bl	8007778 <__hi0bits>
 8009360:	f8d8 6000 	ldr.w	r6, [r8]
 8009364:	1a2d      	subs	r5, r5, r0
 8009366:	42b5      	cmp	r5, r6
 8009368:	dd54      	ble.n	8009414 <__gethex+0x224>
 800936a:	1bad      	subs	r5, r5, r6
 800936c:	4620      	mov	r0, r4
 800936e:	4629      	mov	r1, r5
 8009370:	f7fe fda9 	bl	8007ec6 <__any_on>
 8009374:	4681      	mov	r9, r0
 8009376:	b178      	cbz	r0, 8009398 <__gethex+0x1a8>
 8009378:	1e6b      	subs	r3, r5, #1
 800937a:	f04f 0901 	mov.w	r9, #1
 800937e:	1159      	asrs	r1, r3, #5
 8009380:	f003 021f 	and.w	r2, r3, #31
 8009384:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009388:	fa09 f202 	lsl.w	r2, r9, r2
 800938c:	420a      	tst	r2, r1
 800938e:	d003      	beq.n	8009398 <__gethex+0x1a8>
 8009390:	454b      	cmp	r3, r9
 8009392:	dc36      	bgt.n	8009402 <__gethex+0x212>
 8009394:	f04f 0902 	mov.w	r9, #2
 8009398:	442f      	add	r7, r5
 800939a:	4629      	mov	r1, r5
 800939c:	4620      	mov	r0, r4
 800939e:	f7ff fec1 	bl	8009124 <rshift>
 80093a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80093a6:	42bb      	cmp	r3, r7
 80093a8:	da42      	bge.n	8009430 <__gethex+0x240>
 80093aa:	4621      	mov	r1, r4
 80093ac:	9801      	ldr	r0, [sp, #4]
 80093ae:	f7fe f92f 	bl	8007610 <_Bfree>
 80093b2:	2300      	movs	r3, #0
 80093b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093b6:	25a3      	movs	r5, #163	@ 0xa3
 80093b8:	6013      	str	r3, [r2, #0]
 80093ba:	e793      	b.n	80092e4 <__gethex+0xf4>
 80093bc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80093c0:	2a2e      	cmp	r2, #46	@ 0x2e
 80093c2:	d012      	beq.n	80093ea <__gethex+0x1fa>
 80093c4:	2b20      	cmp	r3, #32
 80093c6:	d104      	bne.n	80093d2 <__gethex+0x1e2>
 80093c8:	f845 bb04 	str.w	fp, [r5], #4
 80093cc:	f04f 0b00 	mov.w	fp, #0
 80093d0:	465b      	mov	r3, fp
 80093d2:	7830      	ldrb	r0, [r6, #0]
 80093d4:	9303      	str	r3, [sp, #12]
 80093d6:	f7ff fef6 	bl	80091c6 <__hexdig_fun>
 80093da:	9b03      	ldr	r3, [sp, #12]
 80093dc:	f000 000f 	and.w	r0, r0, #15
 80093e0:	4098      	lsls	r0, r3
 80093e2:	3304      	adds	r3, #4
 80093e4:	ea4b 0b00 	orr.w	fp, fp, r0
 80093e8:	e7ae      	b.n	8009348 <__gethex+0x158>
 80093ea:	45b1      	cmp	r9, r6
 80093ec:	d8ea      	bhi.n	80093c4 <__gethex+0x1d4>
 80093ee:	2201      	movs	r2, #1
 80093f0:	492a      	ldr	r1, [pc, #168]	@ (800949c <__gethex+0x2ac>)
 80093f2:	4630      	mov	r0, r6
 80093f4:	9303      	str	r3, [sp, #12]
 80093f6:	f7ff fe2b 	bl	8009050 <strncmp>
 80093fa:	9b03      	ldr	r3, [sp, #12]
 80093fc:	2800      	cmp	r0, #0
 80093fe:	d1e1      	bne.n	80093c4 <__gethex+0x1d4>
 8009400:	e7a2      	b.n	8009348 <__gethex+0x158>
 8009402:	1ea9      	subs	r1, r5, #2
 8009404:	4620      	mov	r0, r4
 8009406:	f7fe fd5e 	bl	8007ec6 <__any_on>
 800940a:	2800      	cmp	r0, #0
 800940c:	d0c2      	beq.n	8009394 <__gethex+0x1a4>
 800940e:	f04f 0903 	mov.w	r9, #3
 8009412:	e7c1      	b.n	8009398 <__gethex+0x1a8>
 8009414:	da09      	bge.n	800942a <__gethex+0x23a>
 8009416:	1b75      	subs	r5, r6, r5
 8009418:	4621      	mov	r1, r4
 800941a:	9801      	ldr	r0, [sp, #4]
 800941c:	462a      	mov	r2, r5
 800941e:	1b7f      	subs	r7, r7, r5
 8009420:	f7fe fb10 	bl	8007a44 <__lshift>
 8009424:	4604      	mov	r4, r0
 8009426:	f100 0a14 	add.w	sl, r0, #20
 800942a:	f04f 0900 	mov.w	r9, #0
 800942e:	e7b8      	b.n	80093a2 <__gethex+0x1b2>
 8009430:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009434:	42bd      	cmp	r5, r7
 8009436:	dd6f      	ble.n	8009518 <__gethex+0x328>
 8009438:	1bed      	subs	r5, r5, r7
 800943a:	42ae      	cmp	r6, r5
 800943c:	dc34      	bgt.n	80094a8 <__gethex+0x2b8>
 800943e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009442:	2b02      	cmp	r3, #2
 8009444:	d022      	beq.n	800948c <__gethex+0x29c>
 8009446:	2b03      	cmp	r3, #3
 8009448:	d024      	beq.n	8009494 <__gethex+0x2a4>
 800944a:	2b01      	cmp	r3, #1
 800944c:	d115      	bne.n	800947a <__gethex+0x28a>
 800944e:	42ae      	cmp	r6, r5
 8009450:	d113      	bne.n	800947a <__gethex+0x28a>
 8009452:	2e01      	cmp	r6, #1
 8009454:	d10b      	bne.n	800946e <__gethex+0x27e>
 8009456:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800945a:	2562      	movs	r5, #98	@ 0x62
 800945c:	9a02      	ldr	r2, [sp, #8]
 800945e:	6013      	str	r3, [r2, #0]
 8009460:	2301      	movs	r3, #1
 8009462:	6123      	str	r3, [r4, #16]
 8009464:	f8ca 3000 	str.w	r3, [sl]
 8009468:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800946a:	601c      	str	r4, [r3, #0]
 800946c:	e73a      	b.n	80092e4 <__gethex+0xf4>
 800946e:	1e71      	subs	r1, r6, #1
 8009470:	4620      	mov	r0, r4
 8009472:	f7fe fd28 	bl	8007ec6 <__any_on>
 8009476:	2800      	cmp	r0, #0
 8009478:	d1ed      	bne.n	8009456 <__gethex+0x266>
 800947a:	4621      	mov	r1, r4
 800947c:	9801      	ldr	r0, [sp, #4]
 800947e:	f7fe f8c7 	bl	8007610 <_Bfree>
 8009482:	2300      	movs	r3, #0
 8009484:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009486:	2550      	movs	r5, #80	@ 0x50
 8009488:	6013      	str	r3, [r2, #0]
 800948a:	e72b      	b.n	80092e4 <__gethex+0xf4>
 800948c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800948e:	2b00      	cmp	r3, #0
 8009490:	d1f3      	bne.n	800947a <__gethex+0x28a>
 8009492:	e7e0      	b.n	8009456 <__gethex+0x266>
 8009494:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009496:	2b00      	cmp	r3, #0
 8009498:	d1dd      	bne.n	8009456 <__gethex+0x266>
 800949a:	e7ee      	b.n	800947a <__gethex+0x28a>
 800949c:	0800a078 	.word	0x0800a078
 80094a0:	08009f0d 	.word	0x08009f0d
 80094a4:	0800a226 	.word	0x0800a226
 80094a8:	1e6f      	subs	r7, r5, #1
 80094aa:	f1b9 0f00 	cmp.w	r9, #0
 80094ae:	d130      	bne.n	8009512 <__gethex+0x322>
 80094b0:	b127      	cbz	r7, 80094bc <__gethex+0x2cc>
 80094b2:	4639      	mov	r1, r7
 80094b4:	4620      	mov	r0, r4
 80094b6:	f7fe fd06 	bl	8007ec6 <__any_on>
 80094ba:	4681      	mov	r9, r0
 80094bc:	117a      	asrs	r2, r7, #5
 80094be:	2301      	movs	r3, #1
 80094c0:	f007 071f 	and.w	r7, r7, #31
 80094c4:	4629      	mov	r1, r5
 80094c6:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80094ca:	4620      	mov	r0, r4
 80094cc:	40bb      	lsls	r3, r7
 80094ce:	1b76      	subs	r6, r6, r5
 80094d0:	2502      	movs	r5, #2
 80094d2:	4213      	tst	r3, r2
 80094d4:	bf18      	it	ne
 80094d6:	f049 0902 	orrne.w	r9, r9, #2
 80094da:	f7ff fe23 	bl	8009124 <rshift>
 80094de:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80094e2:	f1b9 0f00 	cmp.w	r9, #0
 80094e6:	d047      	beq.n	8009578 <__gethex+0x388>
 80094e8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094ec:	2b02      	cmp	r3, #2
 80094ee:	d015      	beq.n	800951c <__gethex+0x32c>
 80094f0:	2b03      	cmp	r3, #3
 80094f2:	d017      	beq.n	8009524 <__gethex+0x334>
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d109      	bne.n	800950c <__gethex+0x31c>
 80094f8:	f019 0f02 	tst.w	r9, #2
 80094fc:	d006      	beq.n	800950c <__gethex+0x31c>
 80094fe:	f8da 3000 	ldr.w	r3, [sl]
 8009502:	ea49 0903 	orr.w	r9, r9, r3
 8009506:	f019 0f01 	tst.w	r9, #1
 800950a:	d10e      	bne.n	800952a <__gethex+0x33a>
 800950c:	f045 0510 	orr.w	r5, r5, #16
 8009510:	e032      	b.n	8009578 <__gethex+0x388>
 8009512:	f04f 0901 	mov.w	r9, #1
 8009516:	e7d1      	b.n	80094bc <__gethex+0x2cc>
 8009518:	2501      	movs	r5, #1
 800951a:	e7e2      	b.n	80094e2 <__gethex+0x2f2>
 800951c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800951e:	f1c3 0301 	rsb	r3, r3, #1
 8009522:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d0f0      	beq.n	800950c <__gethex+0x31c>
 800952a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800952e:	f104 0314 	add.w	r3, r4, #20
 8009532:	f04f 0c00 	mov.w	ip, #0
 8009536:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800953a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800953e:	4618      	mov	r0, r3
 8009540:	f853 2b04 	ldr.w	r2, [r3], #4
 8009544:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009548:	d01b      	beq.n	8009582 <__gethex+0x392>
 800954a:	3201      	adds	r2, #1
 800954c:	6002      	str	r2, [r0, #0]
 800954e:	2d02      	cmp	r5, #2
 8009550:	f104 0314 	add.w	r3, r4, #20
 8009554:	d13c      	bne.n	80095d0 <__gethex+0x3e0>
 8009556:	f8d8 2000 	ldr.w	r2, [r8]
 800955a:	3a01      	subs	r2, #1
 800955c:	42b2      	cmp	r2, r6
 800955e:	d109      	bne.n	8009574 <__gethex+0x384>
 8009560:	1171      	asrs	r1, r6, #5
 8009562:	2201      	movs	r2, #1
 8009564:	f006 061f 	and.w	r6, r6, #31
 8009568:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800956c:	fa02 f606 	lsl.w	r6, r2, r6
 8009570:	421e      	tst	r6, r3
 8009572:	d13a      	bne.n	80095ea <__gethex+0x3fa>
 8009574:	f045 0520 	orr.w	r5, r5, #32
 8009578:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800957a:	601c      	str	r4, [r3, #0]
 800957c:	9b02      	ldr	r3, [sp, #8]
 800957e:	601f      	str	r7, [r3, #0]
 8009580:	e6b0      	b.n	80092e4 <__gethex+0xf4>
 8009582:	4299      	cmp	r1, r3
 8009584:	f843 cc04 	str.w	ip, [r3, #-4]
 8009588:	d8d9      	bhi.n	800953e <__gethex+0x34e>
 800958a:	68a3      	ldr	r3, [r4, #8]
 800958c:	459b      	cmp	fp, r3
 800958e:	db17      	blt.n	80095c0 <__gethex+0x3d0>
 8009590:	6861      	ldr	r1, [r4, #4]
 8009592:	9801      	ldr	r0, [sp, #4]
 8009594:	3101      	adds	r1, #1
 8009596:	f7fd fffb 	bl	8007590 <_Balloc>
 800959a:	4681      	mov	r9, r0
 800959c:	b918      	cbnz	r0, 80095a6 <__gethex+0x3b6>
 800959e:	4b1a      	ldr	r3, [pc, #104]	@ (8009608 <__gethex+0x418>)
 80095a0:	4602      	mov	r2, r0
 80095a2:	2184      	movs	r1, #132	@ 0x84
 80095a4:	e6c5      	b.n	8009332 <__gethex+0x142>
 80095a6:	6922      	ldr	r2, [r4, #16]
 80095a8:	f104 010c 	add.w	r1, r4, #12
 80095ac:	300c      	adds	r0, #12
 80095ae:	3202      	adds	r2, #2
 80095b0:	0092      	lsls	r2, r2, #2
 80095b2:	f7ff fd6f 	bl	8009094 <memcpy>
 80095b6:	4621      	mov	r1, r4
 80095b8:	464c      	mov	r4, r9
 80095ba:	9801      	ldr	r0, [sp, #4]
 80095bc:	f7fe f828 	bl	8007610 <_Bfree>
 80095c0:	6923      	ldr	r3, [r4, #16]
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80095c8:	6122      	str	r2, [r4, #16]
 80095ca:	2201      	movs	r2, #1
 80095cc:	615a      	str	r2, [r3, #20]
 80095ce:	e7be      	b.n	800954e <__gethex+0x35e>
 80095d0:	6922      	ldr	r2, [r4, #16]
 80095d2:	455a      	cmp	r2, fp
 80095d4:	dd0b      	ble.n	80095ee <__gethex+0x3fe>
 80095d6:	2101      	movs	r1, #1
 80095d8:	4620      	mov	r0, r4
 80095da:	f7ff fda3 	bl	8009124 <rshift>
 80095de:	3701      	adds	r7, #1
 80095e0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80095e4:	42bb      	cmp	r3, r7
 80095e6:	f6ff aee0 	blt.w	80093aa <__gethex+0x1ba>
 80095ea:	2501      	movs	r5, #1
 80095ec:	e7c2      	b.n	8009574 <__gethex+0x384>
 80095ee:	f016 061f 	ands.w	r6, r6, #31
 80095f2:	d0fa      	beq.n	80095ea <__gethex+0x3fa>
 80095f4:	4453      	add	r3, sl
 80095f6:	f1c6 0620 	rsb	r6, r6, #32
 80095fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80095fe:	f7fe f8bb 	bl	8007778 <__hi0bits>
 8009602:	42b0      	cmp	r0, r6
 8009604:	dbe7      	blt.n	80095d6 <__gethex+0x3e6>
 8009606:	e7f0      	b.n	80095ea <__gethex+0x3fa>
 8009608:	08009f0d 	.word	0x08009f0d

0800960c <L_shift>:
 800960c:	f1c2 0208 	rsb	r2, r2, #8
 8009610:	0092      	lsls	r2, r2, #2
 8009612:	b570      	push	{r4, r5, r6, lr}
 8009614:	f1c2 0620 	rsb	r6, r2, #32
 8009618:	6843      	ldr	r3, [r0, #4]
 800961a:	6804      	ldr	r4, [r0, #0]
 800961c:	fa03 f506 	lsl.w	r5, r3, r6
 8009620:	40d3      	lsrs	r3, r2
 8009622:	432c      	orrs	r4, r5
 8009624:	6004      	str	r4, [r0, #0]
 8009626:	f840 3f04 	str.w	r3, [r0, #4]!
 800962a:	4288      	cmp	r0, r1
 800962c:	d3f4      	bcc.n	8009618 <L_shift+0xc>
 800962e:	bd70      	pop	{r4, r5, r6, pc}

08009630 <__match>:
 8009630:	6803      	ldr	r3, [r0, #0]
 8009632:	3301      	adds	r3, #1
 8009634:	b530      	push	{r4, r5, lr}
 8009636:	f811 4b01 	ldrb.w	r4, [r1], #1
 800963a:	b914      	cbnz	r4, 8009642 <__match+0x12>
 800963c:	6003      	str	r3, [r0, #0]
 800963e:	2001      	movs	r0, #1
 8009640:	bd30      	pop	{r4, r5, pc}
 8009642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009646:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800964a:	2d19      	cmp	r5, #25
 800964c:	bf98      	it	ls
 800964e:	3220      	addls	r2, #32
 8009650:	42a2      	cmp	r2, r4
 8009652:	d0f0      	beq.n	8009636 <__match+0x6>
 8009654:	2000      	movs	r0, #0
 8009656:	e7f3      	b.n	8009640 <__match+0x10>

08009658 <__hexnan>:
 8009658:	680b      	ldr	r3, [r1, #0]
 800965a:	6801      	ldr	r1, [r0, #0]
 800965c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009660:	115e      	asrs	r6, r3, #5
 8009662:	f013 031f 	ands.w	r3, r3, #31
 8009666:	f04f 0500 	mov.w	r5, #0
 800966a:	b087      	sub	sp, #28
 800966c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009670:	4682      	mov	sl, r0
 8009672:	4690      	mov	r8, r2
 8009674:	46ab      	mov	fp, r5
 8009676:	bf18      	it	ne
 8009678:	3604      	addne	r6, #4
 800967a:	9301      	str	r3, [sp, #4]
 800967c:	9502      	str	r5, [sp, #8]
 800967e:	1f37      	subs	r7, r6, #4
 8009680:	f846 5c04 	str.w	r5, [r6, #-4]
 8009684:	46b9      	mov	r9, r7
 8009686:	463c      	mov	r4, r7
 8009688:	1c4b      	adds	r3, r1, #1
 800968a:	784a      	ldrb	r2, [r1, #1]
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	b342      	cbz	r2, 80096e2 <__hexnan+0x8a>
 8009690:	4610      	mov	r0, r2
 8009692:	9105      	str	r1, [sp, #20]
 8009694:	9204      	str	r2, [sp, #16]
 8009696:	f7ff fd96 	bl	80091c6 <__hexdig_fun>
 800969a:	2800      	cmp	r0, #0
 800969c:	d151      	bne.n	8009742 <__hexnan+0xea>
 800969e:	9a04      	ldr	r2, [sp, #16]
 80096a0:	9905      	ldr	r1, [sp, #20]
 80096a2:	2a20      	cmp	r2, #32
 80096a4:	d818      	bhi.n	80096d8 <__hexnan+0x80>
 80096a6:	9b02      	ldr	r3, [sp, #8]
 80096a8:	459b      	cmp	fp, r3
 80096aa:	dd13      	ble.n	80096d4 <__hexnan+0x7c>
 80096ac:	454c      	cmp	r4, r9
 80096ae:	d206      	bcs.n	80096be <__hexnan+0x66>
 80096b0:	2d07      	cmp	r5, #7
 80096b2:	dc04      	bgt.n	80096be <__hexnan+0x66>
 80096b4:	462a      	mov	r2, r5
 80096b6:	4649      	mov	r1, r9
 80096b8:	4620      	mov	r0, r4
 80096ba:	f7ff ffa7 	bl	800960c <L_shift>
 80096be:	4544      	cmp	r4, r8
 80096c0:	d951      	bls.n	8009766 <__hexnan+0x10e>
 80096c2:	2300      	movs	r3, #0
 80096c4:	f1a4 0904 	sub.w	r9, r4, #4
 80096c8:	f8cd b008 	str.w	fp, [sp, #8]
 80096cc:	f844 3c04 	str.w	r3, [r4, #-4]
 80096d0:	461d      	mov	r5, r3
 80096d2:	464c      	mov	r4, r9
 80096d4:	9903      	ldr	r1, [sp, #12]
 80096d6:	e7d7      	b.n	8009688 <__hexnan+0x30>
 80096d8:	2a29      	cmp	r2, #41	@ 0x29
 80096da:	d156      	bne.n	800978a <__hexnan+0x132>
 80096dc:	3102      	adds	r1, #2
 80096de:	f8ca 1000 	str.w	r1, [sl]
 80096e2:	f1bb 0f00 	cmp.w	fp, #0
 80096e6:	d050      	beq.n	800978a <__hexnan+0x132>
 80096e8:	454c      	cmp	r4, r9
 80096ea:	d206      	bcs.n	80096fa <__hexnan+0xa2>
 80096ec:	2d07      	cmp	r5, #7
 80096ee:	dc04      	bgt.n	80096fa <__hexnan+0xa2>
 80096f0:	462a      	mov	r2, r5
 80096f2:	4649      	mov	r1, r9
 80096f4:	4620      	mov	r0, r4
 80096f6:	f7ff ff89 	bl	800960c <L_shift>
 80096fa:	4544      	cmp	r4, r8
 80096fc:	d935      	bls.n	800976a <__hexnan+0x112>
 80096fe:	f1a8 0204 	sub.w	r2, r8, #4
 8009702:	4623      	mov	r3, r4
 8009704:	f853 1b04 	ldr.w	r1, [r3], #4
 8009708:	429f      	cmp	r7, r3
 800970a:	f842 1f04 	str.w	r1, [r2, #4]!
 800970e:	d2f9      	bcs.n	8009704 <__hexnan+0xac>
 8009710:	1b3b      	subs	r3, r7, r4
 8009712:	3e03      	subs	r6, #3
 8009714:	3401      	adds	r4, #1
 8009716:	2200      	movs	r2, #0
 8009718:	f023 0303 	bic.w	r3, r3, #3
 800971c:	3304      	adds	r3, #4
 800971e:	42b4      	cmp	r4, r6
 8009720:	bf88      	it	hi
 8009722:	2304      	movhi	r3, #4
 8009724:	4443      	add	r3, r8
 8009726:	f843 2b04 	str.w	r2, [r3], #4
 800972a:	429f      	cmp	r7, r3
 800972c:	d2fb      	bcs.n	8009726 <__hexnan+0xce>
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	b91b      	cbnz	r3, 800973a <__hexnan+0xe2>
 8009732:	4547      	cmp	r7, r8
 8009734:	d127      	bne.n	8009786 <__hexnan+0x12e>
 8009736:	2301      	movs	r3, #1
 8009738:	603b      	str	r3, [r7, #0]
 800973a:	2005      	movs	r0, #5
 800973c:	b007      	add	sp, #28
 800973e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009742:	3501      	adds	r5, #1
 8009744:	f10b 0b01 	add.w	fp, fp, #1
 8009748:	2d08      	cmp	r5, #8
 800974a:	dd05      	ble.n	8009758 <__hexnan+0x100>
 800974c:	4544      	cmp	r4, r8
 800974e:	d9c1      	bls.n	80096d4 <__hexnan+0x7c>
 8009750:	2300      	movs	r3, #0
 8009752:	3c04      	subs	r4, #4
 8009754:	2501      	movs	r5, #1
 8009756:	6023      	str	r3, [r4, #0]
 8009758:	6822      	ldr	r2, [r4, #0]
 800975a:	f000 000f 	and.w	r0, r0, #15
 800975e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009762:	6020      	str	r0, [r4, #0]
 8009764:	e7b6      	b.n	80096d4 <__hexnan+0x7c>
 8009766:	2508      	movs	r5, #8
 8009768:	e7b4      	b.n	80096d4 <__hexnan+0x7c>
 800976a:	9b01      	ldr	r3, [sp, #4]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d0de      	beq.n	800972e <__hexnan+0xd6>
 8009770:	f1c3 0320 	rsb	r3, r3, #32
 8009774:	f04f 32ff 	mov.w	r2, #4294967295
 8009778:	40da      	lsrs	r2, r3
 800977a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800977e:	4013      	ands	r3, r2
 8009780:	f846 3c04 	str.w	r3, [r6, #-4]
 8009784:	e7d3      	b.n	800972e <__hexnan+0xd6>
 8009786:	3f04      	subs	r7, #4
 8009788:	e7d1      	b.n	800972e <__hexnan+0xd6>
 800978a:	2004      	movs	r0, #4
 800978c:	e7d6      	b.n	800973c <__hexnan+0xe4>

0800978e <__ascii_mbtowc>:
 800978e:	b082      	sub	sp, #8
 8009790:	b901      	cbnz	r1, 8009794 <__ascii_mbtowc+0x6>
 8009792:	a901      	add	r1, sp, #4
 8009794:	b142      	cbz	r2, 80097a8 <__ascii_mbtowc+0x1a>
 8009796:	b14b      	cbz	r3, 80097ac <__ascii_mbtowc+0x1e>
 8009798:	7813      	ldrb	r3, [r2, #0]
 800979a:	600b      	str	r3, [r1, #0]
 800979c:	7812      	ldrb	r2, [r2, #0]
 800979e:	1e10      	subs	r0, r2, #0
 80097a0:	bf18      	it	ne
 80097a2:	2001      	movne	r0, #1
 80097a4:	b002      	add	sp, #8
 80097a6:	4770      	bx	lr
 80097a8:	4610      	mov	r0, r2
 80097aa:	e7fb      	b.n	80097a4 <__ascii_mbtowc+0x16>
 80097ac:	f06f 0001 	mvn.w	r0, #1
 80097b0:	e7f8      	b.n	80097a4 <__ascii_mbtowc+0x16>

080097b2 <_realloc_r>:
 80097b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80097b6:	4680      	mov	r8, r0
 80097b8:	4615      	mov	r5, r2
 80097ba:	460c      	mov	r4, r1
 80097bc:	b921      	cbnz	r1, 80097c8 <_realloc_r+0x16>
 80097be:	4611      	mov	r1, r2
 80097c0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097c4:	f7fd be58 	b.w	8007478 <_malloc_r>
 80097c8:	b92a      	cbnz	r2, 80097d6 <_realloc_r+0x24>
 80097ca:	f7fd fde1 	bl	8007390 <_free_r>
 80097ce:	2400      	movs	r4, #0
 80097d0:	4620      	mov	r0, r4
 80097d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097d6:	f000 f840 	bl	800985a <_malloc_usable_size_r>
 80097da:	4285      	cmp	r5, r0
 80097dc:	4606      	mov	r6, r0
 80097de:	d802      	bhi.n	80097e6 <_realloc_r+0x34>
 80097e0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80097e4:	d8f4      	bhi.n	80097d0 <_realloc_r+0x1e>
 80097e6:	4629      	mov	r1, r5
 80097e8:	4640      	mov	r0, r8
 80097ea:	f7fd fe45 	bl	8007478 <_malloc_r>
 80097ee:	4607      	mov	r7, r0
 80097f0:	2800      	cmp	r0, #0
 80097f2:	d0ec      	beq.n	80097ce <_realloc_r+0x1c>
 80097f4:	42b5      	cmp	r5, r6
 80097f6:	462a      	mov	r2, r5
 80097f8:	4621      	mov	r1, r4
 80097fa:	bf28      	it	cs
 80097fc:	4632      	movcs	r2, r6
 80097fe:	f7ff fc49 	bl	8009094 <memcpy>
 8009802:	4621      	mov	r1, r4
 8009804:	4640      	mov	r0, r8
 8009806:	463c      	mov	r4, r7
 8009808:	f7fd fdc2 	bl	8007390 <_free_r>
 800980c:	e7e0      	b.n	80097d0 <_realloc_r+0x1e>

0800980e <__ascii_wctomb>:
 800980e:	4603      	mov	r3, r0
 8009810:	4608      	mov	r0, r1
 8009812:	b141      	cbz	r1, 8009826 <__ascii_wctomb+0x18>
 8009814:	2aff      	cmp	r2, #255	@ 0xff
 8009816:	d904      	bls.n	8009822 <__ascii_wctomb+0x14>
 8009818:	228a      	movs	r2, #138	@ 0x8a
 800981a:	f04f 30ff 	mov.w	r0, #4294967295
 800981e:	601a      	str	r2, [r3, #0]
 8009820:	4770      	bx	lr
 8009822:	2001      	movs	r0, #1
 8009824:	700a      	strb	r2, [r1, #0]
 8009826:	4770      	bx	lr

08009828 <fiprintf>:
 8009828:	b40e      	push	{r1, r2, r3}
 800982a:	b503      	push	{r0, r1, lr}
 800982c:	ab03      	add	r3, sp, #12
 800982e:	4601      	mov	r1, r0
 8009830:	4805      	ldr	r0, [pc, #20]	@ (8009848 <fiprintf+0x20>)
 8009832:	f853 2b04 	ldr.w	r2, [r3], #4
 8009836:	6800      	ldr	r0, [r0, #0]
 8009838:	9301      	str	r3, [sp, #4]
 800983a:	f000 f83f 	bl	80098bc <_vfiprintf_r>
 800983e:	b002      	add	sp, #8
 8009840:	f85d eb04 	ldr.w	lr, [sp], #4
 8009844:	b003      	add	sp, #12
 8009846:	4770      	bx	lr
 8009848:	20000020 	.word	0x20000020

0800984c <abort>:
 800984c:	2006      	movs	r0, #6
 800984e:	b508      	push	{r3, lr}
 8009850:	f000 fa08 	bl	8009c64 <raise>
 8009854:	2001      	movs	r0, #1
 8009856:	f7f7 ff45 	bl	80016e4 <_exit>

0800985a <_malloc_usable_size_r>:
 800985a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800985e:	1f18      	subs	r0, r3, #4
 8009860:	2b00      	cmp	r3, #0
 8009862:	bfbc      	itt	lt
 8009864:	580b      	ldrlt	r3, [r1, r0]
 8009866:	18c0      	addlt	r0, r0, r3
 8009868:	4770      	bx	lr

0800986a <__sfputc_r>:
 800986a:	6893      	ldr	r3, [r2, #8]
 800986c:	3b01      	subs	r3, #1
 800986e:	2b00      	cmp	r3, #0
 8009870:	6093      	str	r3, [r2, #8]
 8009872:	b410      	push	{r4}
 8009874:	da08      	bge.n	8009888 <__sfputc_r+0x1e>
 8009876:	6994      	ldr	r4, [r2, #24]
 8009878:	42a3      	cmp	r3, r4
 800987a:	db01      	blt.n	8009880 <__sfputc_r+0x16>
 800987c:	290a      	cmp	r1, #10
 800987e:	d103      	bne.n	8009888 <__sfputc_r+0x1e>
 8009880:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009884:	f000 b932 	b.w	8009aec <__swbuf_r>
 8009888:	6813      	ldr	r3, [r2, #0]
 800988a:	1c58      	adds	r0, r3, #1
 800988c:	6010      	str	r0, [r2, #0]
 800988e:	4608      	mov	r0, r1
 8009890:	7019      	strb	r1, [r3, #0]
 8009892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009896:	4770      	bx	lr

08009898 <__sfputs_r>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	4606      	mov	r6, r0
 800989c:	460f      	mov	r7, r1
 800989e:	4614      	mov	r4, r2
 80098a0:	18d5      	adds	r5, r2, r3
 80098a2:	42ac      	cmp	r4, r5
 80098a4:	d101      	bne.n	80098aa <__sfputs_r+0x12>
 80098a6:	2000      	movs	r0, #0
 80098a8:	e007      	b.n	80098ba <__sfputs_r+0x22>
 80098aa:	463a      	mov	r2, r7
 80098ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098b0:	4630      	mov	r0, r6
 80098b2:	f7ff ffda 	bl	800986a <__sfputc_r>
 80098b6:	1c43      	adds	r3, r0, #1
 80098b8:	d1f3      	bne.n	80098a2 <__sfputs_r+0xa>
 80098ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080098bc <_vfiprintf_r>:
 80098bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c0:	460d      	mov	r5, r1
 80098c2:	b09d      	sub	sp, #116	@ 0x74
 80098c4:	4614      	mov	r4, r2
 80098c6:	4698      	mov	r8, r3
 80098c8:	4606      	mov	r6, r0
 80098ca:	b118      	cbz	r0, 80098d4 <_vfiprintf_r+0x18>
 80098cc:	6a03      	ldr	r3, [r0, #32]
 80098ce:	b90b      	cbnz	r3, 80098d4 <_vfiprintf_r+0x18>
 80098d0:	f7fc fdde 	bl	8006490 <__sinit>
 80098d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098d6:	07d9      	lsls	r1, r3, #31
 80098d8:	d405      	bmi.n	80098e6 <_vfiprintf_r+0x2a>
 80098da:	89ab      	ldrh	r3, [r5, #12]
 80098dc:	059a      	lsls	r2, r3, #22
 80098de:	d402      	bmi.n	80098e6 <_vfiprintf_r+0x2a>
 80098e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80098e2:	f7fc feec 	bl	80066be <__retarget_lock_acquire_recursive>
 80098e6:	89ab      	ldrh	r3, [r5, #12]
 80098e8:	071b      	lsls	r3, r3, #28
 80098ea:	d501      	bpl.n	80098f0 <_vfiprintf_r+0x34>
 80098ec:	692b      	ldr	r3, [r5, #16]
 80098ee:	b99b      	cbnz	r3, 8009918 <_vfiprintf_r+0x5c>
 80098f0:	4629      	mov	r1, r5
 80098f2:	4630      	mov	r0, r6
 80098f4:	f000 f938 	bl	8009b68 <__swsetup_r>
 80098f8:	b170      	cbz	r0, 8009918 <_vfiprintf_r+0x5c>
 80098fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80098fc:	07dc      	lsls	r4, r3, #31
 80098fe:	d504      	bpl.n	800990a <_vfiprintf_r+0x4e>
 8009900:	f04f 30ff 	mov.w	r0, #4294967295
 8009904:	b01d      	add	sp, #116	@ 0x74
 8009906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990a:	89ab      	ldrh	r3, [r5, #12]
 800990c:	0598      	lsls	r0, r3, #22
 800990e:	d4f7      	bmi.n	8009900 <_vfiprintf_r+0x44>
 8009910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009912:	f7fc fed5 	bl	80066c0 <__retarget_lock_release_recursive>
 8009916:	e7f3      	b.n	8009900 <_vfiprintf_r+0x44>
 8009918:	2300      	movs	r3, #0
 800991a:	f8cd 800c 	str.w	r8, [sp, #12]
 800991e:	f04f 0901 	mov.w	r9, #1
 8009922:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 8009ad8 <_vfiprintf_r+0x21c>
 8009926:	9309      	str	r3, [sp, #36]	@ 0x24
 8009928:	2320      	movs	r3, #32
 800992a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800992e:	2330      	movs	r3, #48	@ 0x30
 8009930:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009934:	4623      	mov	r3, r4
 8009936:	469a      	mov	sl, r3
 8009938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800993c:	b10a      	cbz	r2, 8009942 <_vfiprintf_r+0x86>
 800993e:	2a25      	cmp	r2, #37	@ 0x25
 8009940:	d1f9      	bne.n	8009936 <_vfiprintf_r+0x7a>
 8009942:	ebba 0b04 	subs.w	fp, sl, r4
 8009946:	d00b      	beq.n	8009960 <_vfiprintf_r+0xa4>
 8009948:	465b      	mov	r3, fp
 800994a:	4622      	mov	r2, r4
 800994c:	4629      	mov	r1, r5
 800994e:	4630      	mov	r0, r6
 8009950:	f7ff ffa2 	bl	8009898 <__sfputs_r>
 8009954:	3001      	adds	r0, #1
 8009956:	f000 80a7 	beq.w	8009aa8 <_vfiprintf_r+0x1ec>
 800995a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800995c:	445a      	add	r2, fp
 800995e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009960:	f89a 3000 	ldrb.w	r3, [sl]
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 809f 	beq.w	8009aa8 <_vfiprintf_r+0x1ec>
 800996a:	2300      	movs	r3, #0
 800996c:	f04f 32ff 	mov.w	r2, #4294967295
 8009970:	f10a 0a01 	add.w	sl, sl, #1
 8009974:	9304      	str	r3, [sp, #16]
 8009976:	9307      	str	r3, [sp, #28]
 8009978:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800997c:	931a      	str	r3, [sp, #104]	@ 0x68
 800997e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009982:	4654      	mov	r4, sl
 8009984:	2205      	movs	r2, #5
 8009986:	4854      	ldr	r0, [pc, #336]	@ (8009ad8 <_vfiprintf_r+0x21c>)
 8009988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800998c:	f7fc fe99 	bl	80066c2 <memchr>
 8009990:	9a04      	ldr	r2, [sp, #16]
 8009992:	b9d8      	cbnz	r0, 80099cc <_vfiprintf_r+0x110>
 8009994:	06d1      	lsls	r1, r2, #27
 8009996:	bf44      	itt	mi
 8009998:	2320      	movmi	r3, #32
 800999a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800999e:	0713      	lsls	r3, r2, #28
 80099a0:	bf44      	itt	mi
 80099a2:	232b      	movmi	r3, #43	@ 0x2b
 80099a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80099a8:	f89a 3000 	ldrb.w	r3, [sl]
 80099ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80099ae:	d015      	beq.n	80099dc <_vfiprintf_r+0x120>
 80099b0:	9a07      	ldr	r2, [sp, #28]
 80099b2:	4654      	mov	r4, sl
 80099b4:	2000      	movs	r0, #0
 80099b6:	f04f 0c0a 	mov.w	ip, #10
 80099ba:	4621      	mov	r1, r4
 80099bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099c0:	3b30      	subs	r3, #48	@ 0x30
 80099c2:	2b09      	cmp	r3, #9
 80099c4:	d94b      	bls.n	8009a5e <_vfiprintf_r+0x1a2>
 80099c6:	b1b0      	cbz	r0, 80099f6 <_vfiprintf_r+0x13a>
 80099c8:	9207      	str	r2, [sp, #28]
 80099ca:	e014      	b.n	80099f6 <_vfiprintf_r+0x13a>
 80099cc:	eba0 0308 	sub.w	r3, r0, r8
 80099d0:	46a2      	mov	sl, r4
 80099d2:	fa09 f303 	lsl.w	r3, r9, r3
 80099d6:	4313      	orrs	r3, r2
 80099d8:	9304      	str	r3, [sp, #16]
 80099da:	e7d2      	b.n	8009982 <_vfiprintf_r+0xc6>
 80099dc:	9b03      	ldr	r3, [sp, #12]
 80099de:	1d19      	adds	r1, r3, #4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	9103      	str	r1, [sp, #12]
 80099e6:	bfbb      	ittet	lt
 80099e8:	425b      	neglt	r3, r3
 80099ea:	f042 0202 	orrlt.w	r2, r2, #2
 80099ee:	9307      	strge	r3, [sp, #28]
 80099f0:	9307      	strlt	r3, [sp, #28]
 80099f2:	bfb8      	it	lt
 80099f4:	9204      	strlt	r2, [sp, #16]
 80099f6:	7823      	ldrb	r3, [r4, #0]
 80099f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80099fa:	d10a      	bne.n	8009a12 <_vfiprintf_r+0x156>
 80099fc:	7863      	ldrb	r3, [r4, #1]
 80099fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a00:	d132      	bne.n	8009a68 <_vfiprintf_r+0x1ac>
 8009a02:	9b03      	ldr	r3, [sp, #12]
 8009a04:	3402      	adds	r4, #2
 8009a06:	1d1a      	adds	r2, r3, #4
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009a0e:	9203      	str	r2, [sp, #12]
 8009a10:	9305      	str	r3, [sp, #20]
 8009a12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009ae8 <_vfiprintf_r+0x22c>
 8009a16:	2203      	movs	r2, #3
 8009a18:	7821      	ldrb	r1, [r4, #0]
 8009a1a:	4650      	mov	r0, sl
 8009a1c:	f7fc fe51 	bl	80066c2 <memchr>
 8009a20:	b138      	cbz	r0, 8009a32 <_vfiprintf_r+0x176>
 8009a22:	eba0 000a 	sub.w	r0, r0, sl
 8009a26:	2240      	movs	r2, #64	@ 0x40
 8009a28:	9b04      	ldr	r3, [sp, #16]
 8009a2a:	3401      	adds	r4, #1
 8009a2c:	4082      	lsls	r2, r0
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	9304      	str	r3, [sp, #16]
 8009a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a36:	2206      	movs	r2, #6
 8009a38:	4828      	ldr	r0, [pc, #160]	@ (8009adc <_vfiprintf_r+0x220>)
 8009a3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009a3e:	f7fc fe40 	bl	80066c2 <memchr>
 8009a42:	2800      	cmp	r0, #0
 8009a44:	d03f      	beq.n	8009ac6 <_vfiprintf_r+0x20a>
 8009a46:	4b26      	ldr	r3, [pc, #152]	@ (8009ae0 <_vfiprintf_r+0x224>)
 8009a48:	bb1b      	cbnz	r3, 8009a92 <_vfiprintf_r+0x1d6>
 8009a4a:	9b03      	ldr	r3, [sp, #12]
 8009a4c:	3307      	adds	r3, #7
 8009a4e:	f023 0307 	bic.w	r3, r3, #7
 8009a52:	3308      	adds	r3, #8
 8009a54:	9303      	str	r3, [sp, #12]
 8009a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a58:	443b      	add	r3, r7
 8009a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a5c:	e76a      	b.n	8009934 <_vfiprintf_r+0x78>
 8009a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a62:	460c      	mov	r4, r1
 8009a64:	2001      	movs	r0, #1
 8009a66:	e7a8      	b.n	80099ba <_vfiprintf_r+0xfe>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	3401      	adds	r4, #1
 8009a6c:	f04f 0c0a 	mov.w	ip, #10
 8009a70:	4619      	mov	r1, r3
 8009a72:	9305      	str	r3, [sp, #20]
 8009a74:	4620      	mov	r0, r4
 8009a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a7a:	3a30      	subs	r2, #48	@ 0x30
 8009a7c:	2a09      	cmp	r2, #9
 8009a7e:	d903      	bls.n	8009a88 <_vfiprintf_r+0x1cc>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d0c6      	beq.n	8009a12 <_vfiprintf_r+0x156>
 8009a84:	9105      	str	r1, [sp, #20]
 8009a86:	e7c4      	b.n	8009a12 <_vfiprintf_r+0x156>
 8009a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a8c:	4604      	mov	r4, r0
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e7f0      	b.n	8009a74 <_vfiprintf_r+0x1b8>
 8009a92:	ab03      	add	r3, sp, #12
 8009a94:	462a      	mov	r2, r5
 8009a96:	a904      	add	r1, sp, #16
 8009a98:	4630      	mov	r0, r6
 8009a9a:	9300      	str	r3, [sp, #0]
 8009a9c:	4b11      	ldr	r3, [pc, #68]	@ (8009ae4 <_vfiprintf_r+0x228>)
 8009a9e:	f7fb fe9d 	bl	80057dc <_printf_float>
 8009aa2:	4607      	mov	r7, r0
 8009aa4:	1c78      	adds	r0, r7, #1
 8009aa6:	d1d6      	bne.n	8009a56 <_vfiprintf_r+0x19a>
 8009aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009aaa:	07d9      	lsls	r1, r3, #31
 8009aac:	d405      	bmi.n	8009aba <_vfiprintf_r+0x1fe>
 8009aae:	89ab      	ldrh	r3, [r5, #12]
 8009ab0:	059a      	lsls	r2, r3, #22
 8009ab2:	d402      	bmi.n	8009aba <_vfiprintf_r+0x1fe>
 8009ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ab6:	f7fc fe03 	bl	80066c0 <__retarget_lock_release_recursive>
 8009aba:	89ab      	ldrh	r3, [r5, #12]
 8009abc:	065b      	lsls	r3, r3, #25
 8009abe:	f53f af1f 	bmi.w	8009900 <_vfiprintf_r+0x44>
 8009ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ac4:	e71e      	b.n	8009904 <_vfiprintf_r+0x48>
 8009ac6:	ab03      	add	r3, sp, #12
 8009ac8:	462a      	mov	r2, r5
 8009aca:	a904      	add	r1, sp, #16
 8009acc:	4630      	mov	r0, r6
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	4b04      	ldr	r3, [pc, #16]	@ (8009ae4 <_vfiprintf_r+0x228>)
 8009ad2:	f7fc f91f 	bl	8005d14 <_printf_i>
 8009ad6:	e7e4      	b.n	8009aa2 <_vfiprintf_r+0x1e6>
 8009ad8:	0800a1d1 	.word	0x0800a1d1
 8009adc:	0800a1db 	.word	0x0800a1db
 8009ae0:	080057dd 	.word	0x080057dd
 8009ae4:	08009899 	.word	0x08009899
 8009ae8:	0800a1d7 	.word	0x0800a1d7

08009aec <__swbuf_r>:
 8009aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aee:	460e      	mov	r6, r1
 8009af0:	4614      	mov	r4, r2
 8009af2:	4605      	mov	r5, r0
 8009af4:	b118      	cbz	r0, 8009afe <__swbuf_r+0x12>
 8009af6:	6a03      	ldr	r3, [r0, #32]
 8009af8:	b90b      	cbnz	r3, 8009afe <__swbuf_r+0x12>
 8009afa:	f7fc fcc9 	bl	8006490 <__sinit>
 8009afe:	69a3      	ldr	r3, [r4, #24]
 8009b00:	60a3      	str	r3, [r4, #8]
 8009b02:	89a3      	ldrh	r3, [r4, #12]
 8009b04:	071a      	lsls	r2, r3, #28
 8009b06:	d501      	bpl.n	8009b0c <__swbuf_r+0x20>
 8009b08:	6923      	ldr	r3, [r4, #16]
 8009b0a:	b943      	cbnz	r3, 8009b1e <__swbuf_r+0x32>
 8009b0c:	4621      	mov	r1, r4
 8009b0e:	4628      	mov	r0, r5
 8009b10:	f000 f82a 	bl	8009b68 <__swsetup_r>
 8009b14:	b118      	cbz	r0, 8009b1e <__swbuf_r+0x32>
 8009b16:	f04f 37ff 	mov.w	r7, #4294967295
 8009b1a:	4638      	mov	r0, r7
 8009b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b1e:	6823      	ldr	r3, [r4, #0]
 8009b20:	b2f6      	uxtb	r6, r6
 8009b22:	6922      	ldr	r2, [r4, #16]
 8009b24:	4637      	mov	r7, r6
 8009b26:	1a98      	subs	r0, r3, r2
 8009b28:	6963      	ldr	r3, [r4, #20]
 8009b2a:	4283      	cmp	r3, r0
 8009b2c:	dc05      	bgt.n	8009b3a <__swbuf_r+0x4e>
 8009b2e:	4621      	mov	r1, r4
 8009b30:	4628      	mov	r0, r5
 8009b32:	f7ff fa4b 	bl	8008fcc <_fflush_r>
 8009b36:	2800      	cmp	r0, #0
 8009b38:	d1ed      	bne.n	8009b16 <__swbuf_r+0x2a>
 8009b3a:	68a3      	ldr	r3, [r4, #8]
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	60a3      	str	r3, [r4, #8]
 8009b40:	6823      	ldr	r3, [r4, #0]
 8009b42:	1c5a      	adds	r2, r3, #1
 8009b44:	6022      	str	r2, [r4, #0]
 8009b46:	701e      	strb	r6, [r3, #0]
 8009b48:	1c43      	adds	r3, r0, #1
 8009b4a:	6962      	ldr	r2, [r4, #20]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d004      	beq.n	8009b5a <__swbuf_r+0x6e>
 8009b50:	89a3      	ldrh	r3, [r4, #12]
 8009b52:	07db      	lsls	r3, r3, #31
 8009b54:	d5e1      	bpl.n	8009b1a <__swbuf_r+0x2e>
 8009b56:	2e0a      	cmp	r6, #10
 8009b58:	d1df      	bne.n	8009b1a <__swbuf_r+0x2e>
 8009b5a:	4621      	mov	r1, r4
 8009b5c:	4628      	mov	r0, r5
 8009b5e:	f7ff fa35 	bl	8008fcc <_fflush_r>
 8009b62:	2800      	cmp	r0, #0
 8009b64:	d0d9      	beq.n	8009b1a <__swbuf_r+0x2e>
 8009b66:	e7d6      	b.n	8009b16 <__swbuf_r+0x2a>

08009b68 <__swsetup_r>:
 8009b68:	b538      	push	{r3, r4, r5, lr}
 8009b6a:	4b29      	ldr	r3, [pc, #164]	@ (8009c10 <__swsetup_r+0xa8>)
 8009b6c:	4605      	mov	r5, r0
 8009b6e:	460c      	mov	r4, r1
 8009b70:	6818      	ldr	r0, [r3, #0]
 8009b72:	b118      	cbz	r0, 8009b7c <__swsetup_r+0x14>
 8009b74:	6a03      	ldr	r3, [r0, #32]
 8009b76:	b90b      	cbnz	r3, 8009b7c <__swsetup_r+0x14>
 8009b78:	f7fc fc8a 	bl	8006490 <__sinit>
 8009b7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b80:	0719      	lsls	r1, r3, #28
 8009b82:	d422      	bmi.n	8009bca <__swsetup_r+0x62>
 8009b84:	06da      	lsls	r2, r3, #27
 8009b86:	d407      	bmi.n	8009b98 <__swsetup_r+0x30>
 8009b88:	2209      	movs	r2, #9
 8009b8a:	602a      	str	r2, [r5, #0]
 8009b8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b90:	f04f 30ff 	mov.w	r0, #4294967295
 8009b94:	81a3      	strh	r3, [r4, #12]
 8009b96:	e033      	b.n	8009c00 <__swsetup_r+0x98>
 8009b98:	0758      	lsls	r0, r3, #29
 8009b9a:	d512      	bpl.n	8009bc2 <__swsetup_r+0x5a>
 8009b9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b9e:	b141      	cbz	r1, 8009bb2 <__swsetup_r+0x4a>
 8009ba0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ba4:	4299      	cmp	r1, r3
 8009ba6:	d002      	beq.n	8009bae <__swsetup_r+0x46>
 8009ba8:	4628      	mov	r0, r5
 8009baa:	f7fd fbf1 	bl	8007390 <_free_r>
 8009bae:	2300      	movs	r3, #0
 8009bb0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009bb2:	89a3      	ldrh	r3, [r4, #12]
 8009bb4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009bb8:	81a3      	strh	r3, [r4, #12]
 8009bba:	2300      	movs	r3, #0
 8009bbc:	6063      	str	r3, [r4, #4]
 8009bbe:	6923      	ldr	r3, [r4, #16]
 8009bc0:	6023      	str	r3, [r4, #0]
 8009bc2:	89a3      	ldrh	r3, [r4, #12]
 8009bc4:	f043 0308 	orr.w	r3, r3, #8
 8009bc8:	81a3      	strh	r3, [r4, #12]
 8009bca:	6923      	ldr	r3, [r4, #16]
 8009bcc:	b94b      	cbnz	r3, 8009be2 <__swsetup_r+0x7a>
 8009bce:	89a3      	ldrh	r3, [r4, #12]
 8009bd0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009bd4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bd8:	d003      	beq.n	8009be2 <__swsetup_r+0x7a>
 8009bda:	4621      	mov	r1, r4
 8009bdc:	4628      	mov	r0, r5
 8009bde:	f000 f882 	bl	8009ce6 <__smakebuf_r>
 8009be2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009be6:	f013 0201 	ands.w	r2, r3, #1
 8009bea:	d00a      	beq.n	8009c02 <__swsetup_r+0x9a>
 8009bec:	2200      	movs	r2, #0
 8009bee:	60a2      	str	r2, [r4, #8]
 8009bf0:	6962      	ldr	r2, [r4, #20]
 8009bf2:	4252      	negs	r2, r2
 8009bf4:	61a2      	str	r2, [r4, #24]
 8009bf6:	6922      	ldr	r2, [r4, #16]
 8009bf8:	b942      	cbnz	r2, 8009c0c <__swsetup_r+0xa4>
 8009bfa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009bfe:	d1c5      	bne.n	8009b8c <__swsetup_r+0x24>
 8009c00:	bd38      	pop	{r3, r4, r5, pc}
 8009c02:	0799      	lsls	r1, r3, #30
 8009c04:	bf58      	it	pl
 8009c06:	6962      	ldrpl	r2, [r4, #20]
 8009c08:	60a2      	str	r2, [r4, #8]
 8009c0a:	e7f4      	b.n	8009bf6 <__swsetup_r+0x8e>
 8009c0c:	2000      	movs	r0, #0
 8009c0e:	e7f7      	b.n	8009c00 <__swsetup_r+0x98>
 8009c10:	20000020 	.word	0x20000020

08009c14 <_raise_r>:
 8009c14:	291f      	cmp	r1, #31
 8009c16:	b538      	push	{r3, r4, r5, lr}
 8009c18:	4605      	mov	r5, r0
 8009c1a:	460c      	mov	r4, r1
 8009c1c:	d904      	bls.n	8009c28 <_raise_r+0x14>
 8009c1e:	2316      	movs	r3, #22
 8009c20:	6003      	str	r3, [r0, #0]
 8009c22:	f04f 30ff 	mov.w	r0, #4294967295
 8009c26:	bd38      	pop	{r3, r4, r5, pc}
 8009c28:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009c2a:	b112      	cbz	r2, 8009c32 <_raise_r+0x1e>
 8009c2c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c30:	b94b      	cbnz	r3, 8009c46 <_raise_r+0x32>
 8009c32:	4628      	mov	r0, r5
 8009c34:	f000 f830 	bl	8009c98 <_getpid_r>
 8009c38:	4622      	mov	r2, r4
 8009c3a:	4601      	mov	r1, r0
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c42:	f000 b817 	b.w	8009c74 <_kill_r>
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d00a      	beq.n	8009c60 <_raise_r+0x4c>
 8009c4a:	1c59      	adds	r1, r3, #1
 8009c4c:	d103      	bne.n	8009c56 <_raise_r+0x42>
 8009c4e:	2316      	movs	r3, #22
 8009c50:	6003      	str	r3, [r0, #0]
 8009c52:	2001      	movs	r0, #1
 8009c54:	e7e7      	b.n	8009c26 <_raise_r+0x12>
 8009c56:	2100      	movs	r1, #0
 8009c58:	4620      	mov	r0, r4
 8009c5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009c5e:	4798      	blx	r3
 8009c60:	2000      	movs	r0, #0
 8009c62:	e7e0      	b.n	8009c26 <_raise_r+0x12>

08009c64 <raise>:
 8009c64:	4b02      	ldr	r3, [pc, #8]	@ (8009c70 <raise+0xc>)
 8009c66:	4601      	mov	r1, r0
 8009c68:	6818      	ldr	r0, [r3, #0]
 8009c6a:	f7ff bfd3 	b.w	8009c14 <_raise_r>
 8009c6e:	bf00      	nop
 8009c70:	20000020 	.word	0x20000020

08009c74 <_kill_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	2300      	movs	r3, #0
 8009c78:	4d06      	ldr	r5, [pc, #24]	@ (8009c94 <_kill_r+0x20>)
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	4611      	mov	r1, r2
 8009c80:	602b      	str	r3, [r5, #0]
 8009c82:	f7f7 fd1f 	bl	80016c4 <_kill>
 8009c86:	1c43      	adds	r3, r0, #1
 8009c88:	d102      	bne.n	8009c90 <_kill_r+0x1c>
 8009c8a:	682b      	ldr	r3, [r5, #0]
 8009c8c:	b103      	cbz	r3, 8009c90 <_kill_r+0x1c>
 8009c8e:	6023      	str	r3, [r4, #0]
 8009c90:	bd38      	pop	{r3, r4, r5, pc}
 8009c92:	bf00      	nop
 8009c94:	2000048c 	.word	0x2000048c

08009c98 <_getpid_r>:
 8009c98:	f7f7 bd0c 	b.w	80016b4 <_getpid>

08009c9c <__swhatbuf_r>:
 8009c9c:	b570      	push	{r4, r5, r6, lr}
 8009c9e:	460c      	mov	r4, r1
 8009ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ca4:	b096      	sub	sp, #88	@ 0x58
 8009ca6:	4615      	mov	r5, r2
 8009ca8:	2900      	cmp	r1, #0
 8009caa:	461e      	mov	r6, r3
 8009cac:	da0c      	bge.n	8009cc8 <__swhatbuf_r+0x2c>
 8009cae:	89a3      	ldrh	r3, [r4, #12]
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009cb6:	bf14      	ite	ne
 8009cb8:	2340      	movne	r3, #64	@ 0x40
 8009cba:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009cbe:	2000      	movs	r0, #0
 8009cc0:	6031      	str	r1, [r6, #0]
 8009cc2:	602b      	str	r3, [r5, #0]
 8009cc4:	b016      	add	sp, #88	@ 0x58
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}
 8009cc8:	466a      	mov	r2, sp
 8009cca:	f000 f849 	bl	8009d60 <_fstat_r>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	dbed      	blt.n	8009cae <__swhatbuf_r+0x12>
 8009cd2:	9901      	ldr	r1, [sp, #4]
 8009cd4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009cd8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009cdc:	4259      	negs	r1, r3
 8009cde:	4159      	adcs	r1, r3
 8009ce0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ce4:	e7eb      	b.n	8009cbe <__swhatbuf_r+0x22>

08009ce6 <__smakebuf_r>:
 8009ce6:	898b      	ldrh	r3, [r1, #12]
 8009ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009cea:	079d      	lsls	r5, r3, #30
 8009cec:	4606      	mov	r6, r0
 8009cee:	460c      	mov	r4, r1
 8009cf0:	d507      	bpl.n	8009d02 <__smakebuf_r+0x1c>
 8009cf2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009cf6:	6023      	str	r3, [r4, #0]
 8009cf8:	6123      	str	r3, [r4, #16]
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	6163      	str	r3, [r4, #20]
 8009cfe:	b003      	add	sp, #12
 8009d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009d02:	ab01      	add	r3, sp, #4
 8009d04:	466a      	mov	r2, sp
 8009d06:	f7ff ffc9 	bl	8009c9c <__swhatbuf_r>
 8009d0a:	9f00      	ldr	r7, [sp, #0]
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	4630      	mov	r0, r6
 8009d10:	4639      	mov	r1, r7
 8009d12:	f7fd fbb1 	bl	8007478 <_malloc_r>
 8009d16:	b948      	cbnz	r0, 8009d2c <__smakebuf_r+0x46>
 8009d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d1c:	059a      	lsls	r2, r3, #22
 8009d1e:	d4ee      	bmi.n	8009cfe <__smakebuf_r+0x18>
 8009d20:	f023 0303 	bic.w	r3, r3, #3
 8009d24:	f043 0302 	orr.w	r3, r3, #2
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	e7e2      	b.n	8009cf2 <__smakebuf_r+0xc>
 8009d2c:	89a3      	ldrh	r3, [r4, #12]
 8009d2e:	6020      	str	r0, [r4, #0]
 8009d30:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d34:	81a3      	strh	r3, [r4, #12]
 8009d36:	9b01      	ldr	r3, [sp, #4]
 8009d38:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009d3c:	b15b      	cbz	r3, 8009d56 <__smakebuf_r+0x70>
 8009d3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d42:	4630      	mov	r0, r6
 8009d44:	f000 f81e 	bl	8009d84 <_isatty_r>
 8009d48:	b128      	cbz	r0, 8009d56 <__smakebuf_r+0x70>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	f023 0303 	bic.w	r3, r3, #3
 8009d50:	f043 0301 	orr.w	r3, r3, #1
 8009d54:	81a3      	strh	r3, [r4, #12]
 8009d56:	89a3      	ldrh	r3, [r4, #12]
 8009d58:	431d      	orrs	r5, r3
 8009d5a:	81a5      	strh	r5, [r4, #12]
 8009d5c:	e7cf      	b.n	8009cfe <__smakebuf_r+0x18>
	...

08009d60 <_fstat_r>:
 8009d60:	b538      	push	{r3, r4, r5, lr}
 8009d62:	2300      	movs	r3, #0
 8009d64:	4d06      	ldr	r5, [pc, #24]	@ (8009d80 <_fstat_r+0x20>)
 8009d66:	4604      	mov	r4, r0
 8009d68:	4608      	mov	r0, r1
 8009d6a:	4611      	mov	r1, r2
 8009d6c:	602b      	str	r3, [r5, #0]
 8009d6e:	f7f7 fd09 	bl	8001784 <_fstat>
 8009d72:	1c43      	adds	r3, r0, #1
 8009d74:	d102      	bne.n	8009d7c <_fstat_r+0x1c>
 8009d76:	682b      	ldr	r3, [r5, #0]
 8009d78:	b103      	cbz	r3, 8009d7c <_fstat_r+0x1c>
 8009d7a:	6023      	str	r3, [r4, #0]
 8009d7c:	bd38      	pop	{r3, r4, r5, pc}
 8009d7e:	bf00      	nop
 8009d80:	2000048c 	.word	0x2000048c

08009d84 <_isatty_r>:
 8009d84:	b538      	push	{r3, r4, r5, lr}
 8009d86:	2300      	movs	r3, #0
 8009d88:	4d05      	ldr	r5, [pc, #20]	@ (8009da0 <_isatty_r+0x1c>)
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	4608      	mov	r0, r1
 8009d8e:	602b      	str	r3, [r5, #0]
 8009d90:	f7f7 fd08 	bl	80017a4 <_isatty>
 8009d94:	1c43      	adds	r3, r0, #1
 8009d96:	d102      	bne.n	8009d9e <_isatty_r+0x1a>
 8009d98:	682b      	ldr	r3, [r5, #0]
 8009d9a:	b103      	cbz	r3, 8009d9e <_isatty_r+0x1a>
 8009d9c:	6023      	str	r3, [r4, #0]
 8009d9e:	bd38      	pop	{r3, r4, r5, pc}
 8009da0:	2000048c 	.word	0x2000048c

08009da4 <_init>:
 8009da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009da6:	bf00      	nop
 8009da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009daa:	bc08      	pop	{r3}
 8009dac:	469e      	mov	lr, r3
 8009dae:	4770      	bx	lr

08009db0 <_fini>:
 8009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009db2:	bf00      	nop
 8009db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009db6:	bc08      	pop	{r3}
 8009db8:	469e      	mov	lr, r3
 8009dba:	4770      	bx	lr
