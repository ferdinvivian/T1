1
00:00:00,120 --> 00:00:07,800
So far reviews are pointers to specific data types such as int and char but sometimes you may want to

2
00:00:07,800 --> 00:00:12,260
write code that can deal with pointers to any type of data.

3
00:00:12,330 --> 00:00:18,990
For example you may want to write some code that can sort data but you don't want to duplicate that

4
00:00:19,020 --> 00:00:28,050
code by writing one function to sort Chas another function to sort integers another for floating points

5
00:00:28,170 --> 00:00:30,030
and so on.

6
00:00:30,210 --> 00:00:38,980
In that case you can use generic pointers instead of pointers to predefined data types.

7
00:00:39,230 --> 00:00:42,590
A generic pointer is written as a pointer to void.

8
00:00:42,750 --> 00:00:52,500
And when you use a generic pointer to access some data you must first cast it to a specific data type.

9
00:00:52,520 --> 00:00:53,750
Here's a short example.

10
00:00:53,840 --> 00:01:00,110
As in previous examples I've created an array of ints this time I've declared the point to GP to be

11
00:01:00,110 --> 00:01:07,810
generic so you can see that your void star GP with no particular data type.

12
00:01:07,820 --> 00:01:18,730
Now if I scroll down to see my code so here you can see I point this to the data array.

13
00:01:18,730 --> 00:01:25,320
No cost is needed here as I'm not yet trying to access any actual data elements.

14
00:01:25,540 --> 00:01:29,360
So the data type doesn't matter at this point.

15
00:01:29,410 --> 00:01:33,440
Now here I want to print the first integer to do that.

16
00:01:33,520 --> 00:01:39,590
I must cast it to a pointer to int that's in style between parentheses.

17
00:01:40,720 --> 00:01:44,850
Now I use the dereference operator another asterisk to get the value.

18
00:01:44,850 --> 00:01:47,570
That's the Int at this address.

19
00:01:49,020 --> 00:01:51,670
And here I moved to the next array index.

20
00:01:51,960 --> 00:01:58,020
And again I need to cast the pointer to a pointer to int and I print the second integer.

21
00:01:58,020 --> 00:02:06,880
Here let me run this and you can see this is the output I get.

22
00:02:06,930 --> 00:02:09,540
So when I run it you can see now how it actually works.

23
00:02:09,540 --> 00:02:13,470
The first item in the array of ints zero is displayed.

24
00:02:13,620 --> 00:02:19,170
Then after moving the pointer to the second item that is also displayed.

25
00:02:19,290 --> 00:02:22,490
So that's the integer 1 there.

26
00:02:22,540 --> 00:02:25,170
Close this window.

27
00:02:25,170 --> 00:02:34,330
But as g.p is a generic pointer I should be able to use it with other data types not just with integers.

28
00:02:34,410 --> 00:02:38,120
So let's see how I can use it with an array of strings.

29
00:02:38,160 --> 00:02:45,450
Scroll up my code so you can see that I've I've actually created an array of strings here called words

30
00:02:45,810 --> 00:02:52,970
and I've initialized the array with the strings 0 1 and 2.

31
00:02:53,120 --> 00:02:58,420
I have already written some code to manipulate not just uncomment it down.

32
00:03:01,640 --> 00:03:02,510
Right.

33
00:03:02,530 --> 00:03:10,040
So now that you can see here that just as with the array of say once again set my pointer GP to point

34
00:03:10,070 --> 00:03:12,710
to an array This is now the array of strings.

35
00:03:13,100 --> 00:03:19,970
So you see that here G points GP points first to the array of ants up here and now it points the same

36
00:03:19,970 --> 00:03:22,220
pointer points to the array of strings.

37
00:03:22,670 --> 00:03:29,690
But remember that an array of strings is in effect an array of arrays of chars because each string is

38
00:03:29,690 --> 00:03:31,640
an array of chars.

39
00:03:31,670 --> 00:03:39,070
So when I worked with string arrays and previous examples I had to use a pointer to a pointer to char.

40
00:03:39,440 --> 00:03:47,560
So here my cost has to be a pointer to a pointer to a char that's char stack style between parentheses.

41
00:03:47,600 --> 00:03:54,560
Now I use the dereference operator the single star or asterisk to access the string itself.

42
00:03:54,980 --> 00:04:02,150
And then I iterate to the next index again casting to char star star and finally I print the second

43
00:04:02,150 --> 00:04:06,510
string and run it again.

44
00:04:06,510 --> 00:04:07,650
And you can see the output.

45
00:04:07,700 --> 00:04:10,890
There you see the output words array address.

46
00:04:10,920 --> 00:04:15,550
First item pointed to is the first string which has the string 0.

47
00:04:15,660 --> 00:04:21,210
I moved it to the next item in my code and then it was pointed to the second string which is the string

48
00:04:21,240 --> 00:04:22,220
one.

49
00:04:22,830 --> 00:04:29,880
So here you can see how using a generic pointer unable to access different types of data with the same

50
00:04:29,880 --> 00:04:36,690
pointer and in some programs for example the data type might vary and you don't want to write repetitive

51
00:04:36,720 --> 00:04:39,950
blocks of code to handle each data type.

52
00:04:39,960 --> 00:04:42,260
Well that ability could be quite useful.

