1
00:00:03,750 --> 00:00:06,910
It's good to free memory when it's no longer needed.

2
00:00:06,960 --> 00:00:10,550
So maybe it's twice as good to free it twice.

3
00:00:10,930 --> 00:00:12,420
Well no.

4
00:00:12,420 --> 00:00:14,390
As a matter of fact it isn't.

5
00:00:14,400 --> 00:00:15,470
See.

6
00:00:15,510 --> 00:00:18,670
Let you free memory referenced by a pointer variable.

7
00:00:18,760 --> 00:00:22,980
I was many times as you like but the end result won't be good.

8
00:00:23,850 --> 00:00:30,570
Bear in mind that in this tiny bit of sample code this on the other mistakes I show later on may seem

9
00:00:30,570 --> 00:00:39,090
quite obvious but in a real big real world program multiple attempts to free memory may occur in different

10
00:00:39,090 --> 00:00:44,940
parts of your code and they may not be anything like this obvious but the end result will be just as

11
00:00:44,940 --> 00:00:46,380
bad.

12
00:00:46,380 --> 00:00:53,220
So here you can see that I allocate some memory for my topline to be and here I free it twice and when

13
00:00:53,220 --> 00:01:02,860
I run the program Well at first sight I don't see any problem except have a look back at my code.

14
00:01:04,250 --> 00:01:10,350
So down here you can see that I call the function that includes that call twice to free.

15
00:01:10,550 --> 00:01:13,590
And then at the end of the program it's supposed to print that's so folks.

16
00:01:13,600 --> 00:01:18,550
But when I run it nothing.

17
00:01:18,570 --> 00:01:20,830
So something's gone wrong.

18
00:01:22,160 --> 00:01:27,070
It's supposed to print that text and it doesn't well that's what happens anyway with the Microsoft compiler

19
00:01:27,430 --> 00:01:29,290
in Visual Studio.

20
00:01:29,320 --> 00:01:31,670
That's what happens with the new compiler.

21
00:01:32,920 --> 00:01:39,880
In the gcc compiler in code right now.

22
00:01:40,550 --> 00:01:42,330
Well this time there's no problems at all.

23
00:01:42,330 --> 00:01:45,430
Even the string displays at the end.

24
00:01:45,430 --> 00:01:49,950
This is one of the things you have to bear in mind about problems like this.

25
00:01:50,560 --> 00:01:56,920
Errors may vary according to the platform and the compiler and the runtime you are using and also the

26
00:01:56,920 --> 00:02:00,460
compiler settings that you may have set.

27
00:02:00,580 --> 00:02:07,620
Sometimes an error or a potential error may not be at all obvious on some compilers.

28
00:02:07,930 --> 00:02:10,210
Well they may silently correct the error.

29
00:02:10,210 --> 00:02:12,060
To save you from disaster.

30
00:02:12,890 --> 00:02:19,090
Areas such as this are quite unpredictable and that makes them even harder to debug.

31
00:02:19,670 --> 00:02:25,400
So it's in your interests to spot a potential error before it causes trouble.

32
00:02:26,960 --> 00:02:33,860
Now let's go back to Visual Studio and this time instead of just running the code I'm going to run it

33
00:02:34,190 --> 00:02:36,210
in the debugger.

34
00:02:37,140 --> 00:02:43,620
Ah now this time Visual Studio warns me about the problem.

35
00:02:43,730 --> 00:02:49,970
It throws an exception and it indicates that the problem is on this line of code.

36
00:02:49,980 --> 00:02:56,730
The second call to free so now that gives me a chance to go and fix it.

37
00:02:56,810 --> 00:02:59,090
Commented out.

38
00:02:59,930 --> 00:03:04,640
Run it again in the debugger this time no exception.

39
00:03:04,640 --> 00:03:05,870
There are no problems.

