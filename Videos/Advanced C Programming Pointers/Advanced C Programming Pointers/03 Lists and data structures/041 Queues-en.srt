1
00:00:00,580 --> 00:00:07,950
In this next example I've adapted my double linked list so that I can use it as a cue.

2
00:00:08,010 --> 00:00:12,950
There are other ways of programming cues but this is quite a convenient way of doing it.

3
00:00:13,080 --> 00:00:20,830
Now this time I've defined a struct especially for the list header and the different struct for the

4
00:00:20,830 --> 00:00:28,570
list elements the two pointers of the list headers struct have been given the names first and last for

5
00:00:28,570 --> 00:00:31,020
clarity as before.

6
00:00:31,020 --> 00:00:32,230
These two pointers.

7
00:00:32,280 --> 00:00:35,970
Let us quickly get to the elements at both ends of the list.

8
00:00:37,460 --> 00:00:40,290
Two really important new features of this code.

9
00:00:40,290 --> 00:00:42,780
However on my end D.

10
00:00:42,800 --> 00:00:55,030
Q functions and we can see these downhere NQ is used to add a new item to the back of the queue and

11
00:00:55,030 --> 00:01:00,300
the queue is used to remove an item from the front of the queue.

12
00:01:01,770 --> 00:01:11,730
Think of the queue like this the queue itself is a list of elements and I keep pointers to the first

13
00:01:11,730 --> 00:01:14,750
element on the last element of the list.

14
00:01:16,900 --> 00:01:23,170
Now when I have a new element that I want to add to the list I added to the end of the queue that is

15
00:01:23,170 --> 00:01:25,170
called and queuing.

16
00:01:25,200 --> 00:01:31,210
This now becomes the last element when I want to take an item from the list.

17
00:01:31,210 --> 00:01:39,480
I take the first item item at the start of the queue and that's called the queuing.

18
00:01:39,520 --> 00:01:45,620
So this is a bit like a line of people waiting to go into a theater or a cinema person.

19
00:01:45,620 --> 00:01:53,520
Zero is the first person to arrive so person 0 is at the beginning of the line.

20
00:01:53,550 --> 00:01:56,090
That is at the beginning of the queue.

21
00:01:56,870 --> 00:02:02,660
PERSON 4 is the last to arrive and so goes to the end of the queue when another person arrives.

22
00:02:02,660 --> 00:02:11,670
PERSON 5 they go to the end of the queue and when the doors are opened and people start to go into the

23
00:02:11,670 --> 00:02:16,730
theater person at the beginning of the queue that person zero goes first.

24
00:02:16,830 --> 00:02:20,390
In programming jargon 0 is de qued.

25
00:02:20,670 --> 00:02:26,280
Meanwhile another person in person 6 arrives and is added to the end of the queue and in the jargon

26
00:02:26,490 --> 00:02:28,150
they are encouraged.

27
00:02:28,590 --> 00:02:34,800
Now I don't plan to go over the code in this program in the same minute detail as when I explained.

28
00:02:34,830 --> 00:02:36,500
Doubly linked lists.

29
00:02:36,900 --> 00:02:42,570
If you follow that tutorial you should be able to work out what is going on by loading and running the

30
00:02:42,570 --> 00:02:45,640
queue code project yourself.

31
00:02:46,500 --> 00:02:54,720
But just look at this NQ function that goes to the end of the list with the help of the head lost pointer.

32
00:02:54,760 --> 00:02:58,950
It adds a new item to the end of the list assigns the new items.

33
00:02:59,020 --> 00:03:08,630
Next pointer to head on the prev pointer to head last which is the previous element in the queue.

34
00:03:09,100 --> 00:03:13,560
End result is that the new item is put at the back of the queue.

35
00:03:14,400 --> 00:03:16,980
The dequeue function does exactly the opposite.

36
00:03:17,110 --> 00:03:23,980
It gets the element at the front of the queue using head first removes it and turns it and adjusts the

37
00:03:23,980 --> 00:03:29,980
pointers so that the new head first pointer points to the new first item.

38
00:03:29,980 --> 00:03:36,930
That is the one following the item that had just been the qued on.

39
00:03:36,950 --> 00:03:40,880
Here is the main function I can look at.

40
00:03:40,900 --> 00:03:47,600
And you can see that the element that was returned by the queue is tested to ensure that it's a valid

41
00:03:47,600 --> 00:03:51,290
struct and here it would be NULL if it isn't.

42
00:03:51,380 --> 00:03:54,920
Because that is what dequeue return in not the case

43
00:03:57,880 --> 00:04:00,200
that is if there is nothing left in the queue.

44
00:04:00,220 --> 00:04:05,380
If the struct is not now I just print out its data and then free its memory.

45
00:04:05,740 --> 00:04:09,390
So when I run this program you can see the result.

46
00:04:09,640 --> 00:04:16,620
The queue is created and queued with a struct containing zero first and the struct containing two lost

47
00:04:17,030 --> 00:04:18,050
when it's the queue.

48
00:04:18,060 --> 00:04:22,440
That order is maintained the first in 0 is the first out.

